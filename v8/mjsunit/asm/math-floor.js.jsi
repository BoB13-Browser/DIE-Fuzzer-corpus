var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<177,183,5>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<184,190,5>",(stdlib)); Inst1++; } } catch(e) {}
  "use asm";

try { if (Inst3 <= 1000 && typeof (stdlib.Math.floor) != "undefined") {_RecordType("<222,239,8>",(stdlib.Math.floor)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<222,233,8>",(stdlib.Math)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<222,228,8>",(stdlib)); Inst5++; } } catch(e) {}
  var floor = stdlib.Math.floor;
try { if (Inst2 <= 1000 && typeof (floor) != "undefined") {_RecordType("<214,219,8>",(floor)); Inst2++; } } catch(e) {}

  // f: double -> float
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<277,278,11>",(f)); Inst6++; } } catch(e) {}
  function f(a) {
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<279,280,11>",(a)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<293,294,12>",(a)); Inst9++; } } catch(e) {}
    a = +a;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<288,289,12>",(a)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (floor) != "undefined") {_RecordType("<307,312,13>",(floor)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<313,314,13>",(a)); Inst11++; } } catch(e) {}
    return floor(a);
  }

try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<336,337,16>",(f)); Inst12++; } } catch(e) {}
  return { f: f };
}

try { if (Inst14 <= 1000 && typeof (Module({ Math: Math }).f) != "undefined") {_RecordType("<352,376,19>",(Module({ Math: Math }).f)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Module) != "undefined") {_RecordType("<352,358,19>",(Module)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math) != "undefined") {_RecordType("<367,371,19>",(Math)); Inst16++; } } catch(e) {}
var f = Module({ Math: Math }).f;
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<348,349,19>",(f)); Inst13++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<379,389,21>",(assertTrue)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<390,395,21>",(isNaN)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<396,397,21>",(f)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<398,401,21>",(NaN)); Inst20++; } } catch(e) {}
assertTrue(isNaN(f(NaN)));
try { if (Inst21 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<406,416,22>",(assertTrue)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<417,422,22>",(isNaN)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<423,424,22>",(f)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<425,434,22>",(undefined)); Inst24++; } } catch(e) {}
assertTrue(isNaN(f(undefined)));
try { if (Inst25 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<439,449,23>",(assertTrue)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<450,455,23>",(isNaN)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<456,457,23>",(f)); Inst27++; } } catch(e) {}
assertTrue(isNaN(f(function() {})));

try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<477,489,25>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<511,512,25>",(f)); Inst29++; } } catch(e) {}
assertEquals(0,                   f(0));
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<518,530,26>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<552,553,26>",(f)); Inst31++; } } catch(e) {}
assertEquals(+0,                  f(+0));
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<560,572,27>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<594,595,27>",(f)); Inst33++; } } catch(e) {}
assertEquals(-0,                  f(-0));
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<602,614,28>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<636,637,28>",(f)); Inst35++; } } catch(e) {}
assertEquals(0,                   f(0.49999));
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<649,661,29>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<683,684,29>",(f)); Inst37++; } } catch(e) {}
assertEquals(+0,                  f(0.6));
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<692,704,30>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<726,727,30>",(f)); Inst39++; } } catch(e) {}
assertEquals(+0,                  f(0.5));
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<735,747,31>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<769,770,31>",(f)); Inst41++; } } catch(e) {}
assertEquals(-1,                  f(-0.1));
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<779,791,32>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<813,814,32>",(f)); Inst43++; } } catch(e) {}
assertEquals(-1,                  f(-0.5));
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<823,835,33>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (f) != "undefined") {_RecordType("<857,858,33>",(f)); Inst45++; } } catch(e) {}
assertEquals(-1,                  f(-0.6));
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<867,879,34>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (f) != "undefined") {_RecordType("<901,902,34>",(f)); Inst47++; } } catch(e) {}
assertEquals(-2,                  f(-1.6));
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<911,923,35>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (f) != "undefined") {_RecordType("<945,946,35>",(f)); Inst49++; } } catch(e) {}
assertEquals(-1,                  f(-0.50001));

try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<960,972,37>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (String) != "undefined") {_RecordType("<985,991,37>",(String)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (f) != "undefined") {_RecordType("<992,993,37>",(f)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<994,1002,37>",(Infinity)); Inst53++; } } catch(e) {}
assertEquals("Infinity", String(f(Infinity)));
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1007,1019,38>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (String) != "undefined") {_RecordType("<1033,1039,38>",(String)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (f) != "undefined") {_RecordType("<1040,1041,38>",(f)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1043,1051,38>",(Infinity)); Inst57++; } } catch(e) {}
assertEquals("-Infinity", String(f(-Infinity)));

