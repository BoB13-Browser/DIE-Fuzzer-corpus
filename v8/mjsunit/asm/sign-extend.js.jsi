var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var stdlib = this;
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<172,178,5>",(stdlib)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<204,215,6>",(ArrayBuffer)); Inst2++; } } catch(e) {}
var buffer = new ArrayBuffer(64 * 1024);
try { if (Inst1 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<191,197,6>",(buffer)); Inst1++; } } catch(e) {}
var foreign = {}
try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<232,239,7>",(foreign)); Inst3++; } } catch(e) {}


try { if (Inst5 <= 1000 && typeof ((function Module(stdlib, foreign, heap) {
  "use asm";
  function sext8(i) {
    i = i|0;
    i = i << 24 >> 24;
    return i|0;
  }
  return { sext8: sext8 };
})(stdlib, foreign, buffer).sext8) != "undefined") {_RecordType("<259,452,10>",((function Module(stdlib, foreign, heap) {
  "use asm";
  function sext8(i) {
    i = i|0;
    i = i << 24 >> 24;
    return i|0;
  }
  return { sext8: sext8 };
})(stdlib, foreign, buffer).sext8)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Module) != "undefined") {_RecordType("<269,275,10>",(Module)); Inst6++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<422,428,18>",(stdlib)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<430,437,18>",(foreign)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<439,445,18>",(buffer)); Inst20++; } } catch(e) {}
var sext8 = (function Module(stdlib, foreign, heap) {
try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<276,282,10>",(stdlib)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<284,291,10>",(foreign)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (heap) != "undefined") {_RecordType("<293,297,10>",(heap)); Inst9++; } } catch(e) {}
  "use asm";
try { if (Inst10 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<325,330,12>",(sext8)); Inst10++; } } catch(e) {}
  function sext8(i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<331,332,12>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<344,345,13>",(i)); Inst13++; } } catch(e) {}
    i = i|0;
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<340,341,13>",(i)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<357,358,14>",(i)); Inst15++; } } catch(e) {}
    i = i << 24 >> 24;
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<353,354,14>",(i)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<383,384,15>",(i)); Inst16++; } } catch(e) {}
    return i|0;
  }
try { if (Inst17 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<410,415,17>",(sext8)); Inst17++; } } catch(e) {}
  return { sext8: sext8 };
})(stdlib, foreign, buffer).sext8;
try { if (Inst4 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<251,256,10>",(sext8)); Inst4++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<455,467,20>",(assertEquals)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<474,479,20>",(sext8)); Inst22++; } } catch(e) {}
assertEquals(-128, sext8(128));
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<487,499,21>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<504,509,21>",(sext8)); Inst24++; } } catch(e) {}
assertEquals(-1, sext8(-1));
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<516,528,22>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<533,538,22>",(sext8)); Inst26++; } } catch(e) {}
assertEquals(-1, sext8(255));
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<546,558,23>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<562,567,23>",(sext8)); Inst28++; } } catch(e) {}
assertEquals(0, sext8(0));
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<573,585,24>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<589,594,24>",(sext8)); Inst30++; } } catch(e) {}
assertEquals(0, sext8(256));
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<602,614,25>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<619,624,25>",(sext8)); Inst32++; } } catch(e) {}
assertEquals(42, sext8(42));
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<631,643,26>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (sext8) != "undefined") {_RecordType("<649,654,26>",(sext8)); Inst34++; } } catch(e) {}
assertEquals(127, sext8(127));


try { if (Inst36 <= 1000 && typeof ((function Module(stdlib, foreign, heap) {
  "use asm";
  function sext16(i) {
    i = i|0;
    i = i << 16 >> 16;
    return i|0;
  }
  return { sext16: sext16 };
})(stdlib, foreign, buffer).sext16) != "undefined") {_RecordType("<677,874,29>",((function Module(stdlib, foreign, heap) {
  "use asm";
  function sext16(i) {
    i = i|0;
    i = i << 16 >> 16;
    return i|0;
  }
  return { sext16: sext16 };
})(stdlib, foreign, buffer).sext16)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Module) != "undefined") {_RecordType("<687,693,29>",(Module)); Inst37++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<843,849,37>",(stdlib)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<851,858,37>",(foreign)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<860,866,37>",(buffer)); Inst51++; } } catch(e) {}
var sext16 = (function Module(stdlib, foreign, heap) {
try { if (Inst38 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<694,700,29>",(stdlib)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<702,709,29>",(foreign)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (heap) != "undefined") {_RecordType("<711,715,29>",(heap)); Inst40++; } } catch(e) {}
  "use asm";
try { if (Inst41 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<743,749,31>",(sext16)); Inst41++; } } catch(e) {}
  function sext16(i) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<750,751,31>",(i)); Inst42++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<763,764,32>",(i)); Inst44++; } } catch(e) {}
    i = i|0;
try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<759,760,32>",(i)); Inst43++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<776,777,33>",(i)); Inst46++; } } catch(e) {}
    i = i << 16 >> 16;
try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<772,773,33>",(i)); Inst45++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<802,803,34>",(i)); Inst47++; } } catch(e) {}
    return i|0;
  }
try { if (Inst48 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<830,836,36>",(sext16)); Inst48++; } } catch(e) {}
  return { sext16: sext16 };
})(stdlib, foreign, buffer).sext16;
try { if (Inst35 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<668,674,29>",(sext16)); Inst35++; } } catch(e) {}

try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<877,889,39>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<898,904,39>",(sext16)); Inst53++; } } catch(e) {}
assertEquals(-32768, sext16(32768));
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<914,926,40>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<931,937,40>",(sext16)); Inst55++; } } catch(e) {}
assertEquals(-1, sext16(-1));
try { if (Inst56 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<944,956,41>",(assertEquals)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<961,967,41>",(sext16)); Inst57++; } } catch(e) {}
assertEquals(-1, sext16(65535));
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<977,989,42>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<993,999,42>",(sext16)); Inst59++; } } catch(e) {}
assertEquals(0, sext16(0));
try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1005,1017,43>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<1021,1027,43>",(sext16)); Inst61++; } } catch(e) {}
assertEquals(0, sext16(65536));
try { if (Inst62 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1037,1049,44>",(assertEquals)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<1055,1061,44>",(sext16)); Inst63++; } } catch(e) {}
assertEquals(128, sext16(128));
try { if (Inst64 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1069,1081,45>",(assertEquals)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (sext16) != "undefined") {_RecordType("<1089,1095,45>",(sext16)); Inst65++; } } catch(e) {}
assertEquals(32767, sext16(32767));

