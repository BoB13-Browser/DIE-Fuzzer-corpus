var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var stdlib = this;
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<172,178,5>",(stdlib)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<204,215,6>",(ArrayBuffer)); Inst2++; } } catch(e) {}
var buffer = new ArrayBuffer(64 * 1024);
try { if (Inst1 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<191,197,6>",(buffer)); Inst1++; } } catch(e) {}
var foreign = {}
try { if (Inst3 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<232,239,7>",(foreign)); Inst3++; } } catch(e) {}


try { if (Inst5 <= 1000 && typeof ((function Module(stdlib, foreign, heap) {
  "use asm";
  function zext8(i) {
    i = i|0;
    return i & 0xff;
  }
  return { zext8: zext8 };
})(stdlib, foreign, buffer).zext8) != "undefined") {_RecordType("<259,434,10>",((function Module(stdlib, foreign, heap) {
  "use asm";
  function zext8(i) {
    i = i|0;
    return i & 0xff;
  }
  return { zext8: zext8 };
})(stdlib, foreign, buffer).zext8)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Module) != "undefined") {_RecordType("<269,275,10>",(Module)); Inst6++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<404,410,17>",(stdlib)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<412,419,17>",(foreign)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<421,427,17>",(buffer)); Inst18++; } } catch(e) {}
var zext8 = (function Module(stdlib, foreign, heap) {
try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<276,282,10>",(stdlib)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<284,291,10>",(foreign)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (heap) != "undefined") {_RecordType("<293,297,10>",(heap)); Inst9++; } } catch(e) {}
  "use asm";
try { if (Inst10 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<325,330,12>",(zext8)); Inst10++; } } catch(e) {}
  function zext8(i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<331,332,12>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<344,345,13>",(i)); Inst13++; } } catch(e) {}
    i = i|0;
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<340,341,13>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<360,361,14>",(i)); Inst14++; } } catch(e) {}
    return i & 0xff;
  }
try { if (Inst15 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<392,397,16>",(zext8)); Inst15++; } } catch(e) {}
  return { zext8: zext8 };
})(stdlib, foreign, buffer).zext8;
try { if (Inst4 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<251,256,10>",(zext8)); Inst4++; } } catch(e) {}

try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<437,449,19>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<453,458,19>",(zext8)); Inst20++; } } catch(e) {}
assertEquals(0, zext8(0));
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<464,476,20>",(assertEquals)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<480,485,20>",(zext8)); Inst22++; } } catch(e) {}
assertEquals(0, zext8(0x100));
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<495,507,21>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<514,519,21>",(zext8)); Inst24++; } } catch(e) {}
assertEquals(0xff, zext8(-1));
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<526,538,22>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (zext8) != "undefined") {_RecordType("<545,550,22>",(zext8)); Inst26++; } } catch(e) {}
assertEquals(0xff, zext8(0xff));


try { if (Inst28 <= 1000 && typeof ((function Module(stdlib, foreign, heap) {
  "use asm";
  function zext16(i) {
    i = i|0;
    return i & 0xffff;
  }
  return { zext16: zext16 };
})(stdlib, foreign, buffer).zext16) != "undefined") {_RecordType("<574,755,25>",((function Module(stdlib, foreign, heap) {
  "use asm";
  function zext16(i) {
    i = i|0;
    return i & 0xffff;
  }
  return { zext16: zext16 };
})(stdlib, foreign, buffer).zext16)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Module) != "undefined") {_RecordType("<584,590,25>",(Module)); Inst29++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<724,730,32>",(stdlib)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<732,739,32>",(foreign)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (buffer) != "undefined") {_RecordType("<741,747,32>",(buffer)); Inst41++; } } catch(e) {}
var zext16 = (function Module(stdlib, foreign, heap) {
try { if (Inst30 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<591,597,25>",(stdlib)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<599,606,25>",(foreign)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (heap) != "undefined") {_RecordType("<608,612,25>",(heap)); Inst32++; } } catch(e) {}
  "use asm";
try { if (Inst33 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<640,646,27>",(zext16)); Inst33++; } } catch(e) {}
  function zext16(i) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<647,648,27>",(i)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<660,661,28>",(i)); Inst36++; } } catch(e) {}
    i = i|0;
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<656,657,28>",(i)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<676,677,29>",(i)); Inst37++; } } catch(e) {}
    return i & 0xffff;
  }
try { if (Inst38 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<711,717,31>",(zext16)); Inst38++; } } catch(e) {}
  return { zext16: zext16 };
})(stdlib, foreign, buffer).zext16;
try { if (Inst27 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<565,571,25>",(zext16)); Inst27++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<758,770,34>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<774,780,34>",(zext16)); Inst43++; } } catch(e) {}
assertEquals(0, zext16(0));
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<786,798,35>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<802,808,35>",(zext16)); Inst45++; } } catch(e) {}
assertEquals(0, zext16(0x10000));
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<820,832,36>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<841,847,36>",(zext16)); Inst47++; } } catch(e) {}
assertEquals(0xffff, zext16(-1));
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<854,866,37>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (zext16) != "undefined") {_RecordType("<875,881,37>",(zext16)); Inst49++; } } catch(e) {}
assertEquals(0xffff, zext16(0xffff));

