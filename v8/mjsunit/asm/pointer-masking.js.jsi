var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var stdlib = this;
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<172,178,5>",(stdlib)); Inst0++; } } catch(e) {}
var foreign = {};
try { if (Inst1 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<191,198,6>",(foreign)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<220,231,7>",(ArrayBuffer)); Inst3++; } } catch(e) {}
var heap = new ArrayBuffer(64 * 1024);
try { if (Inst2 <= 1000 && typeof (heap) != "undefined") {_RecordType("<209,213,7>",(heap)); Inst2++; } } catch(e) {}


try { if (Inst38 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<596,602,26>",(stdlib)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<604,611,26>",(foreign)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (heap) != "undefined") {_RecordType("<613,617,26>",(heap)); Inst40++; } } catch(e) {}
var pm1 = (function(stdlib, foreign, heap) {
try { if (Inst5 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<266,272,10>",(stdlib)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<274,281,10>",(foreign)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (heap) != "undefined") {_RecordType("<283,287,10>",(heap)); Inst7++; } } catch(e) {}
  "use asm";
try { if (Inst9 <= 1000 && typeof (stdlib.Int8Array) != "undefined") {_RecordType("<322,338,12>",(stdlib.Int8Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<322,328,12>",(stdlib)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (heap) != "undefined") {_RecordType("<339,343,12>",(heap)); Inst11++; } } catch(e) {}
  var HEAP8 = new stdlib.Int8Array(heap);
try { if (Inst8 <= 1000 && typeof (HEAP8) != "undefined") {_RecordType("<310,315,12>",(HEAP8)); Inst8++; } } catch(e) {}
  const MASK1 = 1023;
try { if (Inst12 <= 1000 && typeof (MASK1) != "undefined") {_RecordType("<354,359,13>",(MASK1)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (load1) != "undefined") {_RecordType("<379,384,14>",(load1)); Inst13++; } } catch(e) {}
  function load1(i) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<385,386,14>",(i)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<398,399,15>",(i)); Inst16++; } } catch(e) {}
    i = i|0;
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<394,395,15>",(i)); Inst15++; } } catch(e) {}
    var j = 0;
try { if (Inst17 <= 1000 && typeof (j) != "undefined") {_RecordType("<411,412,16>",(j)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (HEAP8[(i & MASK1)]) != "undefined") {_RecordType("<426,444,17>",(HEAP8[(i & MASK1)])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (HEAP8) != "undefined") {_RecordType("<426,431,17>",(HEAP8)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<433,434,17>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (MASK1) != "undefined") {_RecordType("<437,442,17>",(MASK1)); Inst22++; } } catch(e) {}
    j = HEAP8[(i & MASK1)]|0;
try { if (Inst18 <= 1000 && typeof (j) != "undefined") {_RecordType("<422,423,17>",(j)); Inst18++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (j) != "undefined") {_RecordType("<459,460,18>",(j)); Inst23++; } } catch(e) {}
    return j|0;
  }
try { if (Inst24 <= 1000 && typeof (store1) != "undefined") {_RecordType("<479,485,20>",(store1)); Inst24++; } } catch(e) {}
  function store1(i, j) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<486,487,20>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (j) != "undefined") {_RecordType("<489,490,20>",(j)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<502,503,21>",(i)); Inst28++; } } catch(e) {}
    i = i|0;
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<498,499,21>",(i)); Inst27++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (j) != "undefined") {_RecordType("<515,516,22>",(j)); Inst30++; } } catch(e) {}
    j = j|0;
try { if (Inst29 <= 1000 && typeof (j) != "undefined") {_RecordType("<511,512,22>",(j)); Inst29++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (j) != "undefined") {_RecordType("<545,546,23>",(j)); Inst35++; } } catch(e) {}
    HEAP8[(i & MASK1)] = j;
try { if (Inst31 <= 1000 && typeof (HEAP8[(i & MASK1)]) != "undefined") {_RecordType("<524,542,23>",(HEAP8[(i & MASK1)])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (HEAP8) != "undefined") {_RecordType("<524,529,23>",(HEAP8)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<531,532,23>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (MASK1) != "undefined") {_RecordType("<535,540,23>",(MASK1)); Inst34++; } } catch(e) {}
  }
try { if (Inst36 <= 1000 && typeof (load1) != "undefined") {_RecordType("<569,574,25>",(load1)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (store1) != "undefined") {_RecordType("<584,590,25>",(store1)); Inst37++; } } catch(e) {}
  return {load1: load1, store1: store1};
})(stdlib, foreign, heap);
try { if (Inst4 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<250,253,10>",(pm1)); Inst4++; } } catch(e) {}

try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<621,633,28>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (pm1.load1) != "undefined") {_RecordType("<637,646,28>",(pm1.load1)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<637,640,28>",(pm1)); Inst43++; } } catch(e) {}
assertEquals(0, pm1.load1(0));
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<652,664,29>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (pm1.load1) != "undefined") {_RecordType("<668,677,29>",(pm1.load1)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<668,671,29>",(pm1)); Inst46++; } } catch(e) {}
assertEquals(0, pm1.load1(1025));
try { if (Inst47 <= 1000 && typeof (pm1.store1) != "undefined") {_RecordType("<686,696,30>",(pm1.store1)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<686,689,30>",(pm1)); Inst48++; } } catch(e) {}
pm1.store1(0, 1);
try { if (Inst49 <= 1000 && typeof (pm1.store1) != "undefined") {_RecordType("<704,714,31>",(pm1.store1)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<704,707,31>",(pm1)); Inst50++; } } catch(e) {}
pm1.store1(1025, 127);
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<727,739,32>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (pm1.load1) != "undefined") {_RecordType("<743,752,32>",(pm1.load1)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<743,746,32>",(pm1)); Inst53++; } } catch(e) {}
assertEquals(1, pm1.load1(0));
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<758,770,33>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (pm1.load1) != "undefined") {_RecordType("<774,783,33>",(pm1.load1)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<774,777,33>",(pm1)); Inst56++; } } catch(e) {}
assertEquals(1, pm1.load1(1024));
try { if (Inst57 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<792,804,34>",(assertEquals)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (pm1.load1) != "undefined") {_RecordType("<810,819,34>",(pm1.load1)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<810,813,34>",(pm1)); Inst59++; } } catch(e) {}
assertEquals(127, pm1.load1(1));
try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<825,837,35>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (pm1.load1) != "undefined") {_RecordType("<843,852,35>",(pm1.load1)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (pm1) != "undefined") {_RecordType("<843,846,35>",(pm1)); Inst62++; } } catch(e) {}
assertEquals(127, pm1.load1(1025));

