var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst1 <= 1000 && typeof (Math) != "undefined") {_RecordType("<189,193,5>",(Math)); Inst1++; } } catch(e) {}
var stdlib = { Math: Math };
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<172,178,5>",(stdlib)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Module) != "undefined") {_RecordType("<216,222,7>",(Module)); Inst3++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<359,365,18>",(stdlib)); Inst16++; } } catch(e) {}
var f = (function Module(stdlib) {
try { if (Inst4 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<223,229,7>",(stdlib)); Inst4++; } } catch(e) {}
  "use asm";

try { if (Inst6 <= 1000 && typeof (stdlib.Math.clz32) != "undefined") {_RecordType("<261,278,10>",(stdlib.Math.clz32)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (stdlib.Math) != "undefined") {_RecordType("<261,272,10>",(stdlib.Math)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<261,267,10>",(stdlib)); Inst8++; } } catch(e) {}
  var clz32 = stdlib.Math.clz32;
try { if (Inst5 <= 1000 && typeof (clz32) != "undefined") {_RecordType("<253,258,10>",(clz32)); Inst5++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<292,293,12>",(f)); Inst9++; } } catch(e) {}
  function f(a) {
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<294,295,12>",(a)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<307,308,13>",(a)); Inst12++; } } catch(e) {}
    a = a >>> 0;
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<303,304,13>",(a)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (clz32) != "undefined") {_RecordType("<327,332,14>",(clz32)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<333,334,14>",(a)); Inst14++; } } catch(e) {}
    return clz32(a)|0;
  }

try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<353,354,17>",(f)); Inst15++; } } catch(e) {}
  return f;
})(stdlib);
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<202,203,7>",(f)); Inst2++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<369,381,20>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<386,387,20>",(f)); Inst18++; } } catch(e) {}
assertEquals(32, f(0));
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<393,405,21>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<410,411,21>",(f)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<412,415,21>",(NaN)); Inst21++; } } catch(e) {}
assertEquals(32, f(NaN));
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<419,431,22>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<436,437,22>",(f)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<438,447,22>",(undefined)); Inst24++; } } catch(e) {}
assertEquals(32, f(undefined));
for (var i = 0; i < 32; ++i) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<460,461,23>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<467,468,23>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<477,478,23>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<484,496,24>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<497,498,24>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<500,501,24>",(f)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<511,512,24>",(i)); Inst31++; } } catch(e) {}
  assertEquals(i, f((-1) >>> i));
}
for (var i = -2147483648; i < 2147483648; i += 3999773) {
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<527,528,26>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<544,545,26>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<560,561,26>",(i)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<578,590,27>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math.clz32) != "undefined") {_RecordType("<591,601,27>",(Math.clz32)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Math) != "undefined") {_RecordType("<591,595,27>",(Math)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<602,603,27>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<606,607,27>",(f)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<608,609,27>",(i)); Inst40++; } } catch(e) {}
  assertEquals(Math.clz32(i), f(i));
}

