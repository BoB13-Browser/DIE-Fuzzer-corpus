var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var stdlib = {};
try { if (Inst0 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<172,178,5>",(stdlib)); Inst0++; } } catch(e) {}
var foreign = {};
try { if (Inst1 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<189,196,6>",(foreign)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<218,229,7>",(ArrayBuffer)); Inst3++; } } catch(e) {}
var heap = new ArrayBuffer(64 * 1024);
try { if (Inst2 <= 1000 && typeof (heap) != "undefined") {_RecordType("<207,211,7>",(heap)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof ((function Module(stdlib, foreign, heap) {
  "use asm";
  function rol(x, y) {
    x = x | 0;
    y = y | 0;
    return (x << y) | (x >>> (32 - y));
  }
  return { rol: rol };
})(stdlib, foreign, heap).rol) != "undefined") {_RecordType("<253,457,9>",((function Module(stdlib, foreign, heap) {
  "use asm";
  function rol(x, y) {
    x = x | 0;
    y = y | 0;
    return (x << y) | (x >>> (32 - y));
  }
  return { rol: rol };
})(stdlib, foreign, heap).rol)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Module) != "undefined") {_RecordType("<263,269,9>",(Module)); Inst6++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<431,437,17>",(stdlib)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<439,446,17>",(foreign)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (heap) != "undefined") {_RecordType("<448,452,17>",(heap)); Inst24++; } } catch(e) {}
var rol = (function Module(stdlib, foreign, heap) {
try { if (Inst7 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<270,276,9>",(stdlib)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<278,285,9>",(foreign)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (heap) != "undefined") {_RecordType("<287,291,9>",(heap)); Inst9++; } } catch(e) {}
  "use asm";
try { if (Inst10 <= 1000 && typeof (rol) != "undefined") {_RecordType("<319,322,11>",(rol)); Inst10++; } } catch(e) {}
  function rol(x, y) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<323,324,11>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<326,327,11>",(y)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<339,340,12>",(x)); Inst14++; } } catch(e) {}
    x = x | 0;
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<335,336,12>",(x)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (y) != "undefined") {_RecordType("<354,355,13>",(y)); Inst16++; } } catch(e) {}
    y = y | 0;
try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<350,351,13>",(y)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<373,374,14>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<378,379,14>",(y)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<384,385,14>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<396,397,14>",(y)); Inst20++; } } catch(e) {}
    return (x << y) | (x >>> (32 - y));
  }
try { if (Inst21 <= 1000 && typeof (rol) != "undefined") {_RecordType("<421,424,16>",(rol)); Inst21++; } } catch(e) {}
  return { rol: rol };
})(stdlib, foreign, heap).rol;
try { if (Inst4 <= 1000 && typeof (rol) != "undefined") {_RecordType("<247,250,9>",(rol)); Inst4++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<460,472,19>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (rol) != "undefined") {_RecordType("<477,480,19>",(rol)); Inst26++; } } catch(e) {}
assertEquals(10, rol(10, 0));
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<490,502,20>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (rol) != "undefined") {_RecordType("<506,509,20>",(rol)); Inst28++; } } catch(e) {}
assertEquals(2, rol(1, 1));
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<518,530,21>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (rol) != "undefined") {_RecordType("<543,546,21>",(rol)); Inst30++; } } catch(e) {}
assertEquals(0x40000000, rol(1, 30));
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<556,568,22>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (rol) != "undefined") {_RecordType("<582,585,22>",(rol)); Inst32++; } } catch(e) {}
assertEquals(-0x80000000, rol(1, 31));

try { if (Inst34 <= 1000 && typeof ((function Module(stdlib, foreign, heap) {
  "use asm";
  function ror(x, y) {
    x = x | 0;
    y = y | 0;
    return (x << (32 - y)) | (x >>> y);
  }
  return { ror: ror };
})(stdlib, foreign, heap).ror) != "undefined") {_RecordType("<606,810,24>",((function Module(stdlib, foreign, heap) {
  "use asm";
  function ror(x, y) {
    x = x | 0;
    y = y | 0;
    return (x << (32 - y)) | (x >>> y);
  }
  return { ror: ror };
})(stdlib, foreign, heap).ror)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Module) != "undefined") {_RecordType("<616,622,24>",(Module)); Inst35++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<784,790,32>",(stdlib)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<792,799,32>",(foreign)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (heap) != "undefined") {_RecordType("<801,805,32>",(heap)); Inst53++; } } catch(e) {}
var ror = (function Module(stdlib, foreign, heap) {
try { if (Inst36 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<623,629,24>",(stdlib)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<631,638,24>",(foreign)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (heap) != "undefined") {_RecordType("<640,644,24>",(heap)); Inst38++; } } catch(e) {}
  "use asm";
try { if (Inst39 <= 1000 && typeof (ror) != "undefined") {_RecordType("<672,675,26>",(ror)); Inst39++; } } catch(e) {}
  function ror(x, y) {
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<676,677,26>",(x)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (y) != "undefined") {_RecordType("<679,680,26>",(y)); Inst41++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<692,693,27>",(x)); Inst43++; } } catch(e) {}
    x = x | 0;
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<688,689,27>",(x)); Inst42++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (y) != "undefined") {_RecordType("<707,708,28>",(y)); Inst45++; } } catch(e) {}
    y = y | 0;
try { if (Inst44 <= 1000 && typeof (y) != "undefined") {_RecordType("<703,704,28>",(y)); Inst44++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<726,727,29>",(x)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (y) != "undefined") {_RecordType("<737,738,29>",(y)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<744,745,29>",(x)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (y) != "undefined") {_RecordType("<750,751,29>",(y)); Inst49++; } } catch(e) {}
    return (x << (32 - y)) | (x >>> y);
  }
try { if (Inst50 <= 1000 && typeof (ror) != "undefined") {_RecordType("<774,777,31>",(ror)); Inst50++; } } catch(e) {}
  return { ror: ror };
})(stdlib, foreign, heap).ror;
try { if (Inst33 <= 1000 && typeof (ror) != "undefined") {_RecordType("<600,603,24>",(ror)); Inst33++; } } catch(e) {}

try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<813,825,34>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (ror) != "undefined") {_RecordType("<830,833,34>",(ror)); Inst55++; } } catch(e) {}
assertEquals(10, ror(10, 0));
try { if (Inst56 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<843,855,35>",(assertEquals)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (ror) != "undefined") {_RecordType("<869,872,35>",(ror)); Inst57++; } } catch(e) {}
assertEquals(-0x80000000, ror(1, 1));
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<881,893,36>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (ror) != "undefined") {_RecordType("<906,909,36>",(ror)); Inst59++; } } catch(e) {}
assertEquals(0x40000000, ror(1, 2));
try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<918,930,37>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (ror) != "undefined") {_RecordType("<934,937,37>",(ror)); Inst61++; } } catch(e) {}
assertEquals(2, ror(1, 31));

