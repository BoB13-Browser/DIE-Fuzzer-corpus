var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-externalize-string --expose-gc

var size = 1024;
try { if (Inst0 <= 1000 && typeof (size) != "undefined") {_RecordType("<1653,1657,30>",(size)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<1676,1680,32>",(test)); Inst1++; } } catch(e) {}
function test() {
  var str = "";
try { if (Inst2 <= 1000 && typeof (str) != "undefined") {_RecordType("<1691,1694,33>",(str)); Inst2++; } } catch(e) {}

  // Build an ascii cons string.
  for (var i = 0; i < size; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1746,1747,36>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1753,1754,36>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (size) != "undefined") {_RecordType("<1757,1761,36>",(size)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1763,1764,36>",(i)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<1783,1802,37>",(String.fromCharCode)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (String) != "undefined") {_RecordType("<1783,1789,37>",(String)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1803,1804,37>",(i)); Inst10++; } } catch(e) {}
      str += String.fromCharCode(i & 0x7f);
try { if (Inst7 <= 1000 && typeof (str) != "undefined") {_RecordType("<1776,1779,37>",(str)); Inst7++; } } catch(e) {}
  }
try { if (Inst11 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1820,1830,39>",(assertTrue)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<1831,1846,39>",(isOneByteString)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (str) != "undefined") {_RecordType("<1847,1850,39>",(str)); Inst13++; } } catch(e) {}
  assertTrue(isOneByteString(str));

  var twoByteExternalWithOneByteData =
      "AA" + (function() { return "A"; })();
try { if (Inst14 <= 1000 && typeof (twoByteExternalWithOneByteData) != "undefined") {_RecordType("<1861,1891,41>",(twoByteExternalWithOneByteData)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (externalizeString) != "undefined") {_RecordType("<1941,1958,43>",(externalizeString)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (twoByteExternalWithOneByteData) != "undefined") {_RecordType("<1959,1989,43>",(twoByteExternalWithOneByteData)); Inst16++; } } catch(e) {}
  externalizeString(twoByteExternalWithOneByteData, true /* force two-byte */);
try { if (Inst17 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2021,2032,44>",(assertFalse)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<2033,2048,44>",(isOneByteString)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (twoByteExternalWithOneByteData) != "undefined") {_RecordType("<2049,2079,44>",(twoByteExternalWithOneByteData)); Inst19++; } } catch(e) {}
  assertFalse(isOneByteString(twoByteExternalWithOneByteData));

  var realTwoByteExternalString =
      "\u1234\u1234\u1234\u1234" + (function() { return "\u1234"; })();
try { if (Inst20 <= 1000 && typeof (realTwoByteExternalString) != "undefined") {_RecordType("<2090,2115,46>",(realTwoByteExternalString)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (externalizeString) != "undefined") {_RecordType("<2192,2209,48>",(externalizeString)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (realTwoByteExternalString) != "undefined") {_RecordType("<2210,2235,48>",(realTwoByteExternalString)); Inst22++; } } catch(e) {}
  externalizeString(realTwoByteExternalString);
try { if (Inst23 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2240,2251,49>",(assertFalse)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<2252,2267,49>",(isOneByteString)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (realTwoByteExternalString) != "undefined") {_RecordType("<2268,2293,49>",(realTwoByteExternalString)); Inst25++; } } catch(e) {}
  assertFalse(isOneByteString(realTwoByteExternalString));

try { if (Inst26 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2300,2310,51>",(assertTrue)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<2311,2326,51>",(isOneByteString)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (["a", twoByteExternalWithOneByteData].join) != "undefined") {_RecordType("<2327,2369,51>",(["a", twoByteExternalWithOneByteData].join)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (twoByteExternalWithOneByteData) != "undefined") {_RecordType("<2333,2363,51>",(twoByteExternalWithOneByteData)); Inst29++; } } catch(e) {}
  assertTrue(isOneByteString(["a", twoByteExternalWithOneByteData].join("")));

  // Appending a two-byte string that contains only ascii chars should
  // still produce an ascii cons.
try { if (Inst31 <= 1000 && typeof (str) != "undefined") {_RecordType("<2496,2499,55>",(str)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (twoByteExternalWithOneByteData) != "undefined") {_RecordType("<2502,2532,55>",(twoByteExternalWithOneByteData)); Inst32++; } } catch(e) {}
  var str1 = str + twoByteExternalWithOneByteData;
try { if (Inst30 <= 1000 && typeof (str1) != "undefined") {_RecordType("<2489,2493,55>",(str1)); Inst30++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2536,2546,56>",(assertTrue)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<2547,2562,56>",(isOneByteString)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (str1) != "undefined") {_RecordType("<2563,2567,56>",(str1)); Inst35++; } } catch(e) {}
  assertTrue(isOneByteString(str1));

  // Force flattening of the string.
try { if (Inst37 <= 1000 && typeof (str1.length) != "undefined") {_RecordType("<2628,2639,59>",(str1.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (str1) != "undefined") {_RecordType("<2628,2632,59>",(str1)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (twoByteExternalWithOneByteData.length) != "undefined") {_RecordType("<2642,2679,59>",(twoByteExternalWithOneByteData.length)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (twoByteExternalWithOneByteData) != "undefined") {_RecordType("<2642,2672,59>",(twoByteExternalWithOneByteData)); Inst40++; } } catch(e) {}
  var old_length = str1.length - twoByteExternalWithOneByteData.length;
try { if (Inst36 <= 1000 && typeof (old_length) != "undefined") {_RecordType("<2615,2625,59>",(old_length)); Inst36++; } } catch(e) {}
  for (var i = 0; i < old_length; i++) {
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2692,2693,60>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2699,2700,60>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (old_length) != "undefined") {_RecordType("<2703,2713,60>",(old_length)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<2715,2716,60>",(i)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2726,2738,61>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<2739,2758,61>",(String.fromCharCode)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (String) != "undefined") {_RecordType("<2739,2745,61>",(String)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<2759,2760,61>",(i)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (str1[i]) != "undefined") {_RecordType("<2770,2777,61>",(str1[i])); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (str1) != "undefined") {_RecordType("<2770,2774,61>",(str1)); Inst50++; } } catch(e) {}
    assertEquals(String.fromCharCode(i & 0x7f), str1[i]);
  }
  for (var i = old_length; i < str1.length; i++) {
try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<2795,2796,63>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (old_length) != "undefined") {_RecordType("<2799,2809,63>",(old_length)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (i) != "undefined") {_RecordType("<2811,2812,63>",(i)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (str1.length) != "undefined") {_RecordType("<2815,2826,63>",(str1.length)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (str1) != "undefined") {_RecordType("<2815,2819,63>",(str1)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<2828,2829,63>",(i)); Inst56++; } } catch(e) {}
try { if (Inst57 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2839,2851,64>",(assertEquals)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (str1[i]) != "undefined") {_RecordType("<2857,2864,64>",(str1[i])); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (str1) != "undefined") {_RecordType("<2857,2861,64>",(str1)); Inst59++; } } catch(e) {}
    assertEquals("A", str1[i]);
  }

  // Flattened string should still be ascii.
try { if (Inst60 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2919,2929,68>",(assertTrue)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<2930,2945,68>",(isOneByteString)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (str1) != "undefined") {_RecordType("<2946,2950,68>",(str1)); Inst62++; } } catch(e) {}
  assertTrue(isOneByteString(str1));

  // Lower-casing an ascii string should produce ascii.
try { if (Inst63 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3013,3023,71>",(assertTrue)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<3024,3039,71>",(isOneByteString)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (str1.toLowerCase) != "undefined") {_RecordType("<3040,3056,71>",(str1.toLowerCase)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (str1) != "undefined") {_RecordType("<3040,3044,71>",(str1)); Inst66++; } } catch(e) {}
  assertTrue(isOneByteString(str1.toLowerCase()));

try { if (Inst67 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3065,3076,73>",(assertFalse)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<3077,3092,73>",(isOneByteString)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (["a", realTwoByteExternalString].join) != "undefined") {_RecordType("<3093,3130,73>",(["a", realTwoByteExternalString].join)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (realTwoByteExternalString) != "undefined") {_RecordType("<3099,3124,73>",(realTwoByteExternalString)); Inst70++; } } catch(e) {}
  assertFalse(isOneByteString(["a", realTwoByteExternalString].join("")));

  // Appending a real two-byte string should produce a two-byte cons.
try { if (Inst72 <= 1000 && typeof (str) != "undefined") {_RecordType("<3222,3225,76>",(str)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (realTwoByteExternalString) != "undefined") {_RecordType("<3228,3253,76>",(realTwoByteExternalString)); Inst73++; } } catch(e) {}
  var str2 = str + realTwoByteExternalString;
try { if (Inst71 <= 1000 && typeof (str2) != "undefined") {_RecordType("<3215,3219,76>",(str2)); Inst71++; } } catch(e) {}
try { if (Inst74 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3257,3268,77>",(assertFalse)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<3269,3284,77>",(isOneByteString)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (str2) != "undefined") {_RecordType("<3285,3289,77>",(str2)); Inst76++; } } catch(e) {}
  assertFalse(isOneByteString(str2));

  // Force flattening of the string.
try { if (Inst78 <= 1000 && typeof (str2.length) != "undefined") {_RecordType("<3346,3357,80>",(str2.length)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (str2) != "undefined") {_RecordType("<3346,3350,80>",(str2)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (realTwoByteExternalString.length) != "undefined") {_RecordType("<3360,3392,80>",(realTwoByteExternalString.length)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (realTwoByteExternalString) != "undefined") {_RecordType("<3360,3385,80>",(realTwoByteExternalString)); Inst81++; } } catch(e) {}
  old_length = str2.length - realTwoByteExternalString.length;
try { if (Inst77 <= 1000 && typeof (old_length) != "undefined") {_RecordType("<3333,3343,80>",(old_length)); Inst77++; } } catch(e) {}
  for (var i = 0; i < old_length; i++) {
try { if (Inst82 <= 1000 && typeof (i) != "undefined") {_RecordType("<3405,3406,81>",(i)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (i) != "undefined") {_RecordType("<3412,3413,81>",(i)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (old_length) != "undefined") {_RecordType("<3416,3426,81>",(old_length)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (i) != "undefined") {_RecordType("<3428,3429,81>",(i)); Inst85++; } } catch(e) {}
try { if (Inst86 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3439,3451,82>",(assertEquals)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<3452,3471,82>",(String.fromCharCode)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (String) != "undefined") {_RecordType("<3452,3458,82>",(String)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (i) != "undefined") {_RecordType("<3472,3473,82>",(i)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (str2[i]) != "undefined") {_RecordType("<3483,3490,82>",(str2[i])); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (str2) != "undefined") {_RecordType("<3483,3487,82>",(str2)); Inst91++; } } catch(e) {}
    assertEquals(String.fromCharCode(i & 0x7f), str2[i]);
  }
  for (var i = old_length; i < str.length; i++) {
try { if (Inst92 <= 1000 && typeof (i) != "undefined") {_RecordType("<3508,3509,84>",(i)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (old_length) != "undefined") {_RecordType("<3512,3522,84>",(old_length)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (i) != "undefined") {_RecordType("<3524,3525,84>",(i)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (str.length) != "undefined") {_RecordType("<3528,3538,84>",(str.length)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (str) != "undefined") {_RecordType("<3528,3531,84>",(str)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (i) != "undefined") {_RecordType("<3540,3541,84>",(i)); Inst97++; } } catch(e) {}
try { if (Inst98 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3551,3563,85>",(assertEquals)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (str2[i]) != "undefined") {_RecordType("<3574,3581,85>",(str2[i])); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (str2) != "undefined") {_RecordType("<3574,3578,85>",(str2)); Inst100++; } } catch(e) {}
    assertEquals("\u1234", str2[i]);
  }

  // Flattened string should still be two-byte.
try { if (Inst101 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3639,3650,89>",(assertFalse)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (isOneByteString) != "undefined") {_RecordType("<3651,3666,89>",(isOneByteString)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (str2) != "undefined") {_RecordType("<3667,3671,89>",(str2)); Inst103++; } } catch(e) {}
  assertFalse(isOneByteString(str2));
}

// Run the test many times to ensure IC-s don't break things.
for (var i = 0; i < 10; i++) {
try { if (Inst104 <= 1000 && typeof (i) != "undefined") {_RecordType("<3749,3750,93>",(i)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (i) != "undefined") {_RecordType("<3756,3757,93>",(i)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (i) != "undefined") {_RecordType("<3764,3765,93>",(i)); Inst106++; } } catch(e) {}
try { if (Inst107 <= 1000 && typeof (test) != "undefined") {_RecordType("<3773,3777,94>",(test)); Inst107++; } } catch(e) {}
  test();
}

// Clean up string to make Valgrind happy.
try { if (Inst108 <= 1000 && typeof (gc) != "undefined") {_RecordType("<3827,3829,98>",(gc)); Inst108++; } } catch(e) {}
gc();
try { if (Inst109 <= 1000 && typeof (gc) != "undefined") {_RecordType("<3833,3835,99>",(gc)); Inst109++; } } catch(e) {}
gc();

