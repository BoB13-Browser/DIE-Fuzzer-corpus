var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug --expose-gc

// If one callback causes a GC then the other callbacks don't take place.

try { if (Inst1 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1728,1732,32>",(eval)); Inst1++; } } catch(e) {}
var f = eval("(function f() { return 42; })");
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1724,1725,32>",(f)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1776,1780,33>",(eval)); Inst3++; } } catch(e) {}
var f2 = eval("(function f2() { return 43; })");
try { if (Inst2 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1771,1773,33>",(f2)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1825,1836,35>",(debug.Debug)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1825,1830,35>",(debug)); Inst6++; } } catch(e) {}
Debug = debug.Debug;
try { if (Inst4 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1817,1822,35>",(Debug)); Inst4++; } } catch(e) {}

var called = 0;
try { if (Inst7 <= 1000 && typeof (called) != "undefined") {_RecordType("<1843,1849,37>",(called)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1865,1873,39>",(listener)); Inst8++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst9 <= 1000 && typeof (event) != "undefined") {_RecordType("<1874,1879,39>",(event)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1881,1891,39>",(exec_state)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1893,1903,39>",(event_data)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (data) != "undefined") {_RecordType("<1905,1909,39>",(data)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (event) != "undefined") {_RecordType("<1919,1924,40>",(event)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Debug.DebugEvent.ScriptCollected) != "undefined") {_RecordType("<1928,1960,40>",(Debug.DebugEvent.ScriptCollected)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1928,1944,40>",(Debug.DebugEvent)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1928,1933,40>",(Debug)); Inst16++; } } catch(e) {}
  if (event == Debug.DebugEvent.ScriptCollected) {
try { if (Inst17 <= 1000 && typeof (called) != "undefined") {_RecordType("<1972,1978,41>",(called)); Inst17++; } } catch(e) {}
    if (called != 2) {
try { if (Inst18 <= 1000 && typeof (called) != "undefined") {_RecordType("<1993,1999,42>",(called)); Inst18++; } } catch(e) {}
      called++;
try { if (Inst19 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2009,2011,43>",(gc)); Inst19++; } } catch(e) {}
      gc();
    }
  }
};

try { if (Inst20 <= 1000 && typeof (Debug.scripts) != "undefined") {_RecordType("<2029,2042,48>",(Debug.scripts)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2029,2034,48>",(Debug)); Inst21++; } } catch(e) {}
Debug.scripts();
try { if (Inst22 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2046,2063,49>",(Debug.setListener)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2046,2051,49>",(Debug)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2064,2072,49>",(listener)); Inst24++; } } catch(e) {}
Debug.setListener(listener);
f = void 0;
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<2075,2076,50>",(f)); Inst25++; } } catch(e) {}
f2 = void 0;
try { if (Inst26 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2087,2089,51>",(f2)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2100,2102,52>",(gc)); Inst27++; } } catch(e) {}
gc();
try { if (Inst28 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2106,2116,53>",(assertTrue)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (called) != "undefined") {_RecordType("<2117,2123,53>",(called)); Inst29++; } } catch(e) {}
assertTrue(called == 2);

