var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

// Test that debug-evaluate only resolves variables that are used by
// the function inside which we debug-evaluate. This is to avoid
// incorrect variable resolution when a context-allocated variable is
// shadowed by a stack-allocated variable.

"use strict";

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<478,489,14>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<478,483,14>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<470,475,14>",(Debug)); Inst0++; } } catch(e) {}

var exception = null;
try { if (Inst3 <= 1000 && typeof (exception) != "undefined") {_RecordType("<495,504,16>",(exception)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (listener) != "undefined") {_RecordType("<522,530,17>",(listener)); Inst4++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst5 <= 1000 && typeof (event) != "undefined") {_RecordType("<531,536,17>",(event)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<538,548,17>",(exec_state)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<550,560,17>",(event_data)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (data) != "undefined") {_RecordType("<562,566,17>",(data)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (event) != "undefined") {_RecordType("<576,581,18>",(event)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<585,607,18>",(Debug.DebugEvent.Break)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<585,601,18>",(Debug.DebugEvent)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<585,590,18>",(Debug)); Inst12++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<857,858,24>",(e)); Inst25++; } } catch(e) {}
  try {
try { if (Inst13 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<629,657,20>",(exec_state.frame(0).evaluate)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<629,645,20>",(exec_state.frame)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<629,639,20>",(exec_state)); Inst15++; } } catch(e) {}
    exec_state.frame(0).evaluate("var x = 2");
try { if (Inst16 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<676,704,21>",(exec_state.frame(0).evaluate)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<676,692,21>",(exec_state.frame)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<676,686,21>",(exec_state)); Inst18++; } } catch(e) {}
    exec_state.frame(0).evaluate("'use strict'; let y = 3");
try { if (Inst19 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<737,765,22>",(exec_state.frame(0).evaluate)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<737,753,22>",(exec_state.frame)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<737,747,22>",(exec_state)); Inst21++; } } catch(e) {}
    exec_state.frame(0).evaluate("var z = 4");
try { if (Inst22 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<784,812,23>",(exec_state.frame(0).evaluate)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<784,800,23>",(exec_state.frame)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<784,794,23>",(exec_state)); Inst24++; } } catch(e) {}
    exec_state.frame(0).evaluate("function bar() { return 5; }");
  } catch (e) {
try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<878,879,25>",(e)); Inst27++; } } catch(e) {}
    exception = e;
try { if (Inst26 <= 1000 && typeof (exception) != "undefined") {_RecordType("<866,875,25>",(exception)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<885,890,26>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<891,892,26>",(e)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<895,902,26>",(e.stack)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (e) != "undefined") {_RecordType("<895,896,26>",(e)); Inst31++; } } catch(e) {}
    print(e + e.stack);
  }
}

try { if (Inst32 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<912,929,30>",(Debug.setListener)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<912,917,30>",(Debug)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (listener) != "undefined") {_RecordType("<930,938,30>",(listener)); Inst34++; } } catch(e) {}
Debug.setListener(listener);

var z = 1;
try { if (Inst35 <= 1000 && typeof (z) != "undefined") {_RecordType("<946,947,32>",(z)); Inst35++; } } catch(e) {}

(function() {
  debugger;
})();

try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<987,999,38>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<1003,1004,38>",(x)); Inst37++; } } catch(e) {}
assertEquals(2, x);                     // declaration
try { if (Inst38 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1042,1054,39>",(assertThrows)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (y) != "undefined") {_RecordType("<1061,1062,39>",(y)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1064,1078,39>",(ReferenceError)); Inst40++; } } catch(e) {}
assertThrows(() => y, ReferenceError);  // let-declaration does not stick
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1116,1128,40>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (z) != "undefined") {_RecordType("<1132,1133,40>",(z)); Inst42++; } } catch(e) {}
assertEquals(4, z);                     // re-declaration
try { if (Inst43 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1174,1186,41>",(assertEquals)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1190,1193,41>",(bar)); Inst44++; } } catch(e) {}
assertEquals(5, bar());                 // function declaration

try { if (Inst45 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<1239,1256,43>",(Debug.setListener)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1239,1244,43>",(Debug)); Inst46++; } } catch(e) {}
Debug.setListener(null);
try { if (Inst47 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1264,1274,44>",(assertNull)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (exception) != "undefined") {_RecordType("<1275,1284,44>",(exception)); Inst48++; } } catch(e) {}
assertNull(exception);

