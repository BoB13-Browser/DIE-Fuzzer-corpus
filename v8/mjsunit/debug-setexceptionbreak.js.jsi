var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}

// Note: the following tests only checks the debugger handling of the
// setexceptionbreak command.  It does not test whether the debugger
// actually breaks on exceptions or not.  That functionality is tested
// in test-debug.cc instead.

// Simple function which stores the last debug event.
listenerComplete = false;
try { if (Inst3 <= 1000 && typeof (listenerComplete) != "undefined") {_RecordType("<2017,2033,38>",(listenerComplete)); Inst3++; } } catch(e) {}
exception = false;
try { if (Inst4 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2043,2052,39>",(exception)); Inst4++; } } catch(e) {}

var breakpoint = -1;
try { if (Inst5 <= 1000 && typeof (breakpoint) != "undefined") {_RecordType("<2067,2077,41>",(breakpoint)); Inst5++; } } catch(e) {}
var base_request = '"seq":0,"type":"request","command":"setexceptionbreak"'
try { if (Inst6 <= 1000 && typeof (base_request) != "undefined") {_RecordType("<2088,2100,42>",(base_request)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (safeEval) != "undefined") {_RecordType("<2170,2178,44>",(safeEval)); Inst7++; } } catch(e) {}
function safeEval(code) {
try { if (Inst8 <= 1000 && typeof (code) != "undefined") {_RecordType("<2179,2183,44>",(code)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<2241,2242,47>",(e)); Inst11++; } } catch(e) {}
  try {
try { if (Inst9 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2206,2210,46>",(eval)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (code) != "undefined") {_RecordType("<2217,2221,46>",(code)); Inst10++; } } catch(e) {}
    return eval('(' + code + ')');
  } catch (e) {
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2250,2262,48>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<2271,2272,48>",(e)); Inst13++; } } catch(e) {}
    assertEquals(void 0, e);
try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2286,2295,49>",(undefined)); Inst14++; } } catch(e) {}
    return undefined;
  }
}

try { if (Inst15 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<2313,2326,53>",(testArguments)); Inst15++; } } catch(e) {}
function testArguments(dcp, arguments, success, type, enabled) {
try { if (Inst16 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<2327,2330,53>",(dcp)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2332,2341,53>",(arguments)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (success) != "undefined") {_RecordType("<2343,2350,53>",(success)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (type) != "undefined") {_RecordType("<2352,2356,53>",(type)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (enabled) != "undefined") {_RecordType("<2358,2365,53>",(enabled)); Inst20++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (base_request) != "undefined") {_RecordType("<2391,2403,54>",(base_request)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2424,2433,54>",(arguments)); Inst23++; } } catch(e) {}
  var request = '{' + base_request + ',"arguments":' + arguments + '}'
try { if (Inst21 <= 1000 && typeof (request) != "undefined") {_RecordType("<2375,2382,54>",(request)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (dcp.processDebugJSONRequest) != "undefined") {_RecordType("<2462,2489,55>",(dcp.processDebugJSONRequest)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<2462,2465,55>",(dcp)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (request) != "undefined") {_RecordType("<2490,2497,55>",(request)); Inst27++; } } catch(e) {}
  var json_response = dcp.processDebugJSONRequest(request);
try { if (Inst24 <= 1000 && typeof (json_response) != "undefined") {_RecordType("<2446,2459,55>",(json_response)); Inst24++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (safeEval) != "undefined") {_RecordType("<2517,2525,56>",(safeEval)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (json_response) != "undefined") {_RecordType("<2526,2539,56>",(json_response)); Inst30++; } } catch(e) {}
  var response = safeEval(json_response);
try { if (Inst28 <= 1000 && typeof (response) != "undefined") {_RecordType("<2506,2514,56>",(response)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (success) != "undefined") {_RecordType("<2548,2555,57>",(success)); Inst31++; } } catch(e) {}
  if (success) {
try { if (Inst32 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2563,2573,58>",(assertTrue)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (response.success) != "undefined") {_RecordType("<2574,2590,58>",(response.success)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (response) != "undefined") {_RecordType("<2574,2582,58>",(response)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (json_response) != "undefined") {_RecordType("<2592,2605,58>",(json_response)); Inst35++; } } catch(e) {}
    assertTrue(response.success, json_response);
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2612,2624,59>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (response.body.type) != "undefined") {_RecordType("<2625,2643,59>",(response.body.type)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (response.body) != "undefined") {_RecordType("<2625,2638,59>",(response.body)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (response) != "undefined") {_RecordType("<2625,2633,59>",(response)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (type) != "undefined") {_RecordType("<2645,2649,59>",(type)); Inst40++; } } catch(e) {}
    assertEquals(response.body.type, type);
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2656,2668,60>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (response.body.enabled) != "undefined") {_RecordType("<2669,2690,60>",(response.body.enabled)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (response.body) != "undefined") {_RecordType("<2669,2682,60>",(response.body)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (response) != "undefined") {_RecordType("<2669,2677,60>",(response)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (enabled) != "undefined") {_RecordType("<2692,2699,60>",(enabled)); Inst45++; } } catch(e) {}
    assertEquals(response.body.enabled, enabled);
  } else {
try { if (Inst46 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2717,2728,62>",(assertFalse)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (response.success) != "undefined") {_RecordType("<2729,2745,62>",(response.success)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (response) != "undefined") {_RecordType("<2729,2737,62>",(response)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (json_response) != "undefined") {_RecordType("<2747,2760,62>",(json_response)); Inst49++; } } catch(e) {}
    assertFalse(response.success, json_response);
  }
}

try { if (Inst50 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2779,2787,66>",(listener)); Inst50++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst51 <= 1000 && typeof (event) != "undefined") {_RecordType("<2788,2793,66>",(event)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2795,2805,66>",(exec_state)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2807,2817,66>",(event_data)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (data) != "undefined") {_RecordType("<2819,2823,66>",(data)); Inst54++; } } catch(e) {}
try { if (Inst93 <= 1000 && typeof (e) != "undefined") {_RecordType("<4356,4357,102>",(e)); Inst93++; } } catch(e) {}
  try {
try { if (Inst55 <= 1000 && typeof (event) != "undefined") {_RecordType("<2841,2846,68>",(event)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<2850,2872,68>",(Debug.DebugEvent.Break)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<2850,2866,68>",(Debug.DebugEvent)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2850,2855,68>",(Debug)); Inst58++; } } catch(e) {}
  if (event == Debug.DebugEvent.Break) {
    // Get the debug command processor.
try { if (Inst60 <= 1000 && typeof (exec_state.debugCommandProcessor) != "undefined") {_RecordType("<2930,2962,70>",(exec_state.debugCommandProcessor)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2930,2940,70>",(exec_state)); Inst61++; } } catch(e) {}
    var dcp = exec_state.debugCommandProcessor("unspecified_running_state");
try { if (Inst59 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<2924,2927,70>",(dcp)); Inst59++; } } catch(e) {}

    // Test some illegal setexceptionbreak requests.
try { if (Inst63 <= 1000 && typeof (base_request) != "undefined") {_RecordType("<3071,3083,73>",(base_request)); Inst63++; } } catch(e) {}
    var request = '{' + base_request + '}'
try { if (Inst62 <= 1000 && typeof (request) != "undefined") {_RecordType("<3055,3062,73>",(request)); Inst62++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (safeEval) != "undefined") {_RecordType("<3109,3117,74>",(safeEval)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (dcp.processDebugJSONRequest) != "undefined") {_RecordType("<3118,3145,74>",(dcp.processDebugJSONRequest)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3118,3121,74>",(dcp)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (request) != "undefined") {_RecordType("<3146,3153,74>",(request)); Inst68++; } } catch(e) {}
    var response = safeEval(dcp.processDebugJSONRequest(request));
try { if (Inst64 <= 1000 && typeof (response) != "undefined") {_RecordType("<3098,3106,74>",(response)); Inst64++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3161,3172,75>",(assertFalse)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (response.success) != "undefined") {_RecordType("<3173,3189,75>",(response.success)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (response) != "undefined") {_RecordType("<3173,3181,75>",(response)); Inst71++; } } catch(e) {}
    assertFalse(response.success);

try { if (Inst72 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<3197,3210,77>",(testArguments)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3211,3214,77>",(dcp)); Inst73++; } } catch(e) {}
    testArguments(dcp, '{}', false);
try { if (Inst74 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<3234,3247,78>",(testArguments)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3248,3251,78>",(dcp)); Inst75++; } } catch(e) {}
    testArguments(dcp, '{"type":0}', false);

    // Test some legal setexceptionbreak requests with default.
    // Note: by default, break on exceptions should be disabled.  Hence,
    // the first time, we send the command with no enabled arg, the debugger
    // should toggle it on.  The second time, it should toggle it off.
try { if (Inst76 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<3565,3578,84>",(testArguments)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3579,3582,84>",(dcp)); Inst77++; } } catch(e) {}
    testArguments(dcp, '{"type":"all"}', true, "all", true);
try { if (Inst78 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<3626,3639,85>",(testArguments)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3640,3643,85>",(dcp)); Inst79++; } } catch(e) {}
    testArguments(dcp, '{"type":"all"}', true, "all", false);
try { if (Inst80 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<3688,3701,86>",(testArguments)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3702,3705,86>",(dcp)); Inst81++; } } catch(e) {}
    testArguments(dcp, '{"type":"uncaught"}', true, "uncaught", true);
try { if (Inst82 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<3759,3772,87>",(testArguments)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3773,3776,87>",(dcp)); Inst83++; } } catch(e) {}
    testArguments(dcp, '{"type":"uncaught"}', true, "uncaught", false);

    // Test some legal setexceptionbreak requests with explicit enabled arg.
try { if (Inst84 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<3909,3922,90>",(testArguments)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3923,3926,90>",(dcp)); Inst85++; } } catch(e) {}
    testArguments(dcp, '{"type":"all","enabled":true}', true, "all", true);
try { if (Inst86 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<3985,3998,91>",(testArguments)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<3999,4002,91>",(dcp)); Inst87++; } } catch(e) {}
    testArguments(dcp, '{"type":"all","enabled":false}', true, "all", false);

try { if (Inst88 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<4064,4077,93>",(testArguments)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<4078,4081,93>",(dcp)); Inst89++; } } catch(e) {}
    testArguments(dcp, '{"type":"uncaught","enabled":true}', true,
                  "uncaught", true);
try { if (Inst90 <= 1000 && typeof (testArguments) != "undefined") {_RecordType("<4168,4181,95>",(testArguments)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<4182,4185,95>",(dcp)); Inst91++; } } catch(e) {}
    testArguments(dcp, '{"type":"uncaught","enabled":false}', true,
                  "uncaught", false);

    // Indicate that all was processed.
    listenerComplete = true;
try { if (Inst92 <= 1000 && typeof (listenerComplete) != "undefined") {_RecordType("<4315,4331,99>",(listenerComplete)); Inst92++; } } catch(e) {}

  }
  } catch (e) {
try { if (Inst95 <= 1000 && typeof (e) != "undefined") {_RecordType("<4377,4378,103>",(e)); Inst95++; } } catch(e) {}
    exception = e
try { if (Inst94 <= 1000 && typeof (exception) != "undefined") {_RecordType("<4365,4374,103>",(exception)); Inst94++; } } catch(e) {}
  };
};

// Add the debug event listener.
try { if (Inst96 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<4421,4438,108>",(Debug.setListener)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<4421,4426,108>",(Debug)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (listener) != "undefined") {_RecordType("<4439,4447,108>",(listener)); Inst98++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst99 <= 1000 && typeof (g) != "undefined") {_RecordType("<4460,4461,110>",(g)); Inst99++; } } catch(e) {}
function g() {};


// Set a break point and call to invoke the debug event listener.
try { if (Inst101 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<4549,4568,114>",(Debug.setBreakPoint)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<4549,4554,114>",(Debug)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (g) != "undefined") {_RecordType("<4569,4570,114>",(g)); Inst103++; } } catch(e) {}
breakpoint = Debug.setBreakPoint(g, 0, 0);
try { if (Inst100 <= 1000 && typeof (breakpoint) != "undefined") {_RecordType("<4536,4546,114>",(breakpoint)); Inst100++; } } catch(e) {}
try { if (Inst104 <= 1000 && typeof (g) != "undefined") {_RecordType("<4579,4580,115>",(g)); Inst104++; } } catch(e) {}
g();

// Make sure that the debug event listener vas invoked.
try { if (Inst105 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<4641,4652,118>",(assertFalse)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (exception) != "undefined") {_RecordType("<4653,4662,118>",(exception)); Inst106++; } } catch(e) {}
assertFalse(exception, "exception in listener")
try { if (Inst107 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<4689,4699,119>",(assertTrue)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (listenerComplete) != "undefined") {_RecordType("<4700,4716,119>",(listenerComplete)); Inst108++; } } catch(e) {}
assertTrue(listenerComplete, "listener did not run to completion");

