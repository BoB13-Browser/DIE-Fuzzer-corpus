var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}

// Simple debug event handler which just counts the number of break points hit.
var break_point_hit_count = 0;
try { if (Inst3 <= 1000 && typeof (break_point_hit_count) != "undefined") {_RecordType("<1807,1828,33>",(break_point_hit_count)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1844,1852,35>",(listener)); Inst4++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst5 <= 1000 && typeof (event) != "undefined") {_RecordType("<1853,1858,35>",(event)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1860,1870,35>",(exec_state)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1872,1882,35>",(event_data)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (data) != "undefined") {_RecordType("<1884,1888,35>",(data)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (event) != "undefined") {_RecordType("<1898,1903,36>",(event)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<1907,1929,36>",(Debug.DebugEvent.Break)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1907,1923,36>",(Debug.DebugEvent)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1907,1912,36>",(Debug)); Inst12++; } } catch(e) {}
  if (event == Debug.DebugEvent.Break) {
try { if (Inst13 <= 1000 && typeof (break_point_hit_count) != "undefined") {_RecordType("<1937,1958,37>",(break_point_hit_count)); Inst13++; } } catch(e) {}
    break_point_hit_count++;
  }
};

// Add the debug event listener.
try { if (Inst14 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2003,2020,42>",(Debug.setListener)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2003,2008,42>",(Debug)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2021,2029,42>",(listener)); Inst16++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst17 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2033,2037,44>",(eval)); Inst17++; } } catch(e) {}
eval(
  "var inner;\n" +
  "function outer() {\n" +         // Non-trivial outer closure.
  "  var x = 5;\n" +
  "  function a() {\n" +
  "    var foo = 0, y = 7;\n" +
  "    function b() {\n" +
  "      var bar = 0, baz = 0, z = 11;\n" +
  "      function c() {\n" +
  "        return x + y + z;\n" +  // Breakpoint line ( #8 )
  "      }\n" +
  "      inner = c;\n" +
  "      return c();\n" +
  "    }\n" +
  "    return b();\n" +
  "  }\n" +
  "  return a();\n" +
  "}"
);

try { if (Inst19 <= 1000 && typeof (Debug.findScript) != "undefined") {_RecordType("<2524,2540,64>",(Debug.findScript)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2524,2529,64>",(Debug)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (outer) != "undefined") {_RecordType("<2541,2546,64>",(outer)); Inst21++; } } catch(e) {}
var script = Debug.findScript(outer);
try { if (Inst18 <= 1000 && typeof (script) != "undefined") {_RecordType("<2515,2521,64>",(script)); Inst18++; } } catch(e) {}

// The debugger triggers compilation of inner closures.
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2606,2618,67>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Debug.scriptBreakPoints().length) != "undefined") {_RecordType("<2622,2654,67>",(Debug.scriptBreakPoints().length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Debug.scriptBreakPoints) != "undefined") {_RecordType("<2622,2645,67>",(Debug.scriptBreakPoints)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2622,2627,67>",(Debug)); Inst25++; } } catch(e) {}
assertEquals(0, Debug.scriptBreakPoints().length);
try { if (Inst27 <= 1000 && typeof (Debug.setScriptBreakPointById) != "undefined") {_RecordType("<2667,2696,68>",(Debug.setScriptBreakPointById)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2667,2672,68>",(Debug)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (script.id) != "undefined") {_RecordType("<2697,2706,68>",(script.id)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (script) != "undefined") {_RecordType("<2697,2703,68>",(script)); Inst30++; } } catch(e) {}
var sbp = Debug.setScriptBreakPointById(script.id, 8);
try { if (Inst26 <= 1000 && typeof (sbp) != "undefined") {_RecordType("<2661,2664,68>",(sbp)); Inst26++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2712,2724,69>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Debug.scriptBreakPoints().length) != "undefined") {_RecordType("<2728,2760,69>",(Debug.scriptBreakPoints().length)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Debug.scriptBreakPoints) != "undefined") {_RecordType("<2728,2751,69>",(Debug.scriptBreakPoints)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2728,2733,69>",(Debug)); Inst34++; } } catch(e) {}
assertEquals(1, Debug.scriptBreakPoints().length);

// The compiled outer closure should behave correctly.
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2819,2831,72>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (outer) != "undefined") {_RecordType("<2836,2841,72>",(outer)); Inst36++; } } catch(e) {}
assertEquals(23, outer());
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2846,2858,73>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (break_point_hit_count) != "undefined") {_RecordType("<2862,2883,73>",(break_point_hit_count)); Inst38++; } } catch(e) {}
assertEquals(1, break_point_hit_count);

// The compiled inner closure should behave correctly.
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2942,2954,76>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (inner) != "undefined") {_RecordType("<2959,2964,76>",(inner)); Inst40++; } } catch(e) {}
assertEquals(23, inner());
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2969,2981,77>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (break_point_hit_count) != "undefined") {_RecordType("<2985,3006,77>",(break_point_hit_count)); Inst42++; } } catch(e) {}
assertEquals(2, break_point_hit_count);

// Remove script break point.
try { if (Inst43 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3040,3052,80>",(assertEquals)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Debug.scriptBreakPoints().length) != "undefined") {_RecordType("<3056,3088,80>",(Debug.scriptBreakPoints().length)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Debug.scriptBreakPoints) != "undefined") {_RecordType("<3056,3079,80>",(Debug.scriptBreakPoints)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<3056,3061,80>",(Debug)); Inst46++; } } catch(e) {}
assertEquals(1, Debug.scriptBreakPoints().length);
try { if (Inst47 <= 1000 && typeof (Debug.clearBreakPoint) != "undefined") {_RecordType("<3091,3112,81>",(Debug.clearBreakPoint)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<3091,3096,81>",(Debug)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (sbp) != "undefined") {_RecordType("<3113,3116,81>",(sbp)); Inst49++; } } catch(e) {}
Debug.clearBreakPoint(sbp);
try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3119,3131,82>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Debug.scriptBreakPoints().length) != "undefined") {_RecordType("<3135,3167,82>",(Debug.scriptBreakPoints().length)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Debug.scriptBreakPoints) != "undefined") {_RecordType("<3135,3158,82>",(Debug.scriptBreakPoints)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<3135,3140,82>",(Debug)); Inst53++; } } catch(e) {}
assertEquals(0, Debug.scriptBreakPoints().length);

