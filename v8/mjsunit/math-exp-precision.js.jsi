var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Tests that the --fast-math implementation of Math.exp() has
// reasonable precision.

try { if (Inst0 <= 1000 && typeof (exp) != "undefined") {_RecordType("<1696,1699,31>",(exp)); Inst0++; } } catch(e) {}
function exp(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1700,1701,31>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Math.exp) != "undefined") {_RecordType("<1714,1722,32>",(Math.exp)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1714,1718,32>",(Math)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1723,1724,32>",(x)); Inst4++; } } catch(e) {}
  return Math.exp(x);
}

try { if (Inst6 <= 1000 && typeof (exp) != "undefined") {_RecordType("<1754,1757,35>",(exp)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1758,1765,35>",(Math.PI)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1758,1762,35>",(Math)); Inst8++; } } catch(e) {}
var first_call_result = exp(Math.PI);
try { if (Inst5 <= 1000 && typeof (first_call_result) != "undefined") {_RecordType("<1734,1751,35>",(first_call_result)); Inst5++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (exp) != "undefined") {_RecordType("<1793,1796,36>",(exp)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<1797,1804,36>",(Math.PI)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1797,1801,36>",(Math)); Inst12++; } } catch(e) {}
var second_call_result = exp(Math.PI);
try { if (Inst9 <= 1000 && typeof (second_call_result) != "undefined") {_RecordType("<1772,1790,36>",(second_call_result)); Inst9++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (assertAlmostEquals) != "undefined") {_RecordType("<1817,1835,38>",(assertAlmostEquals)); Inst13++; } } catch(e) {}
function assertAlmostEquals(expected, actual, x) {
try { if (Inst14 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1836,1844,38>",(expected)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1846,1852,38>",(actual)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1854,1855,38>",(x)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1865,1873,39>",(expected)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1882,1888,39>",(actual)); Inst18++; } } catch(e) {}
  if (expected == 0 && actual == 0) return;  // OK
try { if (Inst19 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1916,1924,40>",(expected)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<1928,1952,40>",(Number.POSITIVE_INFINITY)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1928,1934,40>",(Number)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1962,1968,41>",(actual)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number.POSITIVE_INFINITY) != "undefined") {_RecordType("<1972,1996,41>",(Number.POSITIVE_INFINITY)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1972,1978,41>",(Number)); Inst24++; } } catch(e) {}
  if (expected == Number.POSITIVE_INFINITY &&
      actual == Number.POSITIVE_INFINITY) {
    return;  // OK
  }
try { if (Inst26 <= 1000 && typeof (Math.abs) != "undefined") {_RecordType("<2041,2049,44>",(Math.abs)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2041,2045,44>",(Math)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2050,2058,44>",(expected)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (actual) != "undefined") {_RecordType("<2059,2065,44>",(actual)); Inst29++; } } catch(e) {}
  relative_diff = Math.abs(expected/actual - 1);
try { if (Inst25 <= 1000 && typeof (relative_diff) != "undefined") {_RecordType("<2025,2038,44>",(relative_diff)); Inst25++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2074,2084,45>",(assertTrue)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (relative_diff) != "undefined") {_RecordType("<2085,2098,45>",(relative_diff)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (relative_diff) != "undefined") {_RecordType("<2136,2149,45>",(relative_diff)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<2204,2205,46>",(x)); Inst33++; } } catch(e) {}
  assertTrue(relative_diff < 1e-12, "relative difference of " + relative_diff +
                                    " for input " + x);
}

try { if (Inst35 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<2227,2234,49>",(Math.PI)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2227,2231,49>",(Math)); Inst36++; } } catch(e) {}
var increment = Math.PI / 35;  // Roughly 0.1, but we want to try many
try { if (Inst34 <= 1000 && typeof (increment) != "undefined") {_RecordType("<2215,2224,49>",(increment)); Inst34++; } } catch(e) {}
                               // different mantissae.
for (var x = -708; x < 710; x += increment) {
try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<2346,2347,51>",(x)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<2356,2357,51>",(x)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<2365,2366,51>",(x)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (increment) != "undefined") {_RecordType("<2370,2379,51>",(increment)); Inst40++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (exp) != "undefined") {_RecordType("<2394,2397,52>",(exp)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<2398,2399,52>",(x)); Inst43++; } } catch(e) {}
  var ex = exp(x);
try { if (Inst41 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2389,2391,52>",(ex)); Inst41++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<2420,2428,53>",(Math.pow)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2420,2424,53>",(Math)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Math.E) != "undefined") {_RecordType("<2429,2435,53>",(Math.E)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2429,2433,53>",(Math)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (x) != "undefined") {_RecordType("<2437,2438,53>",(x)); Inst49++; } } catch(e) {}
  var reference = Math.pow(Math.E, x);
try { if (Inst44 <= 1000 && typeof (reference) != "undefined") {_RecordType("<2408,2417,53>",(reference)); Inst44++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (assertAlmostEquals) != "undefined") {_RecordType("<2443,2461,54>",(assertAlmostEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (reference) != "undefined") {_RecordType("<2462,2471,54>",(reference)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2473,2475,54>",(ex)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (x) != "undefined") {_RecordType("<2477,2478,54>",(x)); Inst53++; } } catch(e) {}
  assertAlmostEquals(reference, ex, x);
try { if (Inst54 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2487,2489,55>",(ex)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (isFinite) != "undefined") {_RecordType("<2497,2505,55>",(isFinite)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2506,2508,55>",(ex)); Inst56++; } } catch(e) {}
  if (ex > 0 && isFinite(ex)) {
try { if (Inst58 <= 1000 && typeof (Math.log) != "undefined") {_RecordType("<2528,2536,56>",(Math.log)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2528,2532,56>",(Math)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (ex) != "undefined") {_RecordType("<2537,2539,56>",(ex)); Inst60++; } } catch(e) {}
    var back = Math.log(ex);
try { if (Inst57 <= 1000 && typeof (back) != "undefined") {_RecordType("<2521,2525,56>",(back)); Inst57++; } } catch(e) {}
try { if (Inst61 <= 1000 && typeof (assertAlmostEquals) != "undefined") {_RecordType("<2546,2564,57>",(assertAlmostEquals)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (x) != "undefined") {_RecordType("<2565,2566,57>",(x)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (back) != "undefined") {_RecordType("<2568,2572,57>",(back)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (x) != "undefined") {_RecordType("<2574,2575,57>",(x)); Inst64++; } } catch(e) {}
    assertAlmostEquals(x, back, x + " (backwards)");
  }
}

// Make sure optimizing the function does not alter the result.
try { if (Inst66 <= 1000 && typeof (exp) != "undefined") {_RecordType("<2689,2692,62>",(exp)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Math.PI) != "undefined") {_RecordType("<2693,2700,62>",(Math.PI)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2693,2697,62>",(Math)); Inst68++; } } catch(e) {}
var last_call_result = exp(Math.PI);
try { if (Inst65 <= 1000 && typeof (last_call_result) != "undefined") {_RecordType("<2670,2686,62>",(last_call_result)); Inst65++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2703,2715,63>",(assertEquals)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (first_call_result) != "undefined") {_RecordType("<2716,2733,63>",(first_call_result)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (second_call_result) != "undefined") {_RecordType("<2735,2753,63>",(second_call_result)); Inst71++; } } catch(e) {}
assertEquals(first_call_result, second_call_result);
try { if (Inst72 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2756,2768,64>",(assertEquals)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (first_call_result) != "undefined") {_RecordType("<2769,2786,64>",(first_call_result)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (last_call_result) != "undefined") {_RecordType("<2788,2804,64>",(last_call_result)); Inst74++; } } catch(e) {}
assertEquals(first_call_result, last_call_result);

