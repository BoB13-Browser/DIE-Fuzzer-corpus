var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst1 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1607,1610,28>",(NaN)); Inst1++; } } catch(e) {}
var a = [NaN, -1, 0, 1, 1.2, -7.9, true, false, 'foo', '0', 'NaN' ];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1602,1603,28>",(a)); Inst0++; } } catch(e) {}
for (var i in a) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1676,1677,29>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1681,1682,29>",(a)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1696,1700,30>",(a[i])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1696,1697,30>",(a)); Inst6++; } } catch(e) {}
  var x = a[i];
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1692,1693,30>",(x)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1704,1715,31>",(assertFalse)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1716,1719,31>",(NaN)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1723,1724,31>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1738,1739,31>",(x)); Inst10++; } } catch(e) {}
  assertFalse(NaN == x, "NaN == " + x);
try { if (Inst11 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1744,1755,32>",(assertFalse)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1756,1759,32>",(NaN)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1764,1765,32>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1780,1781,32>",(x)); Inst14++; } } catch(e) {}
  assertFalse(NaN === x, "NaN === " + x);
try { if (Inst15 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1786,1797,33>",(assertFalse)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1798,1801,33>",(NaN)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<1804,1805,33>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1818,1819,33>",(x)); Inst18++; } } catch(e) {}
  assertFalse(NaN < x, "NaN < " + x);
try { if (Inst19 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1824,1835,34>",(assertFalse)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1836,1839,34>",(NaN)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<1842,1843,34>",(x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1856,1857,34>",(x)); Inst22++; } } catch(e) {}
  assertFalse(NaN > x, "NaN > " + x);
try { if (Inst23 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1862,1873,35>",(assertFalse)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1874,1877,35>",(NaN)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<1881,1882,35>",(x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1896,1897,35>",(x)); Inst26++; } } catch(e) {}
  assertFalse(NaN <= x, "NaN <= " + x);
try { if (Inst27 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1902,1913,36>",(assertFalse)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1914,1917,36>",(NaN)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<1921,1922,36>",(x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<1936,1937,36>",(x)); Inst30++; } } catch(e) {}
  assertFalse(NaN >= x, "NaN >= " + x);

try { if (Inst31 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1943,1954,38>",(assertFalse)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<1955,1956,38>",(x)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1960,1963,38>",(NaN)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<1970,1971,38>",(x)); Inst34++; } } catch(e) {}
  assertFalse(x == NaN, "" + x + " == NaN");
try { if (Inst35 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1988,1999,39>",(assertFalse)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2000,2001,39>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2006,2009,39>",(NaN)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<2016,2017,39>",(x)); Inst38++; } } catch(e) {}
  assertFalse(x === NaN, "" + x + " === NaN");
try { if (Inst39 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2035,2046,40>",(assertFalse)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2047,2048,40>",(x)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2051,2054,40>",(NaN)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2061,2062,40>",(x)); Inst42++; } } catch(e) {}
  assertFalse(x < NaN, "" + x + " < NaN");
try { if (Inst43 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2078,2089,41>",(assertFalse)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<2090,2091,41>",(x)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2094,2097,41>",(NaN)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<2104,2105,41>",(x)); Inst46++; } } catch(e) {}
  assertFalse(x > NaN, "" + x + " > NaN");
try { if (Inst47 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2121,2132,42>",(assertFalse)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<2133,2134,42>",(x)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2138,2141,42>",(NaN)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (x) != "undefined") {_RecordType("<2148,2149,42>",(x)); Inst50++; } } catch(e) {}
  assertFalse(x <= NaN, "" + x + " <= NaN");
try { if (Inst51 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2166,2177,43>",(assertFalse)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<2178,2179,43>",(x)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2183,2186,43>",(NaN)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<2193,2194,43>",(x)); Inst54++; } } catch(e) {}
  assertFalse(x >= NaN, "" + x + " >= NaN");
}

var b = ["NaN", "-1", "0", "1", "1.2", "-7.9", "true", "false", "'foo'", "'0'",
         "'NaN'" ];
try { if (Inst55 <= 1000 && typeof (b) != "undefined") {_RecordType("<2216,2217,46>",(b)); Inst55++; } } catch(e) {}
for (var i in b) {
try { if (Inst56 <= 1000 && typeof (i) != "undefined") {_RecordType("<2321,2322,48>",(i)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (b) != "undefined") {_RecordType("<2326,2327,48>",(b)); Inst57++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<2341,2345,49>",(b[i])); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (b) != "undefined") {_RecordType("<2341,2342,49>",(b)); Inst60++; } } catch(e) {}
  var x = b[i];
try { if (Inst58 <= 1000 && typeof (x) != "undefined") {_RecordType("<2337,2338,49>",(x)); Inst58++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (x) != "undefined") {_RecordType("<2393,2394,51>",(x)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (x) != "undefined") {_RecordType("<2416,2417,51>",(x)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (x) != "undefined") {_RecordType("<2460,2461,52>",(x)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (x) != "undefined") {_RecordType("<2484,2485,52>",(x)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (x) != "undefined") {_RecordType("<2526,2527,53>",(x)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (x) != "undefined") {_RecordType("<2548,2549,53>",(x)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (x) != "undefined") {_RecordType("<2590,2591,54>",(x)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (x) != "undefined") {_RecordType("<2612,2613,54>",(x)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (x) != "undefined") {_RecordType("<2655,2656,55>",(x)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<2678,2679,55>",(x)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (x) != "undefined") {_RecordType("<2721,2722,56>",(x)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (x) != "undefined") {_RecordType("<2744,2745,56>",(x)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (x) != "undefined") {_RecordType("<2781,2782,58>",(x)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (x) != "undefined") {_RecordType("<2804,2805,58>",(x)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (x) != "undefined") {_RecordType("<2852,2853,59>",(x)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (x) != "undefined") {_RecordType("<2876,2877,59>",(x)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (x) != "undefined") {_RecordType("<2925,2926,60>",(x)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (x) != "undefined") {_RecordType("<2947,2948,60>",(x)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (x) != "undefined") {_RecordType("<2994,2995,61>",(x)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (x) != "undefined") {_RecordType("<3016,3017,61>",(x)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (x) != "undefined") {_RecordType("<3063,3064,62>",(x)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (x) != "undefined") {_RecordType("<3086,3087,62>",(x)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (x) != "undefined") {_RecordType("<3134,3135,63>",(x)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (x) != "undefined") {_RecordType("<3157,3158,63>",(x)); Inst85++; } } catch(e) {}
  var program =
      "assertFalse(NaN == " + x + ", 'NaN == ' + " + x + ");\n" +
      "assertFalse(NaN === " + x + ", 'NaN === ' + " + x + ");\n" +
      "assertFalse(NaN < " + x + ", 'NaN < ' + " + x + ");\n" +
      "assertFalse(NaN > " + x + ", 'NaN > ' + " + x + ");\n" +
      "assertFalse(NaN <= " + x + ", 'NaN <= ' + " + x + ");\n" +
      "assertFalse(NaN >= " + x + ", 'NaN >= ' + " + x + ");\n" +

      "assertFalse(" + x + " == NaN, '' + " + x + " + ' == NaN');\n" +
      "assertFalse(" + x + " === NaN, '' + " + x + " + ' === NaN');\n" +
      "assertFalse(" + x + " < NaN, '' + " + x + " + ' < NaN');\n" +
      "assertFalse(" + x + " > NaN, '' + " + x + " + ' > NaN');\n" +
      "assertFalse(" + x + " <= NaN, '' + " + x + " + ' <= NaN');\n" +
      "assertFalse(" + x + " >= NaN, '' + " + x + " + ' >= NaN');\n";
try { if (Inst61 <= 1000 && typeof (program) != "undefined") {_RecordType("<2353,2360,50>",(program)); Inst61++; } } catch(e) {}
try { if (Inst86 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3183,3187,64>",(eval)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (program) != "undefined") {_RecordType("<3188,3195,64>",(program)); Inst87++; } } catch(e) {}
  eval(program);
}

