var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


try { if (Inst0 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<1608,1625,29>",(TestFunctionNames)); Inst0++; } } catch(e) {}
function TestFunctionNames(object, names) {
try { if (Inst1 <= 1000 && typeof (object) != "undefined") {_RecordType("<1626,1632,29>",(object)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (names) != "undefined") {_RecordType("<1634,1639,29>",(names)); Inst2++; } } catch(e) {}
  for (var i = 0; i < names.length; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1654,1655,30>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1661,1662,30>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (names.length) != "undefined") {_RecordType("<1665,1677,30>",(names.length)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (names) != "undefined") {_RecordType("<1665,1670,30>",(names)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1679,1680,30>",(i)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1690,1702,31>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (names[i]) != "undefined") {_RecordType("<1703,1711,31>",(names[i])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (names) != "undefined") {_RecordType("<1703,1708,31>",(names)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (object[names[i]].name) != "undefined") {_RecordType("<1713,1734,31>",(object[names[i]].name)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (object[names[i]]) != "undefined") {_RecordType("<1713,1729,31>",(object[names[i]])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (object) != "undefined") {_RecordType("<1713,1719,31>",(object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (names[i]) != "undefined") {_RecordType("<1720,1728,31>",(names[i])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (names) != "undefined") {_RecordType("<1720,1725,31>",(names)); Inst15++; } } catch(e) {}
    assertEquals(names[i], object[names[i]].name);
  }
}


// Array.prototype functions.
var arrayPrototypeFunctions = [
    "toString", "toLocaleString", "join", "pop", "push", "concat", "reverse",
    "shift", "unshift", "slice", "splice", "sort", "filter", "forEach",
    "some", "every", "map", "indexOf", "lastIndexOf"];
try { if (Inst16 <= 1000 && typeof (arrayPrototypeFunctions) != "undefined") {_RecordType("<1779,1802,37>",(arrayPrototypeFunctions)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<2013,2030,42>",(TestFunctionNames)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2031,2046,42>",(Array.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2031,2036,42>",(Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arrayPrototypeFunctions) != "undefined") {_RecordType("<2048,2071,42>",(arrayPrototypeFunctions)); Inst20++; } } catch(e) {}
TestFunctionNames(Array.prototype, arrayPrototypeFunctions);


// Boolean prototype functions.
var booleanPrototypeFunctions = [ "toString", "valueOf" ];
try { if (Inst21 <= 1000 && typeof (booleanPrototypeFunctions) != "undefined") {_RecordType("<2112,2137,46>",(booleanPrototypeFunctions)); Inst21++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<2168,2185,48>",(TestFunctionNames)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Boolean.prototype) != "undefined") {_RecordType("<2186,2203,48>",(Boolean.prototype)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<2186,2193,48>",(Boolean)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (booleanPrototypeFunctions) != "undefined") {_RecordType("<2205,2230,48>",(booleanPrototypeFunctions)); Inst25++; } } catch(e) {}
TestFunctionNames(Boolean.prototype, booleanPrototypeFunctions);


// Date functions.
var dateFunctions = ["UTC", "parse", "now"];
try { if (Inst26 <= 1000 && typeof (dateFunctions) != "undefined") {_RecordType("<2258,2271,52>",(dateFunctions)); Inst26++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<2300,2317,54>",(TestFunctionNames)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2318,2322,54>",(Date)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (dateFunctions) != "undefined") {_RecordType("<2324,2337,54>",(dateFunctions)); Inst29++; } } catch(e) {}
TestFunctionNames(Date, dateFunctions);


// Date.prototype functions.
var datePrototypeFunctions = [
    "toString", "toDateString", "toTimeString", "toLocaleString",
    "toLocaleDateString", "toLocaleTimeString", "valueOf", "getTime",
    "getFullYear", "getUTCFullYear", "getMonth", "getUTCMonth",
    "getDate", "getUTCDate", "getDay", "getUTCDay", "getHours",
    "getUTCHours", "getMinutes", "getUTCMinutes", "getSeconds",
    "getUTCSeconds", "getMilliseconds", "getUTCMilliseconds",
    "getTimezoneOffset", "setTime", "setMilliseconds",
    "setUTCMilliseconds", "setSeconds", "setUTCSeconds", "setMinutes",
    "setUTCMinutes", "setHours", "setUTCHours", "setDate", "setUTCDate",
    "setMonth", "setUTCMonth", "setFullYear", "setUTCFullYear",
    "toUTCString", "getYear", "setYear"];
try { if (Inst30 <= 1000 && typeof (datePrototypeFunctions) != "undefined") {_RecordType("<2375,2397,58>",(datePrototypeFunctions)); Inst30++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<3098,3115,71>",(TestFunctionNames)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Date.prototype) != "undefined") {_RecordType("<3116,3130,71>",(Date.prototype)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Date) != "undefined") {_RecordType("<3116,3120,71>",(Date)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (datePrototypeFunctions) != "undefined") {_RecordType("<3132,3154,71>",(datePrototypeFunctions)); Inst34++; } } catch(e) {}
TestFunctionNames(Date.prototype, datePrototypeFunctions);
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3157,3169,72>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Date.prototype.toGMTString) != "undefined") {_RecordType("<3170,3196,72>",(Date.prototype.toGMTString)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Date.prototype) != "undefined") {_RecordType("<3170,3184,72>",(Date.prototype)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Date) != "undefined") {_RecordType("<3170,3174,72>",(Date)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Date.prototype.toUTCString) != "undefined") {_RecordType("<3198,3224,72>",(Date.prototype.toUTCString)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Date.prototype) != "undefined") {_RecordType("<3198,3212,72>",(Date.prototype)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Date) != "undefined") {_RecordType("<3198,3202,72>",(Date)); Inst41++; } } catch(e) {}
assertEquals(Date.prototype.toGMTString, Date.prototype.toUTCString);


// Function.prototype functions.
var functionPrototypeFunctions = [ "toString", "apply", "call" ];
try { if (Inst42 <= 1000 && typeof (functionPrototypeFunctions) != "undefined") {_RecordType("<3266,3292,76>",(functionPrototypeFunctions)); Inst42++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<3329,3346,78>",(TestFunctionNames)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<3347,3365,78>",(Function.prototype)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Function) != "undefined") {_RecordType("<3347,3355,78>",(Function)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (functionPrototypeFunctions) != "undefined") {_RecordType("<3367,3393,78>",(functionPrototypeFunctions)); Inst46++; } } catch(e) {}
TestFunctionNames(Function.prototype, functionPrototypeFunctions);

// Math functions.
var mathFunctions = [
    "random", "abs", "acos", "asin", "atan", "ceil", "cos", "exp", "floor",
    "log", "round", "sin", "sqrt", "tan", "atan2", "pow", "max", "min"];
try { if (Inst47 <= 1000 && typeof (mathFunctions) != "undefined") {_RecordType("<3420,3433,81>",(mathFunctions)); Inst47++; } } catch(e) {}

try { if (Inst48 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<3588,3605,85>",(TestFunctionNames)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Math) != "undefined") {_RecordType("<3606,3610,85>",(Math)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (mathFunctions) != "undefined") {_RecordType("<3612,3625,85>",(mathFunctions)); Inst50++; } } catch(e) {}
TestFunctionNames(Math, mathFunctions);


// Number.prototype functions.
var numberPrototypeFunctions = [
    "toString", "toLocaleString", "valueOf", "toFixed", "toExponential",
    "toPrecision"];
try { if (Inst51 <= 1000 && typeof (numberPrototypeFunctions) != "undefined") {_RecordType("<3665,3689,89>",(numberPrototypeFunctions)); Inst51++; } } catch(e) {}

try { if (Inst52 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<3788,3805,93>",(TestFunctionNames)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<3806,3822,93>",(Number.prototype)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Number) != "undefined") {_RecordType("<3806,3812,93>",(Number)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (numberPrototypeFunctions) != "undefined") {_RecordType("<3824,3848,93>",(numberPrototypeFunctions)); Inst55++; } } catch(e) {}
TestFunctionNames(Number.prototype, numberPrototypeFunctions);

// Object.prototype functions.
var objectPrototypeFunctions = [
    "toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf",
    "propertyIsEnumerable", "__defineGetter__", "__lookupGetter__",
    "__defineSetter__", "__lookupSetter__"];
try { if (Inst56 <= 1000 && typeof (objectPrototypeFunctions) != "undefined") {_RecordType("<3887,3911,96>",(objectPrototypeFunctions)); Inst56++; } } catch(e) {}

try { if (Inst57 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<4110,4127,101>",(TestFunctionNames)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<4128,4144,101>",(Object.prototype)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Object) != "undefined") {_RecordType("<4128,4134,101>",(Object)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (objectPrototypeFunctions) != "undefined") {_RecordType("<4146,4170,101>",(objectPrototypeFunctions)); Inst60++; } } catch(e) {}
TestFunctionNames(Object.prototype, objectPrototypeFunctions);

// RegExp.prototype functions.
var regExpPrototypeFunctions = ["exec", "test", "toString", "compile"];
try { if (Inst61 <= 1000 && typeof (regExpPrototypeFunctions) != "undefined") {_RecordType("<4209,4233,104>",(regExpPrototypeFunctions)); Inst61++; } } catch(e) {}

try { if (Inst62 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<4278,4295,106>",(TestFunctionNames)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<4296,4312,106>",(RegExp.prototype)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<4296,4302,106>",(RegExp)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (regExpPrototypeFunctions) != "undefined") {_RecordType("<4314,4338,106>",(regExpPrototypeFunctions)); Inst65++; } } catch(e) {}
TestFunctionNames(RegExp.prototype, regExpPrototypeFunctions);

// String functions.
var stringFunctions = ["fromCharCode"];
try { if (Inst66 <= 1000 && typeof (stringFunctions) != "undefined") {_RecordType("<4367,4382,109>",(stringFunctions)); Inst66++; } } catch(e) {}

try { if (Inst67 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<4404,4421,111>",(TestFunctionNames)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (String) != "undefined") {_RecordType("<4422,4428,111>",(String)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (stringFunctions) != "undefined") {_RecordType("<4430,4445,111>",(stringFunctions)); Inst69++; } } catch(e) {}
TestFunctionNames(String, stringFunctions);


// String.prototype functions.
var stringPrototypeFunctions = [
    "toString", "valueOf", "charAt", "charCodeAt", "concat", "indexOf",
    "lastIndexOf", "localeCompare", "match", "replace", "search", "slice",
    "split", "substring", "substr", "toLowerCase", "toLocaleLowerCase",
    "toUpperCase", "toLocaleUpperCase", "link", "anchor", "fontcolor",
    "fontsize", "big", "blink", "bold", "fixed", "italics", "small",
    "strike", "sub", "sup"];
try { if (Inst70 <= 1000 && typeof (stringPrototypeFunctions) != "undefined") {_RecordType("<4485,4509,115>",(stringPrototypeFunctions)); Inst70++; } } catch(e) {}

try { if (Inst71 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<4903,4920,123>",(TestFunctionNames)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<4921,4937,123>",(String.prototype)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (String) != "undefined") {_RecordType("<4921,4927,123>",(String)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (stringPrototypeFunctions) != "undefined") {_RecordType("<4939,4963,123>",(stringPrototypeFunctions)); Inst74++; } } catch(e) {}
TestFunctionNames(String.prototype, stringPrototypeFunctions);


// Global functions.
var globalFunctions = [
    "escape", "unescape", "decodeURI", "decodeURIComponent",
    "encodeURI", "encodeURIComponent", "Error", "TypeError",
    "RangeError", "SyntaxError", "ReferenceError", "EvalError",
    "URIError", "isNaN", "isFinite", "parseInt", "parseFloat",
    "eval"];
try { if (Inst75 <= 1000 && typeof (globalFunctions) != "undefined") {_RecordType("<4993,5008,127>",(globalFunctions)); Inst75++; } } catch(e) {}

try { if (Inst76 <= 1000 && typeof (TestFunctionNames) != "undefined") {_RecordType("<5276,5293,134>",(TestFunctionNames)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (globalFunctions) != "undefined") {_RecordType("<5300,5315,134>",(globalFunctions)); Inst77++; } } catch(e) {}
TestFunctionNames(this, globalFunctions);

