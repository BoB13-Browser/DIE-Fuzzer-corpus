var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug --noalways-opt
// Get the Debug object exposed from the debug context global object.

// In this test case we edit a script so that techincally function text
// hasen't been changed. However actually function became one level more nested
// and must be recompiled because it uses variable from outer scope.


try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1949,1960,36>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1949,1954,36>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1941,1946,36>",(Debug)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1962,1966,38>",(eval)); Inst3++; } } catch(e) {}
eval(
"function TestFunction() {\n"
+ "  var a = 'a';\n"
+ "  var b = 'b';\n"
+ "  var c = 'c';\n"
+ "  function A() {\n"
+ "    return 2013;\n"
+ "  }\n"
+ "  function B() {\n"
+ "    return String([a, c]);\n"
+ "  }\n"
+ "  return B();\n"
+ "}\n"
);

try { if (Inst5 <= 1000 && typeof (TestFunction) != "undefined") {_RecordType("<2225,2237,53>",(TestFunction)); Inst5++; } } catch(e) {}
var res = TestFunction();
try { if (Inst4 <= 1000 && typeof (res) != "undefined") {_RecordType("<2219,2222,53>",(res)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<2241,2246,54>",(print)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (res) != "undefined") {_RecordType("<2247,2250,54>",(res)); Inst7++; } } catch(e) {}
print(res);
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2253,2265,55>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (res) != "undefined") {_RecordType("<2273,2276,55>",(res)); Inst9++; } } catch(e) {}
assertEquals('a,c', res);

try { if (Inst11 <= 1000 && typeof (Debug.findScript) != "undefined") {_RecordType("<2293,2309,57>",(Debug.findScript)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2293,2298,57>",(Debug)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (TestFunction) != "undefined") {_RecordType("<2310,2322,57>",(TestFunction)); Inst13++; } } catch(e) {}
var script = Debug.findScript(TestFunction);
try { if (Inst10 <= 1000 && typeof (script) != "undefined") {_RecordType("<2284,2290,57>",(script)); Inst10++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (script.source.replace) != "undefined") {_RecordType("<2342,2363,58>",(script.source.replace)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (script.source) != "undefined") {_RecordType("<2342,2355,58>",(script.source)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (script) != "undefined") {_RecordType("<2342,2348,58>",(script)); Inst17++; } } catch(e) {}
var new_source = script.source.replace("2013", "b");
try { if (Inst14 <= 1000 && typeof (new_source) != "undefined") {_RecordType("<2329,2339,58>",(new_source)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<2378,2383,59>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (new_source) != "undefined") {_RecordType("<2401,2411,59>",(new_source)); Inst19++; } } catch(e) {}
print("new source: " + new_source);
try { if (Inst21 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2435,2440,60>",(Array)); Inst21++; } } catch(e) {}
var change_log = new Array();
try { if (Inst20 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2418,2428,60>",(change_log)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (Debug.LiveEdit.SetScriptSource) != "undefined") {_RecordType("<2457,2487,61>",(Debug.LiveEdit.SetScriptSource)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Debug.LiveEdit) != "undefined") {_RecordType("<2457,2471,61>",(Debug.LiveEdit)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2457,2462,61>",(Debug)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (script) != "undefined") {_RecordType("<2488,2494,61>",(script)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (new_source) != "undefined") {_RecordType("<2496,2506,61>",(new_source)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2515,2525,61>",(change_log)); Inst28++; } } catch(e) {}
var result = Debug.LiveEdit.SetScriptSource(script, new_source, false, change_log);
try { if (Inst22 <= 1000 && typeof (result) != "undefined") {_RecordType("<2448,2454,61>",(result)); Inst22++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<2529,2534,63>",(print)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2548,2562,63>",(JSON.stringify)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2548,2552,63>",(JSON)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<2563,2569,63>",(result)); Inst32++; } } catch(e) {}
print("Result: " + JSON.stringify(result) + "\n");
try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<2580,2585,64>",(print)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2603,2617,64>",(JSON.stringify)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2603,2607,64>",(JSON)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2618,2628,64>",(change_log)); Inst36++; } } catch(e) {}
print("Change log: " + JSON.stringify(change_log) + "\n");

try { if (Inst38 <= 1000 && typeof (TestFunction) != "undefined") {_RecordType("<2650,2662,66>",(TestFunction)); Inst38++; } } catch(e) {}
var res = TestFunction();
try { if (Inst37 <= 1000 && typeof (res) != "undefined") {_RecordType("<2644,2647,66>",(res)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (print) != "undefined") {_RecordType("<2666,2671,67>",(print)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (res) != "undefined") {_RecordType("<2672,2675,67>",(res)); Inst40++; } } catch(e) {}
print(res);
// This might be 'a,b' without a bug fixed.
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2722,2734,69>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (res) != "undefined") {_RecordType("<2742,2745,69>",(res)); Inst42++; } } catch(e) {}
assertEquals('a,c', res);

