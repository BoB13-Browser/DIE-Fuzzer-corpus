var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that the various conversions between property names are correctly
// used when overwriting initializers.

var test1 = { 13: 6, "13": 7 };
try { if (Inst0 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1716,1721,31>",(test1)); Inst0++; } } catch(e) {}
var test2 = { 13: 7, "13.0": 6 };
try { if (Inst1 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1748,1753,32>",(test2)); Inst1++; } } catch(e) {}
var test3 = { "13": 6, 13.0000000000000000: 7 };
try { if (Inst2 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1782,1787,33>",(test3)); Inst2++; } } catch(e) {}
var test4 = { 13.213000: 6, "13.213": 7 };
try { if (Inst3 <= 1000 && typeof (test4) != "undefined") {_RecordType("<1831,1836,34>",(test4)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1871,1883,36>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (test1[13]) != "undefined") {_RecordType("<1887,1896,36>",(test1[13])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1887,1892,36>",(test1)); Inst6++; } } catch(e) {}
assertEquals(7, test1[13]);
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1899,1911,37>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (test2[13]) != "undefined") {_RecordType("<1915,1924,37>",(test2[13])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1915,1920,37>",(test2)); Inst9++; } } catch(e) {}
assertEquals(7, test2[13]);
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1927,1939,38>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (test3[13]) != "undefined") {_RecordType("<1943,1952,38>",(test3[13])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1943,1948,38>",(test3)); Inst12++; } } catch(e) {}
assertEquals(7, test3[13]);
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1955,1967,39>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (test4[13.213]) != "undefined") {_RecordType("<1971,1984,39>",(test4[13.213])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (test4) != "undefined") {_RecordType("<1971,1976,39>",(test4)); Inst15++; } } catch(e) {}
assertEquals(7, test4[13.213]);

var test5 = { 13: function() {}, "13": 7 };
try { if (Inst16 <= 1000 && typeof (test5) != "undefined") {_RecordType("<1992,1997,41>",(test5)); Inst16++; } } catch(e) {}
var test6 = { 17.31: function() {}, "17.31": 7 };
try { if (Inst17 <= 1000 && typeof (test6) != "undefined") {_RecordType("<2036,2041,42>",(test6)); Inst17++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2083,2095,44>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (test5[13]) != "undefined") {_RecordType("<2099,2108,44>",(test5[13])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (test5) != "undefined") {_RecordType("<2099,2104,44>",(test5)); Inst20++; } } catch(e) {}
assertEquals(7, test5[13]);
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2111,2123,45>",(assertEquals)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (test6[17.31]) != "undefined") {_RecordType("<2127,2139,45>",(test6[17.31])); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (test6) != "undefined") {_RecordType("<2127,2132,45>",(test6)); Inst23++; } } catch(e) {}
assertEquals(7, test6[17.31]);

