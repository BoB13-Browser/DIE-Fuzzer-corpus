var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

let regexp = /x/g;
try { if (Inst0 <= 1000 && typeof (regexp) != "undefined") {_RecordType("<187,193,7>",(regexp)); Inst0++; } } catch(e) {}

regexp.lastIndex = -1;
try { if (Inst1 <= 1000 && typeof (regexp.lastIndex) != "undefined") {_RecordType("<203,219,9>",(regexp.lastIndex)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (regexp) != "undefined") {_RecordType("<203,209,9>",(regexp)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<227,237,11>",(assertTrue)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (regexp.test) != "undefined") {_RecordType("<238,249,11>",(regexp.test)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (regexp) != "undefined") {_RecordType("<238,244,11>",(regexp)); Inst5++; } } catch(e) {}
assertTrue(regexp.test("axb"));
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<259,271,12>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (regexp.lastIndex) != "undefined") {_RecordType("<275,291,12>",(regexp.lastIndex)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (regexp) != "undefined") {_RecordType("<275,281,12>",(regexp)); Inst8++; } } catch(e) {}
assertEquals(2, regexp.lastIndex);

regexp.lastIndex = -1;
try { if (Inst9 <= 1000 && typeof (regexp.lastIndex) != "undefined") {_RecordType("<295,311,14>",(regexp.lastIndex)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (regexp) != "undefined") {_RecordType("<295,301,14>",(regexp)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<319,331,16>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (regexp.exec("axb")[0]) != "undefined") {_RecordType("<337,358,16>",(regexp.exec("axb")[0])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (regexp.exec) != "undefined") {_RecordType("<337,348,16>",(regexp.exec)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (regexp) != "undefined") {_RecordType("<337,343,16>",(regexp)); Inst14++; } } catch(e) {}
assertEquals("x", regexp.exec("axb")[0]);
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<361,373,17>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (regexp.lastIndex) != "undefined") {_RecordType("<377,393,17>",(regexp.lastIndex)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (regexp) != "undefined") {_RecordType("<377,383,17>",(regexp)); Inst17++; } } catch(e) {}
assertEquals(2, regexp.lastIndex);

