var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<201,211,6>",(Uint8Array)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<215,224,7>",(Int8Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<228,239,8>",(Uint16Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<243,253,9>",(Int16Array)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<257,268,10>",(Uint32Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<272,282,11>",(Int32Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<286,303,12>",(Uint8ClampedArray)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<307,319,13>",(Float32Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<323,335,14>",(Float64Array)); Inst9++; } } catch(e) {}
var typedArrayConstructors = [
  Uint8Array,
  Int8Array,
  Uint16Array,
  Int16Array,
  Uint32Array,
  Int32Array,
  Uint8ClampedArray,
  Float32Array,
  Float64Array
];
try { if (Inst0 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<172,194,5>",(typedArrayConstructors)); Inst0++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<349,370,17>",(assertArrayLikeEquals)); Inst10++; } } catch(e) {}
function assertArrayLikeEquals(value, expected, type) {
try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<371,376,17>",(value)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (expected) != "undefined") {_RecordType("<378,386,17>",(expected)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (type) != "undefined") {_RecordType("<388,392,17>",(type)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<398,410,18>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (value.__proto__) != "undefined") {_RecordType("<411,426,18>",(value.__proto__)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<411,416,18>",(value)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (type.prototype) != "undefined") {_RecordType("<428,442,18>",(type.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (type) != "undefined") {_RecordType("<428,432,18>",(type)); Inst18++; } } catch(e) {}
  assertEquals(value.__proto__, type.prototype);
  // Don't test value.length because we mess with that;
  // instead in certain callsites we check that length
  // is set appropriately.
  for (var i = 0; i < expected.length; ++i) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<594,595,22>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<601,602,22>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (expected.length) != "undefined") {_RecordType("<605,620,22>",(expected.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (expected) != "undefined") {_RecordType("<605,613,22>",(expected)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<624,625,22>",(i)); Inst23++; } } catch(e) {}
    // Use Object.is to differentiate between +-0
try { if (Inst24 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<683,693,24>",(assertSame)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (expected[i]) != "undefined") {_RecordType("<694,705,24>",(expected[i])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (expected) != "undefined") {_RecordType("<694,702,24>",(expected)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (value[i]) != "undefined") {_RecordType("<707,715,24>",(value[i])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (value) != "undefined") {_RecordType("<707,712,24>",(value)); Inst28++; } } catch(e) {}
    assertSame(expected[i], value[i]);
  }
}

for (var constructor of typedArrayConstructors) {
try { if (Inst29 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<734,745,28>",(constructor)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (typedArrayConstructors) != "undefined") {_RecordType("<749,771,28>",(typedArrayConstructors)); Inst30++; } } catch(e) {}
  // Test default numerical sorting order
try { if (Inst32 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<831,842,30>",(constructor)); Inst32++; } } catch(e) {}
  var a = new constructor([100, 7, 45])
try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<823,824,30>",(a)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<859,871,31>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (a.sort) != "undefined") {_RecordType("<872,878,31>",(a.sort)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<872,873,31>",(a)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<882,883,31>",(a)); Inst36++; } } catch(e) {}
  assertEquals(a.sort(), a);
try { if (Inst37 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<888,909,32>",(assertArrayLikeEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (a) != "undefined") {_RecordType("<910,911,32>",(a)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<927,938,32>",(constructor)); Inst39++; } } catch(e) {}
  assertArrayLikeEquals(a, [7, 45, 100], constructor);
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<943,955,33>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<956,964,33>",(a.length)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<956,957,33>",(a)); Inst42++; } } catch(e) {}
  assertEquals(a.length, 3);

  // For arrays of floats, certain handling of +-0/NaN
try { if (Inst43 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1032,1043,36>",(constructor)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<1048,1060,36>",(Float32Array)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1064,1075,36>",(constructor)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<1080,1092,36>",(Float64Array)); Inst46++; } } catch(e) {}
  if (constructor === Float32Array || constructor === Float64Array) {
try { if (Inst48 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1112,1123,37>",(constructor)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1133,1136,37>",(NaN)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1142,1145,37>",(NaN)); Inst50++; } } catch(e) {}
    var b = new constructor([+0, -0, NaN, -0, NaN, +0])
try { if (Inst47 <= 1000 && typeof (b) != "undefined") {_RecordType("<1104,1105,37>",(b)); Inst47++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (b.sort) != "undefined") {_RecordType("<1156,1162,38>",(b.sort)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (b) != "undefined") {_RecordType("<1156,1157,38>",(b)); Inst52++; } } catch(e) {}
    b.sort();
try { if (Inst53 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<1170,1191,39>",(assertArrayLikeEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (b) != "undefined") {_RecordType("<1192,1193,39>",(b)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1212,1215,39>",(NaN)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1217,1220,39>",(NaN)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1223,1234,39>",(constructor)); Inst57++; } } catch(e) {}
    assertArrayLikeEquals(b, [-0, -0, +0, +0, NaN, NaN], constructor);
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1241,1253,40>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<1254,1262,40>",(b.length)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (b) != "undefined") {_RecordType("<1254,1255,40>",(b)); Inst60++; } } catch(e) {}
    assertEquals(b.length, 6);
  }

  // Custom sort--backwards
try { if (Inst61 <= 1000 && typeof (a.sort) != "undefined") {_RecordType("<1303,1309,44>",(a.sort)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (a) != "undefined") {_RecordType("<1303,1304,44>",(a)); Inst62++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (y) != "undefined") {_RecordType("<1334,1335,44>",(y)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (x) != "undefined") {_RecordType("<1338,1339,44>",(x)); Inst66++; } } catch(e) {}
  a.sort(function(x, y) { return y - x; });
try { if (Inst63 <= 1000 && typeof (x) != "undefined") {_RecordType("<1319,1320,44>",(x)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (y) != "undefined") {_RecordType("<1322,1323,44>",(y)); Inst64++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<1347,1368,45>",(assertArrayLikeEquals)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (a) != "undefined") {_RecordType("<1369,1370,45>",(a)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1386,1397,45>",(constructor)); Inst69++; } } catch(e) {}
  assertArrayLikeEquals(a, [100, 45, 7], constructor);

  // Basic TypedArray method properties:
  // Length field is ignored
try { if (Inst70 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1473,1494,49>",(Object.defineProperty)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1473,1479,49>",(Object)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (a) != "undefined") {_RecordType("<1495,1496,49>",(a)); Inst72++; } } catch(e) {}
  Object.defineProperty(a, 'length', {value: 1});
try { if (Inst73 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1523,1535,50>",(assertEquals)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (a.sort) != "undefined") {_RecordType("<1536,1542,50>",(a.sort)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (a) != "undefined") {_RecordType("<1536,1537,50>",(a)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (a) != "undefined") {_RecordType("<1546,1547,50>",(a)); Inst76++; } } catch(e) {}
  assertEquals(a.sort(), a);
try { if (Inst77 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<1552,1573,51>",(assertArrayLikeEquals)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (a) != "undefined") {_RecordType("<1574,1575,51>",(a)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1591,1602,51>",(constructor)); Inst79++; } } catch(e) {}
  assertArrayLikeEquals(a, [7, 45, 100], constructor);
try { if (Inst80 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1607,1619,52>",(assertEquals)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1620,1628,52>",(a.length)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (a) != "undefined") {_RecordType("<1620,1621,52>",(a)); Inst82++; } } catch(e) {}
  assertEquals(a.length, 1);
  // Method doesn't work on other objects
try { if (Inst83 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1678,1690,54>",(assertThrows)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (a.sort.call) != "undefined") {_RecordType("<1704,1715,54>",(a.sort.call)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (a.sort) != "undefined") {_RecordType("<1704,1710,54>",(a.sort)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (a) != "undefined") {_RecordType("<1704,1705,54>",(a)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1724,1733,54>",(TypeError)); Inst87++; } } catch(e) {}
  assertThrows(function() { a.sort.call([]); }, TypeError);
}

