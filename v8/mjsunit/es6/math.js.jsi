var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (testMathToString) != "undefined") {_RecordType("<177,193,5>",(testMathToString)); Inst0++; } } catch(e) {}
function testMathToString() {
try { if (Inst1 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<200,212,6>",(assertEquals)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<235,239,6>",(Math)); Inst2++; } } catch(e) {}
  assertEquals('[object Math]', "" + Math);
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<244,256,7>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Math[Symbol.toStringTag]) != "undefined") {_RecordType("<265,289,7>",(Math[Symbol.toStringTag])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<265,269,7>",(Math)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<270,288,7>",(Symbol.toStringTag)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<270,276,7>",(Symbol)); Inst7++; } } catch(e) {}
  assertEquals("Math", Math[Symbol.toStringTag]);
try { if (Inst9 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<305,336,8>",(Object.getOwnPropertyDescriptor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<305,311,8>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math) != "undefined") {_RecordType("<337,341,8>",(Math)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<343,361,8>",(Symbol.toStringTag)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<343,349,8>",(Symbol)); Inst13++; } } catch(e) {}
  var desc = Object.getOwnPropertyDescriptor(Math, Symbol.toStringTag);
try { if (Inst8 <= 1000 && typeof (desc) != "undefined") {_RecordType("<298,302,8>",(desc)); Inst8++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<366,376,9>",(assertTrue)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<377,394,9>",(desc.configurable)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (desc) != "undefined") {_RecordType("<377,381,9>",(desc)); Inst16++; } } catch(e) {}
  assertTrue(desc.configurable);
try { if (Inst17 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<399,410,10>",(assertFalse)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<411,424,10>",(desc.writable)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (desc) != "undefined") {_RecordType("<411,415,10>",(desc)); Inst19++; } } catch(e) {}
  assertFalse(desc.writable);
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<429,441,11>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (desc.value) != "undefined") {_RecordType("<450,460,11>",(desc.value)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (desc) != "undefined") {_RecordType("<450,454,11>",(desc)); Inst22++; } } catch(e) {}
  assertEquals("Math", desc.value);
try { if (Inst23 <= 1000 && typeof (Math[Symbol.toStringTag]) != "undefined") {_RecordType("<472,496,12>",(Math[Symbol.toStringTag])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<472,476,12>",(Math)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol.toStringTag) != "undefined") {_RecordType("<477,495,12>",(Symbol.toStringTag)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<477,483,12>",(Symbol)); Inst26++; } } catch(e) {}
  delete Math[Symbol.toStringTag];
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<500,512,13>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<537,541,13>",(Math)); Inst28++; } } catch(e) {}
  assertEquals('[object Object]', "" + Math);
}
try { if (Inst29 <= 1000 && typeof (testMathToString) != "undefined") {_RecordType("<546,562,15>",(testMathToString)); Inst29++; } } catch(e) {}
testMathToString();

