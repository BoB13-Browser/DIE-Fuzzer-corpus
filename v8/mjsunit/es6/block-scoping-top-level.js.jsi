var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --min-preparse-length=0
'use strict';

let xxx = 1;
try { if (Inst0 <= 1000 && typeof (xxx) != "undefined") {_RecordType("<221,224,8>",(xxx)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<238,247,9>",(undefined)); Inst2++; } } catch(e) {}
let f = undefined;
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<234,235,9>",(f)); Inst1++; } } catch(e) {}
{
try { if (Inst4 <= 1000 && typeof (xxx) != "undefined") {_RecordType("<267,270,11>",(xxx)); Inst4++; } } catch(e) {}
  let inner_x = xxx;
try { if (Inst3 <= 1000 && typeof (inner_x) != "undefined") {_RecordType("<257,264,11>",(inner_x)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (inner_x) != "undefined") {_RecordType("<298,305,12>",(inner_x)); Inst6++; } } catch(e) {}
  f = function() { return inner_x; };
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<274,275,12>",(f)); Inst5++; } } catch(e) {}
}

try { if (Inst7 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<313,323,15>",(assertSame)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<327,328,15>",(f)); Inst8++; } } catch(e) {}
assertSame(1, f());

xxx = 42;
try { if (Inst9 <= 1000 && typeof (xxx) != "undefined") {_RecordType("<334,337,17>",(xxx)); Inst9++; } } catch(e) {}
{
try { if (Inst11 <= 1000 && typeof (inner_x1) != "undefined") {_RecordType("<372,380,19>",(inner_x1)); Inst11++; } } catch(e) {}
  f = function() { return inner_x1; };
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<348,349,19>",(f)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (xxx) != "undefined") {_RecordType("<402,405,20>",(xxx)); Inst13++; } } catch(e) {}
  let inner_x1 = xxx;
try { if (Inst12 <= 1000 && typeof (inner_x1) != "undefined") {_RecordType("<391,399,20>",(inner_x1)); Inst12++; } } catch(e) {}
}

try { if (Inst14 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<410,420,23>",(assertSame)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<425,426,23>",(f)); Inst15++; } } catch(e) {}
assertSame(42, f());

xxx = 31;
try { if (Inst16 <= 1000 && typeof (xxx) != "undefined") {_RecordType("<432,435,25>",(xxx)); Inst16++; } } catch(e) {}
{
try { if (Inst18 <= 1000 && typeof (xxx) != "undefined") {_RecordType("<461,464,27>",(xxx)); Inst18++; } } catch(e) {}
  let inner_x1 = xxx;
try { if (Inst17 <= 1000 && typeof (inner_x1) != "undefined") {_RecordType("<450,458,27>",(inner_x1)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<508,509,30>",(e)); Inst20++; } } catch(e) {}
  try {
try { if (Inst19 <= 1000 && typeof (Error) != "undefined") {_RecordType("<488,493,29>",(Error)); Inst19++; } } catch(e) {}
    throw new Error();
  } catch (e) {
try { if (Inst22 <= 1000 && typeof (inner_x1) != "undefined") {_RecordType("<541,549,31>",(inner_x1)); Inst22++; } } catch(e) {}
    f = function() { return inner_x1; };
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<517,518,31>",(f)); Inst21++; } } catch(e) {}
  }
}
try { if (Inst23 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<560,570,34>",(assertSame)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<575,576,34>",(f)); Inst24++; } } catch(e) {}
assertSame(31, f());

