var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst1 <= 1000 && typeof (Realm.create) != "undefined") {_RecordType("<180,192,5>",(Realm.create)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Realm) != "undefined") {_RecordType("<180,185,5>",(Realm)); Inst2++; } } catch(e) {}
var realm = Realm.create();
try { if (Inst0 <= 1000 && typeof (realm) != "undefined") {_RecordType("<172,177,5>",(realm)); Inst0++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<218,223,7>",(Proxy)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (getPrototypeOf) != "undefined") {_RecordType("<232,246,8>",(getPrototypeOf)); Inst5++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (get) != "undefined") {_RecordType("<276,279,9>",(get)); Inst7++; } } catch(e) {}
this.__proto__ = new Proxy({}, {
try { if (Inst6 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<251,268,8>",(assertUnreachable)); Inst6++; } } catch(e) {}
  getPrototypeOf() { assertUnreachable() },
try { if (Inst8 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<284,301,9>",(assertUnreachable)); Inst8++; } } catch(e) {}
  get() { assertUnreachable() }
});
try { if (Inst3 <= 1000 && typeof (this.__proto__) != "undefined") {_RecordType("<197,211,7>",(this.__proto__)); Inst3++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (Realm.eval) != "undefined") {_RecordType("<334,344,12>",(Realm.eval)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Realm) != "undefined") {_RecordType("<334,339,12>",(Realm)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (realm) != "undefined") {_RecordType("<345,350,12>",(realm)); Inst12++; } } catch(e) {}
var other_type_error = Realm.eval(realm, "TypeError");
try { if (Inst9 <= 1000 && typeof (other_type_error) != "undefined") {_RecordType("<315,331,12>",(other_type_error)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<366,378,13>",(assertThrows)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Realm.eval) != "undefined") {_RecordType("<385,395,13>",(Realm.eval)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Realm) != "undefined") {_RecordType("<385,390,13>",(Realm)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (realm) != "undefined") {_RecordType("<396,401,13>",(realm)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (other_type_error) != "undefined") {_RecordType("<427,443,13>",(other_type_error)); Inst17++; } } catch(e) {}
assertThrows(() => Realm.eval(realm, "Realm.global(0).foo"), other_type_error);

