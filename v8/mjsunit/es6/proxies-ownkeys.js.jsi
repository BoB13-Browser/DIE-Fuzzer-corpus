var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var target = {
  "target_one": 1
};
try { if (Inst0 <= 1000 && typeof (target) != "undefined") {_RecordType("<172,178,5>",(target)); Inst0++; } } catch(e) {}
target.__proto__ = {
  "target_proto_two": 2
};
try { if (Inst1 <= 1000 && typeof (target.__proto__) != "undefined") {_RecordType("<204,220,8>",(target.__proto__)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (target) != "undefined") {_RecordType("<204,210,8>",(target)); Inst2++; } } catch(e) {}
var handler = {
  ownKeys: function(target) {
try { if (Inst4 <= 1000 && typeof (target) != "undefined") {_RecordType("<288,294,12>",(target)); Inst4++; } } catch(e) {}
    return ["foo", "bar"];
  }
}
try { if (Inst3 <= 1000 && typeof (handler) != "undefined") {_RecordType("<256,263,11>",(handler)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<348,353,17>",(Proxy)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (target) != "undefined") {_RecordType("<354,360,17>",(target)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (handler) != "undefined") {_RecordType("<362,369,17>",(handler)); Inst8++; } } catch(e) {}
var proxy = new Proxy(target, handler);
try { if (Inst5 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<336,341,17>",(proxy)); Inst5++; } } catch(e) {}

// Simple case.
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<389,401,20>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<418,433,20>",(Reflect.ownKeys)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<418,425,20>",(Reflect)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<434,439,20>",(proxy)); Inst12++; } } catch(e) {}
assertEquals(["foo", "bar"], Reflect.ownKeys(proxy));

// Test interesting steps of the algorithm:

// Step 6: Fall through to target.[[OwnPropertyKeys]] if the trap is undefined.
try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<587,596,25>",(undefined)); Inst15++; } } catch(e) {}
handler.ownKeys = undefined;
try { if (Inst13 <= 1000 && typeof (handler.ownKeys) != "undefined") {_RecordType("<569,584,25>",(handler.ownKeys)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (handler) != "undefined") {_RecordType("<569,576,25>",(handler)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<598,610,26>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<627,642,26>",(Reflect.ownKeys)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<627,634,26>",(Reflect)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<643,648,26>",(proxy)); Inst19++; } } catch(e) {}
assertEquals(["target_one"], Reflect.ownKeys(proxy));

// Step 7: Throwing traps don't crash.
handler.ownKeys = function(target) { throw 1; };
try { if (Inst20 <= 1000 && typeof (handler.ownKeys) != "undefined") {_RecordType("<692,707,29>",(handler.ownKeys)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (handler) != "undefined") {_RecordType("<692,699,29>",(handler)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (target) != "undefined") {_RecordType("<719,725,29>",(target)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<741,753,30>",(assertThrows)); Inst23++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)");

// Step 8: CreateListFromArrayLike error cases:
// Returning a non-Object throws.
var keys = 1;
try { if (Inst24 <= 1000 && typeof (keys) != "undefined") {_RecordType("<868,872,34>",(keys)); Inst24++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (keys) != "undefined") {_RecordType("<922,926,35>",(keys)); Inst28++; } } catch(e) {}
handler.ownKeys = function(target) { return keys; };
try { if (Inst25 <= 1000 && typeof (handler.ownKeys) != "undefined") {_RecordType("<878,893,35>",(handler.ownKeys)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (handler) != "undefined") {_RecordType("<878,885,35>",(handler)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (target) != "undefined") {_RecordType("<905,911,35>",(target)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<931,943,36>",(assertThrows)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<970,979,36>",(TypeError)); Inst30++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);
keys = "string";
try { if (Inst31 <= 1000 && typeof (keys) != "undefined") {_RecordType("<982,986,37>",(keys)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<999,1011,38>",(assertThrows)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1038,1047,38>",(TypeError)); Inst33++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);
try { if (Inst35 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1057,1063,39>",(Symbol)); Inst35++; } } catch(e) {}
keys = Symbol("foo");
try { if (Inst34 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1050,1054,39>",(keys)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1072,1084,40>",(assertThrows)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1111,1120,40>",(TypeError)); Inst37++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);
keys = null;
try { if (Inst38 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1123,1127,41>",(keys)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1136,1148,42>",(assertThrows)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1175,1184,42>",(TypeError)); Inst40++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);

// "length" property is honored.
keys = { 0: "a", 1: "b", 2: "c" };
try { if (Inst41 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1221,1225,45>",(keys)); Inst41++; } } catch(e) {}
keys.length = 0;
try { if (Inst42 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<1256,1267,46>",(keys.length)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1256,1260,46>",(keys)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1273,1285,47>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<1290,1305,47>",(Reflect.ownKeys)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1290,1297,47>",(Reflect)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1306,1311,47>",(proxy)); Inst47++; } } catch(e) {}
assertEquals([], Reflect.ownKeys(proxy));
keys.length = 1;
try { if (Inst48 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<1315,1326,48>",(keys.length)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1315,1319,48>",(keys)); Inst49++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1332,1344,49>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<1352,1367,49>",(Reflect.ownKeys)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1352,1359,49>",(Reflect)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1368,1373,49>",(proxy)); Inst53++; } } catch(e) {}
assertEquals(["a"], Reflect.ownKeys(proxy));
keys.length = 3;
try { if (Inst54 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<1377,1388,50>",(keys.length)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1377,1381,50>",(keys)); Inst55++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1394,1406,51>",(assertEquals)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<1424,1439,51>",(Reflect.ownKeys)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1424,1431,51>",(Reflect)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1440,1445,51>",(proxy)); Inst59++; } } catch(e) {}
assertEquals(["a", "b", "c"], Reflect.ownKeys(proxy));
// The spec wants to allow lengths up to 2^53, but we can't allocate arrays
// of that size, so we throw even for smaller values.
try { if (Inst62 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1593,1601,54>",(Math.pow)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1593,1597,54>",(Math)); Inst63++; } } catch(e) {}
keys.length = Math.pow(2, 33);
try { if (Inst60 <= 1000 && typeof (keys.length) != "undefined") {_RecordType("<1579,1590,54>",(keys.length)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1579,1583,54>",(keys)); Inst61++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1610,1622,55>",(assertThrows)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1649,1659,55>",(RangeError)); Inst65++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", RangeError);

// Check that we allow duplicated keys.
keys  = ['a', 'a', 'a']
try { if (Inst66 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1703,1707,58>",(keys)); Inst66++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1727,1739,59>",(assertEquals)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1740,1744,59>",(keys)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<1746,1761,59>",(Reflect.ownKeys)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<1746,1753,59>",(Reflect)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1762,1767,59>",(proxy)); Inst71++; } } catch(e) {}
assertEquals(keys, Reflect.ownKeys(proxy));

// Non-Name results throw.
keys = [1];
try { if (Inst72 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1799,1803,62>",(keys)); Inst72++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1811,1823,63>",(assertThrows)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1850,1859,63>",(TypeError)); Inst74++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);
keys = [{}];
try { if (Inst75 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1862,1866,64>",(keys)); Inst75++; } } catch(e) {}
try { if (Inst76 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1875,1887,65>",(assertThrows)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1914,1923,65>",(TypeError)); Inst77++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);
keys = [{toString: function() { return "foo"; }}];
try { if (Inst78 <= 1000 && typeof (keys) != "undefined") {_RecordType("<1926,1930,66>",(keys)); Inst78++; } } catch(e) {}
try { if (Inst79 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1977,1989,67>",(assertThrows)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2016,2025,67>",(TypeError)); Inst80++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);
keys = [null];
try { if (Inst81 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2028,2032,68>",(keys)); Inst81++; } } catch(e) {}
try { if (Inst82 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2043,2055,69>",(assertThrows)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2082,2091,69>",(TypeError)); Inst83++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);

// Step 17a: The trap result must include all non-configurable keys.
try { if (Inst84 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2164,2185,72>",(Object.defineProperty)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2164,2170,72>",(Object)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (target) != "undefined") {_RecordType("<2186,2192,72>",(target)); Inst86++; } } catch(e) {}
Object.defineProperty(target, "nonconf", {value: 1, configurable: false});
keys = ["foo"];
try { if (Inst87 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2239,2243,73>",(keys)); Inst87++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2255,2267,74>",(assertThrows)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2294,2303,74>",(TypeError)); Inst89++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);
keys = ["nonconf"];
try { if (Inst90 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2306,2310,75>",(keys)); Inst90++; } } catch(e) {}
try { if (Inst91 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2326,2338,76>",(assertEquals)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2339,2343,76>",(keys)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<2345,2360,76>",(Reflect.ownKeys)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<2345,2352,76>",(Reflect)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<2361,2366,76>",(proxy)); Inst95++; } } catch(e) {}
assertEquals(keys, Reflect.ownKeys(proxy));

// Check that we allow duplicated keys.
keys  = ['nonconf', 'nonconf', 'nonconf']
try { if (Inst96 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2411,2415,79>",(keys)); Inst96++; } } catch(e) {}
try { if (Inst97 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2453,2465,80>",(assertEquals)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2466,2470,80>",(keys)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<2472,2487,80>",(Reflect.ownKeys)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<2472,2479,80>",(Reflect)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<2488,2493,80>",(proxy)); Inst101++; } } catch(e) {}
assertEquals(keys, Reflect.ownKeys(proxy));

// Step 19a: The trap result must all keys of a non-extensible target.
try { if (Inst102 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<2569,2593,83>",(Object.preventExtensions)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2569,2575,83>",(Object)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (target) != "undefined") {_RecordType("<2594,2600,83>",(target)); Inst104++; } } catch(e) {}
Object.preventExtensions(target);
try { if (Inst105 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2603,2615,84>",(assertThrows)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2642,2651,84>",(TypeError)); Inst106++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);
keys = ["nonconf", "target_one"];
try { if (Inst107 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2654,2658,85>",(keys)); Inst107++; } } catch(e) {}
try { if (Inst108 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2688,2700,86>",(assertEquals)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2701,2705,86>",(keys)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<2707,2722,86>",(Reflect.ownKeys)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<2707,2714,86>",(Reflect)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<2723,2728,86>",(proxy)); Inst112++; } } catch(e) {}
assertEquals(keys, Reflect.ownKeys(proxy));

// Step 20: The trap result must not add keys to a non-extensible target.
keys = ["nonconf", "target_one", "fantasy"];
try { if (Inst113 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2807,2811,89>",(keys)); Inst113++; } } catch(e) {}
try { if (Inst114 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2852,2864,90>",(assertThrows)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2891,2900,90>",(TypeError)); Inst115++; } } catch(e) {}
assertThrows("Reflect.ownKeys(proxy)", TypeError);

// Check that we allow duplicated keys.
keys  = ['nonconf', 'target_one', 'nonconf', 'nonconf', 'target_one',]
try { if (Inst116 <= 1000 && typeof (keys) != "undefined") {_RecordType("<2944,2948,93>",(keys)); Inst116++; } } catch(e) {}
try { if (Inst117 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3015,3027,94>",(assertEquals)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (keys) != "undefined") {_RecordType("<3028,3032,94>",(keys)); Inst118++; } } catch(e) {}try { if (Inst119 <= 1000 && typeof (Reflect.ownKeys) != "undefined") {_RecordType("<3034,3049,94>",(Reflect.ownKeys)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<3034,3041,94>",(Reflect)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<3050,3055,94>",(proxy)); Inst121++; } } catch(e) {}
assertEquals(keys, Reflect.ownKeys(proxy));

