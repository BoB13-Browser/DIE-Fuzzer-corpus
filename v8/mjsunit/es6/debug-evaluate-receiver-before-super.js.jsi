var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

// Test that debug-evaluate doesn't crash when this is used before super() call
// in constructor.

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<311,322,10>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<311,316,10>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<303,308,10>",(Debug)); Inst0++; } } catch(e) {}

var result;
try { if (Inst3 <= 1000 && typeof (result) != "undefined") {_RecordType("<328,334,12>",(result)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (listener) != "undefined") {_RecordType("<346,354,14>",(listener)); Inst4++; } } catch(e) {}
function listener(event, exec_state, event_data, data)
{
try { if (Inst5 <= 1000 && typeof (event) != "undefined") {_RecordType("<355,360,14>",(event)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<362,372,14>",(exec_state)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<374,384,14>",(event_data)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (data) != "undefined") {_RecordType("<386,390,14>",(data)); Inst8++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<525,526,20>",(e)); Inst18++; } } catch(e) {}
  try {
try { if (Inst9 <= 1000 && typeof (event) != "undefined") {_RecordType("<410,415,17>",(event)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<419,441,17>",(Debug.DebugEvent.Break)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<419,435,17>",(Debug.DebugEvent)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<419,424,17>",(Debug)); Inst12++; } } catch(e) {}
    if (event == Debug.DebugEvent.Break) {
try { if (Inst14 <= 1000 && typeof (exec_state.frame(0).evaluate("this.a").value) != "undefined") {_RecordType("<460,504,18>",(exec_state.frame(0).evaluate("this.a").value)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<460,488,18>",(exec_state.frame(0).evaluate)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<460,476,18>",(exec_state.frame)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<460,470,18>",(exec_state)); Inst17++; } } catch(e) {}
      result = exec_state.frame(0).evaluate("this.a").value();
try { if (Inst13 <= 1000 && typeof (result) != "undefined") {_RecordType("<451,457,18>",(result)); Inst13++; } } catch(e) {}
    }
  } catch (e) {
try { if (Inst20 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<543,552,21>",(e.message)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<543,544,21>",(e)); Inst21++; } } catch(e) {}
    result = e.message;
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<534,540,21>",(result)); Inst19++; } } catch(e) {}
  }
}

try { if (Inst22 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<561,578,25>",(Debug.setListener)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<561,566,25>",(Debug)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (listener) != "undefined") {_RecordType("<579,587,25>",(listener)); Inst24++; } } catch(e) {}
Debug.setListener(listener);

class A { constructor () { this.a = 239; } }
try { if (Inst25 <= 1000 && typeof (A) != "undefined") {_RecordType("<597,598,27>",(A)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<618,624,27>",(this.a)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (A) != "undefined") {_RecordType("<652,653,28>",(A)); Inst28++; } } catch(e) {}
class B extends A {
  constructor () {
    debugger;
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<693,705,31>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (result) != "undefined") {_RecordType("<747,753,31>",(result)); Inst30++; } } catch(e) {}
    assertEquals("Cannot read property 'a' of undefined", result);
    super();
    debugger;
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<787,799,34>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (result) != "undefined") {_RecordType("<805,811,34>",(result)); Inst32++; } } catch(e) {}
    assertEquals(239, result);
  }
}
try { if (Inst27 <= 1000 && typeof (B) != "undefined") {_RecordType("<642,643,28>",(B)); Inst27++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (B) != "undefined") {_RecordType("<824,825,37>",(B)); Inst33++; } } catch(e) {}
new B();

try { if (Inst34 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<830,847,39>",(Debug.setListener)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<830,835,39>",(Debug)); Inst35++; } } catch(e) {}
Debug.setListener(null);

