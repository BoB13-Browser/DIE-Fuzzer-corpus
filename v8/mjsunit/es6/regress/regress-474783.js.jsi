var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


"use strict";
class Base {
}
try { if (Inst0 <= 1000 && typeof (Base) != "undefined") {_RecordType("<189,193,7>",(Base)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Base) != "undefined") {_RecordType("<221,225,9>",(Base)); Inst2++; } } catch(e) {}
class Subclass extends Base {
  constructor(a,b,c) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<242,243,10>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<244,245,10>",(b)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (c) != "undefined") {_RecordType("<246,247,10>",(c)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (arguments[1]) != "undefined") {_RecordType("<255,267,11>",(arguments[1])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<255,264,11>",(arguments)); Inst7++; } } catch(e) {}
    arguments[1];
  }
}
try { if (Inst1 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<204,212,9>",(Subclass)); Inst1++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<275,287,14>",(assertThrows)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<301,309,14>",(Subclass)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<316,325,14>",(TypeError)); Inst10++; } } catch(e) {}
assertThrows(function() { Subclass(); }, TypeError);
try { if (Inst11 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<328,340,15>",(assertThrows)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<354,362,15>",(Subclass)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<370,379,15>",(TypeError)); Inst13++; } } catch(e) {}
assertThrows(function() { Subclass(1); }, TypeError);
try { if (Inst14 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<382,394,16>",(assertThrows)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<408,416,16>",(Subclass)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<427,436,16>",(TypeError)); Inst16++; } } catch(e) {}
assertThrows(function() { Subclass(1, 2); }, TypeError);
try { if (Inst17 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<439,451,17>",(assertThrows)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<465,473,17>",(Subclass)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<487,496,17>",(TypeError)); Inst19++; } } catch(e) {}
assertThrows(function() { Subclass(1, 2, 3); }, TypeError);
try { if (Inst20 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<499,511,18>",(assertThrows)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<525,533,18>",(Subclass)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<550,559,18>",(TypeError)); Inst22++; } } catch(e) {}
assertThrows(function() { Subclass(1, 2, 3, 4); }, TypeError);

try { if (Inst23 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<563,575,20>",(assertThrows)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Subclass.call) != "undefined") {_RecordType("<589,602,20>",(Subclass.call)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<589,597,20>",(Subclass)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<609,618,20>",(TypeError)); Inst26++; } } catch(e) {}
assertThrows(function() { Subclass.call(); }, TypeError);
try { if (Inst27 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<621,633,21>",(assertThrows)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Subclass.call) != "undefined") {_RecordType("<647,660,21>",(Subclass.call)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<647,655,21>",(Subclass)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<669,678,21>",(TypeError)); Inst30++; } } catch(e) {}
assertThrows(function() { Subclass.call({}); }, TypeError);
try { if (Inst31 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<681,693,22>",(assertThrows)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Subclass.call) != "undefined") {_RecordType("<707,720,22>",(Subclass.call)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<707,715,22>",(Subclass)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<732,741,22>",(TypeError)); Inst34++; } } catch(e) {}
assertThrows(function() { Subclass.call({}, 1); }, TypeError);
try { if (Inst35 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<744,756,23>",(assertThrows)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Subclass.call) != "undefined") {_RecordType("<770,783,23>",(Subclass.call)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<770,778,23>",(Subclass)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<798,807,23>",(TypeError)); Inst38++; } } catch(e) {}
assertThrows(function() { Subclass.call({}, 1, 2); }, TypeError);
try { if (Inst39 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<810,822,24>",(assertThrows)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Subclass.call) != "undefined") {_RecordType("<836,849,24>",(Subclass.call)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Subclass) != "undefined") {_RecordType("<836,844,24>",(Subclass)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<870,879,24>",(TypeError)); Inst42++; } } catch(e) {}
assertThrows(function() { Subclass.call({}, 1, 2, 3, 4); }, TypeError);

