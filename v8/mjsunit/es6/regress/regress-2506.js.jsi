var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

// Top-level code
let s = 0;
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<205,206,8>",(s)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<221,230,9>",(undefined)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<232,241,9>",(undefined)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<243,252,9>",(undefined)); Inst4++; } } catch(e) {}
let f = [undefined, undefined, undefined]
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<216,217,9>",(f)); Inst1++; } } catch(e) {}
for (const x of [1,2,3]) {
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<265,266,10>",(x)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<288,289,11>",(x)); Inst7++; } } catch(e) {}
  s += x;
try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<283,284,11>",(s)); Inst6++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<322,323,12>",(x)); Inst11++; } } catch(e) {}
  f[x-1] = function() { return x; }
try { if (Inst8 <= 1000 && typeof (f[x-1]) != "undefined") {_RecordType("<293,299,12>",(f[x-1])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<293,294,12>",(f)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<295,296,12>",(x)); Inst10++; } } catch(e) {}
}
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<329,341,14>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<345,346,14>",(s)); Inst13++; } } catch(e) {}
assertEquals(6, s);
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<349,361,15>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f[0]) != "undefined") {_RecordType("<365,369,15>",(f[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<365,366,15>",(f)); Inst16++; } } catch(e) {}
assertEquals(1, f[0]());
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<374,386,16>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f[1]) != "undefined") {_RecordType("<390,394,16>",(f[1])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<390,391,16>",(f)); Inst19++; } } catch(e) {}
assertEquals(2, f[1]());
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<399,411,17>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f[2]) != "undefined") {_RecordType("<415,419,17>",(f[2])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<415,416,17>",(f)); Inst22++; } } catch(e) {}
assertEquals(3, f[2]());

let x = 1;
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<429,430,19>",(x)); Inst23++; } } catch(e) {}
s = 0;
try { if (Inst24 <= 1000 && typeof (s) != "undefined") {_RecordType("<436,437,20>",(s)); Inst24++; } } catch(e) {}
for (const z of [x, x+1, x+2]) {
try { if (Inst25 <= 1000 && typeof (z) != "undefined") {_RecordType("<454,455,21>",(z)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<460,461,21>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<463,464,21>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<468,469,21>",(x)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (z) != "undefined") {_RecordType("<483,484,22>",(z)); Inst30++; } } catch(e) {}
  s += z;
try { if (Inst29 <= 1000 && typeof (s) != "undefined") {_RecordType("<478,479,22>",(s)); Inst29++; } } catch(e) {}
}
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<488,500,24>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (s) != "undefined") {_RecordType("<504,505,24>",(s)); Inst32++; } } catch(e) {}
assertEquals(6, s);

s = 0;
try { if (Inst33 <= 1000 && typeof (s) != "undefined") {_RecordType("<509,510,26>",(s)); Inst33++; } } catch(e) {}
var q = 1;
try { if (Inst34 <= 1000 && typeof (q) != "undefined") {_RecordType("<520,521,27>",(q)); Inst34++; } } catch(e) {}
for (const x of [q, q+1, q+2]) {
try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<538,539,28>",(x)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (q) != "undefined") {_RecordType("<544,545,28>",(q)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (q) != "undefined") {_RecordType("<547,548,28>",(q)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (q) != "undefined") {_RecordType("<552,553,28>",(q)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<567,568,29>",(x)); Inst40++; } } catch(e) {}
  s += x;
try { if (Inst39 <= 1000 && typeof (s) != "undefined") {_RecordType("<562,563,29>",(s)); Inst39++; } } catch(e) {}
}
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<572,584,31>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (s) != "undefined") {_RecordType("<588,589,31>",(s)); Inst42++; } } catch(e) {}
assertEquals(6, s);

let z = 1;
try { if (Inst43 <= 1000 && typeof (z) != "undefined") {_RecordType("<597,598,33>",(z)); Inst43++; } } catch(e) {}
s = 0;
try { if (Inst44 <= 1000 && typeof (s) != "undefined") {_RecordType("<604,605,34>",(s)); Inst44++; } } catch(e) {}
for (const x = 1; z < 2; z++) {
try { if (Inst45 <= 1000 && typeof (x) != "undefined") {_RecordType("<622,623,35>",(x)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (z) != "undefined") {_RecordType("<629,630,35>",(z)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (z) != "undefined") {_RecordType("<636,637,35>",(z)); Inst47++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (x) != "undefined") {_RecordType("<650,651,36>",(x)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (z) != "undefined") {_RecordType("<654,655,36>",(z)); Inst50++; } } catch(e) {}
  s += x + z;
try { if (Inst48 <= 1000 && typeof (s) != "undefined") {_RecordType("<645,646,36>",(s)); Inst48++; } } catch(e) {}
}
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<659,671,38>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (s) != "undefined") {_RecordType("<675,676,38>",(s)); Inst52++; } } catch(e) {}
assertEquals(2, s);


s = "";
try { if (Inst53 <= 1000 && typeof (s) != "undefined") {_RecordType("<681,682,41>",(s)); Inst53++; } } catch(e) {}
for (const x in [1,2,3]) {
try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<700,701,42>",(x)); Inst54++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<723,724,43>",(x)); Inst56++; } } catch(e) {}
  s += x;
try { if (Inst55 <= 1000 && typeof (s) != "undefined") {_RecordType("<718,719,43>",(s)); Inst55++; } } catch(e) {}
}
try { if (Inst57 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<728,740,45>",(assertEquals)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (s) != "undefined") {_RecordType("<748,749,45>",(s)); Inst58++; } } catch(e) {}
assertEquals("012", s);

try { if (Inst59 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<753,765,47>",(assertThrows)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<816,825,47>",(TypeError)); Inst60++; } } catch(e) {}
assertThrows("'use strict'; for (const x in [1,2,3]) { x++ }", TypeError);

// Function scope
(function() {
  let s = 0;
try { if (Inst61 <= 1000 && typeof (s) != "undefined") {_RecordType("<867,868,51>",(s)); Inst61++; } } catch(e) {}
  for (const x of [1,2,3]) {
try { if (Inst62 <= 1000 && typeof (x) != "undefined") {_RecordType("<887,888,52>",(x)); Inst62++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (x) != "undefined") {_RecordType("<912,913,53>",(x)); Inst64++; } } catch(e) {}
    s += x;
try { if (Inst63 <= 1000 && typeof (s) != "undefined") {_RecordType("<907,908,53>",(s)); Inst63++; } } catch(e) {}
  }
try { if (Inst65 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<921,933,55>",(assertEquals)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (s) != "undefined") {_RecordType("<937,938,55>",(s)); Inst66++; } } catch(e) {}
  assertEquals(6, s);

  let x = 1;
try { if (Inst67 <= 1000 && typeof (x) != "undefined") {_RecordType("<948,949,57>",(x)); Inst67++; } } catch(e) {}
  s = 0;
try { if (Inst68 <= 1000 && typeof (s) != "undefined") {_RecordType("<957,958,58>",(s)); Inst68++; } } catch(e) {}
  for (const q of [x, x+1, x+2]) {
try { if (Inst69 <= 1000 && typeof (q) != "undefined") {_RecordType("<977,978,59>",(q)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (x) != "undefined") {_RecordType("<983,984,59>",(x)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<986,987,59>",(x)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (x) != "undefined") {_RecordType("<991,992,59>",(x)); Inst72++; } } catch(e) {}
try { if (Inst74 <= 1000 && typeof (q) != "undefined") {_RecordType("<1008,1009,60>",(q)); Inst74++; } } catch(e) {}
    s += q;
try { if (Inst73 <= 1000 && typeof (s) != "undefined") {_RecordType("<1003,1004,60>",(s)); Inst73++; } } catch(e) {}
  }
try { if (Inst75 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1017,1029,62>",(assertEquals)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (s) != "undefined") {_RecordType("<1033,1034,62>",(s)); Inst76++; } } catch(e) {}
  assertEquals(6, s);

  s = 0;
try { if (Inst77 <= 1000 && typeof (s) != "undefined") {_RecordType("<1040,1041,64>",(s)); Inst77++; } } catch(e) {}
  var q = 1;
try { if (Inst78 <= 1000 && typeof (q) != "undefined") {_RecordType("<1053,1054,65>",(q)); Inst78++; } } catch(e) {}
  for (const x of [q, q+1, q+2]) {
try { if (Inst79 <= 1000 && typeof (x) != "undefined") {_RecordType("<1073,1074,66>",(x)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (q) != "undefined") {_RecordType("<1079,1080,66>",(q)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (q) != "undefined") {_RecordType("<1082,1083,66>",(q)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (q) != "undefined") {_RecordType("<1087,1088,66>",(q)); Inst82++; } } catch(e) {}
try { if (Inst84 <= 1000 && typeof (x) != "undefined") {_RecordType("<1104,1105,67>",(x)); Inst84++; } } catch(e) {}
    s += x;
try { if (Inst83 <= 1000 && typeof (s) != "undefined") {_RecordType("<1099,1100,67>",(s)); Inst83++; } } catch(e) {}
  }
try { if (Inst85 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1113,1125,69>",(assertEquals)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (s) != "undefined") {_RecordType("<1129,1130,69>",(s)); Inst86++; } } catch(e) {}
  assertEquals(6, s);

  s = "";
try { if (Inst87 <= 1000 && typeof (s) != "undefined") {_RecordType("<1136,1137,71>",(s)); Inst87++; } } catch(e) {}
  for (const x in [1,2,3]) {
try { if (Inst88 <= 1000 && typeof (x) != "undefined") {_RecordType("<1157,1158,72>",(x)); Inst88++; } } catch(e) {}
try { if (Inst90 <= 1000 && typeof (x) != "undefined") {_RecordType("<1182,1183,73>",(x)); Inst90++; } } catch(e) {}
    s += x;
try { if (Inst89 <= 1000 && typeof (s) != "undefined") {_RecordType("<1177,1178,73>",(s)); Inst89++; } } catch(e) {}
  }
try { if (Inst91 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1191,1203,75>",(assertEquals)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (s) != "undefined") {_RecordType("<1211,1212,75>",(s)); Inst92++; } } catch(e) {}
  assertEquals("012", s);
}());

