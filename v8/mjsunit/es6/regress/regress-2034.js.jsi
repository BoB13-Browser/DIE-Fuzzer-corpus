var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var key = {};
try { if (Inst0 <= 1000 && typeof (key) != "undefined") {_RecordType("<1602,1605,28>",(key)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<1626,1633,29>",(WeakMap)); Inst2++; } } catch(e) {}
var map = new WeakMap;
try { if (Inst1 <= 1000 && typeof (map) != "undefined") {_RecordType("<1616,1619,29>",(map)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object.preventExtensions) != "undefined") {_RecordType("<1635,1659,30>",(Object.preventExtensions)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1635,1641,30>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (key) != "undefined") {_RecordType("<1660,1663,30>",(key)); Inst5++; } } catch(e) {}
Object.preventExtensions(key);

// Try querying using frozen key.
try { if (Inst6 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1701,1712,33>",(assertFalse)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (map.has) != "undefined") {_RecordType("<1713,1720,33>",(map.has)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (map) != "undefined") {_RecordType("<1713,1716,33>",(map)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (key) != "undefined") {_RecordType("<1721,1724,33>",(key)); Inst9++; } } catch(e) {}
assertFalse(map.has(key));
try { if (Inst10 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<1728,1738,34>",(assertSame)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1739,1748,34>",(undefined)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<1750,1757,34>",(map.get)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (map) != "undefined") {_RecordType("<1750,1753,34>",(map)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (key) != "undefined") {_RecordType("<1758,1761,34>",(key)); Inst14++; } } catch(e) {}
assertSame(undefined, map.get(key));

// Try adding using frozen key.
try { if (Inst15 <= 1000 && typeof (map.set) != "undefined") {_RecordType("<1798,1805,37>",(map.set)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (map) != "undefined") {_RecordType("<1798,1801,37>",(map)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (key) != "undefined") {_RecordType("<1806,1809,37>",(key)); Inst17++; } } catch(e) {}
map.set(key, 1);
try { if (Inst18 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1815,1825,38>",(assertTrue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (map.has) != "undefined") {_RecordType("<1826,1833,38>",(map.has)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (map) != "undefined") {_RecordType("<1826,1829,38>",(map)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (key) != "undefined") {_RecordType("<1834,1837,38>",(key)); Inst21++; } } catch(e) {}
assertTrue(map.has(key));
try { if (Inst22 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<1841,1851,39>",(assertSame)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<1855,1862,39>",(map.get)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (map) != "undefined") {_RecordType("<1855,1858,39>",(map)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (key) != "undefined") {_RecordType("<1863,1866,39>",(key)); Inst25++; } } catch(e) {}
assertSame(1, map.get(key));

// Try deleting using frozen key.
try { if (Inst26 <= 1000 && typeof (map.delete) != "undefined") {_RecordType("<1905,1915,42>",(map.delete)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (map) != "undefined") {_RecordType("<1905,1908,42>",(map)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (key) != "undefined") {_RecordType("<1916,1919,42>",(key)); Inst28++; } } catch(e) {}
map.delete(key, 1);
try { if (Inst29 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1925,1936,43>",(assertFalse)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (map.has) != "undefined") {_RecordType("<1937,1944,43>",(map.has)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (map) != "undefined") {_RecordType("<1937,1940,43>",(map)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (key) != "undefined") {_RecordType("<1945,1948,43>",(key)); Inst32++; } } catch(e) {}
assertFalse(map.has(key));
try { if (Inst33 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<1952,1962,44>",(assertSame)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1963,1972,44>",(undefined)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (map.get) != "undefined") {_RecordType("<1974,1981,44>",(map.get)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (map) != "undefined") {_RecordType("<1974,1977,44>",(map)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (key) != "undefined") {_RecordType("<1982,1985,44>",(key)); Inst37++; } } catch(e) {}
assertSame(undefined, map.get(key));

