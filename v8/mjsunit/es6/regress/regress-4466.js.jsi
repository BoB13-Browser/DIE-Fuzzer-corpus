var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

"use strict";

class Parent {
  parentMethod(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<213,214,8>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<216,217,8>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<225,237,9>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<242,243,9>",(x)); Inst4++; } } catch(e) {}
    assertEquals(42, x);
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<250,262,10>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<278,279,10>",(y)); Inst6++; } } catch(e) {}
    assertEquals('hello world', y);
  }
}
try { if (Inst0 <= 1000 && typeof (Parent) != "undefined") {_RecordType("<189,195,7>",(Parent)); Inst0++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (Parent) != "undefined") {_RecordType("<309,315,14>",(Parent)); Inst8++; } } catch(e) {}
class Child extends Parent {
  method(x) {
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<327,328,15>",(x)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<349,350,16>",(y)); Inst11++; } } catch(e) {}
    let outer = (y) => {
      let inner = () => {
try { if (Inst13 <= 1000 && typeof (super.parentMethod) != "undefined") {_RecordType("<391,409,18>",(super.parentMethod)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<410,411,18>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<413,414,18>",(y)); Inst15++; } } catch(e) {}
        super.parentMethod(x, y);
      };
try { if (Inst12 <= 1000 && typeof (inner) != "undefined") {_RecordType("<367,372,17>",(inner)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (inner) != "undefined") {_RecordType("<432,437,20>",(inner)); Inst16++; } } catch(e) {}
      inner();
    };
try { if (Inst10 <= 1000 && typeof (outer) != "undefined") {_RecordType("<340,345,16>",(outer)); Inst10++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (outer) != "undefined") {_RecordType("<452,457,22>",(outer)); Inst17++; } } catch(e) {}
    outer('hello world');
  }
}
try { if (Inst7 <= 1000 && typeof (Child) != "undefined") {_RecordType("<295,300,14>",(Child)); Inst7++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (new Child().method) != "undefined") {_RecordType("<481,499,26>",(new Child().method)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Child) != "undefined") {_RecordType("<485,490,26>",(Child)); Inst19++; } } catch(e) {}
new Child().method(42);

