var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test temporal dead zone semantics of let bound variables in
// function and block scopes.

try { if (Inst0 <= 1000 && typeof (TestFunctionLocal) != "undefined") {_RecordType("<1701,1718,31>",(TestFunctionLocal)); Inst0++; } } catch(e) {}
function TestFunctionLocal(s) {
try { if (Inst1 <= 1000 && typeof (s) != "undefined") {_RecordType("<1719,1720,31>",(s)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<1784,1785,34>",(e)); Inst4++; } } catch(e) {}
  try {
try { if (Inst2 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1736,1740,33>",(eval)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<1758,1759,33>",(s)); Inst3++; } } catch(e) {}
    eval("(function(){" + s + "; })")();
  } catch (e) {
try { if (Inst5 <= 1000 && typeof (assertInstanceof) != "undefined") {_RecordType("<1793,1809,35>",(assertInstanceof)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<1810,1811,35>",(e)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1813,1827,35>",(ReferenceError)); Inst7++; } } catch(e) {}
    assertInstanceof(e, ReferenceError);
    return;
  }
try { if (Inst8 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<1848,1865,38>",(assertUnreachable)); Inst8++; } } catch(e) {}
  assertUnreachable();
}

try { if (Inst9 <= 1000 && typeof (TestBlockLocal) != "undefined") {_RecordType("<1881,1895,41>",(TestBlockLocal)); Inst9++; } } catch(e) {}
function TestBlockLocal(s,e) {
try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<1896,1897,41>",(s)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<1898,1899,41>",(e)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<1966,1967,44>",(e)); Inst14++; } } catch(e) {}
  try {
try { if (Inst12 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1915,1919,43>",(eval)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<1939,1940,43>",(s)); Inst13++; } } catch(e) {}
    eval("(function(){ {" + s + ";} })")();
  } catch (e) {
try { if (Inst15 <= 1000 && typeof (assertInstanceof) != "undefined") {_RecordType("<1975,1991,45>",(assertInstanceof)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<1992,1993,45>",(e)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1995,2009,45>",(ReferenceError)); Inst17++; } } catch(e) {}
    assertInstanceof(e, ReferenceError);
    return;
  }
try { if (Inst18 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<2030,2047,48>",(assertUnreachable)); Inst18++; } } catch(e) {}
  assertUnreachable();
}


try { if (Inst19 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2064,2071,52>",(TestAll)); Inst19++; } } catch(e) {}
function TestAll(s) {
try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<2072,2073,52>",(s)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (TestBlockLocal) != "undefined") {_RecordType("<2079,2093,53>",(TestBlockLocal)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (s) != "undefined") {_RecordType("<2094,2095,53>",(s)); Inst22++; } } catch(e) {}
  TestBlockLocal(s);
try { if (Inst23 <= 1000 && typeof (TestFunctionLocal) != "undefined") {_RecordType("<2100,2117,54>",(TestFunctionLocal)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (s) != "undefined") {_RecordType("<2118,2119,54>",(s)); Inst24++; } } catch(e) {}
  TestFunctionLocal(s);
}

// Use before initialization in declaration statement.
try { if (Inst25 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2180,2187,58>",(TestAll)); Inst25++; } } catch(e) {}
TestAll('let x = x + 1');
try { if (Inst26 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2206,2213,59>",(TestAll)); Inst26++; } } catch(e) {}
TestAll('let x = x += 1');
try { if (Inst27 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2233,2240,60>",(TestAll)); Inst27++; } } catch(e) {}
TestAll('let x = x++');
try { if (Inst28 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2257,2264,61>",(TestAll)); Inst28++; } } catch(e) {}
TestAll('let x = ++x');
try { if (Inst29 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2281,2288,62>",(TestAll)); Inst29++; } } catch(e) {}
TestAll('const x = x + 1');

// Use before initialization in prior statement.
try { if (Inst30 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2359,2366,65>",(TestAll)); Inst30++; } } catch(e) {}
TestAll('x + 1; let x;');
try { if (Inst31 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2385,2392,66>",(TestAll)); Inst31++; } } catch(e) {}
TestAll('x = 1; let x;');
try { if (Inst32 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2411,2418,67>",(TestAll)); Inst32++; } } catch(e) {}
TestAll('x += 1; let x;');
try { if (Inst33 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2438,2445,68>",(TestAll)); Inst33++; } } catch(e) {}
TestAll('++x; let x;');
try { if (Inst34 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2462,2469,69>",(TestAll)); Inst34++; } } catch(e) {}
TestAll('x++; let x;');
try { if (Inst35 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2486,2493,70>",(TestAll)); Inst35++; } } catch(e) {}
TestAll('let y = x; const x = 1;');
try { if (Inst36 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2522,2529,71>",(TestAll)); Inst36++; } } catch(e) {}
TestAll('let y = x; class x {}');

try { if (Inst37 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2557,2564,73>",(TestAll)); Inst37++; } } catch(e) {}
TestAll('f(); let x; function f() { return x + 1; }');
try { if (Inst38 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2612,2619,74>",(TestAll)); Inst38++; } } catch(e) {}
TestAll('f(); let x; function f() { x = 1; }');
try { if (Inst39 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2660,2667,75>",(TestAll)); Inst39++; } } catch(e) {}
TestAll('f(); let x; function f() { x += 1; }');
try { if (Inst40 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2709,2716,76>",(TestAll)); Inst40++; } } catch(e) {}
TestAll('f(); let x; function f() { ++x; }');
try { if (Inst41 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2755,2762,77>",(TestAll)); Inst41++; } } catch(e) {}
TestAll('f(); let x; function f() { x++; }');
try { if (Inst42 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2801,2808,78>",(TestAll)); Inst42++; } } catch(e) {}
TestAll('f(); const x = 1; function f() { return x; }');
try { if (Inst43 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2858,2865,79>",(TestAll)); Inst43++; } } catch(e) {}
TestAll('f(); class x { }; function f() { return x; }');

try { if (Inst44 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2916,2923,81>",(TestAll)); Inst44++; } } catch(e) {}
TestAll('f()(); let x; function f() { return function() { return x + 1; } }');
try { if (Inst45 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<2995,3002,82>",(TestAll)); Inst45++; } } catch(e) {}
TestAll('f()(); let x; function f() { return function() { x = 1; } }');
try { if (Inst46 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3067,3074,83>",(TestAll)); Inst46++; } } catch(e) {}
TestAll('f()(); let x; function f() { return function() { x += 1; } }');
try { if (Inst47 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3140,3147,84>",(TestAll)); Inst47++; } } catch(e) {}
TestAll('f()(); let x; function f() { return function() { ++x; } }');
try { if (Inst48 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3210,3217,85>",(TestAll)); Inst48++; } } catch(e) {}
TestAll('f()(); let x; function f() { return function() { x++; } }');
try { if (Inst49 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3280,3287,86>",(TestAll)); Inst49++; } } catch(e) {}
TestAll('f()(); const x = 1; function f() { return function() { return x; } }');
try { if (Inst50 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3361,3368,87>",(TestAll)); Inst50++; } } catch(e) {}
TestAll('f()(); class x { }; function f() { return function() { return x; } }');

for (var kw of ['let x = 2', 'const x = 2', 'class x { }']) {
try { if (Inst51 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3452,3454,89>",(kw)); Inst51++; } } catch(e) {}
  // Use before initialization with a dynamic lookup.
try { if (Inst52 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3561,3568,91>",(TestAll)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3583,3585,91>",(kw)); Inst53++; } } catch(e) {}
  TestAll(`eval("x"); ${kw};`);
try { if (Inst54 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3593,3600,92>",(TestAll)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3620,3622,92>",(kw)); Inst55++; } } catch(e) {}
  TestAll(`eval("x + 1;"); ${kw};`);
try { if (Inst56 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3630,3637,93>",(TestAll)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3657,3659,93>",(kw)); Inst57++; } } catch(e) {}
  TestAll(`eval("x = 1;"); ${kw};`);
try { if (Inst58 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3667,3674,94>",(TestAll)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3695,3697,94>",(kw)); Inst59++; } } catch(e) {}
  TestAll(`eval("x += 1;"); ${kw};`);
try { if (Inst60 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3705,3712,95>",(TestAll)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3730,3732,95>",(kw)); Inst61++; } } catch(e) {}
  TestAll(`eval("++x;"); ${kw};`);
try { if (Inst62 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3740,3747,96>",(TestAll)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3765,3767,96>",(kw)); Inst63++; } } catch(e) {}
  TestAll(`eval("x++;"); ${kw};`);

  // Use before initialization with check for eval-shadowed bindings.
try { if (Inst64 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3846,3853,99>",(TestAll)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3907,3909,99>",(kw)); Inst65++; } } catch(e) {}
  TestAll(`function f() { eval("var y = 2;"); x + 1; }; f(); ${kw};`);
try { if (Inst66 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3917,3924,100>",(TestAll)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (kw) != "undefined") {_RecordType("<3978,3980,100>",(kw)); Inst67++; } } catch(e) {}
  TestAll(`function f() { eval("var y = 2;"); x = 1; }; f(); ${kw};`);
try { if (Inst68 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<3988,3995,101>",(TestAll)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (kw) != "undefined") {_RecordType("<4050,4052,101>",(kw)); Inst69++; } } catch(e) {}
  TestAll(`function f() { eval("var y = 2;"); x += 1; }; f(); ${kw};`);
try { if (Inst70 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<4060,4067,102>",(TestAll)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (kw) != "undefined") {_RecordType("<4119,4121,102>",(kw)); Inst71++; } } catch(e) {}
  TestAll(`function f() { eval("var y = 2;"); ++x; }; f(); ${kw};`);
try { if (Inst72 <= 1000 && typeof (TestAll) != "undefined") {_RecordType("<4129,4136,103>",(TestAll)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (kw) != "undefined") {_RecordType("<4188,4190,103>",(kw)); Inst73++; } } catch(e) {}
  TestAll(`function f() { eval("var y = 2;"); x++; }; f(); ${kw};`);
}

// Test that variables introduced by function declarations are created and
// initialized upon entering a function / block scope.
try { if (Inst74 <= 1000 && typeof (f) != "undefined") {_RecordType("<4338,4339,108>",(f)); Inst74++; } } catch(e) {}
function f() {
  {
try { if (Inst75 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4352,4364,110>",(assertEquals)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (g1) != "undefined") {_RecordType("<4368,4370,110>",(g1)); Inst76++; } } catch(e) {}
    assertEquals(2, g1());
try { if (Inst77 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4379,4391,111>",(assertEquals)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4395,4399,111>",(eval)); Inst78++; } } catch(e) {}
    assertEquals(2, eval("g1()"));

    // block scoped function declaration
try { if (Inst79 <= 1000 && typeof (g1) != "undefined") {_RecordType("<4465,4467,114>",(g1)); Inst79++; } } catch(e) {}
    function g1() {
      return 2;
    }
  }

try { if (Inst80 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4501,4513,119>",(assertEquals)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (g2) != "undefined") {_RecordType("<4517,4519,119>",(g2)); Inst81++; } } catch(e) {}
  assertEquals(3, g2());
try { if (Inst82 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4526,4538,120>",(assertEquals)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4542,4546,120>",(eval)); Inst83++; } } catch(e) {}
  assertEquals(3, eval("g2()"));
  // function scoped function declaration
try { if (Inst84 <= 1000 && typeof (g2) != "undefined") {_RecordType("<4610,4612,122>",(g2)); Inst84++; } } catch(e) {}
  function g2() {
    return 3;
  }
}
try { if (Inst85 <= 1000 && typeof (f) != "undefined") {_RecordType("<4637,4638,126>",(f)); Inst85++; } } catch(e) {}
f();

// Test that a function declaration introduces a block scoped variable
// and no function hoisting if there is a conflict.
try { if (Inst86 <= 1000 && typeof (TestFunctionLocal) != "undefined") {_RecordType("<4766,4783,130>",(TestFunctionLocal)); Inst86++; } } catch(e) {}
TestFunctionLocal('{ function k() { return 0; } }; k(); let k;');

// Test that a function declaration sees the scope it resides in.
try { if (Inst87 <= 1000 && typeof (f2) != "undefined") {_RecordType("<4908,4910,133>",(f2)); Inst87++; } } catch(e) {}
function f2() {
  let m, n, o, p;
try { if (Inst88 <= 1000 && typeof (m) != "undefined") {_RecordType("<4921,4922,134>",(m)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (n) != "undefined") {_RecordType("<4924,4925,134>",(n)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (o) != "undefined") {_RecordType("<4927,4928,134>",(o)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (p) != "undefined") {_RecordType("<4930,4931,134>",(p)); Inst91++; } } catch(e) {}
  {
try { if (Inst93 <= 1000 && typeof (g) != "undefined") {_RecordType("<4945,4946,136>",(g)); Inst93++; } } catch(e) {}
    m = g;
try { if (Inst92 <= 1000 && typeof (m) != "undefined") {_RecordType("<4941,4942,136>",(m)); Inst92++; } } catch(e) {}
try { if (Inst94 <= 1000 && typeof (g) != "undefined") {_RecordType("<4961,4962,137>",(g)); Inst94++; } } catch(e) {}
    function g() {
try { if (Inst95 <= 1000 && typeof (a) != "undefined") {_RecordType("<4980,4981,138>",(a)); Inst95++; } } catch(e) {}
      return a;
    }
    let a = 1;
try { if (Inst96 <= 1000 && typeof (a) != "undefined") {_RecordType("<4997,4998,140>",(a)); Inst96++; } } catch(e) {}
  }
try { if (Inst97 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5010,5022,142>",(assertEquals)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (m) != "undefined") {_RecordType("<5026,5027,142>",(m)); Inst98++; } } catch(e) {}
  assertEquals(1, m());

try { if (Inst99 <= 1000 && typeof (b) != "undefined") {_RecordType("<5064,5065,146>",(b)); Inst99++; } } catch(e) {}
  try {
    throw 2;
  } catch(b) {
try { if (Inst101 <= 1000 && typeof (h) != "undefined") {_RecordType("<5077,5078,147>",(h)); Inst101++; } } catch(e) {}
    n = h;
try { if (Inst100 <= 1000 && typeof (n) != "undefined") {_RecordType("<5073,5074,147>",(n)); Inst100++; } } catch(e) {}
try { if (Inst102 <= 1000 && typeof (h) != "undefined") {_RecordType("<5093,5094,148>",(h)); Inst102++; } } catch(e) {}
    function h() {
try { if (Inst103 <= 1000 && typeof (b) != "undefined") {_RecordType("<5112,5113,149>",(b)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (c) != "undefined") {_RecordType("<5116,5117,149>",(c)); Inst104++; } } catch(e) {}
      return b + c;
    }
    let c = 3;
try { if (Inst105 <= 1000 && typeof (c) != "undefined") {_RecordType("<5133,5134,151>",(c)); Inst105++; } } catch(e) {}
  }
try { if (Inst106 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5146,5158,153>",(assertEquals)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (n) != "undefined") {_RecordType("<5162,5163,153>",(n)); Inst107++; } } catch(e) {}
  assertEquals(5, n());

  {
try { if (Inst109 <= 1000 && typeof (i) != "undefined") {_RecordType("<5181,5182,156>",(i)); Inst109++; } } catch(e) {}
    o = i;
try { if (Inst108 <= 1000 && typeof (o) != "undefined") {_RecordType("<5177,5178,156>",(o)); Inst108++; } } catch(e) {}
try { if (Inst110 <= 1000 && typeof (i) != "undefined") {_RecordType("<5197,5198,157>",(i)); Inst110++; } } catch(e) {}
    function i() {
try { if (Inst111 <= 1000 && typeof (d) != "undefined") {_RecordType("<5216,5217,158>",(d)); Inst111++; } } catch(e) {}
      return d;
    }
    let d = 4;
try { if (Inst112 <= 1000 && typeof (d) != "undefined") {_RecordType("<5233,5234,160>",(d)); Inst112++; } } catch(e) {}
  }
try { if (Inst113 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5246,5258,162>",(assertEquals)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (o) != "undefined") {_RecordType("<5262,5263,162>",(o)); Inst114++; } } catch(e) {}
  assertEquals(4, o());

try { if (Inst115 <= 1000 && typeof (e) != "undefined") {_RecordType("<5300,5301,166>",(e)); Inst115++; } } catch(e) {}
  try {
    throw 5;
  } catch(e) {
try { if (Inst117 <= 1000 && typeof (j) != "undefined") {_RecordType("<5313,5314,167>",(j)); Inst117++; } } catch(e) {}
    p = j;
try { if (Inst116 <= 1000 && typeof (p) != "undefined") {_RecordType("<5309,5310,167>",(p)); Inst116++; } } catch(e) {}
try { if (Inst118 <= 1000 && typeof (j) != "undefined") {_RecordType("<5329,5330,168>",(j)); Inst118++; } } catch(e) {}
    function j() {
try { if (Inst119 <= 1000 && typeof (e) != "undefined") {_RecordType("<5348,5349,169>",(e)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (f) != "undefined") {_RecordType("<5352,5353,169>",(f)); Inst120++; } } catch(e) {}
      return e + f;
    }
    let f = 6;
try { if (Inst121 <= 1000 && typeof (f) != "undefined") {_RecordType("<5369,5370,171>",(f)); Inst121++; } } catch(e) {}
  }
try { if (Inst122 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5382,5394,173>",(assertEquals)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (p) != "undefined") {_RecordType("<5399,5400,173>",(p)); Inst123++; } } catch(e) {}
  assertEquals(11, p());
}
try { if (Inst124 <= 1000 && typeof (f2) != "undefined") {_RecordType("<5407,5409,175>",(f2)); Inst124++; } } catch(e) {}
f2();

// Test that resolution of let bound variables works with scopes that call eval.
try { if (Inst125 <= 1000 && typeof (outer) != "undefined") {_RecordType("<5504,5509,178>",(outer)); Inst125++; } } catch(e) {}
function outer() {
try { if (Inst126 <= 1000 && typeof (middle) != "undefined") {_RecordType("<5525,5531,179>",(middle)); Inst126++; } } catch(e) {}
  function middle() {
try { if (Inst127 <= 1000 && typeof (inner) != "undefined") {_RecordType("<5549,5554,180>",(inner)); Inst127++; } } catch(e) {}
    function inner() {
try { if (Inst128 <= 1000 && typeof (x) != "undefined") {_RecordType("<5572,5573,181>",(x)); Inst128++; } } catch(e) {}
      return x;
    }
try { if (Inst129 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5585,5589,183>",(eval)); Inst129++; } } catch(e) {}
    eval("1 + 1");
try { if (Inst130 <= 1000 && typeof (x) != "undefined") {_RecordType("<5611,5612,184>",(x)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (inner) != "undefined") {_RecordType("<5615,5620,184>",(inner)); Inst131++; } } catch(e) {}
    return x + inner();
  }

  let x = 1;
try { if (Inst132 <= 1000 && typeof (x) != "undefined") {_RecordType("<5635,5636,187>",(x)); Inst132++; } } catch(e) {}
try { if (Inst133 <= 1000 && typeof (middle) != "undefined") {_RecordType("<5651,5657,188>",(middle)); Inst133++; } } catch(e) {}
  return middle();
}

try { if (Inst134 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5664,5676,191>",(assertEquals)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (outer) != "undefined") {_RecordType("<5680,5685,191>",(outer)); Inst135++; } } catch(e) {}
assertEquals(2, outer());

