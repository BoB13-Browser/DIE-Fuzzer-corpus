var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (TestSloppyMode) != "undefined") {_RecordType("<178,192,5>",(TestSloppyMode)); Inst0++; } } catch(e) {}
(function TestSloppyMode() {
try { if (Inst2 <= 1000 && typeof (eval) != "undefined") {_RecordType("<213,217,7>",(eval)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<249,258,10>",(arguments)); Inst3++; } } catch(e) {}
  var o = {
    eval() {
      return 1;
    },
    arguments() {
      return 2;
    },
  };
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<203,204,6>",(o)); Inst1++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<294,306,15>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o.eval) != "undefined") {_RecordType("<310,316,15>",(o.eval)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<310,311,15>",(o)); Inst6++; } } catch(e) {}
  assertEquals(1, o.eval());
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<323,335,16>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o.arguments) != "undefined") {_RecordType("<339,350,16>",(o.arguments)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<339,340,16>",(o)); Inst9++; } } catch(e) {}
  assertEquals(2, o.arguments());
})();

try { if (Inst10 <= 1000 && typeof (TestStrictMode) != "undefined") {_RecordType("<372,386,19>",(TestStrictMode)); Inst10++; } } catch(e) {}
(function TestStrictMode() {
  'use strict';

try { if (Inst12 <= 1000 && typeof (eval) != "undefined") {_RecordType("<424,428,23>",(eval)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<460,469,26>",(arguments)); Inst13++; } } catch(e) {}
  var o = {
    eval() {
      return 1;
    },
    arguments() {
      return 2;
    },
  };
try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<414,415,22>",(o)); Inst11++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<505,517,31>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o.eval) != "undefined") {_RecordType("<521,527,31>",(o.eval)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<521,522,31>",(o)); Inst16++; } } catch(e) {}
  assertEquals(1, o.eval());
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<534,546,32>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o.arguments) != "undefined") {_RecordType("<550,561,32>",(o.arguments)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<550,551,32>",(o)); Inst19++; } } catch(e) {}
  assertEquals(2, o.arguments());
})();

