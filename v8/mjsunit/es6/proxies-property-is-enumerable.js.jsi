var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var handler = {};
try { if (Inst0 <= 1000 && typeof (handler) != "undefined") {_RecordType("<172,179,5>",(handler)); Inst0++; } } catch(e) {}
var target = { a: 1 };
try { if (Inst1 <= 1000 && typeof (target) != "undefined") {_RecordType("<190,196,6>",(target)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<225,230,7>",(Proxy)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (target) != "undefined") {_RecordType("<231,237,7>",(target)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (handler) != "undefined") {_RecordType("<239,246,7>",(handler)); Inst5++; } } catch(e) {}
var proxy = new Proxy(target, handler);
try { if (Inst2 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<213,218,7>",(proxy)); Inst2++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<250,260,9>",(assertTrue)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (target.propertyIsEnumerable) != "undefined") {_RecordType("<261,288,9>",(target.propertyIsEnumerable)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (target) != "undefined") {_RecordType("<261,267,9>",(target)); Inst8++; } } catch(e) {}
assertTrue(target.propertyIsEnumerable('a'));
try { if (Inst9 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<296,306,10>",(assertTrue)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (proxy.propertyIsEnumerable) != "undefined") {_RecordType("<307,333,10>",(proxy.propertyIsEnumerable)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<307,312,10>",(proxy)); Inst11++; } } catch(e) {}
assertTrue(proxy.propertyIsEnumerable('a'));
try { if (Inst12 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<341,352,11>",(assertFalse)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (target.propertyIsEnumerable) != "undefined") {_RecordType("<353,380,11>",(target.propertyIsEnumerable)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (target) != "undefined") {_RecordType("<353,359,11>",(target)); Inst14++; } } catch(e) {}
assertFalse(target.propertyIsEnumerable('b'));
try { if (Inst15 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<388,399,12>",(assertFalse)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (proxy.propertyIsEnumerable) != "undefined") {_RecordType("<400,426,12>",(proxy.propertyIsEnumerable)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<400,405,12>",(proxy)); Inst17++; } } catch(e) {}
assertFalse(proxy.propertyIsEnumerable('b'));

handler.getOwnPropertyDescriptor = function(target, prop) {
try { if (Inst20 <= 1000 && typeof (target) != "undefined") {_RecordType("<479,485,14>",(target)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (prop) != "undefined") {_RecordType("<487,491,14>",(prop)); Inst21++; } } catch(e) {}
  return { configurable: true, enumerable: true, value: 10 };
}
try { if (Inst18 <= 1000 && typeof (handler.getOwnPropertyDescriptor) != "undefined") {_RecordType("<435,467,14>",(handler.getOwnPropertyDescriptor)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (handler) != "undefined") {_RecordType("<435,442,14>",(handler)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<559,569,17>",(assertTrue)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (target.propertyIsEnumerable) != "undefined") {_RecordType("<570,597,17>",(target.propertyIsEnumerable)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (target) != "undefined") {_RecordType("<570,576,17>",(target)); Inst24++; } } catch(e) {}
assertTrue(target.propertyIsEnumerable('a'));
try { if (Inst25 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<605,615,18>",(assertTrue)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (proxy.propertyIsEnumerable) != "undefined") {_RecordType("<616,642,18>",(proxy.propertyIsEnumerable)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<616,621,18>",(proxy)); Inst27++; } } catch(e) {}
assertTrue(proxy.propertyIsEnumerable('a'));
try { if (Inst28 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<650,661,19>",(assertFalse)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (target.propertyIsEnumerable) != "undefined") {_RecordType("<662,689,19>",(target.propertyIsEnumerable)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (target) != "undefined") {_RecordType("<662,668,19>",(target)); Inst30++; } } catch(e) {}
assertFalse(target.propertyIsEnumerable('b'));
try { if (Inst31 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<697,707,20>",(assertTrue)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (proxy.propertyIsEnumerable) != "undefined") {_RecordType("<708,734,20>",(proxy.propertyIsEnumerable)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<708,713,20>",(proxy)); Inst33++; } } catch(e) {}
assertTrue(proxy.propertyIsEnumerable('b'));

handler.getOwnPropertyDescriptor = function(target, prop) {
try { if (Inst36 <= 1000 && typeof (target) != "undefined") {_RecordType("<787,793,22>",(target)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (prop) != "undefined") {_RecordType("<795,799,22>",(prop)); Inst37++; } } catch(e) {}
  return { configurable: true, enumerable: false, value: 10 };
}
try { if (Inst34 <= 1000 && typeof (handler.getOwnPropertyDescriptor) != "undefined") {_RecordType("<743,775,22>",(handler.getOwnPropertyDescriptor)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (handler) != "undefined") {_RecordType("<743,750,22>",(handler)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<868,878,25>",(assertTrue)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (target.propertyIsEnumerable) != "undefined") {_RecordType("<879,906,25>",(target.propertyIsEnumerable)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (target) != "undefined") {_RecordType("<879,885,25>",(target)); Inst40++; } } catch(e) {}
assertTrue(target.propertyIsEnumerable('a'));
try { if (Inst41 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<914,925,26>",(assertFalse)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (proxy.propertyIsEnumerable) != "undefined") {_RecordType("<926,952,26>",(proxy.propertyIsEnumerable)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<926,931,26>",(proxy)); Inst43++; } } catch(e) {}
assertFalse(proxy.propertyIsEnumerable('a'));
try { if (Inst44 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<960,971,27>",(assertFalse)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (target.propertyIsEnumerable) != "undefined") {_RecordType("<972,999,27>",(target.propertyIsEnumerable)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (target) != "undefined") {_RecordType("<972,978,27>",(target)); Inst46++; } } catch(e) {}
assertFalse(target.propertyIsEnumerable('b'));
try { if (Inst47 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1007,1018,28>",(assertFalse)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (proxy.propertyIsEnumerable) != "undefined") {_RecordType("<1019,1045,28>",(proxy.propertyIsEnumerable)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<1019,1024,28>",(proxy)); Inst49++; } } catch(e) {}
assertFalse(proxy.propertyIsEnumerable('b'));

