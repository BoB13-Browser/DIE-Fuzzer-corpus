var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<168,180,5>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Array.prototype.fill.length) != "undefined") {_RecordType("<184,211,5>",(Array.prototype.fill.length)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array.prototype.fill) != "undefined") {_RecordType("<184,204,5>",(Array.prototype.fill)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<184,199,5>",(Array.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array) != "undefined") {_RecordType("<184,189,5>",(Array)); Inst4++; } } catch(e) {}
assertEquals(1, Array.prototype.fill.length);

try { if (Inst5 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<215,232,7>",(assertArrayEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof ([].fill) != "undefined") {_RecordType("<233,240,7>",([].fill)); Inst6++; } } catch(e) {}
assertArrayEquals([].fill(8), []);
try { if (Inst7 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<250,267,8>",(assertArrayEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<268,288,8>",([0, 0, 0, 0, 0].fill)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<293,302,8>",(undefined)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<304,313,8>",(undefined)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<315,324,8>",(undefined)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<326,335,8>",(undefined)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<337,346,8>",(undefined)); Inst13++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(), [undefined, undefined, undefined, undefined, undefined]);
try { if (Inst14 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<350,367,9>",(assertArrayEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<368,388,9>",([0, 0, 0, 0, 0].fill)); Inst15++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8), [8, 8, 8, 8, 8]);
try { if (Inst16 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<411,428,10>",(assertArrayEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<429,449,10>",([0, 0, 0, 0, 0].fill)); Inst17++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, 1), [0, 8, 8, 8, 8]);
try { if (Inst18 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<475,492,11>",(assertArrayEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<493,513,11>",([0, 0, 0, 0, 0].fill)); Inst19++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, 10), [0, 0, 0, 0, 0]);
try { if (Inst20 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<540,557,12>",(assertArrayEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<558,578,12>",([0, 0, 0, 0, 0].fill)); Inst21++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, -5), [8, 8, 8, 8, 8]);
try { if (Inst22 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<605,622,13>",(assertArrayEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<623,643,13>",([0, 0, 0, 0, 0].fill)); Inst23++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, 1, 4), [0, 8, 8, 8, 0]);
try { if (Inst24 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<672,689,14>",(assertArrayEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<690,710,14>",([0, 0, 0, 0, 0].fill)); Inst25++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, 1, -1), [0, 8, 8, 8, 0]);
try { if (Inst26 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<740,757,15>",(assertArrayEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<758,778,15>",([0, 0, 0, 0, 0].fill)); Inst27++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, 1, 42), [0, 8, 8, 8, 8]);
try { if (Inst28 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<808,825,16>",(assertArrayEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<826,846,16>",([0, 0, 0, 0, 0].fill)); Inst29++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, -3, 42), [0, 0, 8, 8, 8]);
try { if (Inst30 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<877,894,17>",(assertArrayEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<895,915,17>",([0, 0, 0, 0, 0].fill)); Inst31++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, -3, 4), [0, 0, 8, 8, 0]);
try { if (Inst32 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<945,962,18>",(assertArrayEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<963,983,18>",([0, 0, 0, 0, 0].fill)); Inst33++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, -2, -1), [0, 0, 0, 8, 0]);
try { if (Inst34 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1014,1031,19>",(assertArrayEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<1032,1052,19>",([0, 0, 0, 0, 0].fill)); Inst35++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, -1, -3), [0, 0, 0, 0, 0]);
try { if (Inst36 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1083,1100,20>",(assertArrayEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof ([0, 0, 0, 0, 0].fill) != "undefined") {_RecordType("<1101,1121,20>",([0, 0, 0, 0, 0].fill)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1125,1134,20>",(undefined)); Inst38++; } } catch(e) {}
assertArrayEquals([0, 0, 0, 0, 0].fill(8, undefined, 4), [8, 8, 8, 8, 0]);
try { if (Inst39 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1158,1175,21>",(assertArrayEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof ([ ,  ,  ,  , 0].fill) != "undefined") {_RecordType("<1176,1196,21>",([ ,  ,  ,  , 0].fill)); Inst40++; } } catch(e) {}
assertArrayEquals([ ,  ,  ,  , 0].fill(8, 1, 3), [, 8, 8, , 0]);

// If the range is empty, the array is not actually modified and
// should not throw, even when applied to a frozen object.
try { if (Inst41 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1348,1365,25>",(assertArrayEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Object.freeze([1, 2, 3]).fill) != "undefined") {_RecordType("<1366,1395,25>",(Object.freeze([1, 2, 3]).fill)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Object.freeze) != "undefined") {_RecordType("<1366,1379,25>",(Object.freeze)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1366,1372,25>",(Object)); Inst44++; } } catch(e) {}
assertArrayEquals(Object.freeze([1, 2, 3]).fill(0, 0, 0), [1, 2, 3]);

// Test exceptions
try { if (Inst45 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1438,1450,28>",(assertThrows)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1480,1489,28>",(TypeError)); Inst46++; } } catch(e) {}
assertThrows('Object.freeze([0]).fill()', TypeError);
try { if (Inst47 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1492,1504,29>",(assertThrows)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1540,1549,29>",(TypeError)); Inst48++; } } catch(e) {}
assertThrows('Array.prototype.fill.call(null)', TypeError);
try { if (Inst49 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1552,1564,30>",(assertThrows)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1605,1614,30>",(TypeError)); Inst50++; } } catch(e) {}
assertThrows('Array.prototype.fill.call(undefined)', TypeError);

