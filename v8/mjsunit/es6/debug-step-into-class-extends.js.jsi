var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

'use strict';

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<230,241,9>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<230,235,9>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<222,227,9>",(Debug)); Inst0++; } } catch(e) {}

var done = false;
try { if (Inst3 <= 1000 && typeof (done) != "undefined") {_RecordType("<247,251,11>",(done)); Inst3++; } } catch(e) {}
var stepCount = 0;
try { if (Inst4 <= 1000 && typeof (stepCount) != "undefined") {_RecordType("<265,274,12>",(stepCount)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<290,298,14>",(listener)); Inst5++; } } catch(e) {}
function listener(event, execState, eventData, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<299,304,14>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (execState) != "undefined") {_RecordType("<306,315,14>",(execState)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (eventData) != "undefined") {_RecordType("<317,326,14>",(eventData)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<328,332,14>",(data)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<342,347,15>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<351,373,15>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<351,367,15>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<351,356,15>",(Debug)); Inst13++; } } catch(e) {}
  if (event == Debug.DebugEvent.Break) {
try { if (Inst14 <= 1000 && typeof (done) != "undefined") {_RecordType("<386,390,16>",(done)); Inst14++; } } catch(e) {}
    if (!done) {
try { if (Inst15 <= 1000 && typeof (execState.prepareStep) != "undefined") {_RecordType("<400,421,17>",(execState.prepareStep)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (execState) != "undefined") {_RecordType("<400,409,17>",(execState)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<422,445,17>",(Debug.StepAction.StepIn)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<422,438,17>",(Debug.StepAction)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<422,427,17>",(Debug)); Inst19++; } } catch(e) {}
      execState.prepareStep(Debug.StepAction.StepIn);
try { if (Inst21 <= 1000 && typeof (execState.frame().sourceLineText) != "undefined") {_RecordType("<462,494,18>",(execState.frame().sourceLineText)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (execState.frame) != "undefined") {_RecordType("<462,477,18>",(execState.frame)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (execState) != "undefined") {_RecordType("<462,471,18>",(execState)); Inst23++; } } catch(e) {}
      var s = execState.frame().sourceLineText();
try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<458,459,18>",(s)); Inst20++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<504,514,19>",(assertTrue)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (s.indexOf) != "undefined") {_RecordType("<515,524,19>",(s.indexOf)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (s) != "undefined") {_RecordType("<515,516,19>",(s)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (stepCount) != "undefined") {_RecordType("<533,542,19>",(stepCount)); Inst27++; } } catch(e) {}
      assertTrue(s.indexOf('// ' + stepCount + '.') !== -1);
try { if (Inst28 <= 1000 && typeof (stepCount) != "undefined") {_RecordType("<565,574,20>",(stepCount)); Inst28++; } } catch(e) {}
      stepCount++;
    }
  }
};

try { if (Inst29 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<592,609,25>",(Debug.setListener)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<592,597,25>",(Debug)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (listener) != "undefined") {_RecordType("<610,618,25>",(listener)); Inst31++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst32 <= 1000 && typeof (GetBase) != "undefined") {_RecordType("<631,638,27>",(GetBase)); Inst32++; } } catch(e) {}
function GetBase() {
  var x = 1;   // 1.
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<649,650,28>",(x)); Inst33++; } } catch(e) {}
  var y = 2;   // 2.
try { if (Inst34 <= 1000 && typeof (y) != "undefined") {_RecordType("<670,671,29>",(y)); Inst34++; } } catch(e) {}
  done = true; // 3.
try { if (Inst35 <= 1000 && typeof (done) != "undefined") {_RecordType("<687,691,30>",(done)); Inst35++; } } catch(e) {}
  return null;
}

try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<733,734,34>",(f)); Inst36++; } } catch(e) {}
function f() {
try { if (Inst38 <= 1000 && typeof (GetBase) != "undefined") {_RecordType("<763,770,35>",(GetBase)); Inst38++; } } catch(e) {}
  class Derived extends GetBase() {} // 0.
try { if (Inst37 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<747,754,35>",(Derived)); Inst37++; } } catch(e) {}
}

try { if (Inst40 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<794,813,38>",(Debug.setBreakPoint)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<794,799,38>",(Debug)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<814,815,38>",(f)); Inst42++; } } catch(e) {}
var bp = Debug.setBreakPoint(f, 0);
try { if (Inst39 <= 1000 && typeof (bp) != "undefined") {_RecordType("<789,791,38>",(bp)); Inst39++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<821,822,39>",(f)); Inst43++; } } catch(e) {}
f();
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<826,838,40>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (stepCount) != "undefined") {_RecordType("<842,851,40>",(stepCount)); Inst45++; } } catch(e) {}
assertEquals(4, stepCount);

try { if (Inst46 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<855,872,42>",(Debug.setListener)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<855,860,42>",(Debug)); Inst47++; } } catch(e) {}
Debug.setListener(null);

