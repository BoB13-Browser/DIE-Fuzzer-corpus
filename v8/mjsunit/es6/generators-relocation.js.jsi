var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug --ignition-generators

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<237,248,7>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<237,242,7>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<229,234,7>",(Debug)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (assertIteratorResult) != "undefined") {_RecordType("<260,280,9>",(assertIteratorResult)); Inst3++; } } catch(e) {}
function assertIteratorResult(value, done, result) {
try { if (Inst4 <= 1000 && typeof (value) != "undefined") {_RecordType("<281,286,9>",(value)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (done) != "undefined") {_RecordType("<288,292,9>",(done)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (result) != "undefined") {_RecordType("<294,300,9>",(result)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<306,318,10>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (value) != "undefined") {_RecordType("<327,332,10>",(value)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (done) != "undefined") {_RecordType("<340,344,10>",(done)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (result) != "undefined") {_RecordType("<347,353,10>",(result)); Inst10++; } } catch(e) {}
  assertEquals({value: value, done: done}, result);
}

try { if (Inst11 <= 1000 && typeof (RunTest) != "undefined") {_RecordType("<368,375,13>",(RunTest)); Inst11++; } } catch(e) {}
function RunTest(formals_and_body, args, value1, value2) {
try { if (Inst12 <= 1000 && typeof (formals_and_body) != "undefined") {_RecordType("<376,392,13>",(formals_and_body)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (args) != "undefined") {_RecordType("<394,398,13>",(args)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (value1) != "undefined") {_RecordType("<400,406,13>",(value1)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (value2) != "undefined") {_RecordType("<408,414,13>",(value2)); Inst15++; } } catch(e) {}
  // A null listener. It isn't important what the listener does.
try { if (Inst16 <= 1000 && typeof (listener) != "undefined") {_RecordType("<494,502,15>",(listener)); Inst16++; } } catch(e) {}
  function listener(event, exec_state, event_data, data) {
try { if (Inst17 <= 1000 && typeof (event) != "undefined") {_RecordType("<503,508,15>",(event)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<510,520,15>",(exec_state)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<522,532,15>",(event_data)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (data) != "undefined") {_RecordType("<534,538,15>",(data)); Inst20++; } } catch(e) {}
  }

  // Create the generator function outside a debugging context. It will probably
  // be lazily compiled.
try { if (Inst22 <= 1000 && typeof ((function*(){}).constructor.apply) != "undefined") {_RecordType("<665,698,20>",((function*(){}).constructor.apply)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof ((function*(){}).constructor) != "undefined") {_RecordType("<665,692,20>",((function*(){}).constructor)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (formals_and_body) != "undefined") {_RecordType("<705,721,20>",(formals_and_body)); Inst24++; } } catch(e) {}
  var gen = (function*(){}).constructor.apply(null, formals_and_body);
try { if (Inst21 <= 1000 && typeof (gen) != "undefined") {_RecordType("<659,662,20>",(gen)); Inst21++; } } catch(e) {}

  // Instantiate the generator object.
try { if (Inst26 <= 1000 && typeof (gen.apply) != "undefined") {_RecordType("<776,785,23>",(gen.apply)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (gen) != "undefined") {_RecordType("<776,779,23>",(gen)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (args) != "undefined") {_RecordType("<792,796,23>",(args)); Inst28++; } } catch(e) {}
  var obj = gen.apply(null, args);
try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<770,773,23>",(obj)); Inst25++; } } catch(e) {}

  // Advance to the first yield.
try { if (Inst29 <= 1000 && typeof (assertIteratorResult) != "undefined") {_RecordType("<835,855,26>",(assertIteratorResult)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (value1) != "undefined") {_RecordType("<856,862,26>",(value1)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (obj.next) != "undefined") {_RecordType("<871,879,26>",(obj.next)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj) != "undefined") {_RecordType("<871,874,26>",(obj)); Inst32++; } } catch(e) {}
  assertIteratorResult(value1, false, obj.next());

  // Enable the debugger, which should force recompilation of the generator
  // function and relocation of the suspended generator activation.
try { if (Inst33 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<1031,1048,30>",(Debug.setListener)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1031,1036,30>",(Debug)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1049,1057,30>",(listener)); Inst35++; } } catch(e) {}
  Debug.setListener(listener);

  // Add a breakpoint on line 3 (the second yield).
try { if (Inst37 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<1124,1143,33>",(Debug.setBreakPoint)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1124,1129,33>",(Debug)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (gen) != "undefined") {_RecordType("<1144,1147,33>",(gen)); Inst39++; } } catch(e) {}
  var bp = Debug.setBreakPoint(gen, 3);
try { if (Inst36 <= 1000 && typeof (bp) != "undefined") {_RecordType("<1119,1121,33>",(bp)); Inst36++; } } catch(e) {}

  // Check that the generator resumes and suspends properly.
try { if (Inst40 <= 1000 && typeof (assertIteratorResult) != "undefined") {_RecordType("<1217,1237,36>",(assertIteratorResult)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (value2) != "undefined") {_RecordType("<1238,1244,36>",(value2)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (obj.next) != "undefined") {_RecordType("<1253,1261,36>",(obj.next)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1253,1256,36>",(obj)); Inst43++; } } catch(e) {}
  assertIteratorResult(value2, false, obj.next());

  // Disable debugger -- should not force recompilation.
try { if (Inst44 <= 1000 && typeof (Debug.clearBreakPoint) != "undefined") {_RecordType("<1326,1347,39>",(Debug.clearBreakPoint)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1326,1331,39>",(Debug)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (bp) != "undefined") {_RecordType("<1348,1350,39>",(bp)); Inst46++; } } catch(e) {}
  Debug.clearBreakPoint(bp);
try { if (Inst47 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<1355,1372,40>",(Debug.setListener)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1355,1360,40>",(Debug)); Inst48++; } } catch(e) {}
  Debug.setListener(null);

  // Run to completion.
try { if (Inst49 <= 1000 && typeof (assertIteratorResult) != "undefined") {_RecordType("<1407,1427,43>",(assertIteratorResult)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1428,1437,43>",(undefined)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (obj.next) != "undefined") {_RecordType("<1445,1453,43>",(obj.next)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1445,1448,43>",(obj)); Inst52++; } } catch(e) {}
  assertIteratorResult(undefined, true, obj.next());
}

try { if (Inst53 <= 1000 && typeof (prog) != "undefined") {_RecordType("<1470,1474,46>",(prog)); Inst53++; } } catch(e) {}
function prog(a, b, c) {
try { if (Inst54 <= 1000 && typeof (a) != "undefined") {_RecordType("<1475,1476,46>",(a)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (b) != "undefined") {_RecordType("<1478,1479,46>",(b)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (c) != "undefined") {_RecordType("<1481,1482,46>",(c)); Inst56++; } } catch(e) {}
try { if (Inst57 <= 1000 && typeof (a) != "undefined") {_RecordType("<1495,1496,47>",(a)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (b) != "undefined") {_RecordType("<1518,1519,47>",(b)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (c) != "undefined") {_RecordType("<1541,1542,47>",(c)); Inst59++; } } catch(e) {}
  return a + ';\n' + 'yield ' + b + ';\n' + 'yield ' + c;
}

// Simple empty local scope.
try { if (Inst60 <= 1000 && typeof (RunTest) != "undefined") {_RecordType("<1576,1583,51>",(RunTest)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (prog) != "undefined") {_RecordType("<1585,1589,51>",(prog)); Inst61++; } } catch(e) {}
RunTest([prog('', '1', '2')], [], 1, 2);

try { if (Inst62 <= 1000 && typeof (RunTest) != "undefined") {_RecordType("<1618,1625,53>",(RunTest)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (prog) != "undefined") {_RecordType("<1627,1631,53>",(prog)); Inst63++; } } catch(e) {}
RunTest([prog('for (;;) break', '1', '2')], [], 1, 2);

try { if (Inst64 <= 1000 && typeof (RunTest) != "undefined") {_RecordType("<1674,1681,55>",(RunTest)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (prog) != "undefined") {_RecordType("<1683,1687,55>",(prog)); Inst65++; } } catch(e) {}
RunTest([prog('while (0) foo()', '1', '2')], [], 1, 2);

try { if (Inst66 <= 1000 && typeof (RunTest) != "undefined") {_RecordType("<1731,1738,57>",(RunTest)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (prog) != "undefined") {_RecordType("<1745,1749,57>",(prog)); Inst67++; } } catch(e) {}
RunTest(['a', prog('var x = 3', 'a', 'x')], [1], 1, 3);

try { if (Inst68 <= 1000 && typeof (RunTest) != "undefined") {_RecordType("<1788,1795,59>",(RunTest)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (prog) != "undefined") {_RecordType("<1802,1806,59>",(prog)); Inst69++; } } catch(e) {}
RunTest(['a', prog('', '1', '2')], [42], 1, 2);

try { if (Inst70 <= 1000 && typeof (RunTest) != "undefined") {_RecordType("<1837,1844,61>",(RunTest)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (prog) != "undefined") {_RecordType("<1851,1855,61>",(prog)); Inst71++; } } catch(e) {}
RunTest(['a', prog('for (;;) break', '1', '2')], [42], 1, 2);

