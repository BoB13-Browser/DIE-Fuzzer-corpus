var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


try { if (Inst0 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<178,189,6>",(assertUndef)); Inst0++; } } catch(e) {}
function assertUndef(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<190,191,6>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<197,209,7>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<210,219,7>",(undefined)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<221,222,7>",(x)); Inst4++; } } catch(e) {}
  assertEquals(undefined, x);
}


// IfStatement [13.6.7]

try { if (Inst5 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<254,265,13>",(assertUndef)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (eval) != "undefined") {_RecordType("<266,270,13>",(eval)); Inst6++; } } catch(e) {}
assertUndef(eval('42; if (true) ; else 0;'));  // ES5: 42
try { if (Inst7 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<312,323,14>",(assertUndef)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (eval) != "undefined") {_RecordType("<324,328,14>",(eval)); Inst8++; } } catch(e) {}
assertUndef(eval('42; if (true) ;'));  // ES5: 42
try { if (Inst9 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<362,373,15>",(assertUndef)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (eval) != "undefined") {_RecordType("<374,378,15>",(eval)); Inst10++; } } catch(e) {}
assertUndef(eval('42; if (false) 0;'));  // ES5: 42

try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<415,427,17>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (eval) != "undefined") {_RecordType("<431,435,17>",(eval)); Inst12++; } } catch(e) {}
assertEquals(1, eval('42; if (true) 1;'));
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<458,470,18>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (eval) != "undefined") {_RecordType("<474,478,18>",(eval)); Inst14++; } } catch(e) {}
assertEquals(1, eval('42; if (true) 1; else 0;'));
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<509,521,19>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (eval) != "undefined") {_RecordType("<525,529,19>",(eval)); Inst16++; } } catch(e) {}
assertEquals(0, eval('42; if (false) 1; else 0;'));


// IterationStatement [13.7]

try { if (Inst17 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<593,604,24>",(assertUndef)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (eval) != "undefined") {_RecordType("<605,609,24>",(eval)); Inst18++; } } catch(e) {}
assertUndef(eval('42; do ; while (false);'));  // ES5: 42
try { if (Inst19 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<651,662,25>",(assertUndef)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (eval) != "undefined") {_RecordType("<663,667,25>",(eval)); Inst20++; } } catch(e) {}
assertUndef(eval('42; var x = 1; do ; while (x--);'));  // ES5: 42
try { if (Inst21 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<718,729,26>",(assertUndef)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (eval) != "undefined") {_RecordType("<730,734,26>",(eval)); Inst22++; } } catch(e) {}
assertUndef(eval('42; while (false) 0;'));  // ES5: 42
try { if (Inst23 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<773,784,27>",(assertUndef)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (eval) != "undefined") {_RecordType("<785,789,27>",(eval)); Inst24++; } } catch(e) {}
assertUndef(eval('42; while (true) break;'));  // ES5: 42
try { if (Inst25 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<831,842,28>",(assertUndef)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (eval) != "undefined") {_RecordType("<843,847,28>",(eval)); Inst26++; } } catch(e) {}
assertUndef(eval('42; bla: while (true) break bla;'));  // ES5: 42
try { if (Inst27 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<898,909,29>",(assertUndef)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (eval) != "undefined") {_RecordType("<910,914,29>",(eval)); Inst28++; } } catch(e) {}
assertUndef(eval('42; var x = 1; while (x--) ;'));  // ES5: 42
try { if (Inst29 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<961,972,30>",(assertUndef)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (eval) != "undefined") {_RecordType("<973,977,30>",(eval)); Inst30++; } } catch(e) {}
assertUndef(eval('42; for (; false; ) 0;'));  // ES5: 42
try { if (Inst31 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<1018,1029,31>",(assertUndef)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1030,1034,31>",(eval)); Inst32++; } } catch(e) {}
assertUndef(eval('42; for (var x = 1; x; x--) ;'));  // ES5: 42
try { if (Inst33 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<1082,1093,32>",(assertUndef)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1094,1098,32>",(eval)); Inst34++; } } catch(e) {}
assertUndef(eval('42; for (var x in ["foo", "bar"]) ;'));
try { if (Inst35 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<1140,1151,33>",(assertUndef)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1152,1156,33>",(eval)); Inst36++; } } catch(e) {}
assertUndef(eval('42; for (var x of ["foo", "bar"]) ;'));
try { if (Inst37 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<1198,1209,34>",(assertUndef)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1210,1214,34>",(eval)); Inst38++; } } catch(e) {}
assertUndef(eval('42; for (let x = 1; x; x--) ;'));
try { if (Inst39 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<1250,1261,35>",(assertUndef)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1262,1266,35>",(eval)); Inst40++; } } catch(e) {}
assertUndef(eval('42; for (let x in ["foo", "bar"]) ;'));
try { if (Inst41 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<1308,1319,36>",(assertUndef)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1320,1324,36>",(eval)); Inst42++; } } catch(e) {}
assertUndef(eval('42; for (let x of ["foo", "bar"]) ;'));
try { if (Inst43 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<1366,1377,37>",(assertUndef)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1378,1382,37>",(eval)); Inst44++; } } catch(e) {}
assertUndef(eval('42; for (const x in ["foo", "bar"]) ;'));
try { if (Inst45 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<1426,1437,38>",(assertUndef)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1438,1442,38>",(eval)); Inst46++; } } catch(e) {}
assertUndef(eval('42; for (const x of ["foo", "bar"]) ;'));

try { if (Inst47 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1487,1499,40>",(assertEquals)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1503,1507,40>",(eval)); Inst48++; } } catch(e) {}
assertEquals(1, eval('42; var x = 10; do x--; while (x);'));
try { if (Inst49 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1548,1560,41>",(assertEquals)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1564,1568,41>",(eval)); Inst50++; } } catch(e) {}
assertEquals(1, eval('42; var x = 10; while (x) x--;'));
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1605,1617,42>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1621,1625,42>",(eval)); Inst52++; } } catch(e) {}
assertEquals(1, eval('42; for (var x = 10; x; x--) x;'));
try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1663,1675,43>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1679,1683,43>",(eval)); Inst54++; } } catch(e) {}
assertEquals(1, eval('42; for (var x = 10; x; --x) x;'));
try { if (Inst55 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1721,1733,44>",(assertEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1737,1741,44>",(eval)); Inst56++; } } catch(e) {}
assertEquals(1, eval('42; for (let x = 10; x; --x) x;'));
try { if (Inst57 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1779,1791,45>",(assertEquals)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1795,1799,45>",(eval)); Inst58++; } } catch(e) {}
assertEquals(1, eval('42; var y = 2; for (var x in ["foo", "bar"]) y--;'));
try { if (Inst59 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1855,1867,46>",(assertEquals)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1871,1875,46>",(eval)); Inst60++; } } catch(e) {}
assertEquals(1, eval('42; var y = 2; for (const x in ["foo", "bar"]) y--;'));
try { if (Inst61 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1933,1945,47>",(assertEquals)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1949,1953,47>",(eval)); Inst62++; } } catch(e) {}
assertEquals(1, eval('42; var y = 2; for (let x in ["foo", "bar"]) y--;'));
try { if (Inst63 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2009,2021,48>",(assertEquals)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2025,2029,48>",(eval)); Inst64++; } } catch(e) {}
assertEquals(1, eval('42; var y = 2; for (var x of ["foo", "bar"]) y--;'));
try { if (Inst65 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2085,2097,49>",(assertEquals)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2101,2105,49>",(eval)); Inst66++; } } catch(e) {}
assertEquals(1, eval('42; var y = 2; for (const x of ["foo", "bar"]) y--;'));
try { if (Inst67 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2163,2175,50>",(assertEquals)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2179,2183,50>",(eval)); Inst68++; } } catch(e) {}
assertEquals(1, eval('42; var y = 2; for (let x of ["foo", "bar"]) y--;'));


// WithStatement [13.11.7]

try { if (Inst69 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<2269,2280,55>",(assertUndef)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2281,2285,55>",(eval)); Inst70++; } } catch(e) {}
assertUndef(eval('42; with ({}) ;'));  // ES5: 42

try { if (Inst71 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2320,2332,57>",(assertEquals)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2336,2340,57>",(eval)); Inst72++; } } catch(e) {}
assertEquals(1, eval('42; with ({}) 1;'));


// SwitchStatement [13.12.11]

try { if (Inst73 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<2396,2407,62>",(assertUndef)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2408,2412,62>",(eval)); Inst74++; } } catch(e) {}
assertUndef(eval('42; switch (0) {};'));  // ES5: 42
try { if (Inst75 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<2449,2460,63>",(assertUndef)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2461,2465,63>",(eval)); Inst76++; } } catch(e) {}
assertUndef(eval('42; switch (0) { case 1: 1; };'));  // ES5: 42
try { if (Inst77 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<2514,2525,64>",(assertUndef)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2526,2530,64>",(eval)); Inst78++; } } catch(e) {}
assertUndef(eval('42; switch (0) { case 0: ; };'));  // ES5: 42
try { if (Inst79 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<2578,2589,65>",(assertUndef)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2590,2594,65>",(eval)); Inst80++; } } catch(e) {}
assertUndef(eval('42; switch (0) { default: ; };'));  // ES5: 42
try { if (Inst81 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<2643,2654,66>",(assertUndef)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2655,2659,66>",(eval)); Inst82++; } } catch(e) {}
assertUndef(eval('42; switch (0) { case 0: break; }'));  // ES5: 42

try { if (Inst83 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2712,2724,68>",(assertEquals)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2728,2732,68>",(eval)); Inst84++; } } catch(e) {}
assertEquals(1, eval('42; switch (0) { case 0: 1; }'));
try { if (Inst85 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2768,2780,69>",(assertEquals)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2784,2788,69>",(eval)); Inst86++; } } catch(e) {}
assertEquals(1, eval('42; switch (0) { case 0: 1; break; }'));
try { if (Inst87 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2831,2843,70>",(assertEquals)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2847,2851,70>",(eval)); Inst88++; } } catch(e) {}
assertEquals(1, eval('42; switch (0) { case 0: 1; case 666: break; }'));
try { if (Inst89 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2904,2916,71>",(assertEquals)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2920,2924,71>",(eval)); Inst90++; } } catch(e) {}
assertEquals(2, eval('42; switch (0) { case 0: 1; case 666: 2; break; }'));


// TryStatement [13.15.8]

try { if (Inst91 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<3009,3020,76>",(assertUndef)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3021,3025,76>",(eval)); Inst92++; } } catch(e) {}
assertUndef(eval('42; try { } catch(e) { };'));  // ES5: 42
try { if (Inst93 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<3069,3080,77>",(assertUndef)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3081,3085,77>",(eval)); Inst94++; } } catch(e) {}
assertUndef(eval('42; try { } catch(e) { 0; };'));  // ES5: 42
try { if (Inst95 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<3132,3143,78>",(assertUndef)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3144,3148,78>",(eval)); Inst96++; } } catch(e) {}
assertUndef(eval('42; try { throw "" } catch(e) { };'));  // ES5: 42
try { if (Inst97 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<3201,3212,79>",(assertUndef)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3213,3217,79>",(eval)); Inst98++; } } catch(e) {}
assertUndef(eval('42; try { throw "" } catch(e) { } finally { };'));  // ES5: 42
try { if (Inst99 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<3282,3293,80>",(assertUndef)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3294,3298,80>",(eval)); Inst100++; } } catch(e) {}
assertUndef(eval('42; try { } finally { 666 };'));  // ES5: 42


// Some combinations

try { if (Inst101 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<3369,3380,85>",(assertUndef)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3381,3385,85>",(eval)); Inst102++; } } catch(e) {}
assertUndef(eval('42; switch (0) { case 0: if (true) break; }'));  // ES5: 42
try { if (Inst103 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<3447,3458,86>",(assertUndef)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3459,3463,86>",(eval)); Inst104++; } } catch(e) {}
assertUndef(eval('42; switch (0) { case 0: 1; if (true) ; }'));  // ES5: 1
try { if (Inst105 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<3522,3533,87>",(assertUndef)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3534,3538,87>",(eval)); Inst106++; } } catch(e) {}
assertUndef(eval('42; switch (0) { case 0: 1; try { break } catch(e) { }; }'));  // ES5: 1

try { if (Inst107 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3614,3626,89>",(assertEquals)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3630,3634,89>",(eval)); Inst108++; } } catch(e) {}
assertEquals(0, eval('42; switch (0) { case 0: 0; case 1: break; }'));
try { if (Inst109 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3685,3697,90>",(assertEquals)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3701,3705,90>",(eval)); Inst110++; } } catch(e) {}
assertEquals(0, eval('42; while (1) { 0; break; }'))
try { if (Inst111 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3738,3750,91>",(assertEquals)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3754,3758,91>",(eval)); Inst112++; } } catch(e) {}
assertEquals(0, eval('42; bla: while (1) { 0; break bla; }'))
try { if (Inst113 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3800,3812,92>",(assertEquals)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3816,3820,92>",(eval)); Inst114++; } } catch(e) {}
assertEquals(0, eval('42; while (1) { with ({}) { 0; break; } }'))
try { if (Inst115 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3867,3879,93>",(assertEquals)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3883,3887,93>",(eval)); Inst116++; } } catch(e) {}
assertEquals(0, eval('42; while (1) { try { 0; break } catch(e) {666} }'))
try { if (Inst117 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3942,3954,94>",(assertEquals)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3958,3962,94>",(eval)); Inst118++; } } catch(e) {}
assertEquals(0, eval(
    '42; while (1) { try { 0; break } catch(e) {666} finally {666} }'))
try { if (Inst119 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4036,4048,96>",(assertEquals)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4052,4056,96>",(eval)); Inst120++; } } catch(e) {}
assertEquals(0, eval(
    '42; while (1) { try { throw "" } catch(e) {666} finally {0; break} }'))
try { if (Inst121 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4135,4147,98>",(assertEquals)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4151,4155,98>",(eval)); Inst122++; } } catch(e) {}
assertEquals(0, eval(
    '42; while (1) { try { throw "" } catch(e) {0; break} finally {666} }'))
try { if (Inst123 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4234,4246,100>",(assertEquals)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4250,4254,100>",(eval)); Inst124++; } } catch(e) {}
assertEquals(0, eval(
    '42; while (1) { try { 666 } finally {0; break} }'));
try { if (Inst125 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4314,4326,102>",(assertEquals)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4330,4334,102>",(eval)); Inst126++; } } catch(e) {}
assertEquals(0, eval(
    '42; while (1) { try { 666; break } finally {0; break} }'));
try { if (Inst127 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4401,4413,104>",(assertEquals)); Inst127++; } } catch(e) {}try { if (Inst128 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4417,4421,104>",(eval)); Inst128++; } } catch(e) {}
assertEquals(0, eval(
    '42; lab: try { 666; break lab } finally {0; break lab}'));
try { if (Inst129 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4487,4499,106>",(assertEquals)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<4500,4509,106>",(undefined)); Inst130++; } } catch(e) {}try { if (Inst131 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4511,4515,106>",(eval)); Inst131++; } } catch(e) {}
assertEquals(undefined, eval(
  'var b = 1; ' +
  'outer: while (1) { while (1) { if (b--) 42; else break outer; }; 666 }'));

// The following is not what ES6 says, but see ES bug 4540.
try { if (Inst132 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<4674,4685,111>",(assertUndef)); Inst132++; } } catch(e) {}try { if (Inst133 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4686,4690,111>",(eval)); Inst133++; } } catch(e) {}
assertUndef(eval('42; switch (0) { case 0: 1; if (true) break; }'));  // ES5: 1



////////////////////////////////////////////////////////////////////////////////
//
// The following are copied from webkit/eval-throw-return and adapted.

try { if (Inst134 <= 1000 && typeof (throwFunc) != "undefined") {_RecordType("<4922,4931,119>",(throwFunc)); Inst134++; } } catch(e) {}
function throwFunc() {
  throw "";
}

try { if (Inst135 <= 1000 && typeof (throwOnReturn) != "undefined") {_RecordType("<4960,4973,123>",(throwOnReturn)); Inst135++; } } catch(e) {}
function throwOnReturn(){
  1;
try { if (Inst136 <= 1000 && typeof (throwFunc) != "undefined") {_RecordType("<4991,5000,125>",(throwFunc)); Inst136++; } } catch(e) {}
  return throwFunc();
}

try { if (Inst137 <= 1000 && typeof (twoFunc) != "undefined") {_RecordType("<5016,5023,128>",(twoFunc)); Inst137++; } } catch(e) {}
function twoFunc() {
  2;
}

try { if (Inst138 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5036,5048,132>",(assertEquals)); Inst138++; } } catch(e) {}try { if (Inst139 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5052,5056,132>",(eval)); Inst139++; } } catch(e) {}
assertEquals(1, eval("1;"));
try { if (Inst140 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5065,5076,133>",(assertUndef)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5077,5081,133>",(eval)); Inst141++; } } catch(e) {}
assertUndef(eval("1; try { foo = [2,3,throwFunc(), 4]; } catch (e){}"));
try { if (Inst142 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5138,5149,134>",(assertUndef)); Inst142++; } } catch(e) {}try { if (Inst143 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5150,5154,134>",(eval)); Inst143++; } } catch(e) {}
assertUndef(eval("1; try { 2; throw ''; } catch (e){}"));
try { if (Inst144 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5196,5207,135>",(assertUndef)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5208,5212,135>",(eval)); Inst145++; } } catch(e) {}
assertUndef(eval("1; try { 2; throwFunc(); } catch (e){}"));
try { if (Inst146 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5257,5269,136>",(assertEquals)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5273,5277,136>",(eval)); Inst147++; } } catch(e) {}
assertEquals(3, eval("1; try { 2; throwFunc(); } catch (e){3;} finally {}"));
try { if (Inst148 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5335,5347,137>",(assertEquals)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5351,5355,137>",(eval)); Inst149++; } } catch(e) {}
assertEquals(3, eval("1; try { 2; throwFunc(); } catch (e){3;} finally {4;}"));
try { if (Inst150 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5415,5426,138>",(assertUndef)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5427,5431,138>",(eval)); Inst151++; } } catch(e) {}
assertUndef(eval("function blah() { 1; }; blah();"));
try { if (Inst152 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5469,5480,139>",(assertUndef)); Inst152++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5481,5485,139>",(eval)); Inst153++; } } catch(e) {}
assertUndef(eval("var x = 1;"));
try { if (Inst154 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5502,5514,140>",(assertEquals)); Inst154++; } } catch(e) {}try { if (Inst155 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5518,5522,140>",(eval)); Inst155++; } } catch(e) {}
assertEquals(1, eval("if (true) { 1; } else { 2; }"));
try { if (Inst156 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5557,5569,141>",(assertEquals)); Inst156++; } } catch(e) {}try { if (Inst157 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5573,5577,141>",(eval)); Inst157++; } } catch(e) {}
assertEquals(2, eval("if (false) { 1; } else { 2; }"));
try { if (Inst158 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5613,5624,142>",(assertUndef)); Inst158++; } } catch(e) {}try { if (Inst159 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5625,5629,142>",(eval)); Inst159++; } } catch(e) {}
assertUndef(eval("try{1; if (true) { 2; throw ''; } else { 2; }} catch(e){}"));
try { if (Inst160 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5693,5705,143>",(assertEquals)); Inst160++; } } catch(e) {}try { if (Inst161 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5709,5713,143>",(eval)); Inst161++; } } catch(e) {}
assertEquals(2, eval("1; var i = 0; do { ++i; 2; } while(i!=1);"));
try { if (Inst162 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5761,5772,144>",(assertUndef)); Inst162++; } } catch(e) {}try { if (Inst163 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5773,5777,144>",(eval)); Inst163++; } } catch(e) {}
assertUndef(eval(
    "try{1; var i = 0; do { ++i; 2; throw ''; } while (i!=1);} catch(e){}"));
try { if (Inst164 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5857,5868,146>",(assertUndef)); Inst164++; } } catch(e) {}try { if (Inst165 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5869,5873,146>",(eval)); Inst165++; } } catch(e) {}
assertUndef(eval("1; try{2; throwOnReturn();} catch(e){}"));
try { if (Inst166 <= 1000 && typeof (assertUndef) != "undefined") {_RecordType("<5918,5929,147>",(assertUndef)); Inst166++; } } catch(e) {}try { if (Inst167 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5930,5934,147>",(eval)); Inst167++; } } catch(e) {}
assertUndef(eval("1; twoFunc();"));
try { if (Inst168 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5954,5966,148>",(assertEquals)); Inst168++; } } catch(e) {}try { if (Inst169 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5970,5974,148>",(eval)); Inst169++; } } catch(e) {}
assertEquals(2, eval("1; with ( { a: 0 } ) { 2; }"));

