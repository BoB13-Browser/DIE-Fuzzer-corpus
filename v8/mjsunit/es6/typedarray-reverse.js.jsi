var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (ArrayMaker) != "undefined") {_RecordType("<177,187,5>",(ArrayMaker)); Inst0++; } } catch(e) {}
function ArrayMaker(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<188,189,5>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<202,203,6>",(x)); Inst2++; } } catch(e) {}
  return x;
}
try { if (Inst5 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<230,245,8>",(Array.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Array) != "undefined") {_RecordType("<230,235,8>",(Array)); Inst6++; } } catch(e) {}
ArrayMaker.prototype = Array.prototype;
try { if (Inst3 <= 1000 && typeof (ArrayMaker.prototype) != "undefined") {_RecordType("<207,227,8>",(ArrayMaker.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ArrayMaker) != "undefined") {_RecordType("<207,217,8>",(ArrayMaker)); Inst4++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<276,286,11>",(Uint8Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<290,299,12>",(Int8Array)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Uint16Array) != "undefined") {_RecordType("<303,314,13>",(Uint16Array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Int16Array) != "undefined") {_RecordType("<318,328,14>",(Int16Array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<332,343,15>",(Uint32Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<347,357,16>",(Int32Array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Uint8ClampedArray) != "undefined") {_RecordType("<361,378,17>",(Uint8ClampedArray)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<382,394,18>",(Float32Array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Float64Array) != "undefined") {_RecordType("<398,410,19>",(Float64Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ArrayMaker) != "undefined") {_RecordType("<414,424,20>",(ArrayMaker)); Inst17++; } } catch(e) {}
var arrayConstructors = [
  Uint8Array,
  Int8Array,
  Uint16Array,
  Int16Array,
  Uint32Array,
  Int32Array,
  Uint8ClampedArray,
  Float32Array,
  Float64Array,
  ArrayMaker  // Also test arrays
];
try { if (Inst7 <= 1000 && typeof (arrayConstructors) != "undefined") {_RecordType("<252,269,10>",(arrayConstructors)); Inst7++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<459,480,23>",(assertArrayLikeEquals)); Inst18++; } } catch(e) {}
function assertArrayLikeEquals(value, expected, type) {
try { if (Inst19 <= 1000 && typeof (value) != "undefined") {_RecordType("<481,486,23>",(value)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (expected) != "undefined") {_RecordType("<488,496,23>",(expected)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (type) != "undefined") {_RecordType("<498,502,23>",(type)); Inst21++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<508,520,24>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (value.__proto__) != "undefined") {_RecordType("<521,536,24>",(value.__proto__)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (value) != "undefined") {_RecordType("<521,526,24>",(value)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (type.prototype) != "undefined") {_RecordType("<538,552,24>",(type.prototype)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (type) != "undefined") {_RecordType("<538,542,24>",(type)); Inst26++; } } catch(e) {}
  assertEquals(value.__proto__, type.prototype);
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<557,569,25>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (expected.length) != "undefined") {_RecordType("<570,585,25>",(expected.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (expected) != "undefined") {_RecordType("<570,578,25>",(expected)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (value.length) != "undefined") {_RecordType("<587,599,25>",(value.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (value) != "undefined") {_RecordType("<587,592,25>",(value)); Inst31++; } } catch(e) {}
  assertEquals(expected.length, value.length);
  for (var i = 0; i < value.length; ++i) {
try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<613,614,26>",(i)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<620,621,26>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (value.length) != "undefined") {_RecordType("<624,636,26>",(value.length)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (value) != "undefined") {_RecordType("<624,629,26>",(value)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<640,641,26>",(i)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<649,661,27>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (expected[i]) != "undefined") {_RecordType("<662,673,27>",(expected[i])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (expected) != "undefined") {_RecordType("<662,670,27>",(expected)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (value[i]) != "undefined") {_RecordType("<675,683,27>",(value[i])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (value) != "undefined") {_RecordType("<675,680,27>",(value)); Inst41++; } } catch(e) {}
    assertEquals(expected[i], value[i]);
  }
}

for (var constructor of arrayConstructors) {
try { if (Inst42 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<702,713,31>",(constructor)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (arrayConstructors) != "undefined") {_RecordType("<717,734,31>",(arrayConstructors)); Inst43++; } } catch(e) {}
  // Test reversing both even and odd length arrays
try { if (Inst45 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<804,815,33>",(constructor)); Inst45++; } } catch(e) {}
  var a = new constructor([1, 2, 3]);
try { if (Inst44 <= 1000 && typeof (a) != "undefined") {_RecordType("<796,797,33>",(a)); Inst44++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<830,851,34>",(assertArrayLikeEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (a.reverse) != "undefined") {_RecordType("<852,861,34>",(a.reverse)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (a) != "undefined") {_RecordType("<852,853,34>",(a)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<876,887,34>",(constructor)); Inst49++; } } catch(e) {}
  assertArrayLikeEquals(a.reverse(), [3, 2, 1], constructor);
try { if (Inst50 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<892,913,35>",(assertArrayLikeEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (a) != "undefined") {_RecordType("<914,915,35>",(a)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<928,939,35>",(constructor)); Inst52++; } } catch(e) {}
  assertArrayLikeEquals(a, [3, 2, 1], constructor);

try { if (Inst54 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<953,964,37>",(constructor)); Inst54++; } } catch(e) {}
  a = new constructor([1, 2, 3, 4]);
try { if (Inst53 <= 1000 && typeof (a) != "undefined") {_RecordType("<945,946,37>",(a)); Inst53++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<982,1003,38>",(assertArrayLikeEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (a.reverse) != "undefined") {_RecordType("<1004,1013,38>",(a.reverse)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (a) != "undefined") {_RecordType("<1004,1005,38>",(a)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1031,1042,38>",(constructor)); Inst58++; } } catch(e) {}
  assertArrayLikeEquals(a.reverse(), [4, 3, 2, 1], constructor);
try { if (Inst59 <= 1000 && typeof (assertArrayLikeEquals) != "undefined") {_RecordType("<1047,1068,39>",(assertArrayLikeEquals)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (a) != "undefined") {_RecordType("<1069,1070,39>",(a)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1086,1097,39>",(constructor)); Inst61++; } } catch(e) {}
  assertArrayLikeEquals(a, [4, 3, 2, 1], constructor);

try { if (Inst62 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1107,1118,41>",(constructor)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (ArrayMaker) != "undefined") {_RecordType("<1122,1132,41>",(ArrayMaker)); Inst63++; } } catch(e) {}
  if (constructor != ArrayMaker) {
    // Cannot be called on objects which are not TypedArrays
try { if (Inst64 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1201,1213,43>",(assertThrows)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (a.reverse.call) != "undefined") {_RecordType("<1228,1242,43>",(a.reverse.call)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (a.reverse) != "undefined") {_RecordType("<1228,1237,43>",(a.reverse)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (a) != "undefined") {_RecordType("<1228,1229,43>",(a)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1262,1271,43>",(TypeError)); Inst68++; } } catch(e) {}
    assertThrows(function () { a.reverse.call({ length: 0 }); }, TypeError);
  } else {
    // Array.reverse works on array-like objects
    var x = { length: 2, 1: 5 };
try { if (Inst69 <= 1000 && typeof (x) != "undefined") {_RecordType("<1342,1343,46>",(x)); Inst69++; } } catch(e) {}
try { if (Inst70 <= 1000 && typeof (a.reverse.call) != "undefined") {_RecordType("<1371,1385,47>",(a.reverse.call)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (a.reverse) != "undefined") {_RecordType("<1371,1380,47>",(a.reverse)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (a) != "undefined") {_RecordType("<1371,1372,47>",(a)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (x) != "undefined") {_RecordType("<1386,1387,47>",(x)); Inst73++; } } catch(e) {}
    a.reverse.call(x);
try { if (Inst74 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1394,1406,48>",(assertEquals)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (x.length) != "undefined") {_RecordType("<1410,1418,48>",(x.length)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (x) != "undefined") {_RecordType("<1410,1411,48>",(x)); Inst76++; } } catch(e) {}
    assertEquals(2, x.length);
try { if (Inst77 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1425,1436,49>",(assertFalse)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (Object.hasOwnProperty) != "undefined") {_RecordType("<1437,1458,49>",(Object.hasOwnProperty)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1437,1443,49>",(Object)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (x) != "undefined") {_RecordType("<1459,1460,49>",(x)); Inst80++; } } catch(e) {}
    assertFalse(Object.hasOwnProperty(x, '1'));
try { if (Inst81 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1473,1485,50>",(assertEquals)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (x[0]) != "undefined") {_RecordType("<1489,1493,50>",(x[0])); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (x) != "undefined") {_RecordType("<1489,1490,50>",(x)); Inst83++; } } catch(e) {}
    assertEquals(5, x[0]);
  }

try { if (Inst84 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1503,1515,53>",(assertEquals)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (a.reverse.length) != "undefined") {_RecordType("<1519,1535,53>",(a.reverse.length)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (a.reverse) != "undefined") {_RecordType("<1519,1528,53>",(a.reverse)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (a) != "undefined") {_RecordType("<1519,1520,53>",(a)); Inst87++; } } catch(e) {}
  assertEquals(0, a.reverse.length);
}

