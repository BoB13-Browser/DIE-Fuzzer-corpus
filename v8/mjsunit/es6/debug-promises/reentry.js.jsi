var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug --promise-extra

// Test reentry of special try catch for Promises.

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<279,290,9>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<279,284,9>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<271,276,9>",(Debug)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Debug.setBreakOnUncaughtException) != "undefined") {_RecordType("<293,326,11>",(Debug.setBreakOnUncaughtException)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<293,298,11>",(Debug)); Inst4++; } } catch(e) {}
Debug.setBreakOnUncaughtException();
try { if (Inst5 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<330,347,12>",(Debug.setListener)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<330,335,12>",(Debug)); Inst6++; } } catch(e) {}
Debug.setListener(function(event, exec_state, event_data, data) { });
try { if (Inst7 <= 1000 && typeof (event) != "undefined") {_RecordType("<357,362,12>",(event)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<364,374,12>",(exec_state)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<376,386,12>",(event_data)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (data) != "undefined") {_RecordType("<388,392,12>",(data)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<413,420,14>",(Promise)); Inst12++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<449,456,14>",(resolve)); Inst15++; } } catch(e) {}
var p = new Promise(function(resolve, reject) { resolve(); });
try { if (Inst11 <= 1000 && typeof (p) != "undefined") {_RecordType("<405,406,14>",(p)); Inst11++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<430,437,14>",(resolve)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (reject) != "undefined") {_RecordType("<439,445,14>",(reject)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (p.chain) != "undefined") {_RecordType("<472,479,15>",(p.chain)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (p) != "undefined") {_RecordType("<472,473,15>",(p)); Inst18++; } } catch(e) {}
var q = p.chain(function() {
try { if (Inst19 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<499,506,16>",(Promise)); Inst19++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<535,542,16>",(resolve)); Inst22++; } } catch(e) {}
  new Promise(function(resolve, reject) { resolve(); });
try { if (Inst20 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<516,523,16>",(resolve)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (reject) != "undefined") {_RecordType("<525,531,16>",(reject)); Inst21++; } } catch(e) {}
});
try { if (Inst16 <= 1000 && typeof (q) != "undefined") {_RecordType("<468,469,15>",(q)); Inst16++; } } catch(e) {}

