var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

// Test debug events when we only listen to uncaught exceptions and
// the Promise is rejected within a try-catch in the Promise constructor.
// We expect an Exception debug event with a promise to be triggered.

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<424,435,11>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<424,429,11>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<416,421,11>",(Debug)); Inst0++; } } catch(e) {}

var step = 0;
try { if (Inst3 <= 1000 && typeof (step) != "undefined") {_RecordType("<442,446,13>",(step)); Inst3++; } } catch(e) {}
var exception = null;
try { if (Inst4 <= 1000 && typeof (exception) != "undefined") {_RecordType("<456,465,14>",(exception)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<484,492,16>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<493,498,16>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<500,510,16>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<512,522,16>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<524,528,16>",(data)); Inst9++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<960,961,27>",(e)); Inst33++; } } catch(e) {}
  try {
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<548,553,18>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Exception) != "undefined") {_RecordType("<557,583,18>",(Debug.DebugEvent.Exception)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<557,573,18>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<557,562,18>",(Debug)); Inst13++; } } catch(e) {}
    if (event == Debug.DebugEvent.Exception) {
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<593,605,19>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (step) != "undefined") {_RecordType("<609,613,19>",(step)); Inst15++; } } catch(e) {}
      assertEquals(0, step);
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<622,634,20>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (event_data.exception().message) != "undefined") {_RecordType("<647,677,20>",(event_data.exception().message)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (event_data.exception) != "undefined") {_RecordType("<647,667,20>",(event_data.exception)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<647,657,20>",(event_data)); Inst19++; } } catch(e) {}
      assertEquals("uncaught", event_data.exception().message);
try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<686,696,21>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (event_data.promise) != "undefined") {_RecordType("<697,715,21>",(event_data.promise)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<697,707,21>",(event_data)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<729,736,21>",(Promise)); Inst23++; } } catch(e) {}
      assertTrue(event_data.promise() instanceof Promise);
try { if (Inst24 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<745,755,22>",(assertTrue)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (event_data.uncaught) != "undefined") {_RecordType("<756,775,22>",(event_data.uncaught)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<756,766,22>",(event_data)); Inst26++; } } catch(e) {}
      assertTrue(event_data.uncaught());
      // Assert that the debug event is triggered at the throw site.
try { if (Inst27 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<855,865,24>",(assertTrue)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (exec_state.frame(0).sourceLineText().indexOf) != "undefined") {_RecordType("<866,910,24>",(exec_state.frame(0).sourceLineText().indexOf)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (exec_state.frame(0).sourceLineText) != "undefined") {_RecordType("<866,900,24>",(exec_state.frame(0).sourceLineText)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<866,882,24>",(exec_state.frame)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<866,876,24>",(exec_state)); Inst31++; } } catch(e) {}
      assertTrue(exec_state.frame(0).sourceLineText().indexOf("// event") > 0);
try { if (Inst32 <= 1000 && typeof (step) != "undefined") {_RecordType("<935,939,25>",(step)); Inst32++; } } catch(e) {}
      step++;
    }
  } catch (e) {
try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<981,982,28>",(e)); Inst35++; } } catch(e) {}
    exception = e;
try { if (Inst34 <= 1000 && typeof (exception) != "undefined") {_RecordType("<969,978,28>",(exception)); Inst34++; } } catch(e) {}
  }
}

try { if (Inst36 <= 1000 && typeof (Debug.setBreakOnUncaughtException) != "undefined") {_RecordType("<991,1024,32>",(Debug.setBreakOnUncaughtException)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<991,996,32>",(Debug)); Inst37++; } } catch(e) {}
Debug.setBreakOnUncaughtException();
try { if (Inst38 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<1028,1045,33>",(Debug.setListener)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1028,1033,33>",(Debug)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1046,1054,33>",(listener)); Inst40++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst42 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1070,1077,35>",(Promise)); Inst42++; } } catch(e) {}
var p = new Promise(function(resolve, reject) {
try { if (Inst43 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<1087,1094,35>",(resolve)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (reject) != "undefined") {_RecordType("<1096,1102,35>",(reject)); Inst44++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (e) != "undefined") {_RecordType("<1234,1235,38>",(e)); Inst47++; } } catch(e) {}
  try {  // This try-catch must not prevent this uncaught reject event.
try { if (Inst45 <= 1000 && typeof (reject) != "undefined") {_RecordType("<1182,1188,37>",(reject)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1193,1198,37>",(Error)); Inst46++; } } catch(e) {}
    reject(new Error("uncaught"));  // event
  } catch (e) { }
});
try { if (Inst41 <= 1000 && typeof (p) != "undefined") {_RecordType("<1062,1063,35>",(p)); Inst41++; } } catch(e) {}

try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1246,1258,41>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (step) != "undefined") {_RecordType("<1262,1266,41>",(step)); Inst49++; } } catch(e) {}
assertEquals(1, step);
try { if (Inst50 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1269,1279,42>",(assertNull)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (exception) != "undefined") {_RecordType("<1280,1289,42>",(exception)); Inst51++; } } catch(e) {}
assertNull(exception);

