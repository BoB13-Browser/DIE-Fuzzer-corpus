var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<215,226,7>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<215,220,7>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<207,212,7>",(Debug)); Inst0++; } } catch(e) {}
var exception = null;
try { if (Inst3 <= 1000 && typeof (exception) != "undefined") {_RecordType("<232,241,8>",(exception)); Inst3++; } } catch(e) {}
var breaks = [];
try { if (Inst4 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<254,260,9>",(breaks)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<277,285,11>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<286,291,11>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<293,303,11>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<305,315,11>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<317,321,11>",(data)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<331,336,12>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<340,362,12>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<340,356,12>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<340,345,12>",(Debug)); Inst13++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<510,511,16>",(e)); Inst25++; } } catch(e) {}
  try {
try { if (Inst14 <= 1000 && typeof (breaks.push) != "undefined") {_RecordType("<384,395,14>",(breaks.push)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<384,390,14>",(breaks)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state.frame(0).sourceLineText().trimLeft) != "undefined") {_RecordType("<396,441,14>",(exec_state.frame(0).sourceLineText().trimLeft)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state.frame(0).sourceLineText) != "undefined") {_RecordType("<396,430,14>",(exec_state.frame(0).sourceLineText)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<396,412,14>",(exec_state.frame)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<396,406,14>",(exec_state)); Inst19++; } } catch(e) {}
    breaks.push(exec_state.frame(0).sourceLineText().trimLeft());
try { if (Inst20 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<450,472,15>",(exec_state.prepareStep)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<450,460,15>",(exec_state)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<473,496,15>",(Debug.StepAction.StepIn)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<473,489,15>",(Debug.StepAction)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<473,478,15>",(Debug)); Inst24++; } } catch(e) {}
    exec_state.prepareStep(Debug.StepAction.StepIn);
  } catch (e) {
try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<531,532,17>",(e)); Inst27++; } } catch(e) {}
    exception = e;
try { if (Inst26 <= 1000 && typeof (exception) != "undefined") {_RecordType("<519,528,17>",(exception)); Inst26++; } } catch(e) {}
  }
}

try { if (Inst28 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<541,558,21>",(Debug.setListener)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<541,546,21>",(Debug)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (listener) != "undefined") {_RecordType("<559,567,21>",(listener)); Inst30++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst31 <= 1000 && typeof (resolver) != "undefined") {_RecordType("<580,588,23>",(resolver)); Inst31++; } } catch(e) {}
function resolver(resolve, reject) {
try { if (Inst32 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<589,596,23>",(resolve)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (reject) != "undefined") {_RecordType("<598,604,23>",(reject)); Inst33++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (print) != "undefined") {_RecordType("<610,615,24>",(print)); Inst34++; } } catch(e) {}
  print(1);
try { if (Inst35 <= 1000 && typeof (print) != "undefined") {_RecordType("<622,627,25>",(print)); Inst35++; } } catch(e) {}
  print(2);
try { if (Inst36 <= 1000 && typeof (print) != "undefined") {_RecordType("<634,639,26>",(print)); Inst36++; } } catch(e) {}
  print(3);
try { if (Inst37 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<646,653,27>",(resolve)); Inst37++; } } catch(e) {}
  resolve();
}

debugger;
try { if (Inst39 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<682,689,31>",(Promise)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (resolver) != "undefined") {_RecordType("<690,698,31>",(resolver)); Inst40++; } } catch(e) {}
var p = new Promise(resolver);
try { if (Inst38 <= 1000 && typeof (p) != "undefined") {_RecordType("<674,675,31>",(p)); Inst38++; } } catch(e) {}

try { if (Inst41 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<702,719,33>",(Debug.setListener)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<702,707,33>",(Debug)); Inst42++; } } catch(e) {}
Debug.setListener(null);

var expected_breaks = [
  "debugger;",
  "var p = new Promise(resolver);",
  "print(1);",
  "print(2);",
  "print(3);",
  "resolve();",
  "}",
  "Debug.setListener(null);"
];
try { if (Inst43 <= 1000 && typeof (expected_breaks) != "undefined") {_RecordType("<732,747,35>",(expected_breaks)); Inst43++; } } catch(e) {}

try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<904,916,46>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (expected_breaks) != "undefined") {_RecordType("<917,932,46>",(expected_breaks)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<934,940,46>",(breaks)); Inst46++; } } catch(e) {}
assertEquals(expected_breaks, breaks);
try { if (Inst47 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<943,953,47>",(assertNull)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (exception) != "undefined") {_RecordType("<954,963,47>",(exception)); Inst48++; } } catch(e) {}
assertNull(exception);

