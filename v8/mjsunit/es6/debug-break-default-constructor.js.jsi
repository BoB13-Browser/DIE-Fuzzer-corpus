var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

"use strict";

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<230,241,9>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<230,235,9>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<222,227,9>",(Debug)); Inst0++; } } catch(e) {}
var exception = null;
try { if (Inst3 <= 1000 && typeof (exception) != "undefined") {_RecordType("<247,256,10>",(exception)); Inst3++; } } catch(e) {}
var super_called = false;
try { if (Inst4 <= 1000 && typeof (super_called) != "undefined") {_RecordType("<269,281,11>",(super_called)); Inst4++; } } catch(e) {}
var step_count = 0;
try { if (Inst5 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<295,305,12>",(step_count)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (listener) != "undefined") {_RecordType("<321,329,14>",(listener)); Inst6++; } } catch(e) {}
function listener(event, execState, eventData, data) {
try { if (Inst7 <= 1000 && typeof (event) != "undefined") {_RecordType("<330,335,14>",(event)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (execState) != "undefined") {_RecordType("<337,346,14>",(execState)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (eventData) != "undefined") {_RecordType("<348,357,14>",(eventData)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (data) != "undefined") {_RecordType("<359,363,14>",(data)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (event) != "undefined") {_RecordType("<373,378,15>",(event)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<382,404,15>",(Debug.DebugEvent.Break)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<382,398,15>",(Debug.DebugEvent)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<382,387,15>",(Debug)); Inst14++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<609,610,21>",(e)); Inst29++; } } catch(e) {}
  try {
try { if (Inst15 <= 1000 && typeof (execState.prepareStep) != "undefined") {_RecordType("<426,447,17>",(execState.prepareStep)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (execState) != "undefined") {_RecordType("<426,435,17>",(execState)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<448,471,17>",(Debug.StepAction.StepIn)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<448,464,17>",(Debug.StepAction)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<448,453,17>",(Debug)); Inst19++; } } catch(e) {}
    execState.prepareStep(Debug.StepAction.StepIn);
try { if (Inst21 <= 1000 && typeof (execState.frame().sourceLineText) != "undefined") {_RecordType("<486,518,18>",(execState.frame().sourceLineText)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (execState.frame) != "undefined") {_RecordType("<486,501,18>",(execState.frame)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (execState) != "undefined") {_RecordType("<486,495,18>",(execState)); Inst23++; } } catch(e) {}
    var s = execState.frame().sourceLineText();
try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<482,483,18>",(s)); Inst20++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<526,536,19>",(step_count)); Inst24++; } } catch(e) {}
    step_count++;
try { if (Inst25 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<544,554,20>",(assertTrue)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (s.indexOf) != "undefined") {_RecordType("<555,564,20>",(s.indexOf)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (s) != "undefined") {_RecordType("<555,556,20>",(s)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<573,583,20>",(step_count)); Inst28++; } } catch(e) {}
    assertTrue(s.indexOf('// ' + step_count + '.') >= 0);
  } catch (e) {
try { if (Inst31 <= 1000 && typeof (e) != "undefined") {_RecordType("<630,631,22>",(e)); Inst31++; } } catch(e) {}
    exception = e;
try { if (Inst30 <= 1000 && typeof (exception) != "undefined") {_RecordType("<618,627,22>",(exception)); Inst30++; } } catch(e) {}
  }
}

class Base {
  constructor() {
    var x = 1;     // 2.
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<679,680,28>",(x)); Inst33++; } } catch(e) {}
  }                // 3.
}
try { if (Inst32 <= 1000 && typeof (Base) != "undefined") {_RecordType("<646,650,26>",(Base)); Inst32++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (Base) != "undefined") {_RecordType("<746,750,32>",(Base)); Inst35++; } } catch(e) {}
class Derived extends Base {}  // 1. // 4.
try { if (Inst34 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<730,737,32>",(Derived)); Inst34++; } } catch(e) {}

try { if (Inst36 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<768,785,34>",(Debug.setListener)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<768,773,34>",(Debug)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (listener) != "undefined") {_RecordType("<786,794,34>",(listener)); Inst38++; } } catch(e) {}
Debug.setListener(listener);
try { if (Inst40 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<806,825,35>",(Debug.setBreakPoint)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<806,811,35>",(Debug)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<826,833,35>",(Derived)); Inst42++; } } catch(e) {}
var bp = Debug.setBreakPoint(Derived, 0);
try { if (Inst39 <= 1000 && typeof (bp) != "undefined") {_RecordType("<801,803,35>",(bp)); Inst39++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<844,851,37>",(Derived)); Inst43++; } } catch(e) {}
new Derived();

try { if (Inst44 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<856,873,39>",(Debug.setListener)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<856,861,39>",(Debug)); Inst45++; } } catch(e) {}
Debug.setListener(null);  // 5.

try { if (Inst46 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<889,899,41>",(assertNull)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (exception) != "undefined") {_RecordType("<900,909,41>",(exception)); Inst47++; } } catch(e) {}
assertNull(exception);
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<912,924,42>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<928,938,42>",(step_count)); Inst49++; } } catch(e) {}
assertEquals(5, step_count);

