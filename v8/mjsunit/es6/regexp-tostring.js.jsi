var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var log = [];
try { if (Inst0 <= 1000 && typeof (log) != "undefined") {_RecordType("<172,175,5>",(log)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (source) != "undefined") {_RecordType("<210,216,9>",(source)); Inst2++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (flags) != "undefined") {_RecordType("<394,399,18>",(flags)); Inst7++; } } catch(e) {}
var fake =
    {
      get source() {
try { if (Inst3 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<229,237,10>",(log.push)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (log) != "undefined") {_RecordType("<229,232,10>",(log)); Inst4++; } } catch(e) {}
        log.push("p");
        return {
          toString: function() {
try { if (Inst5 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<306,314,13>",(log.push)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (log) != "undefined") {_RecordType("<306,309,13>",(log)); Inst6++; } } catch(e) {}
            log.push("ps");
            return "pattern";
          }
        };
      },
      get flags() {
try { if (Inst8 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<412,420,19>",(log.push)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (log) != "undefined") {_RecordType("<412,415,19>",(log)); Inst9++; } } catch(e) {}
        log.push("f");
        return {
          toString: function() {
try { if (Inst10 <= 1000 && typeof (log.push) != "undefined") {_RecordType("<489,497,22>",(log.push)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (log) != "undefined") {_RecordType("<489,492,22>",(log)); Inst11++; } } catch(e) {}
            log.push("fs");
            return "flags";
          }
        };
      }
    }
try { if (Inst1 <= 1000 && typeof (fake) != "undefined") {_RecordType("<187,191,7>",(fake)); Inst1++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (testThrows) != "undefined") {_RecordType("<580,590,29>",(testThrows)); Inst12++; } } catch(e) {}
function testThrows(x) {
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<591,592,29>",(x)); Inst13++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<654,655,32>",(e)); Inst19++; } } catch(e) {}
  try {
try { if (Inst14 <= 1000 && typeof (RegExp.prototype.toString.call) != "undefined") {_RecordType("<608,638,31>",(RegExp.prototype.toString.call)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (RegExp.prototype.toString) != "undefined") {_RecordType("<608,633,31>",(RegExp.prototype.toString)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<608,624,31>",(RegExp.prototype)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<608,614,31>",(RegExp)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<639,640,31>",(x)); Inst18++; } } catch(e) {}
    RegExp.prototype.toString.call(x);
  } catch (e) {
try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<663,673,33>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (/incompatible receiver/.test) != "undefined") {_RecordType("<674,702,33>",(/incompatible receiver/.test)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<703,712,33>",(e.message)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<703,704,33>",(e)); Inst23++; } } catch(e) {}
    assertTrue(/incompatible receiver/.test(e.message));
    return;
  }
try { if (Inst24 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<734,751,36>",(assertUnreachable)); Inst24++; } } catch(e) {}
  assertUnreachable();
}

try { if (Inst25 <= 1000 && typeof (testThrows) != "undefined") {_RecordType("<758,768,39>",(testThrows)); Inst25++; } } catch(e) {}
testThrows(1);
try { if (Inst26 <= 1000 && typeof (testThrows) != "undefined") {_RecordType("<773,783,40>",(testThrows)); Inst26++; } } catch(e) {}
testThrows(null);
Number.prototype.source = "a";
try { if (Inst27 <= 1000 && typeof (Number.prototype.source) != "undefined") {_RecordType("<791,814,41>",(Number.prototype.source)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<791,807,41>",(Number.prototype)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Number) != "undefined") {_RecordType("<791,797,41>",(Number)); Inst29++; } } catch(e) {}
Number.prototype.flags = "b";
try { if (Inst30 <= 1000 && typeof (Number.prototype.flags) != "undefined") {_RecordType("<822,844,42>",(Number.prototype.flags)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number.prototype) != "undefined") {_RecordType("<822,838,42>",(Number.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number) != "undefined") {_RecordType("<822,828,42>",(Number)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (testThrows) != "undefined") {_RecordType("<852,862,43>",(testThrows)); Inst33++; } } catch(e) {}
testThrows(1);

try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<868,880,45>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (RegExp.prototype.toString.call) != "undefined") {_RecordType("<899,929,45>",(RegExp.prototype.toString.call)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (RegExp.prototype.toString) != "undefined") {_RecordType("<899,924,45>",(RegExp.prototype.toString)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<899,915,45>",(RegExp.prototype)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<899,905,45>",(RegExp)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (fake) != "undefined") {_RecordType("<930,934,45>",(fake)); Inst39++; } } catch(e) {}
assertEquals("/pattern/flags", RegExp.prototype.toString.call(fake));
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<938,950,46>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (log) != "undefined") {_RecordType("<975,978,46>",(log)); Inst41++; } } catch(e) {}
assertEquals(["p", "ps", "f", "fs"], log);

// Monkey-patching is also possible on RegExp instances

let weird = /foo/;
try { if (Inst42 <= 1000 && typeof (weird) != "undefined") {_RecordType("<1043,1048,50>",(weird)); Inst42++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1058,1079,51>",(Object.defineProperty)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1058,1064,51>",(Object)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (weird) != "undefined") {_RecordType("<1080,1085,51>",(weird)); Inst45++; } } catch(e) {}
Object.defineProperty(weird, 'flags', {value: 'bar'});
try { if (Inst46 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1113,1134,52>",(Object.defineProperty)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1113,1119,52>",(Object)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (weird) != "undefined") {_RecordType("<1135,1140,52>",(weird)); Inst48++; } } catch(e) {}
Object.defineProperty(weird, 'source', {value: 'baz'});
try { if (Inst49 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1169,1181,53>",(assertEquals)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (weird.toString) != "undefined") {_RecordType("<1194,1208,53>",(weird.toString)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (weird) != "undefined") {_RecordType("<1194,1199,53>",(weird)); Inst51++; } } catch(e) {}
assertEquals('/baz/bar', weird.toString());

try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1214,1226,55>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (RegExp.prototype.toString) != "undefined") {_RecordType("<1237,1262,55>",(RegExp.prototype.toString)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<1237,1253,55>",(RegExp.prototype)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1237,1243,55>",(RegExp)); Inst55++; } } catch(e) {}
assertEquals('/(?:)/', RegExp.prototype.toString());
try { if (Inst56 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1267,1279,56>",(assertEquals)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (RegExp.prototype.source) != "undefined") {_RecordType("<1288,1311,56>",(RegExp.prototype.source)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<1288,1304,56>",(RegExp.prototype)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1288,1294,56>",(RegExp)); Inst59++; } } catch(e) {}
assertEquals('(?:)', RegExp.prototype.source);
try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1314,1326,57>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (RegExp.prototype.flags) != "undefined") {_RecordType("<1331,1353,57>",(RegExp.prototype.flags)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<1331,1347,57>",(RegExp.prototype)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1331,1337,57>",(RegExp)); Inst63++; } } catch(e) {}
assertEquals('', RegExp.prototype.flags);

