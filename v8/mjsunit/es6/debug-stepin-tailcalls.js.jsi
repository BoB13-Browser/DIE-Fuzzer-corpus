var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug --harmony-tailcalls

"use strict";

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<250,261,9>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<250,255,9>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<242,247,9>",(Debug)); Inst0++; } } catch(e) {}
var exception = null;
try { if (Inst3 <= 1000 && typeof (exception) != "undefined") {_RecordType("<266,275,10>",(exception)); Inst3++; } } catch(e) {}
var breaks = 0;
try { if (Inst4 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<288,294,11>",(breaks)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<310,311,13>",(f)); Inst5++; } } catch(e) {}
function f(x) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<312,313,13>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<323,324,14>",(x)); Inst7++; } } catch(e) {}
  if (x > 0) {            // B3 B5 B7 B9
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<369,370,15>",(f)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<371,372,15>",(x)); Inst9++; } } catch(e) {}
    return f(x - 1);      // B4 B6 B8
  }
}                         // B10

try { if (Inst10 <= 1000 && typeof (g) != "undefined") {_RecordType("<443,444,19>",(g)); Inst10++; } } catch(e) {}
function g(x) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<445,446,19>",(x)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<459,460,20>",(f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<461,462,20>",(x)); Inst13++; } } catch(e) {}
  return f(x);            // B2
}

try { if (Inst14 <= 1000 && typeof (h) != "undefined") {_RecordType("<494,495,23>",(h)); Inst14++; } } catch(e) {}
function h(x) {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<496,497,23>",(x)); Inst15++; } } catch(e) {}
  debugger;               // B0
try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<535,536,25>",(g)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<537,538,25>",(x)); Inst17++; } } catch(e) {}
  g(x);                   // B1
}                         // B11


try { if (Inst18 <= 1000 && typeof (listener) != "undefined") {_RecordType("<609,617,29>",(listener)); Inst18++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst19 <= 1000 && typeof (event) != "undefined") {_RecordType("<618,623,29>",(event)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<625,635,29>",(exec_state)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<637,647,29>",(event_data)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (data) != "undefined") {_RecordType("<649,653,29>",(data)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (event) != "undefined") {_RecordType("<663,668,30>",(event)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<672,694,30>",(Debug.DebugEvent.Break)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<672,688,30>",(Debug.DebugEvent)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<672,677,30>",(Debug)); Inst26++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<889,890,35>",(e)); Inst40++; } } catch(e) {}
  try {
try { if (Inst27 <= 1000 && typeof (print) != "undefined") {_RecordType("<716,721,32>",(print)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (event_data.sourceLineText) != "undefined") {_RecordType("<722,747,32>",(event_data.sourceLineText)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<722,732,32>",(event_data)); Inst29++; } } catch(e) {}
    print(event_data.sourceLineText());
try { if (Inst30 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<756,766,33>",(assertTrue)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (event_data.sourceLineText().indexOf) != "undefined") {_RecordType("<767,802,33>",(event_data.sourceLineText().indexOf)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (event_data.sourceLineText) != "undefined") {_RecordType("<767,792,33>",(event_data.sourceLineText)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<767,777,33>",(event_data)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<807,813,33>",(breaks)); Inst34++; } } catch(e) {}
    assertTrue(event_data.sourceLineText().indexOf(`B${breaks++}`) > 0);
try { if (Inst35 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<829,851,34>",(exec_state.prepareStep)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<829,839,34>",(exec_state)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<852,875,34>",(Debug.StepAction.StepIn)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<852,868,34>",(Debug.StepAction)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<852,857,34>",(Debug)); Inst39++; } } catch(e) {}
    exec_state.prepareStep(Debug.StepAction.StepIn);
  } catch (e) {
try { if (Inst42 <= 1000 && typeof (e) != "undefined") {_RecordType("<910,911,36>",(e)); Inst42++; } } catch(e) {}
    exception = e;
try { if (Inst41 <= 1000 && typeof (exception) != "undefined") {_RecordType("<898,907,36>",(exception)); Inst41++; } } catch(e) {}
  };
};

try { if (Inst43 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<922,939,40>",(Debug.setListener)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<922,927,40>",(Debug)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (listener) != "undefined") {_RecordType("<940,948,40>",(listener)); Inst45++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst46 <= 1000 && typeof (h) != "undefined") {_RecordType("<952,953,42>",(h)); Inst46++; } } catch(e) {}
h(3);

try { if (Inst47 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<959,976,44>",(Debug.setListener)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<959,964,44>",(Debug)); Inst48++; } } catch(e) {}
Debug.setListener(null);  // B12
try { if (Inst49 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<992,1002,45>",(assertNull)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (exception) != "undefined") {_RecordType("<1003,1012,45>",(exception)); Inst50++; } } catch(e) {}
assertNull(exception);
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1015,1027,46>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<1032,1038,46>",(breaks)); Inst52++; } } catch(e) {}
assertEquals(13, breaks);

