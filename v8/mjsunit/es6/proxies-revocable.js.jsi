var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


traps = [
    "getPrototypeOf", "setPrototypeOf", "isExtensible", "preventExtensions",
    "getOwnPropertyDescriptor", "has", "get", "set", "deleteProperty",
    "defineProperty", "ownKeys", "apply", "construct"
];
try { if (Inst0 <= 1000 && typeof (traps) != "undefined") {_RecordType("<169,174,6>",(traps)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Proxy.revocable) != "undefined") {_RecordType("<407,422,12>",(Proxy.revocable)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Proxy) != "undefined") {_RecordType("<407,412,12>",(Proxy)); Inst4++; } } catch(e) {}
var {proxy, revoke} = Proxy.revocable({}, {});
try { if (Inst1 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<390,395,12>",(proxy)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (revoke) != "undefined") {_RecordType("<397,403,12>",(revoke)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<432,444,13>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (revoke.length) != "undefined") {_RecordType("<448,461,13>",(revoke.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (revoke) != "undefined") {_RecordType("<448,454,13>",(revoke)); Inst7++; } } catch(e) {}
assertEquals(0, revoke.length);

try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<465,477,15>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<478,487,15>",(undefined)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (revoke) != "undefined") {_RecordType("<489,495,15>",(revoke)); Inst10++; } } catch(e) {}
assertEquals(undefined, revoke());
for (var trap of traps) {
try { if (Inst11 <= 1000 && typeof (trap) != "undefined") {_RecordType("<509,513,16>",(trap)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (traps) != "undefined") {_RecordType("<517,522,16>",(traps)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<528,540,17>",(assertThrows)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Reflect[trap]) != "undefined") {_RecordType("<547,560,17>",(Reflect[trap])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<547,554,17>",(Reflect)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<561,566,17>",(proxy)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<569,578,17>",(TypeError)); Inst17++; } } catch(e) {}
  assertThrows(() => Reflect[trap](proxy), TypeError);
}

try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<584,596,20>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<597,606,20>",(undefined)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (revoke) != "undefined") {_RecordType("<608,614,20>",(revoke)); Inst20++; } } catch(e) {}
assertEquals(undefined, revoke());
for (var trap of traps) {
try { if (Inst21 <= 1000 && typeof (trap) != "undefined") {_RecordType("<628,632,21>",(trap)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (traps) != "undefined") {_RecordType("<636,641,21>",(traps)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<647,659,22>",(assertThrows)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Reflect[trap]) != "undefined") {_RecordType("<666,679,22>",(Reflect[trap])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<666,673,22>",(Reflect)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (proxy) != "undefined") {_RecordType("<680,685,22>",(proxy)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<688,697,22>",(TypeError)); Inst27++; } } catch(e) {}
  assertThrows(() => Reflect[trap](proxy), TypeError);
}

