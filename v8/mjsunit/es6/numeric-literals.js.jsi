var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (TestOctalLiteral) != "undefined") {_RecordType("<1607,1623,28>",(TestOctalLiteral)); Inst0++; } } catch(e) {}
function TestOctalLiteral() {
try { if (Inst1 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1630,1642,29>",(assertEquals)); Inst1++; } } catch(e) {}
  assertEquals(0, 0o0);
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1654,1666,30>",(assertEquals)); Inst2++; } } catch(e) {}
  assertEquals(0, 0O0);
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1678,1690,31>",(assertEquals)); Inst3++; } } catch(e) {}
  assertEquals(1, 0o1);
try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1702,1714,32>",(assertEquals)); Inst4++; } } catch(e) {}
  assertEquals(7, 0o7);
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1726,1738,33>",(assertEquals)); Inst5++; } } catch(e) {}
  assertEquals(8, 0o10);
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1751,1763,34>",(assertEquals)); Inst6++; } } catch(e) {}
  assertEquals(63, 0o77);
}
try { if (Inst7 <= 1000 && typeof (TestOctalLiteral) != "undefined") {_RecordType("<1777,1793,36>",(TestOctalLiteral)); Inst7++; } } catch(e) {}
TestOctalLiteral();


try { if (Inst8 <= 1000 && typeof (TestOctalLiteralUsingNumberFunction) != "undefined") {_RecordType("<1808,1843,39>",(TestOctalLiteralUsingNumberFunction)); Inst8++; } } catch(e) {}
function TestOctalLiteralUsingNumberFunction() {
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1850,1862,40>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1866,1872,40>",(Number)); Inst10++; } } catch(e) {}
  assertEquals(0, Number('0o0'));
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1884,1896,41>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1900,1906,41>",(Number)); Inst12++; } } catch(e) {}
  assertEquals(0, Number('0O0'));
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1918,1930,42>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1934,1940,42>",(Number)); Inst14++; } } catch(e) {}
  assertEquals(1, Number('0o1'));
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1952,1964,43>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1968,1974,43>",(Number)); Inst16++; } } catch(e) {}
  assertEquals(7, Number('0o7'));
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1986,1998,44>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2002,2008,44>",(Number)); Inst18++; } } catch(e) {}
  assertEquals(8, Number('0o10'));
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2021,2033,45>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2038,2044,45>",(Number)); Inst20++; } } catch(e) {}
  assertEquals(63, Number('0o77'));
}
try { if (Inst21 <= 1000 && typeof (TestOctalLiteralUsingNumberFunction) != "undefined") {_RecordType("<2057,2092,47>",(TestOctalLiteralUsingNumberFunction)); Inst21++; } } catch(e) {}
TestOctalLiteralUsingNumberFunction();


try { if (Inst22 <= 1000 && typeof (TestBinaryLiteral) != "undefined") {_RecordType("<2107,2124,50>",(TestBinaryLiteral)); Inst22++; } } catch(e) {}
function TestBinaryLiteral() {
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2131,2143,51>",(assertEquals)); Inst23++; } } catch(e) {}
  assertEquals(0, 0b0);
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2155,2167,52>",(assertEquals)); Inst24++; } } catch(e) {}
  assertEquals(0, 0B0);
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2179,2191,53>",(assertEquals)); Inst25++; } } catch(e) {}
  assertEquals(1, 0b1);
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2203,2215,54>",(assertEquals)); Inst26++; } } catch(e) {}
  assertEquals(2, 0b10);
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2228,2240,55>",(assertEquals)); Inst27++; } } catch(e) {}
  assertEquals(3, 0b11);
}
try { if (Inst28 <= 1000 && typeof (TestBinaryLiteral) != "undefined") {_RecordType("<2253,2270,57>",(TestBinaryLiteral)); Inst28++; } } catch(e) {}
TestBinaryLiteral();


try { if (Inst29 <= 1000 && typeof (TestBinaryLiteralUsingNumberFunction) != "undefined") {_RecordType("<2285,2321,60>",(TestBinaryLiteralUsingNumberFunction)); Inst29++; } } catch(e) {}
function TestBinaryLiteralUsingNumberFunction() {
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2328,2340,61>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2344,2350,61>",(Number)); Inst31++; } } catch(e) {}
  assertEquals(0, Number('0b0'));
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2362,2374,62>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2378,2384,62>",(Number)); Inst33++; } } catch(e) {}
  assertEquals(0, Number('0B0'));
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2396,2408,63>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2412,2418,63>",(Number)); Inst35++; } } catch(e) {}
  assertEquals(1, Number('0b1'));
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2430,2442,64>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2446,2452,64>",(Number)); Inst37++; } } catch(e) {}
  assertEquals(2, Number('0b10'));
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2465,2477,65>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2481,2487,65>",(Number)); Inst39++; } } catch(e) {}
  assertEquals(3, Number('0b11'));
}
try { if (Inst40 <= 1000 && typeof (TestBinaryLiteralUsingNumberFunction) != "undefined") {_RecordType("<2500,2536,67>",(TestBinaryLiteralUsingNumberFunction)); Inst40++; } } catch(e) {}
TestBinaryLiteralUsingNumberFunction();


try { if (Inst41 <= 1000 && typeof (TestParseIntDoesNotSupportOctalNorBinary) != "undefined") {_RecordType("<2551,2591,70>",(TestParseIntDoesNotSupportOctalNorBinary)); Inst41++; } } catch(e) {}
function TestParseIntDoesNotSupportOctalNorBinary() {
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2598,2610,71>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2614,2622,71>",(parseInt)); Inst43++; } } catch(e) {}
  assertEquals(0, parseInt('0o77'));
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2635,2647,72>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2651,2659,72>",(parseInt)); Inst45++; } } catch(e) {}
  assertEquals(0, parseInt('0o77', 8));
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2675,2687,73>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2691,2699,73>",(parseInt)); Inst47++; } } catch(e) {}
  assertEquals(0, parseInt('0b11'));
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2712,2724,74>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2728,2736,74>",(parseInt)); Inst49++; } } catch(e) {}
  assertEquals(0, parseInt('0b11', 2));
}
try { if (Inst50 <= 1000 && typeof (TestParseIntDoesNotSupportOctalNorBinary) != "undefined") {_RecordType("<2752,2792,76>",(TestParseIntDoesNotSupportOctalNorBinary)); Inst50++; } } catch(e) {}
TestParseIntDoesNotSupportOctalNorBinary();


try { if (Inst51 <= 1000 && typeof (TestParseFloatDoesNotSupportOctalNorBinary) != "undefined") {_RecordType("<2807,2849,79>",(TestParseFloatDoesNotSupportOctalNorBinary)); Inst51++; } } catch(e) {}
function TestParseFloatDoesNotSupportOctalNorBinary() {
try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2856,2868,80>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2872,2882,80>",(parseFloat)); Inst53++; } } catch(e) {}
  assertEquals(0, parseFloat('0o77'));
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2895,2907,81>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2911,2921,81>",(parseFloat)); Inst55++; } } catch(e) {}
  assertEquals(0, parseFloat('0b11'));
}
try { if (Inst56 <= 1000 && typeof (TestParseFloatDoesNotSupportOctalNorBinary) != "undefined") {_RecordType("<2934,2976,83>",(TestParseFloatDoesNotSupportOctalNorBinary)); Inst56++; } } catch(e) {}
TestParseFloatDoesNotSupportOctalNorBinary();

