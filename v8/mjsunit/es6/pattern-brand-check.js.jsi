var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --harmony-regexp-subclass

try { if (Inst0 <= 1000 && typeof (createNonRegExp) != "undefined") {_RecordType("<214,229,7>",(createNonRegExp)); Inst0++; } } catch(e) {}
function createNonRegExp(calls) {
try { if (Inst1 <= 1000 && typeof (calls) != "undefined") {_RecordType("<230,235,7>",(calls)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Symbol.match) != "undefined") {_RecordType("<259,271,9>",(Symbol.match)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<259,265,9>",(Symbol)); Inst3++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Symbol.replace) != "undefined") {_RecordType("<346,360,13>",(Symbol.replace)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<346,352,13>",(Symbol)); Inst8++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Symbol.search) != "undefined") {_RecordType("<437,450,17>",(Symbol.search)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<437,443,17>",(Symbol)); Inst13++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<526,538,21>",(Symbol.split)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<526,532,21>",(Symbol)); Inst18++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Symbol.toPrimitive) != "undefined") {_RecordType("<609,627,25>",(Symbol.toPrimitive)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<609,615,25>",(Symbol)); Inst23++; } } catch(e) {}
  return {
    get [Symbol.match]() {
try { if (Inst4 <= 1000 && typeof (calls.push) != "undefined") {_RecordType("<283,293,10>",(calls.push)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (calls) != "undefined") {_RecordType("<283,288,10>",(calls)); Inst5++; } } catch(e) {}
      calls.push("@@match");
try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<319,328,11>",(undefined)); Inst6++; } } catch(e) {}
      return undefined;
    },
    get [Symbol.replace]() {
try { if (Inst9 <= 1000 && typeof (calls.push) != "undefined") {_RecordType("<372,382,14>",(calls.push)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (calls) != "undefined") {_RecordType("<372,377,14>",(calls)); Inst10++; } } catch(e) {}
      calls.push("@@replace");
try { if (Inst11 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<410,419,15>",(undefined)); Inst11++; } } catch(e) {}
      return undefined;
    },
    get [Symbol.search]() {
try { if (Inst14 <= 1000 && typeof (calls.push) != "undefined") {_RecordType("<462,472,18>",(calls.push)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (calls) != "undefined") {_RecordType("<462,467,18>",(calls)); Inst15++; } } catch(e) {}
      calls.push("@@search");
try { if (Inst16 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<499,508,19>",(undefined)); Inst16++; } } catch(e) {}
      return undefined;
    },
    get [Symbol.split]() {
try { if (Inst19 <= 1000 && typeof (calls.push) != "undefined") {_RecordType("<550,560,22>",(calls.push)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (calls) != "undefined") {_RecordType("<550,555,22>",(calls)); Inst20++; } } catch(e) {}
      calls.push("@@split");
try { if (Inst21 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<586,595,23>",(undefined)); Inst21++; } } catch(e) {}
      return undefined;
    },
    [Symbol.toPrimitive]() {
try { if (Inst24 <= 1000 && typeof (calls.push) != "undefined") {_RecordType("<639,649,26>",(calls.push)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (calls) != "undefined") {_RecordType("<639,644,26>",(calls)); Inst25++; } } catch(e) {}
      calls.push("@@toPrimitive");
      return "";
    }
  };
}

try { if (Inst26 <= 1000 && typeof (testStringMatchBrandCheck) != "undefined") {_RecordType("<709,734,32>",(testStringMatchBrandCheck)); Inst26++; } } catch(e) {}
(function testStringMatchBrandCheck() {
  var calls = [];
try { if (Inst27 <= 1000 && typeof (calls) != "undefined") {_RecordType("<745,750,33>",(calls)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof ("".match) != "undefined") {_RecordType("<759,767,34>",("".match)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (createNonRegExp) != "undefined") {_RecordType("<768,783,34>",(createNonRegExp)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (calls) != "undefined") {_RecordType("<784,789,34>",(calls)); Inst30++; } } catch(e) {}
  "".match(createNonRegExp(calls));
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<795,807,35>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (calls) != "undefined") {_RecordType("<838,843,35>",(calls)); Inst32++; } } catch(e) {}
  assertEquals(["@@match", "@@toPrimitive"], calls);
})();

try { if (Inst33 <= 1000 && typeof (testStringSearchBrandCheck) != "undefined") {_RecordType("<863,889,38>",(testStringSearchBrandCheck)); Inst33++; } } catch(e) {}
(function testStringSearchBrandCheck() {
  var calls = [];
try { if (Inst34 <= 1000 && typeof (calls) != "undefined") {_RecordType("<900,905,39>",(calls)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof ("".search) != "undefined") {_RecordType("<914,923,40>",("".search)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (createNonRegExp) != "undefined") {_RecordType("<924,939,40>",(createNonRegExp)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (calls) != "undefined") {_RecordType("<940,945,40>",(calls)); Inst37++; } } catch(e) {}
  "".search(createNonRegExp(calls));
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<951,963,41>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (calls) != "undefined") {_RecordType("<995,1000,41>",(calls)); Inst39++; } } catch(e) {}
  assertEquals(["@@search", "@@toPrimitive"], calls);
})();

try { if (Inst40 <= 1000 && typeof (testStringSplitBrandCheck) != "undefined") {_RecordType("<1020,1045,44>",(testStringSplitBrandCheck)); Inst40++; } } catch(e) {}
(function testStringSplitBrandCheck() {
  var calls = [];
try { if (Inst41 <= 1000 && typeof (calls) != "undefined") {_RecordType("<1056,1061,45>",(calls)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof ("".split) != "undefined") {_RecordType("<1070,1078,46>",("".split)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (createNonRegExp) != "undefined") {_RecordType("<1079,1094,46>",(createNonRegExp)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (calls) != "undefined") {_RecordType("<1095,1100,46>",(calls)); Inst44++; } } catch(e) {}
  "".split(createNonRegExp(calls));
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1106,1118,47>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (calls) != "undefined") {_RecordType("<1149,1154,47>",(calls)); Inst46++; } } catch(e) {}
  assertEquals(["@@split", "@@toPrimitive"], calls);
})();

try { if (Inst47 <= 1000 && typeof (testStringReplaceBrandCheck) != "undefined") {_RecordType("<1174,1201,50>",(testStringReplaceBrandCheck)); Inst47++; } } catch(e) {}
(function testStringReplaceBrandCheck() {
  var calls = [];
try { if (Inst48 <= 1000 && typeof (calls) != "undefined") {_RecordType("<1212,1217,51>",(calls)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof ("".replace) != "undefined") {_RecordType("<1226,1236,52>",("".replace)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (createNonRegExp) != "undefined") {_RecordType("<1237,1252,52>",(createNonRegExp)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (calls) != "undefined") {_RecordType("<1253,1258,52>",(calls)); Inst51++; } } catch(e) {}
  "".replace(createNonRegExp(calls), "");
try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1268,1280,53>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (calls) != "undefined") {_RecordType("<1313,1318,53>",(calls)); Inst53++; } } catch(e) {}
  assertEquals(["@@replace", "@@toPrimitive"], calls);
})();

