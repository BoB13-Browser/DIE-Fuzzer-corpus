var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that properties deleted during a for-in iteration do not show up in
// the for-in.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1699,1700,31>",(f)); Inst0++; } } catch(e) {}
function f(o, expected, del) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<1701,1702,31>",(o)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1704,1712,31>",(expected)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (del) != "undefined") {_RecordType("<1714,1717,31>",(del)); Inst3++; } } catch(e) {}
  var index = 0;
try { if (Inst4 <= 1000 && typeof (index) != "undefined") {_RecordType("<1727,1732,32>",(index)); Inst4++; } } catch(e) {}
  for (p in o) {
try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<1745,1746,33>",(p)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<1750,1751,33>",(o)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (del) != "undefined") {_RecordType("<1763,1766,34>",(del)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o[del]) != "undefined") {_RecordType("<1775,1781,34>",(o[del])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<1775,1776,34>",(o)); Inst9++; } } catch(e) {}
    if (del) delete o[del];
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1787,1799,35>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (expected[index]) != "undefined") {_RecordType("<1800,1815,35>",(expected[index])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1800,1808,35>",(expected)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (p) != "undefined") {_RecordType("<1817,1818,35>",(p)); Inst13++; } } catch(e) {}
    assertEquals(expected[index], p);
try { if (Inst14 <= 1000 && typeof (index) != "undefined") {_RecordType("<1825,1830,36>",(index)); Inst14++; } } catch(e) {}
    index++;
  }
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1840,1852,38>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (expected.length) != "undefined") {_RecordType("<1853,1868,38>",(expected.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1853,1861,38>",(expected)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (index) != "undefined") {_RecordType("<1870,1875,38>",(index)); Inst18++; } } catch(e) {}
  assertEquals(expected.length, index);
}

var o = {}
try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<1885,1886,41>",(o)); Inst19++; } } catch(e) {}
o.a = 1;
try { if (Inst20 <= 1000 && typeof (o.a) != "undefined") {_RecordType("<1892,1895,42>",(o.a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<1892,1893,42>",(o)); Inst21++; } } catch(e) {}
o.b = 2;
try { if (Inst22 <= 1000 && typeof (o.b) != "undefined") {_RecordType("<1901,1904,43>",(o.b)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<1901,1902,43>",(o)); Inst23++; } } catch(e) {}
o.c = 3;
try { if (Inst24 <= 1000 && typeof (o.c) != "undefined") {_RecordType("<1910,1913,44>",(o.c)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<1910,1911,44>",(o)); Inst25++; } } catch(e) {}
o.d = 3;
try { if (Inst26 <= 1000 && typeof (o.d) != "undefined") {_RecordType("<1919,1922,45>",(o.d)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<1919,1920,45>",(o)); Inst27++; } } catch(e) {}

try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<1929,1930,47>",(f)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<1931,1932,47>",(o)); Inst29++; } } catch(e) {}
f(o, ['a', 'b', 'c', 'd']);
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<1957,1958,48>",(f)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<1959,1960,48>",(o)); Inst31++; } } catch(e) {}
f(o, ['a', 'b', 'c', 'd']);
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<1985,1986,49>",(f)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<1987,1988,49>",(o)); Inst33++; } } catch(e) {}
f(o, ['a', 'c', 'd'], 'b');
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<2013,2014,50>",(f)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<2015,2016,50>",(o)); Inst35++; } } catch(e) {}
f(o, ['a', 'c'], 'd');

