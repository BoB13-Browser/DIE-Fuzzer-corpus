var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Tests global loads from eval.

var x = 27;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1636,1637,30>",(x)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<1654,1658,32>",(test)); Inst1++; } } catch(e) {}
function test() {
try { if (Inst2 <= 1000 && typeof (g) != "undefined") {_RecordType("<1674,1675,33>",(g)); Inst2++; } } catch(e) {}
  function g() {
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1684,1696,34>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1701,1705,34>",(eval)); Inst4++; } } catch(e) {}
    assertEquals(27, eval('x'));
try { if (Inst5 <= 1000 && typeof (h) != "undefined") {_RecordType("<1726,1727,35>",(h)); Inst5++; } } catch(e) {}
    function h() {
      // Shadow with local variable.
      var x = 22;
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1779,1780,37>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1793,1805,38>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1810,1814,38>",(eval)); Inst8++; } } catch(e) {}
      assertEquals(22, eval('x'));
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1837,1838,39>",(i)); Inst9++; } } catch(e) {}
      function i(x) {
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1839,1840,39>",(x)); Inst10++; } } catch(e) {}
        // Shadow with parameter.
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1886,1898,41>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1903,1907,41>",(eval)); Inst12++; } } catch(e) {}
        assertEquals(44, eval('x'));
try { if (Inst13 <= 1000 && typeof (j) != "undefined") {_RecordType("<1932,1933,42>",(j)); Inst13++; } } catch(e) {}
        function j() {
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1948,1960,43>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<1961,1962,43>",(x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1964,1968,43>",(eval)); Inst16++; } } catch(e) {}
          assertEquals(x, eval('x'));
          // Shadow with function name.
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<2035,2036,45>",(x)); Inst17++; } } catch(e) {}
          function x() {
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2053,2065,46>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<2066,2067,46>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2069,2073,46>",(eval)); Inst20++; } } catch(e) {}
            assertEquals(x, eval('x'));
          }
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<2103,2104,48>",(x)); Inst21++; } } catch(e) {}
          x();
        }
try { if (Inst22 <= 1000 && typeof (j) != "undefined") {_RecordType("<2126,2127,50>",(j)); Inst22++; } } catch(e) {}
        j();
      }
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2145,2146,52>",(i)); Inst23++; } } catch(e) {}
      i(44);
    }
try { if (Inst24 <= 1000 && typeof (h) != "undefined") {_RecordType("<2162,2163,54>",(h)); Inst24++; } } catch(e) {}
    h();
  }
try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<2173,2174,56>",(g)); Inst25++; } } catch(e) {}
  g();
}

try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<2181,2185,59>",(test)); Inst26++; } } catch(e) {}
test();

// Test loading of globals from deeply nested eval.  This code is a
// bit complicated, but the complication is needed to check that the
// code that loads the global variable accounts for the fact that the
// global variable becomes shadowed by an eval-introduced variable.
var result = 0;
try { if (Inst27 <= 1000 && typeof (result) != "undefined") {_RecordType("<2469,2475,65>",(result)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (testDeep) != "undefined") {_RecordType("<2490,2498,66>",(testDeep)); Inst28++; } } catch(e) {}
function testDeep(source, load, test) {
try { if (Inst29 <= 1000 && typeof (source) != "undefined") {_RecordType("<2499,2505,66>",(source)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (load) != "undefined") {_RecordType("<2507,2511,66>",(load)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<2513,2517,66>",(test)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2523,2527,67>",(eval)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (source) != "undefined") {_RecordType("<2528,2534,67>",(source)); Inst33++; } } catch(e) {}
  eval(source);
try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<2548,2549,68>",(f)); Inst34++; } } catch(e) {}
  function f() {
    var y = 23;
try { if (Inst35 <= 1000 && typeof (y) != "undefined") {_RecordType("<2562,2563,69>",(y)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (g) != "undefined") {_RecordType("<2583,2584,70>",(g)); Inst36++; } } catch(e) {}
    function g() {
      var z = 25;
try { if (Inst37 <= 1000 && typeof (z) != "undefined") {_RecordType("<2599,2600,71>",(z)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (h) != "undefined") {_RecordType("<2622,2623,72>",(h)); Inst38++; } } catch(e) {}
      function h() {
try { if (Inst39 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2636,2640,73>",(eval)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (load) != "undefined") {_RecordType("<2641,2645,73>",(load)); Inst40++; } } catch(e) {}
        eval(load);
try { if (Inst41 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2656,2660,74>",(eval)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (test) != "undefined") {_RecordType("<2661,2665,74>",(test)); Inst42++; } } catch(e) {}
        eval(test);
      }
try { if (Inst43 <= 1000 && typeof (h) != "undefined") {_RecordType("<2682,2683,76>",(h)); Inst43++; } } catch(e) {}
      h();
    }
try { if (Inst44 <= 1000 && typeof (g) != "undefined") {_RecordType("<2697,2698,78>",(g)); Inst44++; } } catch(e) {}
    g();
  }
try { if (Inst45 <= 1000 && typeof (f) != "undefined") {_RecordType("<2708,2709,80>",(f)); Inst45++; } } catch(e) {}
  f();
}
try { if (Inst46 <= 1000 && typeof (testDeep) != "undefined") {_RecordType("<2715,2723,82>",(testDeep)); Inst46++; } } catch(e) {}
testDeep('1', 'result = x', 'assertEquals(27, result)');
// Because of the eval-cache, the 'result = x' code gets reused.  This
// time in a context where the 'x' variable has been shadowed.
try { if (Inst47 <= 1000 && typeof (testDeep) != "undefined") {_RecordType("<2906,2914,85>",(testDeep)); Inst47++; } } catch(e) {}
testDeep('var x = 1', 'result = x', 'assertEquals(1, result)');

