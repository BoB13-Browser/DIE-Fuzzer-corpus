var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1607,1609,28>",(f1)); Inst0++; } } catch(e) {}
function f1() {
try { if (Inst1 <= 1000 && typeof (g) != "undefined") {_RecordType("<1616,1617,29>",(g)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1618,1620,29>",(f1)); Inst2++; } } catch(e) {}
  g(f1);
}

try { if (Inst3 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1635,1637,32>",(f2)); Inst3++; } } catch(e) {}
function f2(x) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1638,1639,32>",(x)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1653,1662,33>",(arguments)); Inst6++; } } catch(e) {}
  var a = arguments;
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1649,1650,33>",(a)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<1666,1667,34>",(x)); Inst7++; } } catch(e) {}
  x++;
try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<1673,1674,35>",(g)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1675,1677,35>",(f2)); Inst9++; } } catch(e) {}
  g(f2);
}

try { if (Inst10 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1692,1694,38>",(f3)); Inst10++; } } catch(e) {}
function f3(x) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1695,1696,38>",(x)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1710,1719,39>",(arguments)); Inst13++; } } catch(e) {}
  var a = arguments;
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1706,1707,39>",(a)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1737,1738,40>",(x)); Inst14++; } } catch(e) {}
  (function() { x++ })();
try { if (Inst15 <= 1000 && typeof (g) != "undefined") {_RecordType("<1749,1750,41>",(g)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1751,1753,41>",(f3)); Inst16++; } } catch(e) {}
  g(f3);
}

try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<1768,1769,44>",(g)); Inst17++; } } catch(e) {}
function g(f) {
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<1770,1771,44>",(f)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1777,1789,45>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<1807,1818,45>",(f.arguments)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<1807,1808,45>",(f)); Inst21++; } } catch(e) {}
  assertEquals("object", typeof f.arguments);
try { if (Inst22 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1823,1834,46>",(assertFalse)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<1835,1846,46>",(f.arguments)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<1835,1836,46>",(f)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<1851,1862,46>",(f.arguments)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<1851,1852,46>",(f)); Inst26++; } } catch(e) {}
  assertFalse(f.arguments === f.arguments);
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1867,1879,47>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f.arguments.length) != "undefined") {_RecordType("<1883,1901,47>",(f.arguments.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<1883,1894,47>",(f.arguments)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<1883,1884,47>",(f)); Inst30++; } } catch(e) {}
  assertEquals(3, f.arguments.length);
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1906,1918,48>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (f.arguments[0]) != "undefined") {_RecordType("<1922,1936,48>",(f.arguments[0])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<1922,1933,48>",(f.arguments)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<1922,1923,48>",(f)); Inst34++; } } catch(e) {}
  assertEquals(1, f.arguments[0]);
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1941,1953,49>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (f.arguments[1]) != "undefined") {_RecordType("<1957,1971,49>",(f.arguments[1])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<1957,1968,49>",(f.arguments)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<1957,1958,49>",(f)); Inst38++; } } catch(e) {}
  assertEquals(2, f.arguments[1]);
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1976,1988,50>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (f.arguments[2]) != "undefined") {_RecordType("<1992,2006,50>",(f.arguments[2])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (f.arguments) != "undefined") {_RecordType("<1992,2003,50>",(f.arguments)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<1992,1993,50>",(f)); Inst42++; } } catch(e) {}
  assertEquals(3, f.arguments[2]);
}

try { if (Inst43 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2012,2014,53>",(f1)); Inst43++; } } catch(e) {}
f1(1,2,3);
try { if (Inst44 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2023,2025,54>",(f2)); Inst44++; } } catch(e) {}
f2(1,2,3);
try { if (Inst45 <= 1000 && typeof (f3) != "undefined") {_RecordType("<2034,2036,55>",(f3)); Inst45++; } } catch(e) {}
f3(1,2,3);

