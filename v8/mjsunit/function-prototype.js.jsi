var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that we can set function prototypes to non-object values.  The
// prototype used for instances in that case should be the initial
// object prototype.  ECMA-262 13.2.2.
try { if (Inst0 <= 1000 && typeof (TestNonObjectPrototype) != "undefined") {_RecordType("<1784,1806,31>",(TestNonObjectPrototype)); Inst0++; } } catch(e) {}
function TestNonObjectPrototype(value) {
try { if (Inst1 <= 1000 && typeof (value) != "undefined") {_RecordType("<1807,1812,31>",(value)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (F) != "undefined") {_RecordType("<1827,1828,32>",(F)); Inst2++; } } catch(e) {}
  function F() {};
try { if (Inst5 <= 1000 && typeof (value) != "undefined") {_RecordType("<1851,1856,33>",(value)); Inst5++; } } catch(e) {}
  F.prototype = value;
try { if (Inst3 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<1837,1848,33>",(F.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (F) != "undefined") {_RecordType("<1837,1838,33>",(F)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (F) != "undefined") {_RecordType("<1872,1873,34>",(F)); Inst7++; } } catch(e) {}
  var f = new F();
try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<1864,1865,34>",(f)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1879,1891,35>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<1892,1897,35>",(value)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<1899,1910,35>",(F.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (F) != "undefined") {_RecordType("<1899,1900,35>",(F)); Inst11++; } } catch(e) {}
  assertEquals(value, F.prototype);
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1915,1927,36>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1928,1944,36>",(Object.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1928,1934,36>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f.__proto__) != "undefined") {_RecordType("<1946,1957,36>",(f.__proto__)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<1946,1947,36>",(f)); Inst16++; } } catch(e) {}
  assertEquals(Object.prototype, f.__proto__);
  // Test that map transitions don't break anything.
  F.property = "value";
try { if (Inst17 <= 1000 && typeof (F.property) != "undefined") {_RecordType("<2015,2025,38>",(F.property)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (F) != "undefined") {_RecordType("<2015,2016,38>",(F)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2039,2051,39>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (value) != "undefined") {_RecordType("<2052,2057,39>",(value)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<2059,2070,39>",(F.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (F) != "undefined") {_RecordType("<2059,2060,39>",(F)); Inst22++; } } catch(e) {}
  assertEquals(value, F.prototype);
}

var values = [123, "asdf", true];
try { if (Inst23 <= 1000 && typeof (values) != "undefined") {_RecordType("<2080,2086,42>",(values)); Inst23++; } } catch(e) {}

try { if (Inst24 <= 1000 && typeof (values.forEach) != "undefined") {_RecordType("<2111,2125,44>",(values.forEach)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (values) != "undefined") {_RecordType("<2111,2117,44>",(values)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (TestNonObjectPrototype) != "undefined") {_RecordType("<2126,2148,44>",(TestNonObjectPrototype)); Inst26++; } } catch(e) {}
values.forEach(TestNonObjectPrototype);


// Test moving between non-object and object values.
try { if (Inst27 <= 1000 && typeof (F) != "undefined") {_RecordType("<2215,2216,48>",(F)); Inst27++; } } catch(e) {}
function F() {};
try { if (Inst29 <= 1000 && typeof (F) != "undefined") {_RecordType("<2235,2236,49>",(F)); Inst29++; } } catch(e) {}
var f = new F();
try { if (Inst28 <= 1000 && typeof (f) != "undefined") {_RecordType("<2227,2228,49>",(f)); Inst28++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2240,2252,50>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f.__proto__) != "undefined") {_RecordType("<2253,2264,50>",(f.__proto__)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<2253,2254,50>",(f)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<2266,2277,50>",(F.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (F) != "undefined") {_RecordType("<2266,2267,50>",(F)); Inst34++; } } catch(e) {}
assertEquals(f.__proto__, F.prototype);
F.prototype = 42;
try { if (Inst35 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<2280,2291,51>",(F.prototype)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (F) != "undefined") {_RecordType("<2280,2281,51>",(F)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (F) != "undefined") {_RecordType("<2306,2307,52>",(F)); Inst38++; } } catch(e) {}
f = new F();
try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<2298,2299,52>",(f)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2311,2323,53>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2324,2340,53>",(Object.prototype)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2324,2330,53>",(Object)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (f.__proto__) != "undefined") {_RecordType("<2342,2353,53>",(f.__proto__)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<2342,2343,53>",(f)); Inst43++; } } catch(e) {}
assertEquals(Object.prototype, f.__proto__);
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2356,2368,54>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<2373,2384,54>",(F.prototype)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (F) != "undefined") {_RecordType("<2373,2374,54>",(F)); Inst46++; } } catch(e) {}
assertEquals(42, F.prototype);
F.prototype = { a: 42 };
try { if (Inst47 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<2387,2398,55>",(F.prototype)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (F) != "undefined") {_RecordType("<2387,2388,55>",(F)); Inst48++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (F) != "undefined") {_RecordType("<2420,2421,56>",(F)); Inst50++; } } catch(e) {}
f = new F();
try { if (Inst49 <= 1000 && typeof (f) != "undefined") {_RecordType("<2412,2413,56>",(f)); Inst49++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2425,2437,57>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (F.prototype.a) != "undefined") {_RecordType("<2442,2455,57>",(F.prototype.a)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<2442,2453,57>",(F.prototype)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (F) != "undefined") {_RecordType("<2442,2443,57>",(F)); Inst54++; } } catch(e) {}
assertEquals(42, F.prototype.a);
try { if (Inst55 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2458,2470,58>",(assertEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (f.__proto__) != "undefined") {_RecordType("<2471,2482,58>",(f.__proto__)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (f) != "undefined") {_RecordType("<2471,2472,58>",(f)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<2484,2495,58>",(F.prototype)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (F) != "undefined") {_RecordType("<2484,2485,58>",(F)); Inst59++; } } catch(e) {}
assertEquals(f.__proto__, F.prototype);


// Test that the fast case optimizations can handle non-functions,
// functions with no prototypes (yet), non-object prototypes,
// functions without initial maps, and the fully initialized
// functions.
try { if (Inst60 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<2713,2727,65>",(GetPrototypeOf)); Inst60++; } } catch(e) {}
function GetPrototypeOf(f) {
try { if (Inst61 <= 1000 && typeof (f) != "undefined") {_RecordType("<2728,2729,65>",(f)); Inst61++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (f.prototype) != "undefined") {_RecordType("<2742,2753,66>",(f.prototype)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (f) != "undefined") {_RecordType("<2742,2743,66>",(f)); Inst63++; } } catch(e) {}
  return f.prototype;
};

// Seed the GetPrototypeOf function to enable the fast case
// optimizations.
try { if (Inst65 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<2845,2859,71>",(GetPrototypeOf)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<2860,2874,71>",(GetPrototypeOf)); Inst66++; } } catch(e) {}
var p = GetPrototypeOf(GetPrototypeOf);
try { if (Inst64 <= 1000 && typeof (p) != "undefined") {_RecordType("<2841,2842,71>",(p)); Inst64++; } } catch(e) {}

// Check that getting the prototype of a tagged integer works.
try { if (Inst67 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2941,2951,74>",(assertTrue)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<2959,2973,74>",(GetPrototypeOf)); Inst68++; } } catch(e) {}
assertTrue(typeof GetPrototypeOf(1) == 'undefined');

try { if (Inst69 <= 1000 && typeof (NoPrototypeYet) != "undefined") {_RecordType("<3004,3018,76>",(NoPrototypeYet)); Inst69++; } } catch(e) {}
function NoPrototypeYet() { }
try { if (Inst71 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<3033,3047,77>",(GetPrototypeOf)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (NoPrototypeYet) != "undefined") {_RecordType("<3048,3062,77>",(NoPrototypeYet)); Inst72++; } } catch(e) {}
var p = GetPrototypeOf(NoPrototypeYet);
try { if (Inst70 <= 1000 && typeof (p) != "undefined") {_RecordType("<3029,3030,77>",(p)); Inst70++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3065,3077,78>",(assertEquals)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (NoPrototypeYet.prototype) != "undefined") {_RecordType("<3078,3102,78>",(NoPrototypeYet.prototype)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (NoPrototypeYet) != "undefined") {_RecordType("<3078,3092,78>",(NoPrototypeYet)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (p) != "undefined") {_RecordType("<3104,3105,78>",(p)); Inst76++; } } catch(e) {}
assertEquals(NoPrototypeYet.prototype, p);

try { if (Inst77 <= 1000 && typeof (NonObjectPrototype) != "undefined") {_RecordType("<3118,3136,80>",(NonObjectPrototype)); Inst77++; } } catch(e) {}
function NonObjectPrototype() { }
NonObjectPrototype.prototype = 42;
try { if (Inst78 <= 1000 && typeof (NonObjectPrototype.prototype) != "undefined") {_RecordType("<3143,3171,81>",(NonObjectPrototype.prototype)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (NonObjectPrototype) != "undefined") {_RecordType("<3143,3161,81>",(NonObjectPrototype)); Inst79++; } } catch(e) {}
try { if (Inst80 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3178,3190,82>",(assertEquals)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<3195,3209,82>",(GetPrototypeOf)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (NonObjectPrototype) != "undefined") {_RecordType("<3210,3228,82>",(NonObjectPrototype)); Inst82++; } } catch(e) {}
assertEquals(42, GetPrototypeOf(NonObjectPrototype));

try { if (Inst83 <= 1000 && typeof (NoInitialMap) != "undefined") {_RecordType("<3242,3254,84>",(NoInitialMap)); Inst83++; } } catch(e) {}
function NoInitialMap() { }
try { if (Inst85 <= 1000 && typeof (NoInitialMap.prototype) != "undefined") {_RecordType("<3269,3291,85>",(NoInitialMap.prototype)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (NoInitialMap) != "undefined") {_RecordType("<3269,3281,85>",(NoInitialMap)); Inst86++; } } catch(e) {}
var p = NoInitialMap.prototype;
try { if (Inst84 <= 1000 && typeof (p) != "undefined") {_RecordType("<3265,3266,85>",(p)); Inst84++; } } catch(e) {}
try { if (Inst87 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3293,3305,86>",(assertEquals)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (p) != "undefined") {_RecordType("<3306,3307,86>",(p)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<3309,3323,86>",(GetPrototypeOf)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (NoInitialMap) != "undefined") {_RecordType("<3324,3336,86>",(NoInitialMap)); Inst90++; } } catch(e) {}
assertEquals(p, GetPrototypeOf(NoInitialMap));

// Check the standard fast case.
try { if (Inst91 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3374,3386,89>",(assertEquals)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<3387,3398,89>",(F.prototype)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (F) != "undefined") {_RecordType("<3387,3388,89>",(F)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<3400,3414,89>",(GetPrototypeOf)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (F) != "undefined") {_RecordType("<3415,3416,89>",(F)); Inst95++; } } catch(e) {}
assertEquals(F.prototype, GetPrototypeOf(F));

// Check that getting the prototype of a non-function works. This must
// be the last thing we do because this will clobber the optimizations
// in GetPrototypeOf and go to a monomorphic IC load instead.
try { if (Inst96 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3625,3637,94>",(assertEquals)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (GetPrototypeOf) != "undefined") {_RecordType("<3642,3656,94>",(GetPrototypeOf)); Inst97++; } } catch(e) {}
assertEquals(87, GetPrototypeOf({prototype:87}));

// Check the prototype is not enumerable, as per ES5 section 15.3.5.2.  Note
// that this is in difference to ES3, which specified that function instances
// would have enumerable prototypes (section 15.3.5.2 also).
try { if (Inst99 <= 1000 && typeof (Function) != "undefined") {_RecordType("<3906,3914,99>",(Function)); Inst99++; } } catch(e) {}
var foo = new Function("return x");
try { if (Inst98 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3896,3899,99>",(foo)); Inst98++; } } catch(e) {}
var result  = ""
try { if (Inst100 <= 1000 && typeof (result) != "undefined") {_RecordType("<3932,3938,100>",(result)); Inst100++; } } catch(e) {}
try { if (Inst104 <= 1000 && typeof (n) != "undefined") {_RecordType("<3974,3975,101>",(n)); Inst104++; } } catch(e) {}
for (var n in foo) result += n;
try { if (Inst101 <= 1000 && typeof (n) != "undefined") {_RecordType("<3954,3955,101>",(n)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3959,3962,101>",(foo)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (result) != "undefined") {_RecordType("<3964,3970,101>",(result)); Inst103++; } } catch(e) {}
try { if (Inst105 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3977,3989,102>",(assertEquals)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (result) != "undefined") {_RecordType("<3990,3996,102>",(result)); Inst106++; } } catch(e) {}
assertEquals(result, "");

try { if (Inst108 <= 1000 && typeof (Function) != "undefined") {_RecordType("<4012,4020,104>",(Function)); Inst108++; } } catch(e) {}
f = new Function('return 1;')
try { if (Inst107 <= 1000 && typeof (f) != "undefined") {_RecordType("<4004,4005,104>",(f)); Inst107++; } } catch(e) {}
try { if (Inst110 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<4045,4076,105>",(Object.getOwnPropertyDescriptor)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (Object) != "undefined") {_RecordType("<4045,4051,105>",(Object)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (f) != "undefined") {_RecordType("<4077,4078,105>",(f)); Inst112++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(f, "prototype");
try { if (Inst109 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4038,4042,105>",(desc)); Inst109++; } } catch(e) {}
try { if (Inst113 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<4094,4105,106>",(assertFalse)); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<4106,4123,106>",(desc.configurable)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4106,4110,106>",(desc)); Inst115++; } } catch(e) {}
assertFalse(desc.configurable);
try { if (Inst116 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<4126,4137,107>",(assertFalse)); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<4138,4153,107>",(desc.enumerable)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4138,4142,107>",(desc)); Inst118++; } } catch(e) {}
assertFalse(desc.enumerable);
try { if (Inst119 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<4156,4166,108>",(assertTrue)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<4167,4180,108>",(desc.writable)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4167,4171,108>",(desc)); Inst121++; } } catch(e) {}
assertTrue(desc.writable);

try { if (Inst123 <= 1000 && typeof (Function) != "undefined") {_RecordType("<4188,4196,110>",(Function)); Inst123++; } } catch(e) {}
f = Function('return 1;')
try { if (Inst122 <= 1000 && typeof (f) != "undefined") {_RecordType("<4184,4185,110>",(f)); Inst122++; } } catch(e) {}
try { if (Inst125 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<4221,4252,111>",(Object.getOwnPropertyDescriptor)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (Object) != "undefined") {_RecordType("<4221,4227,111>",(Object)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (f) != "undefined") {_RecordType("<4253,4254,111>",(f)); Inst127++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(f, "prototype");
try { if (Inst124 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4214,4218,111>",(desc)); Inst124++; } } catch(e) {}
try { if (Inst128 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<4270,4281,112>",(assertFalse)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<4282,4299,112>",(desc.configurable)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4282,4286,112>",(desc)); Inst130++; } } catch(e) {}
assertFalse(desc.configurable);
try { if (Inst131 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<4302,4313,113>",(assertFalse)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<4314,4329,113>",(desc.enumerable)); Inst132++; } } catch(e) {}try { if (Inst133 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4314,4318,113>",(desc)); Inst133++; } } catch(e) {}
assertFalse(desc.enumerable);
try { if (Inst134 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<4332,4342,114>",(assertTrue)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<4343,4356,114>",(desc.writable)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4343,4347,114>",(desc)); Inst136++; } } catch(e) {}
assertTrue(desc.writable);

f = function () { return 1; }
try { if (Inst137 <= 1000 && typeof (f) != "undefined") {_RecordType("<4360,4361,116>",(f)); Inst137++; } } catch(e) {}
try { if (Inst139 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<4401,4432,117>",(Object.getOwnPropertyDescriptor)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (Object) != "undefined") {_RecordType("<4401,4407,117>",(Object)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (f) != "undefined") {_RecordType("<4433,4434,117>",(f)); Inst141++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(f, "prototype");
try { if (Inst138 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4394,4398,117>",(desc)); Inst138++; } } catch(e) {}
try { if (Inst142 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<4450,4461,118>",(assertFalse)); Inst142++; } } catch(e) {}try { if (Inst143 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<4462,4479,118>",(desc.configurable)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4462,4466,118>",(desc)); Inst144++; } } catch(e) {}
assertFalse(desc.configurable);
try { if (Inst145 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<4482,4493,119>",(assertFalse)); Inst145++; } } catch(e) {}try { if (Inst146 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<4494,4509,119>",(desc.enumerable)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4494,4498,119>",(desc)); Inst147++; } } catch(e) {}
assertFalse(desc.enumerable);
try { if (Inst148 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<4512,4522,120>",(assertTrue)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<4523,4536,120>",(desc.writable)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (desc) != "undefined") {_RecordType("<4523,4527,120>",(desc)); Inst150++; } } catch(e) {}
assertTrue(desc.writable);

