var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var msg = '{"result":{"profile":{"head":{"functionName":"(root)","url":"","lineNumber":0,"totalTime":495.7243772462511,"selfTime":0,"numberOfCalls":0,"visible":true,"callUID":2771605942,"children":[{"functionName":"(program)","url":"","lineNumber":0,"totalTime":495.7243772462511,"selfTime":495.7243772462511,"numberOfCalls":0,"visible":true,"callUID":1902715303,"children":[]}]},"bottomUpHead":{"functionName":"(root)","url":"","lineNumber":0,"totalTime":495.7243772462511,"selfTime":0,"numberOfCalls":0,"visible":true,"callUID":2771605942,"children":[{"functionName":"(program)","url":"","lineNumber":0,"totalTime":495.7243772462511,"selfTime":495.7243772462511,"numberOfCalls":0,"visible":true,"callUID":1902715303,"children":[]}]}}},"id":41}';
try { if (Inst0 <= 1000 && typeof (msg) != "undefined") {_RecordType("<1602,1605,28>",(msg)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (JSON.parse) != "undefined") {_RecordType("<2357,2367,30>",(JSON.parse)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2357,2361,30>",(JSON)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (msg) != "undefined") {_RecordType("<2368,2371,30>",(msg)); Inst4++; } } catch(e) {}
var obj = JSON.parse(msg);
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2351,2354,30>",(obj)); Inst1++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (JSON.parse) != "undefined") {_RecordType("<2385,2395,31>",(JSON.parse)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2385,2389,31>",(JSON)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (msg) != "undefined") {_RecordType("<2396,2399,31>",(msg)); Inst8++; } } catch(e) {}
var obj2 = JSON.parse(msg);
try { if (Inst5 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2378,2382,31>",(obj2)); Inst5++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2403,2415,33>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2416,2430,33>",(JSON.stringify)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2416,2420,33>",(JSON)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2431,2434,33>",(obj)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2437,2451,33>",(JSON.stringify)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2437,2441,33>",(JSON)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2452,2456,33>",(obj2)); Inst15++; } } catch(e) {}
assertEquals(JSON.stringify(obj), JSON.stringify(obj2));
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2460,2472,34>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2473,2487,34>",(JSON.stringify)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2473,2477,34>",(JSON)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2488,2491,34>",(obj)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2503,2517,34>",(JSON.stringify)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2503,2507,34>",(JSON)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2518,2522,34>",(obj2)); Inst22++; } } catch(e) {}
assertEquals(JSON.stringify(obj, null, 0), JSON.stringify(obj2));

