var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that we do not try to create prototypes on objects that has the,
// should_have_prototype flag set to false.

__defineSetter__.__proto__ = function() {};
try { if (Inst0 <= 1000 && typeof (__defineSetter__.__proto__) != "undefined") {_RecordType("<1716,1742,31>",(__defineSetter__.__proto__)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (__defineSetter__) != "undefined") {_RecordType("<1716,1732,31>",(__defineSetter__)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (__defineSetter__['prototype']) != "undefined") {_RecordType("<1760,1789,32>",(__defineSetter__['prototype'])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (__defineSetter__) != "undefined") {_RecordType("<1760,1776,32>",(__defineSetter__)); Inst3++; } } catch(e) {}
__defineSetter__['prototype']

eval.__proto__ = function () { };
try { if (Inst4 <= 1000 && typeof (eval.__proto__) != "undefined") {_RecordType("<1791,1805,34>",(eval.__proto__)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1791,1795,34>",(eval)); Inst5++; } } catch(e) {}
eval['prototype'] = {};
try { if (Inst6 <= 1000 && typeof (eval['prototype']) != "undefined") {_RecordType("<1825,1842,35>",(eval['prototype'])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1825,1829,35>",(eval)); Inst7++; } } catch(e) {}

// Test that we are compatible with Safari on prototypes set locally and
// on the actual prototype set using __proto__ on objects that has the
// should_have_prototype set to false.
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<2042,2043,40>",(f)); Inst8++; } } catch(e) {}
function f() { return 42; }
f.prototype = 43;
try { if (Inst9 <= 1000 && typeof (f.prototype) != "undefined") {_RecordType("<2061,2072,41>",(f.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<2061,2062,41>",(f)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<2108,2109,42>",(f)); Inst13++; } } catch(e) {}
__defineGetter__.__proto__ = f;
try { if (Inst11 <= 1000 && typeof (__defineGetter__.__proto__) != "undefined") {_RecordType("<2079,2105,42>",(__defineGetter__.__proto__)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (__defineGetter__) != "undefined") {_RecordType("<2079,2095,42>",(__defineGetter__)); Inst12++; } } catch(e) {}

// Regression test for not returning undefined.
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2160,2172,45>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (__defineGetter__.prototype) != "undefined") {_RecordType("<2173,2199,45>",(__defineGetter__.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (__defineGetter__) != "undefined") {_RecordType("<2173,2189,45>",(__defineGetter__)); Inst16++; } } catch(e) {}
assertEquals(__defineGetter__.prototype, 43);

// Regression test for not crashing.
__defineGetter__.prototype = "foo";
try { if (Inst17 <= 1000 && typeof (__defineGetter__.prototype) != "undefined") {_RecordType("<2244,2270,48>",(__defineGetter__.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (__defineGetter__) != "undefined") {_RecordType("<2244,2260,48>",(__defineGetter__)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2280,2292,49>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (__defineGetter__.prototype) != "undefined") {_RecordType("<2293,2319,49>",(__defineGetter__.prototype)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (__defineGetter__) != "undefined") {_RecordType("<2293,2309,49>",(__defineGetter__)); Inst21++; } } catch(e) {}
assertEquals(__defineGetter__.prototype, "foo");

