var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags:  --expose-wasm

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<203,204,7>",(f)); Inst0++; } } catch(e) {}
function f() {
  "use asm";

}
try { if (Inst1 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<225,236,11>",(assertFalse)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<237,241,11>",(Wasm)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<245,254,11>",(undefined)); Inst3++; } } catch(e) {}
assertFalse(Wasm == undefined);
try { if (Inst4 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<257,269,12>",(assertThrows)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Wasm.instantiateModuleFromAsm) != "undefined") {_RecordType("<283,312,12>",(Wasm.instantiateModuleFromAsm)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<283,287,12>",(Wasm)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f.toString) != "undefined") {_RecordType("<313,323,12>",(f.toString)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<313,314,12>",(f)); Inst8++; } } catch(e) {}
assertThrows(function() { Wasm.instantiateModuleFromAsm(f.toString()); });

