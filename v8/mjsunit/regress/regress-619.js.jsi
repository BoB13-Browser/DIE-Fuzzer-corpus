var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Tests that Object.defineProperty works correctly on array indices.
// Please see http://code.google.com/p/v8/issues/detail?id=619 for details.

var obj = {};
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1749,1752,31>",(obj)); Inst0++; } } catch(e) {}
obj[1] = 42;
try { if (Inst1 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1759,1765,32>",(obj[1])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1759,1762,32>",(obj)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1772,1784,33>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1789,1795,33>",(obj[1])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1789,1792,33>",(obj)); Inst5++; } } catch(e) {}
assertEquals(42, obj[1]);
try { if (Inst6 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1798,1819,34>",(Object.defineProperty)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1798,1804,34>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1820,1823,34>",(obj)); Inst8++; } } catch(e) {}
Object.defineProperty(obj, '1', {value:10, writable:false});
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1859,1871,35>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1876,1882,35>",(obj[1])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1876,1879,35>",(obj)); Inst11++; } } catch(e) {}
assertEquals(10, obj[1]);

// We should not be able to override obj[1].
obj[1] = 5;
try { if (Inst12 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1931,1937,38>",(obj[1])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1931,1934,38>",(obj)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1943,1955,39>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<1960,1966,39>",(obj[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1960,1963,39>",(obj)); Inst16++; } } catch(e) {}
assertEquals(10, obj[1]);

// Try on a range of numbers.
for(var i = 0; i < 1024; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<2008,2009,42>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2015,2016,42>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<2025,2026,42>",(i)); Inst19++; } } catch(e) {}
  obj[i] = 42;
try { if (Inst20 <= 1000 && typeof (obj[i]) != "undefined") {_RecordType("<2034,2040,43>",(obj[i])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2034,2037,43>",(obj)); Inst21++; } } catch(e) {}
}

for(var i = 0; i < 1024; i++) {
try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<2058,2059,46>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2065,2066,46>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2075,2076,46>",(i)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2084,2105,47>",(Object.defineProperty)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2084,2090,47>",(Object)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2106,2109,47>",(obj)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<2111,2112,47>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2122,2123,47>",(i)); Inst29++; } } catch(e) {}
  Object.defineProperty(obj, i, {value: i, writable:false});
}

for(var i = 0; i < 1024; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2154,2155,50>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<2161,2162,50>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<2171,2172,50>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2180,2192,51>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2193,2194,51>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (obj[i]) != "undefined") {_RecordType("<2196,2202,51>",(obj[i])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2196,2199,51>",(obj)); Inst36++; } } catch(e) {}
  assertEquals(i, obj[i]);
}

for(var i = 0; i < 1024; i++) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2216,2217,54>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2223,2224,54>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<2233,2234,54>",(i)); Inst39++; } } catch(e) {}
  obj[1] = 5;
try { if (Inst40 <= 1000 && typeof (obj[1]) != "undefined") {_RecordType("<2242,2248,55>",(obj[1])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2242,2245,55>",(obj)); Inst41++; } } catch(e) {}
}

for(var i = 0; i < 1024; i++) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2265,2266,58>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<2272,2273,58>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (i) != "undefined") {_RecordType("<2282,2283,58>",(i)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2291,2303,59>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<2304,2305,59>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (obj[i]) != "undefined") {_RecordType("<2307,2313,59>",(obj[i])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2307,2310,59>",(obj)); Inst48++; } } catch(e) {}
  assertEquals(i, obj[i]);
}

