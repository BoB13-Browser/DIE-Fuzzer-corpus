var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (makeArrayInObject) != "undefined") {_RecordType("<1607,1624,28>",(makeArrayInObject)); Inst0++; } } catch(e) {}
function makeArrayInObject() {
  return { foo: [] };
}

try { if (Inst2 <= 1000 && typeof (makeArrayInObject) != "undefined") {_RecordType("<1662,1679,32>",(makeArrayInObject)); Inst2++; } } catch(e) {}
var a = makeArrayInObject();
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1658,1659,32>",(a)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a.foo.push) != "undefined") {_RecordType("<1683,1693,33>",(a.foo.push)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1683,1688,33>",(a.foo)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1683,1684,33>",(a)); Inst5++; } } catch(e) {}
a.foo.push(5);
try { if (Inst7 <= 1000 && typeof (makeArrayInObject) != "undefined") {_RecordType("<1706,1723,34>",(makeArrayInObject)); Inst7++; } } catch(e) {}
var b = makeArrayInObject();
try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<1702,1703,34>",(b)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1727,1739,35>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (b.foo.length) != "undefined") {_RecordType("<1743,1755,35>",(b.foo.length)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b.foo) != "undefined") {_RecordType("<1743,1748,35>",(b.foo)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<1743,1744,35>",(b)); Inst11++; } } catch(e) {}
assertEquals(0, b.foo.length, "Array in object");

try { if (Inst12 <= 1000 && typeof (makeObjectInObject) != "undefined") {_RecordType("<1787,1805,37>",(makeObjectInObject)); Inst12++; } } catch(e) {}
function makeObjectInObject() {
  return { foo: {} };
}

try { if (Inst14 <= 1000 && typeof (makeObjectInObject) != "undefined") {_RecordType("<1839,1857,41>",(makeObjectInObject)); Inst14++; } } catch(e) {}
a = makeObjectInObject();
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1835,1836,41>",(a)); Inst13++; } } catch(e) {}
a.foo.bar = 1;
try { if (Inst15 <= 1000 && typeof (a.foo.bar) != "undefined") {_RecordType("<1861,1870,42>",(a.foo.bar)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<1861,1866,42>",(a.foo)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1861,1862,42>",(a)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (makeObjectInObject) != "undefined") {_RecordType("<1880,1898,43>",(makeObjectInObject)); Inst19++; } } catch(e) {}
b = makeObjectInObject();
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1876,1877,43>",(b)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1902,1914,44>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b.foo.bar) != "undefined") {_RecordType("<1935,1944,44>",(b.foo.bar)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b.foo) != "undefined") {_RecordType("<1935,1940,44>",(b.foo)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<1935,1936,44>",(b)); Inst23++; } } catch(e) {}
assertEquals('undefined', typeof(b.foo.bar), "Object in object");

try { if (Inst24 <= 1000 && typeof (makeObjectInArray) != "undefined") {_RecordType("<1978,1995,46>",(makeObjectInArray)); Inst24++; } } catch(e) {}
function makeObjectInArray() {
  return [ {} ];
}

try { if (Inst26 <= 1000 && typeof (makeObjectInArray) != "undefined") {_RecordType("<2024,2041,50>",(makeObjectInArray)); Inst26++; } } catch(e) {}
a = makeObjectInArray();
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<2020,2021,50>",(a)); Inst25++; } } catch(e) {}
a[0].bar = 1;
try { if (Inst27 <= 1000 && typeof (a[0].bar) != "undefined") {_RecordType("<2045,2053,51>",(a[0].bar)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<2045,2049,51>",(a[0])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2045,2046,51>",(a)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (makeObjectInArray) != "undefined") {_RecordType("<2063,2080,52>",(makeObjectInArray)); Inst31++; } } catch(e) {}
b = makeObjectInArray();
try { if (Inst30 <= 1000 && typeof (b) != "undefined") {_RecordType("<2059,2060,52>",(b)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2084,2096,53>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (b[0].bar) != "undefined") {_RecordType("<2117,2125,53>",(b[0].bar)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<2117,2121,53>",(b[0])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (b) != "undefined") {_RecordType("<2117,2118,53>",(b)); Inst35++; } } catch(e) {}
assertEquals('undefined', typeof(b[0].bar), "Object in array");

try { if (Inst36 <= 1000 && typeof (makeArrayInArray) != "undefined") {_RecordType("<2158,2174,55>",(makeArrayInArray)); Inst36++; } } catch(e) {}
function makeArrayInArray() {
  return [ [] ];
}

try { if (Inst38 <= 1000 && typeof (makeArrayInArray) != "undefined") {_RecordType("<2203,2219,59>",(makeArrayInArray)); Inst38++; } } catch(e) {}
a = makeArrayInArray();
try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<2199,2200,59>",(a)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (a[0].push) != "undefined") {_RecordType("<2223,2232,60>",(a[0].push)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<2223,2227,60>",(a[0])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<2223,2224,60>",(a)); Inst41++; } } catch(e) {}
a[0].push(5);
try { if (Inst43 <= 1000 && typeof (makeArrayInArray) != "undefined") {_RecordType("<2241,2257,61>",(makeArrayInArray)); Inst43++; } } catch(e) {}
b = makeArrayInArray();
try { if (Inst42 <= 1000 && typeof (b) != "undefined") {_RecordType("<2237,2238,61>",(b)); Inst42++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2261,2273,62>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (b[0].length) != "undefined") {_RecordType("<2277,2288,62>",(b[0].length)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (b[0]) != "undefined") {_RecordType("<2277,2281,62>",(b[0])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (b) != "undefined") {_RecordType("<2277,2278,62>",(b)); Inst47++; } } catch(e) {}
assertEquals(0, b[0].length, "Array in array");

