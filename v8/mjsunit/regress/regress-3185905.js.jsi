var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1607,1612,28>",(test1)); Inst0++; } } catch(e) {}
function test1(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1613,1614,28>",(x)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (arguments.callee) != "undefined") {_RecordType("<1628,1644,29>",(arguments.callee)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1628,1637,29>",(arguments)); Inst4++; } } catch(e) {}
  var a = arguments.callee;
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1624,1625,29>",(a)); Inst2++; } } catch(e) {}
  x = 1;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<1648,1649,30>",(x)); Inst5++; } } catch(e) {}
  x = 2;
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1657,1658,31>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1666,1678,32>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1682,1683,32>",(x)); Inst8++; } } catch(e) {}
  assertEquals(2, x);
}
try { if (Inst9 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1688,1693,34>",(test1)); Inst9++; } } catch(e) {}
test1(0)

try { if (Inst10 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1707,1712,36>",(test2)); Inst10++; } } catch(e) {}
function test2(x) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1713,1714,36>",(x)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (arguments.callee) != "undefined") {_RecordType("<1728,1744,37>",(arguments.callee)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1728,1737,37>",(arguments)); Inst14++; } } catch(e) {}
  var a = arguments.callee;
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1724,1725,37>",(a)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<1748,1749,38>",(x)); Inst15++; } } catch(e) {}
  x++;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1755,1756,39>",(x)); Inst16++; } } catch(e) {}
  x++;
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1762,1774,40>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1778,1779,40>",(x)); Inst18++; } } catch(e) {}
  assertEquals(2, x);
}
try { if (Inst19 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1784,1789,42>",(test2)); Inst19++; } } catch(e) {}
test2(0)

try { if (Inst20 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1803,1808,44>",(test3)); Inst20++; } } catch(e) {}
function test3(x) {
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<1809,1810,44>",(x)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (arguments.callee) != "undefined") {_RecordType("<1824,1840,45>",(arguments.callee)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1824,1833,45>",(arguments)); Inst24++; } } catch(e) {}
  var a = arguments.callee;
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<1820,1821,45>",(a)); Inst22++; } } catch(e) {}
  x += 1;
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<1844,1845,46>",(x)); Inst25++; } } catch(e) {}
  x += 1;
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1854,1855,47>",(x)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1864,1876,48>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<1880,1881,48>",(x)); Inst28++; } } catch(e) {}
  assertEquals(2, x);
}
try { if (Inst29 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1886,1891,50>",(test3)); Inst29++; } } catch(e) {}
test3(0)

try { if (Inst30 <= 1000 && typeof (test4) != "undefined") {_RecordType("<1905,1910,52>",(test4)); Inst30++; } } catch(e) {}
function test4(x) {
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<1911,1912,52>",(x)); Inst31++; } } catch(e) {}
  var arguments = { 0 : 3, 'x' : 4 };
try { if (Inst32 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1922,1931,53>",(arguments)); Inst32++; } } catch(e) {}
  x += 1;
try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<1956,1957,54>",(x)); Inst33++; } } catch(e) {}
  x += 1;
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<1966,1967,55>",(x)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1976,1988,56>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<1992,1993,56>",(x)); Inst36++; } } catch(e) {}
  assertEquals(2, x);
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1998,2010,57>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<2014,2026,57>",(arguments[0])); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2014,2023,57>",(arguments)); Inst39++; } } catch(e) {}
  assertEquals(3, arguments[0])
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2030,2042,58>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (arguments['x']) != "undefined") {_RecordType("<2046,2060,58>",(arguments['x'])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2046,2055,58>",(arguments)); Inst42++; } } catch(e) {}
  assertEquals(4, arguments['x'])
}
try { if (Inst43 <= 1000 && typeof (test4) != "undefined") {_RecordType("<2064,2069,60>",(test4)); Inst43++; } } catch(e) {}
test4(0)

