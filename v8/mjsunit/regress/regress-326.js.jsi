var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Should not crash or raise an exception.
// Should sort non-array into equivalent of [37,42,undefined,,0]

try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1752,1761,31>",(undefined)); Inst1++; } } catch(e) {}
var nonArray = { length: 4, 0: 42, 2: 37, 3: undefined, 4: 0 };
try { if (Inst0 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<1711,1719,31>",(nonArray)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Array.prototype.sort.call) != "undefined") {_RecordType("<1771,1796,32>",(Array.prototype.sort.call)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array.prototype.sort) != "undefined") {_RecordType("<1771,1791,32>",(Array.prototype.sort)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1771,1786,32>",(Array.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1771,1776,32>",(Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<1797,1805,32>",(nonArray)); Inst6++; } } catch(e) {}
Array.prototype.sort.call(nonArray);

try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1809,1821,34>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (nonArray.length) != "undefined") {_RecordType("<1825,1840,34>",(nonArray.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<1825,1833,34>",(nonArray)); Inst9++; } } catch(e) {}
assertEquals(4, nonArray.length, "preserve length");
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1862,1874,35>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (nonArray[0]) != "undefined") {_RecordType("<1879,1890,35>",(nonArray[0])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<1879,1887,35>",(nonArray)); Inst12++; } } catch(e) {}
assertEquals(37, nonArray[0], "sort smallest first");
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1916,1928,36>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (nonArray[1]) != "undefined") {_RecordType("<1933,1944,36>",(nonArray[1])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<1933,1941,36>",(nonArray)); Inst15++; } } catch(e) {}
assertEquals(42, nonArray[1], "sort largest last");
try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1968,1978,37>",(assertTrue)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<1984,1992,37>",(nonArray)); Inst17++; } } catch(e) {}
assertTrue(2 in nonArray, "don't delete undefined");
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2021,2033,38>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2034,2043,38>",(undefined)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (nonArray[2]) != "undefined") {_RecordType("<2045,2056,38>",(nonArray[2])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<2045,2053,38>",(nonArray)); Inst21++; } } catch(e) {}
assertEquals(undefined, nonArray[2], "sort undefined after largest");
try { if (Inst22 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2091,2102,39>",(assertFalse)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<2108,2116,39>",(nonArray)); Inst23++; } } catch(e) {}
assertFalse(3 in nonArray, "don't create non-existing");
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2148,2160,40>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (nonArray[4]) != "undefined") {_RecordType("<2164,2175,40>",(nonArray[4])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (nonArray) != "undefined") {_RecordType("<2164,2172,40>",(nonArray)); Inst26++; } } catch(e) {}
assertEquals(0, nonArray[4], "don't affect after length.");

