var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Make sure that eval can introduce a local variable called __proto__.
// See http://code.google.com/p/v8/issues/detail?id=186

var setterCalled = false;
try { if (Inst0 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<1731,1743,31>",(setterCalled)); Inst0++; } } catch(e) {}

var o = {};
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<1758,1759,33>",(o)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (o.__defineSetter__) != "undefined") {_RecordType("<1766,1784,34>",(o.__defineSetter__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<1766,1767,34>",(o)); Inst3++; } } catch(e) {}
o.__defineSetter__("x", function() { setterCalled = true; });
try { if (Inst4 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<1803,1815,34>",(setterCalled)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1838,1845,36>",(runTest)); Inst5++; } } catch(e) {}
function runTest(test) {
try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<1846,1850,36>",(test)); Inst6++; } } catch(e) {}
  setterCalled = false;
try { if (Inst7 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<1856,1868,37>",(setterCalled)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (test) != "undefined") {_RecordType("<1880,1884,38>",(test)); Inst8++; } } catch(e) {}
  test();
}

try { if (Inst9 <= 1000 && typeof (testLocal) != "undefined") {_RecordType("<1900,1909,41>",(testLocal)); Inst9++; } } catch(e) {}
function testLocal() {
  // Add property called __proto__ to the extension object.
try { if (Inst10 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1976,1980,43>",(eval)); Inst10++; } } catch(e) {}
  eval("var __proto__ = o");
  // Check that the extension object's prototype did not change.
try { if (Inst11 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2070,2074,45>",(eval)); Inst11++; } } catch(e) {}
  eval("var x = 27");
try { if (Inst12 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2092,2103,46>",(assertFalse)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<2104,2116,46>",(setterCalled)); Inst13++; } } catch(e) {}
  assertFalse(setterCalled, "prototype of extension object changed");
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2162,2174,47>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<2175,2176,47>",(o)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2178,2182,47>",(eval)); Inst16++; } } catch(e) {}
  assertEquals(o, eval("__proto__"));
}

try { if (Inst17 <= 1000 && typeof (testGlobal) != "undefined") {_RecordType("<2210,2220,50>",(testGlobal)); Inst17++; } } catch(e) {}
function testGlobal() {
  // Assign to the global __proto__ property.
try { if (Inst18 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2273,2277,52>",(eval)); Inst18++; } } catch(e) {}
  eval("__proto__ = o");
  // Check that the prototype of the global object changed.
try { if (Inst19 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2358,2362,54>",(eval)); Inst19++; } } catch(e) {}
  eval("x = 27");
try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2376,2386,55>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<2387,2399,55>",(setterCalled)); Inst21++; } } catch(e) {}
  assertTrue(setterCalled, "prototype of global object did not change");
  setterCalled = false;
try { if (Inst22 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<2449,2461,56>",(setterCalled)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2473,2485,57>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<2486,2487,57>",(o)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2489,2493,57>",(eval)); Inst25++; } } catch(e) {}
  assertEquals(o, eval("__proto__"));
}

try { if (Inst26 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2512,2519,60>",(runTest)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (testLocal) != "undefined") {_RecordType("<2520,2529,60>",(testLocal)); Inst27++; } } catch(e) {}
runTest(testLocal);
try { if (Inst28 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2532,2539,61>",(runTest)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (testGlobal) != "undefined") {_RecordType("<2540,2550,61>",(testGlobal)); Inst29++; } } catch(e) {}
runTest(testGlobal);

