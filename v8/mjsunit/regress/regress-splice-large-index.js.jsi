var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var a = [];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1602,1603,28>",(a)); Inst0++; } } catch(e) {}
a[0xfffffffe] = 10;
try { if (Inst1 <= 1000 && typeof (a[0xfffffffe]) != "undefined") {_RecordType("<1610,1623,29>",(a[0xfffffffe])); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1610,1611,29>",(a)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1630,1642,30>",(assertThrows)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1660,1670,30>",(RangeError)); Inst4++; } } catch(e) {}
assertThrows("a.unshift(1);", RangeError);
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1673,1685,31>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1698,1706,31>",(a.length)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1698,1699,31>",(a)); Inst7++; } } catch(e) {}
assertEquals(0xffffffff, a.length);
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1709,1721,32>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a[0xffffffff]) != "undefined") {_RecordType("<1726,1739,32>",(a[0xffffffff])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1726,1727,32>",(a)); Inst10++; } } catch(e) {}
assertEquals(10, a[0xffffffff]);
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1742,1754,33>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1767,1775,33>",(a.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1767,1768,33>",(a)); Inst13++; } } catch(e) {}
assertEquals(0xffffffff, a.length);
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1778,1790,34>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1791,1800,34>",(undefined)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a[0xfffffffe]) != "undefined") {_RecordType("<1802,1815,34>",(a[0xfffffffe])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1802,1803,34>",(a)); Inst17++; } } catch(e) {}
assertEquals(undefined, a[0xfffffffe]);

a = [1,2,3];
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<1819,1820,36>",(a)); Inst18++; } } catch(e) {}
a[0xfffffffe] = 10;
try { if (Inst19 <= 1000 && typeof (a[0xfffffffe]) != "undefined") {_RecordType("<1832,1845,37>",(a[0xfffffffe])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<1832,1833,37>",(a)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1852,1864,38>",(assertThrows)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1893,1903,38>",(RangeError)); Inst22++; } } catch(e) {}
assertThrows("a.splice(1,1,7,7,7,7,7);", RangeError);
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1906,1918,39>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<1936,1943,39>",(a.slice)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<1936,1937,39>",(a)); Inst25++; } } catch(e) {}
assertEquals([1,7,7,7,7,7,3], a.slice(0, 7));
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1952,1964,40>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1977,1985,40>",(a.length)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<1977,1978,40>",(a)); Inst28++; } } catch(e) {}
assertEquals(0xffffffff, a.length);
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1988,2000,41>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a[0xfffffffe + 5 - 1]) != "undefined") {_RecordType("<2005,2026,41>",(a[0xfffffffe + 5 - 1])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<2005,2006,41>",(a)); Inst31++; } } catch(e) {}
assertEquals(10, a[0xfffffffe + 5 - 1]);

