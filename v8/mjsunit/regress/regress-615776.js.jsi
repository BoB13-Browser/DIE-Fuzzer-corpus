var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<168,189,5>",(Object.defineProperty)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object) != "undefined") {_RecordType("<168,174,5>",(Object)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Int32Array.prototype.__proto__) != "undefined") {_RecordType("<190,220,5>",(Int32Array.prototype.__proto__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Int32Array.prototype) != "undefined") {_RecordType("<190,210,5>",(Int32Array.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<190,200,5>",(Int32Array)); Inst4++; } } catch(e) {}
Object.defineProperty(Int32Array.prototype.__proto__, 'length', {
try { if (Inst5 <= 1000 && typeof (Error) != "undefined") {_RecordType("<264,269,6>",(Error)); Inst5++; } } catch(e) {}
  get: function() { throw new Error('Custom length property'); }
});

try { if (Inst7 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<312,323,9>",(Math.random)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math) != "undefined") {_RecordType("<312,316,9>",(Math)); Inst8++; } } catch(e) {}
var a = Math.random();
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<308,309,9>",(a)); Inst6++; } } catch(e) {}

// This tests MathRandomRaw.
try { if (Inst10 <= 1000 && typeof (Set) != "undefined") {_RecordType("<370,373,12>",(Set)); Inst10++; } } catch(e) {}
var v0 = new Set();
try { if (Inst9 <= 1000 && typeof (v0) != "undefined") {_RecordType("<361,363,12>",(v0)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<390,396,13>",(Object)); Inst12++; } } catch(e) {}
var v1 = new Object();
try { if (Inst11 <= 1000 && typeof (v1) != "undefined") {_RecordType("<381,383,13>",(v1)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (v0.add) != "undefined") {_RecordType("<400,406,14>",(v0.add)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (v0) != "undefined") {_RecordType("<400,402,14>",(v0)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (v1) != "undefined") {_RecordType("<407,409,14>",(v1)); Inst15++; } } catch(e) {}
v0.add(v1);

