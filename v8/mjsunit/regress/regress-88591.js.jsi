var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Regression test for a crash.  A data property in the global object's
// prototype shadowed by a setter in the global object's prototype's
// prototype would crash or assert when seen by Runtime_DeclareContextSlot.
var called = false;
try { if (Inst0 <= 1000 && typeof (called) != "undefined") {_RecordType("<1819,1825,31>",(called)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.prototype.__defineSetter__) != "undefined") {_RecordType("<1835,1868,32>",(Object.prototype.__defineSetter__)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1835,1851,32>",(Object.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1835,1841,32>",(Object)); Inst3++; } } catch(e) {}
Object.prototype.__defineSetter__('x', function(x) { called = true; });
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1883,1884,32>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (called) != "undefined") {_RecordType("<1888,1894,32>",(called)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Object.prototype.__defineGetter__) != "undefined") {_RecordType("<1907,1940,33>",(Object.prototype.__defineGetter__)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1907,1923,33>",(Object.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1907,1913,33>",(Object)); Inst8++; } } catch(e) {}
Object.prototype.__defineGetter__('x', function () { return 0; });

this.__proto__ = { x: 1 };
try { if (Inst9 <= 1000 && typeof (this.__proto__) != "undefined") {_RecordType("<1975,1989,35>",(this.__proto__)); Inst9++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (fail) != "undefined") {_RecordType("<2009,2013,37>",(fail)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<2024,2025,37>",(e)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2029,2033,37>",(eval)); Inst12++; } } catch(e) {}
try { fail; } catch (e) { eval('var x = 2'); }

try { if (Inst14 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<2059,2090,39>",(Object.getOwnPropertyDescriptor)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2059,2065,39>",(Object)); Inst15++; } } catch(e) {}
var o = Object.getOwnPropertyDescriptor(this, 'x');
try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<2055,2056,39>",(o)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2103,2114,40>",(assertFalse)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (called) != "undefined") {_RecordType("<2115,2121,40>",(called)); Inst17++; } } catch(e) {}
assertFalse(called);
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2124,2136,41>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o.value) != "undefined") {_RecordType("<2140,2147,41>",(o.value)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<2140,2141,41>",(o)); Inst20++; } } catch(e) {}
assertEquals(2, o.value);
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2150,2162,42>",(assertEquals)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o.writable) != "undefined") {_RecordType("<2169,2179,42>",(o.writable)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<2169,2170,42>",(o)); Inst23++; } } catch(e) {}
assertEquals(true, o.writable);

