var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test non-ICC case.
var caught = false;
try { if (Inst0 <= 1000 && typeof (caught) != "undefined") {_RecordType("<1624,1630,29>",(caught)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<1670,1671,32>",(o)); Inst1++; } } catch(e) {}
try {
  (('foo'))();
} catch (o) {
try { if (Inst2 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1677,1687,33>",(assertTrue)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<1688,1689,33>",(o)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1701,1710,33>",(TypeError)); Inst4++; } } catch(e) {}
  assertTrue(o instanceof TypeError);
  caught = true;
try { if (Inst5 <= 1000 && typeof (caught) != "undefined") {_RecordType("<1715,1721,34>",(caught)); Inst5++; } } catch(e) {}
}
try { if (Inst6 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1732,1742,36>",(assertTrue)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (caught) != "undefined") {_RecordType("<1743,1749,36>",(caught)); Inst7++; } } catch(e) {}
assertTrue(caught);


// Test uninitialized case.
try { if (Inst8 <= 1000 && typeof (h) != "undefined") {_RecordType("<1791,1792,40>",(h)); Inst8++; } } catch(e) {}
function h(o) {
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<1793,1794,40>",(o)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1807,1810,41>",(o.x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<1807,1808,41>",(o)); Inst11++; } } catch(e) {}
  return o.x();
}

var caught = false;
try { if (Inst12 <= 1000 && typeof (caught) != "undefined") {_RecordType("<1821,1827,44>",(caught)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<1867,1868,47>",(o)); Inst14++; } } catch(e) {}
try {
try { if (Inst13 <= 1000 && typeof (h) != "undefined") {_RecordType("<1845,1846,46>",(h)); Inst13++; } } catch(e) {}
  h({ x: 1 });
} catch (o) {
try { if (Inst15 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1874,1884,48>",(assertTrue)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<1885,1886,48>",(o)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1898,1907,48>",(TypeError)); Inst17++; } } catch(e) {}
  assertTrue(o instanceof TypeError);
  caught = true;
try { if (Inst18 <= 1000 && typeof (caught) != "undefined") {_RecordType("<1912,1918,49>",(caught)); Inst18++; } } catch(e) {}
}
try { if (Inst19 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1929,1939,51>",(assertTrue)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (caught) != "undefined") {_RecordType("<1940,1946,51>",(caught)); Inst20++; } } catch(e) {}
assertTrue(caught);


// Test monomorphic case.
try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<1986,1987,55>",(g)); Inst21++; } } catch(e) {}
function g(o) {
try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<1988,1989,55>",(o)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2002,2005,56>",(o.x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<2002,2003,56>",(o)); Inst24++; } } catch(e) {}
  return o.x();
}

try { if (Inst25 <= 1000 && typeof (O) != "undefined") {_RecordType("<2021,2022,59>",(O)); Inst25++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<2037,2038,59>",(x)); Inst28++; } } catch(e) {}
function O(x) { this.x = x; };
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2023,2024,59>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<2028,2034,59>",(this.x)); Inst27++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (O) != "undefined") {_RecordType("<2055,2056,60>",(O)); Inst30++; } } catch(e) {}
var o = new O(function() { return 1; });
try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<2047,2048,60>",(o)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2084,2096,61>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (g) != "undefined") {_RecordType("<2100,2101,61>",(g)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<2102,2103,61>",(o)); Inst33++; } } catch(e) {}
assertEquals(1, g(o));  // go monomorphic
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2126,2138,62>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (g) != "undefined") {_RecordType("<2142,2143,62>",(g)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o) != "undefined") {_RecordType("<2144,2145,62>",(o)); Inst36++; } } catch(e) {}
assertEquals(1, g(o));  // stay monomorphic

var caught = false;
try { if (Inst37 <= 1000 && typeof (caught) != "undefined") {_RecordType("<2175,2181,64>",(caught)); Inst37++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (o) != "undefined") {_RecordType("<2221,2222,67>",(o)); Inst40++; } } catch(e) {}
try {
try { if (Inst38 <= 1000 && typeof (g) != "undefined") {_RecordType("<2199,2200,66>",(g)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (O) != "undefined") {_RecordType("<2205,2206,66>",(O)); Inst39++; } } catch(e) {}
  g(new O(3));
} catch (o) {
try { if (Inst41 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2228,2238,68>",(assertTrue)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o) != "undefined") {_RecordType("<2239,2240,68>",(o)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2252,2261,68>",(TypeError)); Inst43++; } } catch(e) {}
  assertTrue(o instanceof TypeError);
  caught = true;
try { if (Inst44 <= 1000 && typeof (caught) != "undefined") {_RecordType("<2266,2272,69>",(caught)); Inst44++; } } catch(e) {}
}
try { if (Inst45 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2283,2293,71>",(assertTrue)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (caught) != "undefined") {_RecordType("<2294,2300,71>",(caught)); Inst46++; } } catch(e) {}
assertTrue(caught);


// Test megamorphic case.
try { if (Inst47 <= 1000 && typeof (f) != "undefined") {_RecordType("<2340,2341,75>",(f)); Inst47++; } } catch(e) {}
function f(o) {
try { if (Inst48 <= 1000 && typeof (o) != "undefined") {_RecordType("<2342,2343,75>",(o)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2356,2359,76>",(o.x)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (o) != "undefined") {_RecordType("<2356,2357,76>",(o)); Inst50++; } } catch(e) {}
  return o.x();
}

try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2366,2378,79>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (f) != "undefined") {_RecordType("<2382,2383,79>",(f)); Inst52++; } } catch(e) {}
assertEquals(1, f({ x: function () { return 1; }}));  // go monomorphic
try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2438,2450,80>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (f) != "undefined") {_RecordType("<2454,2455,80>",(f)); Inst54++; } } catch(e) {}
assertEquals(2, f({ x: function () { return 2; }}));  // go megamorphic
try { if (Inst55 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2510,2522,81>",(assertEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (f) != "undefined") {_RecordType("<2526,2527,81>",(f)); Inst56++; } } catch(e) {}
assertEquals(3, f({ x: function () { return 3; }}));  // stay megamorphic

var caught = false;
try { if (Inst57 <= 1000 && typeof (caught) != "undefined") {_RecordType("<2589,2595,83>",(caught)); Inst57++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (o) != "undefined") {_RecordType("<2635,2636,86>",(o)); Inst59++; } } catch(e) {}
try {
try { if (Inst58 <= 1000 && typeof (f) != "undefined") {_RecordType("<2613,2614,85>",(f)); Inst58++; } } catch(e) {}
  f({ x: 4 });
} catch (o) {
try { if (Inst60 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2642,2652,87>",(assertTrue)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (o) != "undefined") {_RecordType("<2653,2654,87>",(o)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2666,2675,87>",(TypeError)); Inst62++; } } catch(e) {}
  assertTrue(o instanceof TypeError);
  caught = true;
try { if (Inst63 <= 1000 && typeof (caught) != "undefined") {_RecordType("<2680,2686,88>",(caught)); Inst63++; } } catch(e) {}
}
try { if (Inst64 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2697,2707,90>",(assertTrue)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (caught) != "undefined") {_RecordType("<2708,2714,90>",(caught)); Inst65++; } } catch(e) {}
assertTrue(caught);

