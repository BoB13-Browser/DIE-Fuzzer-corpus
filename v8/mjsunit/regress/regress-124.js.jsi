var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1598,1610,28>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (this.toString) != "undefined") {_RecordType("<1630,1643,28>",(this.toString)); Inst1++; } } catch(e) {}
assertEquals("[object global]", this.toString());
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1648,1660,29>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (toString) != "undefined") {_RecordType("<1683,1691,29>",(toString)); Inst3++; } } catch(e) {}
assertEquals("[object Undefined]", toString());

try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1697,1709,31>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1729,1733,31>",(eval)); Inst5++; } } catch(e) {}
assertEquals("[object global]", eval("this.toString()"));
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1755,1767,32>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1790,1794,32>",(eval)); Inst7++; } } catch(e) {}
assertEquals("[object Undefined]", eval("toString()"));

try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1812,1824,34>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1844,1848,34>",(eval)); Inst9++; } } catch(e) {}
assertEquals("[object global]", eval("var f; this.toString()"));
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1877,1889,35>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1912,1916,35>",(eval)); Inst11++; } } catch(e) {}
assertEquals("[object Undefined]", eval("var f; toString()"));


try { if (Inst12 <= 1000 && typeof (F) != "undefined") {_RecordType("<1951,1952,38>",(F)); Inst12++; } } catch(e) {}
function F(f) {
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<1953,1954,38>",(f)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1960,1972,39>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (this.toString) != "undefined") {_RecordType("<1992,2005,39>",(this.toString)); Inst15++; } } catch(e) {}
  assertEquals("[object global]", this.toString());
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2012,2024,40>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (toString) != "undefined") {_RecordType("<2047,2055,40>",(toString)); Inst17++; } } catch(e) {}
  assertEquals("[object Undefined]", toString());

try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2063,2075,42>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2095,2099,42>",(eval)); Inst19++; } } catch(e) {}
  assertEquals("[object global]", eval("this.toString()"));
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2123,2135,43>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2158,2162,43>",(eval)); Inst21++; } } catch(e) {}
  assertEquals("[object Undefined]", eval("toString()"));

try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2182,2194,45>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2214,2218,45>",(eval)); Inst23++; } } catch(e) {}
  assertEquals("[object global]", eval("var f; this.toString()"));
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2249,2261,46>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2284,2288,46>",(eval)); Inst25++; } } catch(e) {}
  assertEquals("[object Undefined]", eval("var f; toString()"));

try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2315,2327,48>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2350,2354,48>",(eval)); Inst27++; } } catch(e) {}
  assertEquals("[object Undefined]", eval("f()"));

  // Receiver should be the arguments object here.
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2418,2430,51>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2453,2457,51>",(eval)); Inst29++; } } catch(e) {}
  assertEquals("[object Arguments]", eval("arguments[0]()"));
try { if (Inst30 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2486,2495,52>",(arguments)); Inst30++; } } catch(e) {}
  with (arguments) {
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2503,2515,53>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (toString) != "undefined") {_RecordType("<2538,2546,53>",(toString)); Inst32++; } } catch(e) {}
    assertEquals("[object Arguments]", toString());
  }
}

try { if (Inst33 <= 1000 && typeof (F) != "undefined") {_RecordType("<2558,2559,57>",(F)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Object.prototype.toString) != "undefined") {_RecordType("<2560,2585,57>",(Object.prototype.toString)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<2560,2576,57>",(Object.prototype)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2560,2566,57>",(Object)); Inst36++; } } catch(e) {}
F(Object.prototype.toString);

