var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This tests that we do not share optimized code across closures that
// were optimized using OSR (for a particular OSR entry AST id) even if
// caching of optimized code kicks in.

try { if (Inst0 <= 1000 && typeof (makeClosure) != "undefined") {_RecordType("<1790,1801,32>",(makeClosure)); Inst0++; } } catch(e) {}
function makeClosure() {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<1817,1818,33>",(f)); Inst1++; } } catch(e) {}
  function f(mode, iterations) {
try { if (Inst2 <= 1000 && typeof (mode) != "undefined") {_RecordType("<1819,1823,33>",(mode)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<1825,1835,33>",(iterations)); Inst3++; } } catch(e) {}
    var accumulator = 0;
try { if (Inst4 <= 1000 && typeof (accumulator) != "undefined") {_RecordType("<1847,1858,34>",(accumulator)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (mode) != "undefined") {_RecordType("<1872,1876,35>",(mode)); Inst5++; } } catch(e) {}
    if (mode == 1) {
try { if (Inst6 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<1900,1910,36>",(iterations)); Inst6++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<1930,1939,36>",(Math.ceil)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1930,1934,36>",(Math)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (accumulator) != "undefined") {_RecordType("<1940,1951,36>",(accumulator)); Inst10++; } } catch(e) {}
      while (--iterations > 0) accumulator = Math.ceil(accumulator);
try { if (Inst7 <= 1000 && typeof (accumulator) != "undefined") {_RecordType("<1916,1927,36>",(accumulator)); Inst7++; } } catch(e) {}
      return 1;
    } else {
try { if (Inst11 <= 1000 && typeof (iterations) != "undefined") {_RecordType("<1998,2008,39>",(iterations)); Inst11++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<2028,2038,39>",(Math.floor)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2028,2032,39>",(Math)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (accumulator) != "undefined") {_RecordType("<2039,2050,39>",(accumulator)); Inst15++; } } catch(e) {}
      while (--iterations > 0) accumulator = Math.floor(accumulator);
try { if (Inst12 <= 1000 && typeof (accumulator) != "undefined") {_RecordType("<2014,2025,39>",(accumulator)); Inst12++; } } catch(e) {}
      return 2;
    }
  }
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<2088,2089,43>",(f)); Inst16++; } } catch(e) {}
  return f;
}

// Generate two closures sharing the same underlying function literal.
try { if (Inst18 <= 1000 && typeof (makeClosure) != "undefined") {_RecordType("<2174,2185,47>",(makeClosure)); Inst18++; } } catch(e) {}
var f1 = makeClosure();
try { if (Inst17 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2169,2171,47>",(f1)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (makeClosure) != "undefined") {_RecordType("<2198,2209,48>",(makeClosure)); Inst20++; } } catch(e) {}
var f2 = makeClosure();
try { if (Inst19 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2193,2195,48>",(f2)); Inst19++; } } catch(e) {}

// This function should be optimized via OSR in the first tight loop.
try { if (Inst21 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<2284,2294,51>",(assertSame)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2298,2300,51>",(f1)); Inst22++; } } catch(e) {}
assertSame(1, f1(1, 100000));

// This function should be optimized via OSR in the second tight loop.
try { if (Inst23 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<2386,2396,54>",(assertSame)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2400,2402,54>",(f2)); Inst24++; } } catch(e) {}
assertSame(2, f2(2, 100000));

