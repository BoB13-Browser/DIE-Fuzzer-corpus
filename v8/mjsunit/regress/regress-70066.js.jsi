var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Regression test for Chromium issue 70066.  Delete should work properly
// from inside 'with' scopes.
// http://code.google.com/p/chromium/issues/detail?id=70066

x = 0;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1763,1764,32>",(x)); Inst0++; } } catch(e) {}

// Delete on a slot from a function's own context.
try { if (Inst1 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1831,1836,35>",(test1)); Inst1++; } } catch(e) {}
function test1() {
  var value = 1;
try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<1847,1852,36>",(value)); Inst2++; } } catch(e) {}
  var status;
try { if (Inst3 <= 1000 && typeof (status) != "undefined") {_RecordType("<1864,1870,37>",(status)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (value) != "undefined") {_RecordType("<1902,1907,38>",(value)); Inst5++; } } catch(e) {}
  with ({}) { status = delete value; }
try { if (Inst4 <= 1000 && typeof (status) != "undefined") {_RecordType("<1886,1892,38>",(status)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<1920,1925,39>",(value)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (status) != "undefined") {_RecordType("<1934,1940,39>",(status)); Inst7++; } } catch(e) {}
  return value + ":" + status;
}

try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1945,1957,42>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (test1) != "undefined") {_RecordType("<1969,1974,42>",(test1)); Inst9++; } } catch(e) {}
assertEquals("1:false", test1(), "test1");
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1988,2000,43>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<2004,2005,43>",(x)); Inst11++; } } catch(e) {}
assertEquals(0, x, "test1");  // Global x is undisturbed.


// Delete on a slot from an outer context.
try { if (Inst12 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2100,2105,47>",(test2)); Inst12++; } } catch(e) {}
function test2() {
try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<2121,2122,48>",(f)); Inst13++; } } catch(e) {}
  function f() {
try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<2157,2162,49>",(value)); Inst14++; } } catch(e) {}
    with ({}) { return delete value; }
  }
  var value = 2;
try { if (Inst15 <= 1000 && typeof (value) != "undefined") {_RecordType("<2176,2181,51>",(value)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<2202,2203,52>",(f)); Inst17++; } } catch(e) {}
  var status = f();
try { if (Inst16 <= 1000 && typeof (status) != "undefined") {_RecordType("<2193,2199,52>",(status)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (value) != "undefined") {_RecordType("<2216,2221,53>",(value)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (status) != "undefined") {_RecordType("<2230,2236,53>",(status)); Inst19++; } } catch(e) {}
  return value + ":" + status;
}

try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2241,2253,56>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (test2) != "undefined") {_RecordType("<2265,2270,56>",(test2)); Inst21++; } } catch(e) {}
assertEquals("2:false", test2(), "test2");
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2284,2296,57>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<2300,2301,57>",(x)); Inst23++; } } catch(e) {}
assertEquals(0, x, "test2");  // Global x is undisturbed.


// Delete on a parameter.
try { if (Inst24 <= 1000 && typeof (test3) != "undefined") {_RecordType("<2379,2384,61>",(test3)); Inst24++; } } catch(e) {}
function test3(value) {
try { if (Inst25 <= 1000 && typeof (value) != "undefined") {_RecordType("<2385,2390,61>",(value)); Inst25++; } } catch(e) {}
  var status;
try { if (Inst26 <= 1000 && typeof (status) != "undefined") {_RecordType("<2400,2406,62>",(status)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (value) != "undefined") {_RecordType("<2438,2443,63>",(value)); Inst28++; } } catch(e) {}
  with ({}) { status = delete value; }
try { if (Inst27 <= 1000 && typeof (status) != "undefined") {_RecordType("<2422,2428,63>",(status)); Inst27++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<2456,2461,64>",(value)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (status) != "undefined") {_RecordType("<2470,2476,64>",(status)); Inst30++; } } catch(e) {}
  return value + ":" + status;
}

try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2481,2493,67>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (test3) != "undefined") {_RecordType("<2505,2510,67>",(test3)); Inst32++; } } catch(e) {}
assertEquals("3:false", test3(3), "test3");
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2525,2537,68>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<2541,2542,68>",(x)); Inst34++; } } catch(e) {}
assertEquals(0, x, "test3");  // Global x is undisturbed.


// Delete on a parameter found in an outer context.
try { if (Inst35 <= 1000 && typeof (test4) != "undefined") {_RecordType("<2646,2651,72>",(test4)); Inst35++; } } catch(e) {}
function test4(value) {
try { if (Inst36 <= 1000 && typeof (value) != "undefined") {_RecordType("<2652,2657,72>",(value)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<2672,2673,73>",(f)); Inst37++; } } catch(e) {}
  function f() {
try { if (Inst38 <= 1000 && typeof (value) != "undefined") {_RecordType("<2708,2713,74>",(value)); Inst38++; } } catch(e) {}
    with ({}) { return delete value; }
  }
try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<2736,2737,76>",(f)); Inst40++; } } catch(e) {}
  var status = f();
try { if (Inst39 <= 1000 && typeof (status) != "undefined") {_RecordType("<2727,2733,76>",(status)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (value) != "undefined") {_RecordType("<2750,2755,77>",(value)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (status) != "undefined") {_RecordType("<2764,2770,77>",(status)); Inst42++; } } catch(e) {}
  return value + ":" + status;
}

try { if (Inst43 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2775,2787,80>",(assertEquals)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (test4) != "undefined") {_RecordType("<2799,2804,80>",(test4)); Inst44++; } } catch(e) {}
assertEquals("4:false", test4(4), "test4");
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2819,2831,81>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<2835,2836,81>",(x)); Inst46++; } } catch(e) {}
assertEquals(0, x, "test4");  // Global x is undisturbed.


// Delete on a parameter, arguments object should be unaffected.
try { if (Inst47 <= 1000 && typeof (test5) != "undefined") {_RecordType("<2953,2958,85>",(test5)); Inst47++; } } catch(e) {}
function test5(value) {
try { if (Inst48 <= 1000 && typeof (value) != "undefined") {_RecordType("<2959,2964,85>",(value)); Inst48++; } } catch(e) {}
  var status;
try { if (Inst49 <= 1000 && typeof (status) != "undefined") {_RecordType("<2974,2980,86>",(status)); Inst49++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (value) != "undefined") {_RecordType("<3012,3017,87>",(value)); Inst51++; } } catch(e) {}
  with ({}) { status = delete value; }
try { if (Inst50 <= 1000 && typeof (status) != "undefined") {_RecordType("<2996,3002,87>",(status)); Inst50++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<3030,3042,88>",(arguments[0])); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<3030,3039,88>",(arguments)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (status) != "undefined") {_RecordType("<3051,3057,88>",(status)); Inst54++; } } catch(e) {}
  return arguments[0] + ":" + status;
}

try { if (Inst55 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3062,3074,91>",(assertEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (test5) != "undefined") {_RecordType("<3086,3091,91>",(test5)); Inst56++; } } catch(e) {}
assertEquals("5:false", test5(5), "test5");
try { if (Inst57 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3106,3118,92>",(assertEquals)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (x) != "undefined") {_RecordType("<3122,3123,92>",(x)); Inst58++; } } catch(e) {}
assertEquals(0, x, "test5");  // Global x is undisturbed.

try { if (Inst59 <= 1000 && typeof (test6) != "undefined") {_RecordType("<3174,3179,94>",(test6)); Inst59++; } } catch(e) {}
function test6(value) {
try { if (Inst60 <= 1000 && typeof (value) != "undefined") {_RecordType("<3180,3185,94>",(value)); Inst60++; } } catch(e) {}
try { if (Inst61 <= 1000 && typeof (f) != "undefined") {_RecordType("<3200,3201,95>",(f)); Inst61++; } } catch(e) {}
  function f() {
try { if (Inst62 <= 1000 && typeof (value) != "undefined") {_RecordType("<3236,3241,96>",(value)); Inst62++; } } catch(e) {}
    with ({}) { return delete value; }
  }
try { if (Inst64 <= 1000 && typeof (f) != "undefined") {_RecordType("<3264,3265,98>",(f)); Inst64++; } } catch(e) {}
  var status = f();
try { if (Inst63 <= 1000 && typeof (status) != "undefined") {_RecordType("<3255,3261,98>",(status)); Inst63++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (arguments[0]) != "undefined") {_RecordType("<3278,3290,99>",(arguments[0])); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<3278,3287,99>",(arguments)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (status) != "undefined") {_RecordType("<3299,3305,99>",(status)); Inst67++; } } catch(e) {}
  return arguments[0] + ":" + status;
}

try { if (Inst68 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3310,3322,102>",(assertEquals)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (test6) != "undefined") {_RecordType("<3334,3339,102>",(test6)); Inst69++; } } catch(e) {}
assertEquals("6:false", test6(6), "test6");
try { if (Inst70 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3354,3366,103>",(assertEquals)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (x) != "undefined") {_RecordType("<3370,3371,103>",(x)); Inst71++; } } catch(e) {}
assertEquals(0, x, "test6");  // Global x is undisturbed.


// Delete on a property found on 'with' object.
try { if (Inst72 <= 1000 && typeof (test7) != "undefined") {_RecordType("<3471,3476,107>",(test7)); Inst72++; } } catch(e) {}
function test7(object) {
try { if (Inst73 <= 1000 && typeof (object) != "undefined") {_RecordType("<3477,3483,107>",(object)); Inst73++; } } catch(e) {}
try { if (Inst74 <= 1000 && typeof (object) != "undefined") {_RecordType("<3495,3501,108>",(object)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (value) != "undefined") {_RecordType("<3519,3524,108>",(value)); Inst75++; } } catch(e) {}
  with (object) { return delete value; }
}

var o = {value: 7};
try { if (Inst76 <= 1000 && typeof (o) != "undefined") {_RecordType("<3535,3536,111>",(o)); Inst76++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3551,3563,112>",(assertEquals)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (test7) != "undefined") {_RecordType("<3570,3575,112>",(test7)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (o) != "undefined") {_RecordType("<3576,3577,112>",(o)); Inst79++; } } catch(e) {}
assertEquals(true, test7(o), "test7");
try { if (Inst80 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3590,3602,113>",(assertEquals)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (o.value) != "undefined") {_RecordType("<3611,3618,113>",(o.value)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (o) != "undefined") {_RecordType("<3611,3612,113>",(o)); Inst82++; } } catch(e) {}
assertEquals(void 0, o.value, "test7");
try { if (Inst83 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3630,3642,114>",(assertEquals)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (x) != "undefined") {_RecordType("<3646,3647,114>",(x)); Inst84++; } } catch(e) {}
assertEquals(0, x, "test7");  // Global x is undisturbed.


// Delete on a global property.
try { if (Inst85 <= 1000 && typeof (test8) != "undefined") {_RecordType("<3731,3736,118>",(test8)); Inst85++; } } catch(e) {}
function test8() {
try { if (Inst86 <= 1000 && typeof (x) != "undefined") {_RecordType("<3769,3770,119>",(x)); Inst86++; } } catch(e) {}
  with ({}) { return delete x; }
}

try { if (Inst87 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3777,3789,122>",(assertEquals)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (test8) != "undefined") {_RecordType("<3796,3801,122>",(test8)); Inst88++; } } catch(e) {}
assertEquals(true, test8(), "test8");
try { if (Inst89 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3815,3827,123>",(assertThrows)); Inst89++; } } catch(e) {}
assertThrows("x");  // Global x should be deleted.


// Delete on a property that is not found anywhere.
try { if (Inst90 <= 1000 && typeof (test9) != "undefined") {_RecordType("<3929,3934,127>",(test9)); Inst90++; } } catch(e) {}
function test9() {
try { if (Inst91 <= 1000 && typeof (x) != "undefined") {_RecordType("<3967,3968,128>",(x)); Inst91++; } } catch(e) {}
  with ({}) { return delete x; }
}

try { if (Inst92 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3975,3987,131>",(assertThrows)); Inst92++; } } catch(e) {}
assertThrows("x");  // Make sure it's not there.
try { if (Inst93 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4024,4036,132>",(assertEquals)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (test9) != "undefined") {_RecordType("<4043,4048,132>",(test9)); Inst94++; } } catch(e) {}
assertEquals(true, test9(), "test9");


// Delete on a DONT_DELETE property of the global object.
var y = 10;
try { if (Inst95 <= 1000 && typeof (y) != "undefined") {_RecordType("<4126,4127,136>",(y)); Inst95++; } } catch(e) {}
try { if (Inst96 <= 1000 && typeof (test10) != "undefined") {_RecordType("<4143,4149,137>",(test10)); Inst96++; } } catch(e) {}
function test10() {
try { if (Inst97 <= 1000 && typeof (y) != "undefined") {_RecordType("<4182,4183,138>",(y)); Inst97++; } } catch(e) {}
  with ({}) { return delete y; }
}

try { if (Inst98 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4190,4202,141>",(assertEquals)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (test10) != "undefined") {_RecordType("<4210,4216,141>",(test10)); Inst99++; } } catch(e) {}
assertEquals(false, test10(), "test10");
try { if (Inst100 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4231,4243,142>",(assertEquals)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (y) != "undefined") {_RecordType("<4248,4249,142>",(y)); Inst101++; } } catch(e) {}
assertEquals(10, y, "test10");

