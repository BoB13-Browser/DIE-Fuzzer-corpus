var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Ensure that we can correctly change the sign of the most negative smi.

// Possible Smi ranges.
var ranges = [{min: -1073741824, max: 1073741823, bits: 31},
              {min: -2147483648, max: 2147483647, bits: 32}];
try { if (Inst0 <= 1000 && typeof (ranges) != "undefined") {_RecordType("<1701,1707,31>",(ranges)); Inst0++; } } catch(e) {}

for (var i = 0; i < ranges.length; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1830,1831,34>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1837,1838,34>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ranges.length) != "undefined") {_RecordType("<1841,1854,34>",(ranges.length)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ranges) != "undefined") {_RecordType("<1841,1847,34>",(ranges)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1856,1857,34>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (ranges[i]) != "undefined") {_RecordType("<1877,1886,35>",(ranges[i])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ranges) != "undefined") {_RecordType("<1877,1883,35>",(ranges)); Inst8++; } } catch(e) {}
  var range = ranges[i];
try { if (Inst6 <= 1000 && typeof (range) != "undefined") {_RecordType("<1869,1874,35>",(range)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (range.min) != "undefined") {_RecordType("<1904,1913,36>",(range.min)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (range) != "undefined") {_RecordType("<1904,1909,36>",(range)); Inst11++; } } catch(e) {}
  var min_smi = range.min;
try { if (Inst9 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<1894,1901,36>",(min_smi)); Inst9++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (range.max) != "undefined") {_RecordType("<1931,1940,37>",(range.max)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (range) != "undefined") {_RecordType("<1931,1936,37>",(range)); Inst14++; } } catch(e) {}
  var max_smi = range.max;
try { if (Inst12 <= 1000 && typeof (max_smi) != "undefined") {_RecordType("<1921,1928,37>",(max_smi)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (range.bits) != "undefined") {_RecordType("<1955,1965,38>",(range.bits)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (range) != "undefined") {_RecordType("<1955,1960,38>",(range)); Inst17++; } } catch(e) {}
  var bits = range.bits;
try { if (Inst15 <= 1000 && typeof (bits) != "undefined") {_RecordType("<1948,1952,38>",(bits)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (bits) != "undefined") {_RecordType("<1980,1984,39>",(bits)); Inst19++; } } catch(e) {}
  var name = bits + "-bit";
try { if (Inst18 <= 1000 && typeof (name) != "undefined") {_RecordType("<1973,1977,39>",(name)); Inst18++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (max_smi) != "undefined") {_RecordType("<2011,2018,41>",(max_smi)); Inst21++; } } catch(e) {}
  var result = max_smi + 1;
try { if (Inst20 <= 1000 && typeof (result) != "undefined") {_RecordType("<2002,2008,41>",(result)); Inst20++; } } catch(e) {}

  // Min smi as literal
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2051,2063,44>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (result) != "undefined") {_RecordType("<2064,2070,44>",(result)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2072,2076,44>",(eval)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2077,2084,44>",(min_smi)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (name) != "undefined") {_RecordType("<2097,2101,44>",(name)); Inst26++; } } catch(e) {}
  assertEquals(result, eval(min_smi + " * -1"), name + "-litconmult");
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2122,2134,45>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (result) != "undefined") {_RecordType("<2135,2141,45>",(result)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2143,2147,45>",(eval)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2148,2155,45>",(min_smi)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (name) != "undefined") {_RecordType("<2168,2172,45>",(name)); Inst31++; } } catch(e) {}
  assertEquals(result, eval(min_smi + " / -1"), name + "-litcondiv");
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2192,2204,46>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (result) != "undefined") {_RecordType("<2205,2211,46>",(result)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2213,2217,46>",(eval)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2225,2232,46>",(min_smi)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (name) != "undefined") {_RecordType("<2241,2245,46>",(name)); Inst36++; } } catch(e) {}
  assertEquals(result, eval("-(" + min_smi + ")"), name + "-litneg");
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2262,2274,47>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (result) != "undefined") {_RecordType("<2275,2281,47>",(result)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2283,2287,47>",(eval)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2298,2305,47>",(min_smi)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (name) != "undefined") {_RecordType("<2315,2319,47>",(name)); Inst41++; } } catch(e) {}
  assertEquals(result, eval("0 - (" + min_smi + ")")), name + "-conlitsub";

  // As variable:
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2357,2369,50>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (result) != "undefined") {_RecordType("<2370,2376,50>",(result)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2378,2385,50>",(min_smi)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (name) != "undefined") {_RecordType("<2392,2396,50>",(name)); Inst45++; } } catch(e) {}
  assertEquals(result, min_smi * -1, name + "-varconmult");
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2417,2429,51>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (result) != "undefined") {_RecordType("<2430,2436,51>",(result)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2438,2445,51>",(min_smi)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (name) != "undefined") {_RecordType("<2452,2456,51>",(name)); Inst49++; } } catch(e) {}
  assertEquals(result, min_smi / -1, name + "-varcondiv");
try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2476,2488,52>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (result) != "undefined") {_RecordType("<2489,2495,52>",(result)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2498,2505,52>",(min_smi)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (name) != "undefined") {_RecordType("<2507,2511,52>",(name)); Inst53++; } } catch(e) {}
  assertEquals(result, -min_smi, name + "-varneg");
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2528,2540,53>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (result) != "undefined") {_RecordType("<2541,2547,53>",(result)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2553,2560,53>",(min_smi)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (name) != "undefined") {_RecordType("<2562,2566,53>",(name)); Inst57++; } } catch(e) {}
  assertEquals(result, 0 - min_smi, name + "-convarsub");

  // Only variables:
  var zero = 0;
try { if (Inst58 <= 1000 && typeof (zero) != "undefined") {_RecordType("<2612,2616,56>",(zero)); Inst58++; } } catch(e) {}
  var minus_one = -1;
try { if (Inst59 <= 1000 && typeof (minus_one) != "undefined") {_RecordType("<2628,2637,57>",(minus_one)); Inst59++; } } catch(e) {}

try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2647,2659,59>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (result) != "undefined") {_RecordType("<2660,2666,59>",(result)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2668,2675,59>",(min_smi)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (minus_one) != "undefined") {_RecordType("<2678,2687,59>",(minus_one)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (name) != "undefined") {_RecordType("<2689,2693,59>",(name)); Inst64++; } } catch(e) {}
  assertEquals(result, min_smi * minus_one, name + "-varvarmult");
try { if (Inst65 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2714,2726,60>",(assertEquals)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (result) != "undefined") {_RecordType("<2727,2733,60>",(result)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2735,2742,60>",(min_smi)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (minus_one) != "undefined") {_RecordType("<2745,2754,60>",(minus_one)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (name) != "undefined") {_RecordType("<2756,2760,60>",(name)); Inst69++; } } catch(e) {}
  assertEquals(result, min_smi / minus_one, name + "-varvardiv");
try { if (Inst70 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2780,2792,61>",(assertEquals)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (result) != "undefined") {_RecordType("<2793,2799,61>",(result)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (zero) != "undefined") {_RecordType("<2801,2805,61>",(zero)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2808,2815,61>",(min_smi)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (name) != "undefined") {_RecordType("<2817,2821,61>",(name)); Inst74++; } } catch(e) {}
  assertEquals(result, zero - min_smi, name + "-varvarsub");

  // Constants as variables
try { if (Inst75 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2870,2882,64>",(assertEquals)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (result) != "undefined") {_RecordType("<2883,2889,64>",(result)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2891,2895,64>",(eval)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2896,2903,64>",(min_smi)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (name) != "undefined") {_RecordType("<2923,2927,64>",(name)); Inst79++; } } catch(e) {}
  assertEquals(result, eval(min_smi + " * minus_one"), name + "-litvarmult");
try { if (Inst80 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2948,2960,65>",(assertEquals)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (result) != "undefined") {_RecordType("<2961,2967,65>",(result)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2969,2973,65>",(eval)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<2974,2981,65>",(min_smi)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (name) != "undefined") {_RecordType("<3001,3005,65>",(name)); Inst84++; } } catch(e) {}
  assertEquals(result, eval(min_smi + " / minus_one"), name + "-litvarmdiv");
try { if (Inst85 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3026,3038,66>",(assertEquals)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (result) != "undefined") {_RecordType("<3039,3045,66>",(result)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3047,3051,66>",(eval)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (min_smi) != "undefined") {_RecordType("<3062,3069,66>",(min_smi)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (name) != "undefined") {_RecordType("<3078,3082,66>",(name)); Inst89++; } } catch(e) {}
  assertEquals(result, eval("0 - (" + min_smi + ")"), name + "-varlitsub");

try { if (Inst91 <= 1000 && typeof (bits) != "undefined") {_RecordType("<3130,3134,68>",(bits)); Inst91++; } } catch(e) {}
  var half_min_smi = -(1 << (bits >> 1));
try { if (Inst90 <= 1000 && typeof (half_min_smi) != "undefined") {_RecordType("<3107,3119,68>",(half_min_smi)); Inst90++; } } catch(e) {}
try { if (Inst93 <= 1000 && typeof (bits) != "undefined") {_RecordType("<3171,3175,69>",(bits)); Inst93++; } } catch(e) {}
  var half_max_smi = 1 << ((bits - 1) >> 1);
try { if (Inst92 <= 1000 && typeof (half_max_smi) != "undefined") {_RecordType("<3149,3161,69>",(half_max_smi)); Inst92++; } } catch(e) {}

try { if (Inst94 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3191,3203,71>",(assertEquals)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (max_smi) != "undefined") {_RecordType("<3204,3211,71>",(max_smi)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (half_min_smi) != "undefined") {_RecordType("<3218,3230,71>",(half_min_smi)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (half_max_smi) != "undefined") {_RecordType("<3233,3245,71>",(half_max_smi)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (name) != "undefined") {_RecordType("<3247,3251,71>",(name)); Inst98++; } } catch(e) {}
  assertEquals(max_smi + 1, -half_min_smi * half_max_smi, name + "-half1");
try { if (Inst99 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3267,3279,72>",(assertEquals)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (max_smi) != "undefined") {_RecordType("<3280,3287,72>",(max_smi)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (half_min_smi) != "undefined") {_RecordType("<3293,3305,72>",(half_min_smi)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (half_max_smi) != "undefined") {_RecordType("<3309,3321,72>",(half_max_smi)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (name) != "undefined") {_RecordType("<3323,3327,72>",(name)); Inst103++; } } catch(e) {}
  assertEquals(max_smi + 1, half_min_smi * -half_max_smi, name + "-half2");
try { if (Inst104 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3343,3355,73>",(assertEquals)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (max_smi) != "undefined") {_RecordType("<3356,3363,73>",(max_smi)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (half_max_smi) != "undefined") {_RecordType("<3369,3381,73>",(half_max_smi)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (half_min_smi) != "undefined") {_RecordType("<3385,3397,73>",(half_min_smi)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (name) != "undefined") {_RecordType("<3399,3403,73>",(name)); Inst108++; } } catch(e) {}
  assertEquals(max_smi + 1, half_max_smi * -half_min_smi, name + "-half3");
try { if (Inst109 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3419,3431,74>",(assertEquals)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (max_smi) != "undefined") {_RecordType("<3432,3439,74>",(max_smi)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (half_max_smi) != "undefined") {_RecordType("<3446,3458,74>",(half_max_smi)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (half_min_smi) != "undefined") {_RecordType("<3461,3473,74>",(half_min_smi)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (name) != "undefined") {_RecordType("<3475,3479,74>",(name)); Inst113++; } } catch(e) {}
  assertEquals(max_smi + 1, -half_max_smi * half_min_smi, name + "-half4");
}

