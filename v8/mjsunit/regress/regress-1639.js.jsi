var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}
var breaks = 0;
try { if (Inst3 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<1726,1732,31>",(breaks)); Inst3++; } } catch(e) {}
var exception = false;
try { if (Inst4 <= 1000 && typeof (exception) != "undefined") {_RecordType("<1742,1751,32>",(exception)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (sendCommand) != "undefined") {_RecordType("<1771,1782,34>",(sendCommand)); Inst5++; } } catch(e) {}
function sendCommand(state, cmd) {
try { if (Inst6 <= 1000 && typeof (state) != "undefined") {_RecordType("<1783,1788,34>",(state)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (cmd) != "undefined") {_RecordType("<1790,1793,34>",(cmd)); Inst7++; } } catch(e) {}
  // Get the debug command processor in paused state.
try { if (Inst9 <= 1000 && typeof (state.debugCommandProcessor) != "undefined") {_RecordType("<1863,1890,36>",(state.debugCommandProcessor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (state) != "undefined") {_RecordType("<1863,1868,36>",(state)); Inst10++; } } catch(e) {}
  var dcp = state.debugCommandProcessor(false);
try { if (Inst8 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<1857,1860,36>",(dcp)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1915,1929,37>",(JSON.stringify)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1915,1919,37>",(JSON)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (cmd) != "undefined") {_RecordType("<1930,1933,37>",(cmd)); Inst14++; } } catch(e) {}
  var request = JSON.stringify(cmd);
try { if (Inst11 <= 1000 && typeof (request) != "undefined") {_RecordType("<1905,1912,37>",(request)); Inst11++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (dcp.processDebugJSONRequest) != "undefined") {_RecordType("<1953,1980,38>",(dcp.processDebugJSONRequest)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<1953,1956,38>",(dcp)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (request) != "undefined") {_RecordType("<1981,1988,38>",(request)); Inst18++; } } catch(e) {}
  var response = dcp.processDebugJSONRequest(request);
try { if (Inst15 <= 1000 && typeof (response) != "undefined") {_RecordType("<1942,1950,38>",(response)); Inst15++; } } catch(e) {}
}

try { if (Inst19 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2003,2011,41>",(listener)); Inst19++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst20 <= 1000 && typeof (event) != "undefined") {_RecordType("<2012,2017,41>",(event)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2019,2029,41>",(exec_state)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2031,2041,41>",(event_data)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (data) != "undefined") {_RecordType("<2043,2047,41>",(data)); Inst23++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (e) != "undefined") {_RecordType("<2574,2575,60>",(e)); Inst44++; } } catch(e) {}
  try {
try { if (Inst24 <= 1000 && typeof (event) != "undefined") {_RecordType("<2067,2072,43>",(event)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<2076,2098,43>",(Debug.DebugEvent.Break)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<2076,2092,43>",(Debug.DebugEvent)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2076,2081,43>",(Debug)); Inst27++; } } catch(e) {}
    if (event == Debug.DebugEvent.Break) {
try { if (Inst29 <= 1000 && typeof (event_data.sourceLineText) != "undefined") {_RecordType("<2119,2144,44>",(event_data.sourceLineText)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2119,2129,44>",(event_data)); Inst30++; } } catch(e) {}
      var line = event_data.sourceLineText();
try { if (Inst28 <= 1000 && typeof (line) != "undefined") {_RecordType("<2112,2116,44>",(line)); Inst28++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<2154,2159,45>",(print)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (line) != "undefined") {_RecordType("<2172,2176,45>",(line)); Inst32++; } } catch(e) {}
      print('break: ' + line);

try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2186,2198,47>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (line.indexOf) != "undefined") {_RecordType("<2203,2215,47>",(line.indexOf)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (line) != "undefined") {_RecordType("<2203,2207,47>",(line)); Inst35++; } } catch(e) {}
      assertEquals(-1, line.indexOf('NOBREAK'),
                   "should not break on unexpected lines")
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2293,2305,49>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<2317,2323,49>",(breaks)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (line.substr) != "undefined") {_RecordType("<2325,2336,49>",(line.substr)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (line) != "undefined") {_RecordType("<2325,2329,49>",(line)); Inst39++; } } catch(e) {}
      assertEquals('BREAK ' + breaks, line.substr(-7));
try { if (Inst40 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<2349,2355,50>",(breaks)); Inst40++; } } catch(e) {}
      breaks++;
try { if (Inst41 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<2369,2375,51>",(breaks)); Inst41++; } } catch(e) {}
      if (breaks < 4) {
try { if (Inst42 <= 1000 && typeof (sendCommand) != "undefined") {_RecordType("<2391,2402,52>",(sendCommand)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2403,2413,52>",(exec_state)); Inst43++; } } catch(e) {}
        sendCommand(exec_state, {
          seq: 0,
          type: "request",
          command: "continue",
          arguments: { stepaction: "next" }
        });
      }
    }
  } catch (e) {
try { if (Inst45 <= 1000 && typeof (print) != "undefined") {_RecordType("<2583,2588,61>",(print)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (e) != "undefined") {_RecordType("<2589,2590,61>",(e)); Inst46++; } } catch(e) {}
    print(e);
    exception = true;
try { if (Inst47 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2597,2606,62>",(exception)); Inst47++; } } catch(e) {}
  }
}

// Add the debug event listener.
try { if (Inst48 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2655,2672,67>",(Debug.setListener)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2655,2660,67>",(Debug)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2673,2681,67>",(listener)); Inst50++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst51 <= 1000 && typeof (a) != "undefined") {_RecordType("<2694,2695,69>",(a)); Inst51++; } } catch(e) {}
function a(f) {
try { if (Inst52 <= 1000 && typeof (f) != "undefined") {_RecordType("<2696,2697,69>",(f)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (f) != "undefined") {_RecordType("<2707,2708,70>",(f)); Inst53++; } } catch(e) {}
  if (f) {  // NOBREAK: should not break here!
try { if (Inst55 <= 1000 && typeof (e) != "undefined") {_RecordType("<2781,2782,73>",(e)); Inst55++; } } catch(e) {}
    try {
try { if (Inst54 <= 1000 && typeof (f) != "undefined") {_RecordType("<2764,2765,72>",(f)); Inst54++; } } catch(e) {}
      f();
    } catch(e) {
    }
  }
}  // BREAK 2

try { if (Inst56 <= 1000 && typeof (b) != "undefined") {_RecordType("<2820,2821,78>",(b)); Inst56++; } } catch(e) {}
function b() {
try { if (Inst57 <= 1000 && typeof (c) != "undefined") {_RecordType("<2828,2829,79>",(c)); Inst57++; } } catch(e) {}
  c();  // BREAK 0
}  // BREAK 1

try { if (Inst58 <= 1000 && typeof (c) != "undefined") {_RecordType("<2869,2870,82>",(c)); Inst58++; } } catch(e) {}
function c() {
try { if (Inst59 <= 1000 && typeof (a) != "undefined") {_RecordType("<2877,2878,83>",(a)); Inst59++; } } catch(e) {}
  a();
}

// Set a break point and call to invoke the debug event listener.
try { if (Inst60 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<2951,2970,87>",(Debug.setBreakPoint)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2951,2956,87>",(Debug)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (b) != "undefined") {_RecordType("<2971,2972,87>",(b)); Inst62++; } } catch(e) {}
Debug.setBreakPoint(b, 0, 0);
try { if (Inst63 <= 1000 && typeof (a) != "undefined") {_RecordType("<2981,2982,88>",(a)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (b) != "undefined") {_RecordType("<2983,2984,88>",(b)); Inst64++; } } catch(e) {}
a(b);
try { if (Inst65 <= 1000 && typeof (a) != "undefined") {_RecordType("<2987,2988,89>",(a)); Inst65++; } } catch(e) {}
a(); // BREAK 3

try { if (Inst66 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3004,3015,91>",(assertFalse)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (exception) != "undefined") {_RecordType("<3016,3025,91>",(exception)); Inst67++; } } catch(e) {}
assertFalse(exception);

