var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst1 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<1611,1618,28>",(WeakMap)); Inst1++; } } catch(e) {}
var v0 = new WeakMap;
try { if (Inst0 <= 1000 && typeof (v0) != "undefined") {_RecordType("<1602,1604,28>",(v0)); Inst0++; } } catch(e) {}
var v1 = {};
try { if (Inst2 <= 1000 && typeof (v1) != "undefined") {_RecordType("<1624,1626,29>",(v1)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (v0.set) != "undefined") {_RecordType("<1633,1639,30>",(v0.set)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (v0) != "undefined") {_RecordType("<1633,1635,30>",(v0)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (v1) != "undefined") {_RecordType("<1640,1642,30>",(v1)); Inst5++; } } catch(e) {}
v0.set(v1, 1);
try { if (Inst7 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1658,1664,31>",(Symbol)); Inst7++; } } catch(e) {}
var sym = Symbol();
try { if (Inst6 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1652,1655,31>",(sym)); Inst6++; } } catch(e) {}
v1[sym] = 1;
try { if (Inst8 <= 1000 && typeof (v1[sym]) != "undefined") {_RecordType("<1668,1675,32>",(v1[sym])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (v1) != "undefined") {_RecordType("<1668,1670,32>",(v1)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (Object.getOwnPropertySymbols) != "undefined") {_RecordType("<1695,1723,33>",(Object.getOwnPropertySymbols)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1695,1701,33>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (v1) != "undefined") {_RecordType("<1724,1726,33>",(v1)); Inst13++; } } catch(e) {}
var symbols = Object.getOwnPropertySymbols(v1);
try { if (Inst10 <= 1000 && typeof (symbols) != "undefined") {_RecordType("<1685,1692,33>",(symbols)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1729,1746,34>",(assertArrayEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (sym) != "undefined") {_RecordType("<1748,1751,34>",(sym)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (symbols) != "undefined") {_RecordType("<1754,1761,34>",(symbols)); Inst16++; } } catch(e) {}
assertArrayEquals([sym], symbols);

