var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst1 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<191,201,5>",(Int32Array)); Inst1++; } } catch(e) {}
var o = {__proto__:new Int32Array(100)};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<172,173,5>",(o)); Inst0++; } } catch(e) {}
Object.prototype[1.3] = 10;
try { if (Inst2 <= 1000 && typeof (Object.prototype[1.3]) != "undefined") {_RecordType("<209,230,6>",(Object.prototype[1.3])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<209,225,6>",(Object.prototype)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<209,215,6>",(Object)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<237,249,7>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<250,259,7>",(undefined)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o[1.3]) != "undefined") {_RecordType("<261,267,7>",(o[1.3])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<261,262,7>",(o)); Inst8++; } } catch(e) {}
assertEquals(undefined, o[1.3]);

try { if (Inst10 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<283,293,9>",(Int32Array)); Inst10++; } } catch(e) {}
var o = new Int32Array(100);
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<275,276,9>",(o)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Int32Array) != "undefined") {_RecordType("<313,323,10>",(Int32Array)); Inst12++; } } catch(e) {}
var o2 = new Int32Array(200);
try { if (Inst11 <= 1000 && typeof (o2) != "undefined") {_RecordType("<304,306,10>",(o2)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (o2) != "undefined") {_RecordType("<344,346,11>",(o2)); Inst15++; } } catch(e) {}
o.__proto__ = o2;
try { if (Inst13 <= 1000 && typeof (o.__proto__) != "undefined") {_RecordType("<330,341,11>",(o.__proto__)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<330,331,11>",(o)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<348,360,12>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<361,370,12>",(undefined)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Reflect.get) != "undefined") {_RecordType("<372,383,12>",(Reflect.get)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Reflect) != "undefined") {_RecordType("<372,379,12>",(Reflect)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<384,385,12>",(o)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o2) != "undefined") {_RecordType("<392,394,12>",(o2)); Inst21++; } } catch(e) {}
assertEquals(undefined, Reflect.get(o, 1.3, o2));

