var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Check that we allow accessors on JSArray elements.

var a = [];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1657,1658,30>",(a)); Inst0++; } } catch(e) {}
var b = {}
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<1669,1670,31>",(b)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1676,1697,32>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1676,1682,32>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1698,1699,32>",(a)); Inst4++; } } catch(e) {}
Object.defineProperty(a, "1", {get: function() {return "foo";}});
try { if (Inst5 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1742,1763,33>",(Object.defineProperty)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1742,1748,33>",(Object)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<1769,1770,34>",(b)); Inst7++; } } catch(e) {}
Object.defineProperty(
    b, "1", {get: function() {return "bar";}, set: function() {this.x = 42;}});
try { if (Inst8 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1828,1834,34>",(this.x)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1845,1857,35>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<1858,1862,35>",(a[1])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1858,1859,35>",(a)); Inst11++; } } catch(e) {}
assertEquals(a[1], 'foo');
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1872,1884,36>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<1885,1889,36>",(b[1])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<1885,1886,36>",(b)); Inst14++; } } catch(e) {}
assertEquals(b[1], 'bar');
// Make sure we can't overwrite an accessor, but that the setter is
// instead called.
b[1] = 'foobar';
try { if (Inst15 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<1986,1990,39>",(b[1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<1986,1987,39>",(b)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2003,2015,40>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (b[1]) != "undefined") {_RecordType("<2016,2020,40>",(b[1])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<2016,2017,40>",(b)); Inst19++; } } catch(e) {}
assertEquals(b[1], 'bar');
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2030,2042,41>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b.x) != "undefined") {_RecordType("<2043,2046,41>",(b.x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<2043,2044,41>",(b)); Inst22++; } } catch(e) {}
assertEquals(b.x, 42);

try { if (Inst24 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<2065,2096,43>",(Object.getOwnPropertyDescriptor)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2065,2071,43>",(Object)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (b) != "undefined") {_RecordType("<2097,2098,43>",(b)); Inst26++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(b, "1");
try { if (Inst23 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2058,2062,43>",(desc)); Inst23++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2106,2118,44>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (desc['writable']) != "undefined") {_RecordType("<2119,2135,44>",(desc['writable'])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2119,2123,44>",(desc)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2137,2146,44>",(undefined)); Inst30++; } } catch(e) {}
assertEquals(desc['writable'], undefined);
try { if (Inst31 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2149,2160,45>",(assertFalse)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (desc['enumerable']) != "undefined") {_RecordType("<2161,2179,45>",(desc['enumerable'])); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2161,2165,45>",(desc)); Inst33++; } } catch(e) {}
assertFalse(desc['enumerable']);
try { if (Inst34 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2182,2193,46>",(assertFalse)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (desc['configurable']) != "undefined") {_RecordType("<2194,2214,46>",(desc['configurable'])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2194,2198,46>",(desc)); Inst36++; } } catch(e) {}
assertFalse(desc['configurable']);

