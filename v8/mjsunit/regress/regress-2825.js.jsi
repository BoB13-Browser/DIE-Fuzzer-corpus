var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

// Do not edit this file with an editor that replaces \r with \r\n.
// Variable definitions for i0 through i3 are each terminated with \r.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<351,352,9>",(f)); Inst0++; } } catch(e) {}
function f() {
  var i0 = 0;  var i1 = 1;  var i2 = 2;  var i3 = 3;
try { if (Inst1 <= 1000 && typeof (i0) != "undefined") {_RecordType("<363,365,10>",(i0)); Inst1++; } } catch(e) {}
  var j0 = 0;
try { if (Inst2 <= 1000 && typeof (i1) != "undefined") {_RecordType("<377,379,11>",(i1)); Inst2++; } } catch(e) {}
  var j1 = 1;
try { if (Inst3 <= 1000 && typeof (i2) != "undefined") {_RecordType("<391,393,12>",(i2)); Inst3++; } } catch(e) {}
  var j2 = 2;
try { if (Inst4 <= 1000 && typeof (i3) != "undefined") {_RecordType("<405,407,13>",(i3)); Inst4++; } } catch(e) {}
  var j3 = 3;
try { if (Inst5 <= 1000 && typeof (j0) != "undefined") {_RecordType("<420,422,14>",(j0)); Inst5++; } } catch(e) {}
}
try { if (Inst6 <= 1000 && typeof (j1) != "undefined") {_RecordType("<434,436,15>",(j1)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (j2) != "undefined") {_RecordType("<448,450,16>",(j2)); Inst7++; } } catch(e) {}
Debug = debug.Debug;
try { if (Inst8 <= 1000 && typeof (j3) != "undefined") {_RecordType("<462,464,17>",(j3)); Inst8++; } } catch(e) {}
var exception = null;
var break_point_hit = false;
try { if (Inst10 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<481,492,20>",(debug.Debug)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (debug) != "undefined") {_RecordType("<481,486,20>",(debug)); Inst11++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<473,478,20>",(Debug)); Inst9++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst12 <= 1000 && typeof (exception) != "undefined") {_RecordType("<498,507,21>",(exception)); Inst12++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst13 <= 1000 && typeof (break_point_hit) != "undefined") {_RecordType("<520,535,22>",(break_point_hit)); Inst13++; } } catch(e) {}
  try {
try { if (Inst14 <= 1000 && typeof (listener) != "undefined") {_RecordType("<555,563,24>",(listener)); Inst14++; } } catch(e) {}
    break_point_hit = true;
try { if (Inst15 <= 1000 && typeof (event) != "undefined") {_RecordType("<564,569,24>",(event)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<571,581,24>",(exec_state)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<583,593,24>",(event_data)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (data) != "undefined") {_RecordType("<595,599,24>",(data)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (event) != "undefined") {_RecordType("<609,614,25>",(event)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<618,640,25>",(Debug.DebugEvent.Break)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<618,634,25>",(Debug.DebugEvent)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<618,623,25>",(Debug)); Inst22++; } } catch(e) {}
    assertEquals("  var i2 = 2;", exec_state.frame(0).sourceLineText());
try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<770,771,29>",(e)); Inst28++; } } catch(e) {}
  } catch (e) {
    print(e + e.stack);
try { if (Inst23 <= 1000 && typeof (break_point_hit) != "undefined") {_RecordType("<662,677,27>",(break_point_hit)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<690,702,28>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (exec_state.frame(0).sourceLineText) != "undefined") {_RecordType("<720,754,28>",(exec_state.frame(0).sourceLineText)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<720,736,28>",(exec_state.frame)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<720,730,28>",(exec_state)); Inst27++; } } catch(e) {}
    exception = e;
  }
try { if (Inst29 <= 1000 && typeof (print) != "undefined") {_RecordType("<779,784,30>",(print)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<785,786,30>",(e)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<789,796,30>",(e.stack)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<789,790,30>",(e)); Inst32++; } } catch(e) {}
}
try { if (Inst34 <= 1000 && typeof (e) != "undefined") {_RecordType("<815,816,31>",(e)); Inst34++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (exception) != "undefined") {_RecordType("<803,812,31>",(exception)); Inst33++; } } catch(e) {}
Debug.setListener(listener);

Debug.setBreakPoint(f, 3, 0);
try { if (Inst35 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<825,842,35>",(Debug.setListener)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<825,830,35>",(Debug)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (listener) != "undefined") {_RecordType("<843,851,35>",(listener)); Inst37++; } } catch(e) {}

f();
try { if (Inst38 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<855,874,37>",(Debug.setBreakPoint)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<855,860,37>",(Debug)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<875,876,37>",(f)); Inst40++; } } catch(e) {}

Debug.setListener(null);
try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<886,887,39>",(f)); Inst41++; } } catch(e) {}
assertTrue(break_point_hit);
assertNull(exception);
try { if (Inst42 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<892,909,41>",(Debug.setListener)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<892,897,41>",(Debug)); Inst43++; } } catch(e) {}

