var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// In the assertions but the first, the ES5 spec actually requires 0, but
// that is arguably a spec bug, and other browsers return 1 like us.
// In ES6, all of those will presumably result in a ReferenceError.
// Our main concern with this test is that we do not crash, though.

try { if (Inst0 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1887,1889,33>",(f1)); Inst0++; } } catch(e) {}
function f1() {
  var XXX = 0
try { if (Inst1 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<1900,1903,34>",(XXX)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<1933,1936,35>",(XXX)); Inst2++; } } catch(e) {}
  try { throw 1 } catch (XXX) {
try { if (Inst3 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1944,1948,36>",(eval)); Inst3++; } } catch(e) {}
    eval("var h = function() { return XXX }")
  }
try { if (Inst4 <= 1000 && typeof (h) != "undefined") {_RecordType("<1999,2000,38>",(h)); Inst4++; } } catch(e) {}
  return h()
}
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2005,2017,40>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2021,2023,40>",(f1)); Inst6++; } } catch(e) {}
assertEquals(1, f1())

try { if (Inst7 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2037,2039,42>",(f2)); Inst7++; } } catch(e) {}
function f2() {
  var XXX = 0
try { if (Inst8 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2050,2053,43>",(XXX)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2083,2086,44>",(XXX)); Inst9++; } } catch(e) {}
  try { throw 1 } catch (XXX) {
try { if (Inst10 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2094,2098,45>",(eval)); Inst10++; } } catch(e) {}
    eval("function h(){ return XXX }")
  }
try { if (Inst11 <= 1000 && typeof (h) != "undefined") {_RecordType("<2142,2143,47>",(h)); Inst11++; } } catch(e) {}
  return h()
}
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2148,2160,49>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2164,2166,49>",(f2)); Inst13++; } } catch(e) {}
assertEquals(1, f2())

try { if (Inst14 <= 1000 && typeof (f3) != "undefined") {_RecordType("<2180,2182,51>",(f3)); Inst14++; } } catch(e) {}
function f3() {
  var XXX = 0
try { if (Inst15 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2193,2196,52>",(XXX)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2226,2229,53>",(XXX)); Inst16++; } } catch(e) {}
  try { throw 1 } catch (XXX) {
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<2260,2261,54>",(y)); Inst17++; } } catch(e) {}
    try { throw 2 } catch (y) {
try { if (Inst18 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2271,2275,55>",(eval)); Inst18++; } } catch(e) {}
      eval("function h(){ return XXX }")
    }
  }
try { if (Inst19 <= 1000 && typeof (h) != "undefined") {_RecordType("<2325,2326,58>",(h)); Inst19++; } } catch(e) {}
  return h()
}
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2331,2343,60>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f3) != "undefined") {_RecordType("<2347,2349,60>",(f3)); Inst21++; } } catch(e) {}
assertEquals(1, f3())

try { if (Inst22 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2363,2365,62>",(f4)); Inst22++; } } catch(e) {}
function f4() {
  var XXX = 0
try { if (Inst23 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2376,2379,63>",(XXX)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2409,2412,64>",(XXX)); Inst24++; } } catch(e) {}
  try { throw 1 } catch (XXX) {
    with ({}) {
try { if (Inst25 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2438,2442,66>",(eval)); Inst25++; } } catch(e) {}
      eval("function h(){ return XXX }")
    }
  }
try { if (Inst26 <= 1000 && typeof (h) != "undefined") {_RecordType("<2492,2493,69>",(h)); Inst26++; } } catch(e) {}
  return h()
}
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2498,2510,71>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (f4) != "undefined") {_RecordType("<2514,2516,71>",(f4)); Inst28++; } } catch(e) {}
assertEquals(1, f4())

try { if (Inst29 <= 1000 && typeof (f5) != "undefined") {_RecordType("<2530,2532,73>",(f5)); Inst29++; } } catch(e) {}
function f5() {
  var XXX = 0
try { if (Inst30 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2543,2546,74>",(XXX)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2576,2579,75>",(XXX)); Inst31++; } } catch(e) {}
  try { throw 1 } catch (XXX) {
try { if (Inst32 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2587,2591,76>",(eval)); Inst32++; } } catch(e) {}
    eval('eval("function h(){ return XXX }")')
  }
try { if (Inst33 <= 1000 && typeof (h) != "undefined") {_RecordType("<2643,2644,78>",(h)); Inst33++; } } catch(e) {}
  return h()
}
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2649,2661,80>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (f5) != "undefined") {_RecordType("<2665,2667,80>",(f5)); Inst35++; } } catch(e) {}
assertEquals(1, f5())

try { if (Inst36 <= 1000 && typeof (f6) != "undefined") {_RecordType("<2681,2683,82>",(f6)); Inst36++; } } catch(e) {}
function f6() {
  var XXX = 0
try { if (Inst37 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2694,2697,83>",(XXX)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2727,2730,84>",(XXX)); Inst38++; } } catch(e) {}
  try { throw 1 } catch (XXX) {
try { if (Inst39 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2738,2742,85>",(eval)); Inst39++; } } catch(e) {}
    eval("var h = (function() { function g(){ return XXX } return g })()")
  }
try { if (Inst40 <= 1000 && typeof (h) != "undefined") {_RecordType("<2822,2823,87>",(h)); Inst40++; } } catch(e) {}
  return h()
}
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2828,2840,89>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (f6) != "undefined") {_RecordType("<2844,2846,89>",(f6)); Inst42++; } } catch(e) {}
assertEquals(1, f6())

try { if (Inst43 <= 1000 && typeof (f7) != "undefined") {_RecordType("<2860,2862,91>",(f7)); Inst43++; } } catch(e) {}
function f7() {
  var XXX = 0
try { if (Inst44 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2873,2876,92>",(XXX)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<2906,2909,93>",(XXX)); Inst45++; } } catch(e) {}
  try { throw 1 } catch (XXX) {
try { if (Inst46 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2917,2921,94>",(eval)); Inst46++; } } catch(e) {}
    eval("function h() { var XXX=2; function g(){ return XXX } return g }")
  }
try { if (Inst47 <= 1000 && typeof (h) != "undefined") {_RecordType("<3002,3003,96>",(h)); Inst47++; } } catch(e) {}
  return h()()
}
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3010,3022,98>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (f7) != "undefined") {_RecordType("<3026,3028,98>",(f7)); Inst49++; } } catch(e) {}
assertEquals(2, f7())  // !

var XXX = 0
try { if (Inst50 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<3043,3046,100>",(XXX)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (XXX) != "undefined") {_RecordType("<3074,3077,101>",(XXX)); Inst51++; } } catch(e) {}
try { throw 1 } catch (XXX) {
try { if (Inst52 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3083,3087,102>",(eval)); Inst52++; } } catch(e) {}
  eval("function h(){ return XXX }")
}
try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3120,3132,104>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (h) != "undefined") {_RecordType("<3136,3137,104>",(h)); Inst54++; } } catch(e) {}
assertEquals(1, h())

