var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// See: http://code.google.com/p/v8/issues/detail?id=254

// RegExp with global flag: exec and test updates lastIndex.
var re = /x/g;
try { if (Inst0 <= 1000 && typeof (re) != "undefined") {_RecordType("<1721,1723,31>",(re)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1733,1745,33>",(assertEquals)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<1749,1761,33>",(re.lastIndex)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (re) != "undefined") {_RecordType("<1749,1751,33>",(re)); Inst3++; } } catch(e) {}
assertEquals(0, re.lastIndex, "Global, initial lastIndex");

try { if (Inst4 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1794,1804,35>",(assertTrue)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<1805,1812,35>",(re.test)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (re) != "undefined") {_RecordType("<1805,1807,35>",(re)); Inst6++; } } catch(e) {}
assertTrue(re.test("x"), "Global, test 1");
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1838,1850,36>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<1854,1866,36>",(re.lastIndex)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (re) != "undefined") {_RecordType("<1854,1856,36>",(re)); Inst9++; } } catch(e) {}
assertEquals(1, re.lastIndex, "Global, lastIndex after test 1");
try { if (Inst10 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1903,1914,37>",(assertFalse)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<1915,1922,37>",(re.test)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (re) != "undefined") {_RecordType("<1915,1917,37>",(re)); Inst12++; } } catch(e) {}
assertFalse(re.test("x"), "Global, test 2");
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1948,1960,38>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<1964,1976,38>",(re.lastIndex)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (re) != "undefined") {_RecordType("<1964,1966,38>",(re)); Inst15++; } } catch(e) {}
assertEquals(0, re.lastIndex, "Global, lastIndex after test 2");

try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2014,2026,40>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<2034,2041,40>",(re.exec)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (re) != "undefined") {_RecordType("<2034,2036,40>",(re)); Inst18++; } } catch(e) {}
assertEquals(["x"], re.exec("x"), "Global, exec 1");
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2067,2079,41>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2083,2095,41>",(re.lastIndex)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (re) != "undefined") {_RecordType("<2083,2085,41>",(re)); Inst21++; } } catch(e) {}
assertEquals(1, re.lastIndex, "Global, lastIndex after exec 1");
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2132,2144,42>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<2151,2158,42>",(re.exec)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (re) != "undefined") {_RecordType("<2151,2153,42>",(re)); Inst24++; } } catch(e) {}
assertEquals(null, re.exec("x"), "Global, exec 2");
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2184,2196,43>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2200,2212,43>",(re.lastIndex)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (re) != "undefined") {_RecordType("<2200,2202,43>",(re)); Inst27++; } } catch(e) {}
assertEquals(0, re.lastIndex, "Global, lastIndex after exec 2");

// RegExp without global flag: exec and test leavs lastIndex at zero.
var re2 = /x/;
try { if (Inst28 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2324,2327,46>",(re2)); Inst28++; } } catch(e) {}

try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2336,2348,48>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2352,2365,48>",(re2.lastIndex)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2352,2355,48>",(re2)); Inst31++; } } catch(e) {}
assertEquals(0, re2.lastIndex, "Non-global, initial lastIndex");

try { if (Inst32 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2402,2412,50>",(assertTrue)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (re2.test) != "undefined") {_RecordType("<2413,2421,50>",(re2.test)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2413,2416,50>",(re2)); Inst34++; } } catch(e) {}
assertTrue(re2.test("x"), "Non-global, test 1");
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2451,2463,51>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2467,2480,51>",(re2.lastIndex)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2467,2470,51>",(re2)); Inst37++; } } catch(e) {}
assertEquals(0, re2.lastIndex, "Non-global, lastIndex after test 1");
try { if (Inst38 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2521,2531,52>",(assertTrue)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (re2.test) != "undefined") {_RecordType("<2532,2540,52>",(re2.test)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2532,2535,52>",(re2)); Inst40++; } } catch(e) {}
assertTrue(re2.test("x"), "Non-global, test 2");
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2570,2582,53>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2586,2599,53>",(re2.lastIndex)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2586,2589,53>",(re2)); Inst43++; } } catch(e) {}
assertEquals(0, re2.lastIndex, "Non-global, lastIndex after test 2");

try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2641,2653,55>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (re2.exec) != "undefined") {_RecordType("<2661,2669,55>",(re2.exec)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2661,2664,55>",(re2)); Inst46++; } } catch(e) {}
assertEquals(["x"], re2.exec("x"), "Non-global, exec 1");
try { if (Inst47 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2699,2711,56>",(assertEquals)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2715,2728,56>",(re2.lastIndex)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2715,2718,56>",(re2)); Inst49++; } } catch(e) {}
assertEquals(0, re2.lastIndex, "Non-global, lastIndex after exec 1");
try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2769,2781,57>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (re2.exec) != "undefined") {_RecordType("<2789,2797,57>",(re2.exec)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2789,2792,57>",(re2)); Inst52++; } } catch(e) {}
assertEquals(["x"], re2.exec("x"), "Non-global, exec 2");
try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2827,2839,58>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (re2.lastIndex) != "undefined") {_RecordType("<2843,2856,58>",(re2.lastIndex)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (re2) != "undefined") {_RecordType("<2843,2846,58>",(re2)); Inst55++; } } catch(e) {}
assertEquals(0, re2.lastIndex, "Non-global, lastIndex after exec 2");

