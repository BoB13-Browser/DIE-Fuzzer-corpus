var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Object.defineProperty with generic desc on existing property
// should just update enumerable/configurable flags.

try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<1733,1734,31>",(p)); Inst1++; } } catch(e) {}
var obj =  { get p() { return 42; }  };
try { if (Inst0 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1720,1723,31>",(obj)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1767,1798,32>",(Object.getOwnPropertyDescriptor)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1767,1773,32>",(Object)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1799,1802,32>",(obj)); Inst5++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(obj, 'p');
try { if (Inst2 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1760,1764,32>",(desc)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (desc.get) != "undefined") {_RecordType("<1823,1831,33>",(desc.get)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1823,1827,33>",(desc)); Inst8++; } } catch(e) {}
var getter = desc.get;
try { if (Inst6 <= 1000 && typeof (getter) != "undefined") {_RecordType("<1814,1820,33>",(getter)); Inst6++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1834,1855,35>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1834,1840,35>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1856,1859,35>",(obj)); Inst11++; } } catch(e) {}
Object.defineProperty(obj, 'p', {enumerable: false });
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1889,1901,36>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (obj.p) != "undefined") {_RecordType("<1902,1907,36>",(obj.p)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1902,1905,36>",(obj)); Inst14++; } } catch(e) {}
assertEquals(obj.p, 42);
try { if (Inst16 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1921,1952,37>",(Object.getOwnPropertyDescriptor)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1921,1927,37>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1953,1956,37>",(obj)); Inst18++; } } catch(e) {}
desc = Object.getOwnPropertyDescriptor(obj, 'p');
try { if (Inst15 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1914,1918,37>",(desc)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1964,1975,38>",(assertFalse)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<1976,1991,38>",(desc.enumerable)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1976,1980,38>",(desc)); Inst21++; } } catch(e) {}
assertFalse(desc.enumerable);
try { if (Inst22 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1994,2004,39>",(assertTrue)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<2005,2022,39>",(desc.configurable)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2005,2009,39>",(desc)); Inst24++; } } catch(e) {}
assertTrue(desc.configurable);
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2025,2037,40>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (desc.get) != "undefined") {_RecordType("<2038,2046,40>",(desc.get)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2038,2042,40>",(desc)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (getter) != "undefined") {_RecordType("<2048,2054,40>",(getter)); Inst28++; } } catch(e) {}
assertEquals(desc.get, getter);
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2057,2069,41>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (desc.set) != "undefined") {_RecordType("<2070,2078,41>",(desc.set)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2070,2074,41>",(desc)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2080,2089,41>",(undefined)); Inst32++; } } catch(e) {}
assertEquals(desc.set, undefined);
try { if (Inst33 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2092,2103,42>",(assertFalse)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (desc.hasOwnProperty) != "undefined") {_RecordType("<2104,2123,42>",(desc.hasOwnProperty)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2104,2108,42>",(desc)); Inst35++; } } catch(e) {}
assertFalse(desc.hasOwnProperty('value'));
try { if (Inst36 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2135,2146,43>",(assertFalse)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (desc.hasOwnProperty) != "undefined") {_RecordType("<2147,2166,43>",(desc.hasOwnProperty)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2147,2151,43>",(desc)); Inst38++; } } catch(e) {}
assertFalse(desc.hasOwnProperty('writable'));

