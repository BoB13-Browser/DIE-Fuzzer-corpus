var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst1 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1610,1618,28>",(Math.pow)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1610,1614,28>",(Math)); Inst2++; } } catch(e) {}
var pow30 = Math.pow(2, 30);
try { if (Inst0 <= 1000 && typeof (pow30) != "undefined") {_RecordType("<1602,1607,28>",(pow30)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1639,1647,29>",(Math.pow)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1639,1643,29>",(Math)); Inst5++; } } catch(e) {}
var pow31 = Math.pow(2, 31);
try { if (Inst3 <= 1000 && typeof (pow31) != "undefined") {_RecordType("<1631,1636,29>",(pow31)); Inst3++; } } catch(e) {}

var a = [];
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1661,1662,31>",(a)); Inst6++; } } catch(e) {}
a[pow31] = 31;
try { if (Inst7 <= 1000 && typeof (a[pow31]) != "undefined") {_RecordType("<1669,1677,32>",(a[pow31])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<1669,1670,32>",(a)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1685,1697,34>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (pow31) != "undefined") {_RecordType("<1698,1703,34>",(pow31)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1709,1717,34>",(a.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1709,1710,34>",(a)); Inst12++; } } catch(e) {}
assertEquals(pow31 + 1, a.length);
try { if (Inst13 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1720,1732,35>",(assertThrows)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a.concat) != "undefined") {_RecordType("<1746,1754,35>",(a.concat)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1746,1747,35>",(a)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1755,1756,35>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<1762,1772,35>",(RangeError)); Inst17++; } } catch(e) {}
assertThrows(function() { a.concat(a); }, RangeError);

var b = [];
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1780,1781,37>",(b)); Inst18++; } } catch(e) {}
b[pow31 - 3] = 32;
try { if (Inst19 <= 1000 && typeof (b[pow31 - 3]) != "undefined") {_RecordType("<1788,1800,38>",(b[pow31 - 3])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<1788,1789,38>",(b)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (pow31) != "undefined") {_RecordType("<1790,1795,38>",(pow31)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (a.concat) != "undefined") {_RecordType("<1816,1824,39>",(a.concat)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1816,1817,39>",(a)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<1825,1826,39>",(b)); Inst25++; } } catch(e) {}
var ab = a.concat(b);
try { if (Inst22 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1811,1813,39>",(ab)); Inst22++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1829,1841,40>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (pow31) != "undefined") {_RecordType("<1846,1851,40>",(pow31)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (ab.length) != "undefined") {_RecordType("<1857,1866,40>",(ab.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1857,1859,40>",(ab)); Inst29++; } } catch(e) {}
assertEquals(2 * pow31 - 1, ab.length);
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1869,1881,41>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ab[pow31]) != "undefined") {_RecordType("<1886,1895,41>",(ab[pow31])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1886,1888,41>",(ab)); Inst32++; } } catch(e) {}
assertEquals(31, ab[pow31]);
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1898,1910,42>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ab[2 * pow31 - 2]) != "undefined") {_RecordType("<1915,1932,42>",(ab[2 * pow31 - 2])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1915,1917,42>",(ab)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (pow31) != "undefined") {_RecordType("<1922,1927,42>",(pow31)); Inst36++; } } catch(e) {}
assertEquals(32, ab[2 * pow31 - 2]);
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1935,1947,43>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1948,1957,43>",(undefined)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (ab[2 * pow31 - 1]) != "undefined") {_RecordType("<1959,1976,43>",(ab[2 * pow31 - 1])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (ab) != "undefined") {_RecordType("<1959,1961,43>",(ab)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (pow31) != "undefined") {_RecordType("<1966,1971,43>",(pow31)); Inst41++; } } catch(e) {}
assertEquals(undefined, ab[2 * pow31 - 1]);

var c = [];
try { if (Inst42 <= 1000 && typeof (c) != "undefined") {_RecordType("<1984,1985,45>",(c)); Inst42++; } } catch(e) {}
c[pow30] = 30;
try { if (Inst43 <= 1000 && typeof (c[pow30]) != "undefined") {_RecordType("<1992,2000,46>",(c[pow30])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (c) != "undefined") {_RecordType("<1992,1993,46>",(c)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2007,2019,47>",(assertThrows)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (c.concat) != "undefined") {_RecordType("<2033,2041,47>",(c.concat)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (c) != "undefined") {_RecordType("<2033,2034,47>",(c)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (c) != "undefined") {_RecordType("<2042,2043,47>",(c)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (a) != "undefined") {_RecordType("<2045,2046,47>",(a)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<2052,2062,47>",(RangeError)); Inst50++; } } catch(e) {}
assertThrows(function() { c.concat(c, a); }, RangeError);

