var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst1 <= 1000 && typeof (Date) != "undefined") {_RecordType("<1613,1617,28>",(Date)); Inst1++; } } catch(e) {}
var date = new Date();
try { if (Inst0 <= 1000 && typeof (date) != "undefined") {_RecordType("<1602,1606,28>",(date)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (date.getYear) != "undefined") {_RecordType("<1632,1644,29>",(date.getYear)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (date) != "undefined") {_RecordType("<1632,1636,29>",(date)); Inst4++; } } catch(e) {}
var year = date.getYear();
try { if (Inst2 <= 1000 && typeof (year) != "undefined") {_RecordType("<1625,1629,29>",(year)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (date.setMilliseconds) != "undefined") {_RecordType("<1648,1668,30>",(date.setMilliseconds)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (date) != "undefined") {_RecordType("<1648,1652,30>",(date)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Number.NaN) != "undefined") {_RecordType("<1669,1679,30>",(Number.NaN)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1669,1675,30>",(Number)); Inst8++; } } catch(e) {}
date.setMilliseconds(Number.NaN);
try { if (Inst9 <= 1000 && typeof (date.setYear) != "undefined") {_RecordType("<1682,1694,31>",(date.setYear)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (date) != "undefined") {_RecordType("<1682,1686,31>",(date)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (year) != "undefined") {_RecordType("<1702,1706,31>",(year)); Inst11++; } } catch(e) {}
date.setYear(1900 + year);
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1709,1721,32>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (year) != "undefined") {_RecordType("<1722,1726,32>",(year)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (date.getYear) != "undefined") {_RecordType("<1728,1740,32>",(date.getYear)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (date) != "undefined") {_RecordType("<1728,1732,32>",(date)); Inst15++; } } catch(e) {}
assertEquals(year, date.getYear());
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1745,1757,33>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (date.getMonth) != "undefined") {_RecordType("<1761,1774,33>",(date.getMonth)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (date) != "undefined") {_RecordType("<1761,1765,33>",(date)); Inst18++; } } catch(e) {}
assertEquals(0, date.getMonth());
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1779,1791,34>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (date.getDate) != "undefined") {_RecordType("<1795,1807,34>",(date.getDate)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (date) != "undefined") {_RecordType("<1795,1799,34>",(date)); Inst21++; } } catch(e) {}
assertEquals(1, date.getDate());
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1812,1824,35>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (date.getHours) != "undefined") {_RecordType("<1828,1841,35>",(date.getHours)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (date) != "undefined") {_RecordType("<1828,1832,35>",(date)); Inst24++; } } catch(e) {}
assertEquals(0, date.getHours());
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1846,1858,36>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (date.getMinutes) != "undefined") {_RecordType("<1862,1877,36>",(date.getMinutes)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (date) != "undefined") {_RecordType("<1862,1866,36>",(date)); Inst27++; } } catch(e) {}
assertEquals(0, date.getMinutes());
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1882,1894,37>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (date.getSeconds) != "undefined") {_RecordType("<1898,1913,37>",(date.getSeconds)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (date) != "undefined") {_RecordType("<1898,1902,37>",(date)); Inst30++; } } catch(e) {}
assertEquals(0, date.getSeconds());
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1918,1930,38>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (date.getMilliseconds) != "undefined") {_RecordType("<1934,1954,38>",(date.getMilliseconds)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (date) != "undefined") {_RecordType("<1934,1938,38>",(date)); Inst33++; } } catch(e) {}
assertEquals(0, date.getMilliseconds());

