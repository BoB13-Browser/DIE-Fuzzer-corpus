var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst1 <= 1000 && typeof (DataView) != "undefined") {_RecordType("<181,189,5>",(DataView)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<194,205,5>",(ArrayBuffer)); Inst2++; } } catch(e) {}
var dv = new DataView(new ArrayBuffer(4), 2);
try { if (Inst0 <= 1000 && typeof (dv) != "undefined") {_RecordType("<172,174,5>",(dv)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (getByteLength) != "undefined") {_RecordType("<224,237,7>",(getByteLength)); Inst3++; } } catch(e) {}
function getByteLength(a) {
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<238,239,7>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a.byteLength) != "undefined") {_RecordType("<252,264,8>",(a.byteLength)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<252,253,8>",(a)); Inst6++; } } catch(e) {}
  return a.byteLength;
}

try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<269,281,11>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (getByteLength) != "undefined") {_RecordType("<285,298,11>",(getByteLength)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (dv) != "undefined") {_RecordType("<299,301,11>",(dv)); Inst9++; } } catch(e) {}
assertEquals(2, getByteLength(dv));
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<305,317,12>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (getByteLength) != "undefined") {_RecordType("<321,334,12>",(getByteLength)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (dv) != "undefined") {_RecordType("<335,337,12>",(dv)); Inst12++; } } catch(e) {}
assertEquals(2, getByteLength(dv));

try { if (Inst13 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<342,363,14>",(Object.defineProperty)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Object) != "undefined") {_RecordType("<342,348,14>",(Object)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (dv.__proto__) != "undefined") {_RecordType("<364,376,14>",(dv.__proto__)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (dv) != "undefined") {_RecordType("<364,366,14>",(dv)); Inst16++; } } catch(e) {}
Object.defineProperty(dv.__proto__, 'byteLength', {value: 42});

try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<407,419,16>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (dv.byteLength) != "undefined") {_RecordType("<424,437,16>",(dv.byteLength)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (dv) != "undefined") {_RecordType("<424,426,16>",(dv)); Inst19++; } } catch(e) {}
assertEquals(42, dv.byteLength);
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<440,452,17>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (getByteLength) != "undefined") {_RecordType("<457,470,17>",(getByteLength)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (dv) != "undefined") {_RecordType("<471,473,17>",(dv)); Inst22++; } } catch(e) {}
assertEquals(42, getByteLength(dv));

try { if (Inst23 <= 1000 && typeof (getByteOffset) != "undefined") {_RecordType("<487,500,19>",(getByteOffset)); Inst23++; } } catch(e) {}
function getByteOffset(a) {
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<501,502,19>",(a)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (a.byteOffset) != "undefined") {_RecordType("<515,527,20>",(a.byteOffset)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<515,516,20>",(a)); Inst26++; } } catch(e) {}
  return a.byteOffset;
}

try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<532,544,23>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (getByteOffset) != "undefined") {_RecordType("<548,561,23>",(getByteOffset)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (dv) != "undefined") {_RecordType("<562,564,23>",(dv)); Inst29++; } } catch(e) {}
assertEquals(2, getByteOffset(dv));
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<568,580,24>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (getByteOffset) != "undefined") {_RecordType("<584,597,24>",(getByteOffset)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (dv) != "undefined") {_RecordType("<598,600,24>",(dv)); Inst32++; } } catch(e) {}
assertEquals(2, getByteOffset(dv));

try { if (Inst33 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<605,626,26>",(Object.defineProperty)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Object) != "undefined") {_RecordType("<605,611,26>",(Object)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (dv.__proto__) != "undefined") {_RecordType("<627,639,26>",(dv.__proto__)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (dv) != "undefined") {_RecordType("<627,629,26>",(dv)); Inst36++; } } catch(e) {}
Object.defineProperty(dv.__proto__, 'byteOffset', {value: 42});

try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<670,682,28>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (dv.byteOffset) != "undefined") {_RecordType("<687,700,28>",(dv.byteOffset)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (dv) != "undefined") {_RecordType("<687,689,28>",(dv)); Inst39++; } } catch(e) {}
assertEquals(42, dv.byteOffset);
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<703,715,29>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (getByteOffset) != "undefined") {_RecordType("<720,733,29>",(getByteOffset)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (dv) != "undefined") {_RecordType("<734,736,29>",(dv)); Inst42++; } } catch(e) {}
assertEquals(42, getByteOffset(dv));

