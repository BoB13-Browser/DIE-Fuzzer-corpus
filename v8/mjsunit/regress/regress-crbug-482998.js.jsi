var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Should not time out.  Running time 0.5s vs. 120s before the change.
try { if (Inst0 <= 1000 && typeof (collapse) != "undefined") {_RecordType("<248,256,6>",(collapse)); Inst0++; } } catch(e) {}
function collapse(flags) {
try { if (Inst1 <= 1000 && typeof (flags) != "undefined") {_RecordType("<257,262,6>",(flags)); Inst1++; } } catch(e) {}
  var src = "(?:";
try { if (Inst2 <= 1000 && typeof (src) != "undefined") {_RecordType("<272,275,7>",(src)); Inst2++; } } catch(e) {}
  for (var i = 128; i < 0x1000; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<296,297,8>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<305,306,8>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<317,318,8>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<335,354,9>",(String.fromCharCode)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (String) != "undefined") {_RecordType("<335,341,9>",(String)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<360,361,9>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<370,389,9>",(String.fromCharCode)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (String) != "undefined") {_RecordType("<370,376,9>",(String)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<390,391,9>",(i)); Inst12++; } } catch(e) {}
    src += String.fromCharCode(96 + i % 26) + String.fromCharCode(i) + "|";
try { if (Inst6 <= 1000 && typeof (src) != "undefined") {_RecordType("<328,331,9>",(src)); Inst6++; } } catch(e) {}
  }
  src += "aa)";
try { if (Inst13 <= 1000 && typeof (src) != "undefined") {_RecordType("<406,409,11>",(src)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<444,450,12>",(RegExp)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (src) != "undefined") {_RecordType("<451,454,12>",(src)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (flags) != "undefined") {_RecordType("<456,461,12>",(flags)); Inst17++; } } catch(e) {}
  var collapsible = new RegExp(src, flags);
try { if (Inst14 <= 1000 && typeof (collapsible) != "undefined") {_RecordType("<426,437,12>",(collapsible)); Inst14++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<492,511,13>",(String.fromCharCode)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (String) != "undefined") {_RecordType("<492,498,13>",(String)); Inst20++; } } catch(e) {}
  var subject = "zzzzzzz" + String.fromCharCode(3000);
try { if (Inst18 <= 1000 && typeof (subject) != "undefined") {_RecordType("<470,477,13>",(subject)); Inst18++; } } catch(e) {}
  for (var i = 0; i < 1000; i++) {
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<530,531,14>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<537,538,14>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<547,548,14>",(i)); Inst23++; } } catch(e) {}
    subject += "xxxxxxx";
try { if (Inst24 <= 1000 && typeof (subject) != "undefined") {_RecordType("<558,565,15>",(subject)); Inst24++; } } catch(e) {}
  }
  for (var i = 0; i < 2000; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<595,596,17>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<602,603,17>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<612,613,17>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<623,634,18>",(assertFalse)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (collapsible.test) != "undefined") {_RecordType("<635,651,18>",(collapsible.test)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (collapsible) != "undefined") {_RecordType("<635,646,18>",(collapsible)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (subject) != "undefined") {_RecordType("<652,659,18>",(subject)); Inst31++; } } catch(e) {}
    assertFalse(collapsible.test(subject));
  }
}

try { if (Inst32 <= 1000 && typeof (collapse) != "undefined") {_RecordType("<670,678,22>",(collapse)); Inst32++; } } catch(e) {}
collapse("i");
try { if (Inst33 <= 1000 && typeof (collapse) != "undefined") {_RecordType("<685,693,23>",(collapse)); Inst33++; } } catch(e) {}
collapse("");

