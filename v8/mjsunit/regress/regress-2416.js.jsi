var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1598,1609,28>",(assertFalse)); Inst0++; } } catch(e) {}
assertFalse(2147483647 < -2147483648)
try { if (Inst1 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1636,1647,29>",(assertFalse)); Inst1++; } } catch(e) {}
assertFalse(2147483647 <= -2147483648)
try { if (Inst2 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1675,1686,30>",(assertFalse)); Inst2++; } } catch(e) {}
assertFalse(2147483647 == -2147483648)
try { if (Inst3 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1714,1724,31>",(assertTrue)); Inst3++; } } catch(e) {}
assertTrue(2147483647 >= -2147483648)
try { if (Inst4 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1752,1762,32>",(assertTrue)); Inst4++; } } catch(e) {}
assertTrue(2147483647 > -2147483648)

try { if (Inst5 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1790,1800,34>",(assertTrue)); Inst5++; } } catch(e) {}
assertTrue(-2147483648 < 2147483647)
try { if (Inst6 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1827,1837,35>",(assertTrue)); Inst6++; } } catch(e) {}
assertTrue(-2147483648 <= 2147483647)
try { if (Inst7 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1865,1876,36>",(assertFalse)); Inst7++; } } catch(e) {}
assertFalse(-2147483648 == 2147483647)
try { if (Inst8 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1904,1915,37>",(assertFalse)); Inst8++; } } catch(e) {}
assertFalse(-2147483648 >= 2147483647)
try { if (Inst9 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1943,1954,38>",(assertFalse)); Inst9++; } } catch(e) {}
assertFalse(-2147483648 > 2147483647)

try { if (Inst10 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1982,1993,40>",(assertFalse)); Inst10++; } } catch(e) {}
assertFalse(2147483647 < 2147483647)
try { if (Inst11 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2019,2029,41>",(assertTrue)); Inst11++; } } catch(e) {}
assertTrue(2147483647 <= 2147483647)
try { if (Inst12 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2056,2066,42>",(assertTrue)); Inst12++; } } catch(e) {}
assertTrue(2147483647 == 2147483647)
try { if (Inst13 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2093,2103,43>",(assertTrue)); Inst13++; } } catch(e) {}
assertTrue(2147483647 >= 2147483647)
try { if (Inst14 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2130,2141,44>",(assertFalse)); Inst14++; } } catch(e) {}
assertFalse(2147483647 > 2147483647)

try { if (Inst15 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2168,2179,46>",(assertFalse)); Inst15++; } } catch(e) {}
assertFalse(-2147483648 < -2147483648)
try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2207,2217,47>",(assertTrue)); Inst16++; } } catch(e) {}
assertTrue(-2147483648 <= -2147483648)
try { if (Inst17 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2246,2256,48>",(assertTrue)); Inst17++; } } catch(e) {}
assertTrue(-2147483648 == -2147483648)
try { if (Inst18 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2285,2295,49>",(assertTrue)); Inst18++; } } catch(e) {}
assertTrue(-2147483648 >= -2147483648)
try { if (Inst19 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2324,2335,50>",(assertFalse)); Inst19++; } } catch(e) {}
assertFalse(-2147483648 > -2147483648)


try { if (Inst20 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2365,2376,53>",(assertFalse)); Inst20++; } } catch(e) {}
assertFalse(1073741823 < -1073741824)
try { if (Inst21 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2403,2414,54>",(assertFalse)); Inst21++; } } catch(e) {}
assertFalse(1073741823 <= -1073741824)
try { if (Inst22 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2442,2453,55>",(assertFalse)); Inst22++; } } catch(e) {}
assertFalse(1073741823 == -1073741824)
try { if (Inst23 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2481,2491,56>",(assertTrue)); Inst23++; } } catch(e) {}
assertTrue(1073741823 >= -1073741824)
try { if (Inst24 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2519,2529,57>",(assertTrue)); Inst24++; } } catch(e) {}
assertTrue(1073741823 > -1073741824)

try { if (Inst25 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2557,2567,59>",(assertTrue)); Inst25++; } } catch(e) {}
assertTrue(-1073741824 < 1073741823)
try { if (Inst26 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2594,2604,60>",(assertTrue)); Inst26++; } } catch(e) {}
assertTrue(-1073741824 <= 1073741823)
try { if (Inst27 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2632,2643,61>",(assertFalse)); Inst27++; } } catch(e) {}
assertFalse(-1073741824 == 1073741823)
try { if (Inst28 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2671,2682,62>",(assertFalse)); Inst28++; } } catch(e) {}
assertFalse(-1073741824 >= 1073741823)
try { if (Inst29 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2710,2721,63>",(assertFalse)); Inst29++; } } catch(e) {}
assertFalse(-1073741824 > 1073741823)

try { if (Inst30 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2749,2760,65>",(assertFalse)); Inst30++; } } catch(e) {}
assertFalse(1073741823 < 1073741823)
try { if (Inst31 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2786,2796,66>",(assertTrue)); Inst31++; } } catch(e) {}
assertTrue(1073741823 <= 1073741823)
try { if (Inst32 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2823,2833,67>",(assertTrue)); Inst32++; } } catch(e) {}
assertTrue(1073741823 == 1073741823)
try { if (Inst33 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2860,2870,68>",(assertTrue)); Inst33++; } } catch(e) {}
assertTrue(1073741823 >= 1073741823)
try { if (Inst34 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2897,2908,69>",(assertFalse)); Inst34++; } } catch(e) {}
assertFalse(1073741823 > 1073741823)

try { if (Inst35 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2935,2946,71>",(assertFalse)); Inst35++; } } catch(e) {}
assertFalse(-1073741824 < -1073741824)
try { if (Inst36 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2974,2984,72>",(assertTrue)); Inst36++; } } catch(e) {}
assertTrue(-1073741824 <= -1073741824)
try { if (Inst37 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3013,3023,73>",(assertTrue)); Inst37++; } } catch(e) {}
assertTrue(-1073741824 == -1073741824)
try { if (Inst38 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3052,3062,74>",(assertTrue)); Inst38++; } } catch(e) {}
assertTrue(-1073741824 >= -1073741824)
try { if (Inst39 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3091,3102,75>",(assertFalse)); Inst39++; } } catch(e) {}
assertFalse(-1073741824 > -1073741824)

