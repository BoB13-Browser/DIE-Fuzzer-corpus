var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (produce_object) != "undefined") {_RecordType("<177,191,5>",(produce_object)); Inst0++; } } catch(e) {}
function produce_object() {
  var real_length = 1;
try { if (Inst1 <= 1000 && typeof (real_length) != "undefined") {_RecordType("<202,213,6>",(real_length)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (set_length) != "undefined") {_RecordType("<230,240,7>",(set_length)); Inst2++; } } catch(e) {}
  function set_length() { real_length = "boom"; }
try { if (Inst3 <= 1000 && typeof (real_length) != "undefined") {_RecordType("<245,256,7>",(real_length)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (get_length) != "undefined") {_RecordType("<280,290,8>",(get_length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (real_length) != "undefined") {_RecordType("<302,313,8>",(real_length)); Inst5++; } } catch(e) {}
  function get_length() { return real_length; }
try { if (Inst7 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<339,354,9>",(Array.prototype)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array) != "undefined") {_RecordType("<339,344,9>",(Array)); Inst8++; } } catch(e) {}
  var o = { __proto__:Array.prototype , 0:"x" };
try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<323,324,9>",(o)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<368,389,10>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<368,374,10>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<390,391,10>",(o)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (set_length) != "undefined") {_RecordType("<409,419,10>",(set_length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (get_length) != "undefined") {_RecordType("<425,435,10>",(get_length)); Inst13++; } } catch(e) {}
  Object.defineProperty(o, "length", { set:set_length, get:get_length })
try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<448,449,11>",(o)); Inst14++; } } catch(e) {}
  return o;
}

try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<454,466,14>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (produce_object().push) != "undefined") {_RecordType("<470,491,14>",(produce_object().push)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (produce_object) != "undefined") {_RecordType("<470,484,14>",(produce_object)); Inst17++; } } catch(e) {}
assertEquals(2, produce_object().push("y"));
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<499,511,15>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (produce_object().unshift) != "undefined") {_RecordType("<515,539,15>",(produce_object().unshift)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (produce_object) != "undefined") {_RecordType("<515,529,15>",(produce_object)); Inst20++; } } catch(e) {}
assertEquals(2, produce_object().unshift("y"));

