var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (pluck1) != "undefined") {_RecordType("<1607,1613,28>",(pluck1)); Inst0++; } } catch(e) {}
function pluck1(a, key) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1614,1615,28>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (key) != "undefined") {_RecordType("<1617,1620,28>",(key)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a.map) != "undefined") {_RecordType("<1635,1640,29>",(a.map)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1635,1636,29>",(a)); Inst4++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (item[key]) != "undefined") {_RecordType("<1665,1674,29>",(item[key])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (item) != "undefined") {_RecordType("<1665,1669,29>",(item)); Inst7++; } } catch(e) {}
    return a.map(function(item) { return item[key]; });
try { if (Inst5 <= 1000 && typeof (item) != "undefined") {_RecordType("<1650,1654,29>",(item)); Inst5++; } } catch(e) {}
};
try { if (Inst8 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1683,1700,31>",(assertArrayEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (pluck1) != "undefined") {_RecordType("<1709,1715,31>",(pluck1)); Inst9++; } } catch(e) {}
assertArrayEquals([2, 2], pluck1([[0, 0], [0, 0]], 'length'));
try { if (Inst10 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1746,1763,32>",(assertArrayEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (pluck1) != "undefined") {_RecordType("<1772,1778,32>",(pluck1)); Inst11++; } } catch(e) {}
assertArrayEquals([1, 3], pluck1([[1, 2], [3, 4]], '0'));

try { if (Inst12 <= 1000 && typeof (pluck2) != "undefined") {_RecordType("<1814,1820,34>",(pluck2)); Inst12++; } } catch(e) {}
function pluck2(a, key) {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1821,1822,34>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (key) != "undefined") {_RecordType("<1824,1827,34>",(key)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (a.map) != "undefined") {_RecordType("<1842,1847,35>",(a.map)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1842,1843,35>",(a)); Inst16++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (item[key]) != "undefined") {_RecordType("<1872,1881,35>",(item[key])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (item) != "undefined") {_RecordType("<1872,1876,35>",(item)); Inst19++; } } catch(e) {}
    return a.map(function(item) { return item[key]; });
try { if (Inst17 <= 1000 && typeof (item) != "undefined") {_RecordType("<1857,1861,35>",(item)); Inst17++; } } catch(e) {}
};
try { if (Inst20 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1890,1907,37>",(assertArrayEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (pluck2) != "undefined") {_RecordType("<1916,1922,37>",(pluck2)); Inst21++; } } catch(e) {}
assertArrayEquals([2, 2], pluck2(["ab", "cd"], 'length'));
try { if (Inst22 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1949,1966,38>",(assertArrayEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (pluck2) != "undefined") {_RecordType("<1979,1985,38>",(pluck2)); Inst23++; } } catch(e) {}
assertArrayEquals(["a", "c"], pluck2(["ab", "cd"], '0'));

try { if (Inst24 <= 1000 && typeof (pluck3) != "undefined") {_RecordType("<2017,2023,40>",(pluck3)); Inst24++; } } catch(e) {}
function pluck3(a, key) {
try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<2024,2025,40>",(a)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (key) != "undefined") {_RecordType("<2027,2030,40>",(key)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (a.map) != "undefined") {_RecordType("<2045,2050,41>",(a.map)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<2045,2046,41>",(a)); Inst28++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (item[key]) != "undefined") {_RecordType("<2075,2084,41>",(item[key])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (item) != "undefined") {_RecordType("<2075,2079,41>",(item)); Inst31++; } } catch(e) {}
    return a.map(function(item) { return item[key]; });
try { if (Inst29 <= 1000 && typeof (item) != "undefined") {_RecordType("<2060,2064,41>",(item)); Inst29++; } } catch(e) {}
};
f = function() { 1 };
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<2093,2094,43>",(f)); Inst32++; } } catch(e) {}
f.prototype = g = function() { 2 };
try { if (Inst33 <= 1000 && typeof (f.prototype) != "undefined") {_RecordType("<2115,2126,44>",(f.prototype)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<2115,2116,44>",(f)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (g) != "undefined") {_RecordType("<2129,2130,44>",(g)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<2151,2168,45>",(assertArrayEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (g) != "undefined") {_RecordType("<2170,2171,45>",(g)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (g) != "undefined") {_RecordType("<2173,2174,45>",(g)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (pluck3) != "undefined") {_RecordType("<2177,2183,45>",(pluck3)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<2185,2186,45>",(f)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<2188,2189,45>",(f)); Inst41++; } } catch(e) {}
assertArrayEquals([g, g], pluck3([f, f], 'prototype'));
try { if (Inst42 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<2207,2224,46>",(assertArrayEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2226,2235,46>",(undefined)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2237,2246,46>",(undefined)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (pluck3) != "undefined") {_RecordType("<2249,2255,46>",(pluck3)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (f) != "undefined") {_RecordType("<2257,2258,46>",(f)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (f) != "undefined") {_RecordType("<2260,2261,46>",(f)); Inst47++; } } catch(e) {}
assertArrayEquals([undefined, undefined], pluck3([f, f], '0'));

