var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1644,1655,29>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1644,1649,29>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1636,1641,29>",(Debug)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1667,1675,31>",(listener)); Inst3++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst4 <= 1000 && typeof (event) != "undefined") {_RecordType("<1676,1681,31>",(event)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1683,1693,31>",(exec_state)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1695,1705,31>",(event_data)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (data) != "undefined") {_RecordType("<1707,1711,31>",(data)); Inst7++; } } catch(e) {}
  for (var i = 0, n = exec_state.frameCount(); i < n; i++) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1726,1727,32>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (n) != "undefined") {_RecordType("<1733,1734,32>",(n)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (exec_state.frameCount) != "undefined") {_RecordType("<1737,1758,32>",(exec_state.frameCount)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1737,1747,32>",(exec_state)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1762,1763,32>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (n) != "undefined") {_RecordType("<1766,1767,32>",(n)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1769,1770,32>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (exec_state.frame().scopeCount) != "undefined") {_RecordType("<1780,1809,33>",(exec_state.frame().scopeCount)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<1780,1796,33>",(exec_state.frame)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1780,1790,33>",(exec_state)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1810,1811,33>",(i)); Inst18++; } } catch(e) {}
    exec_state.frame().scopeCount(i);
  }
try { if (Inst19 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<1820,1842,35>",(exec_state.prepareStep)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1820,1830,35>",(exec_state)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Debug.StepAction.StepNext) != "undefined") {_RecordType("<1843,1868,35>",(Debug.StepAction.StepNext)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<1843,1859,35>",(Debug.StepAction)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1843,1848,35>",(Debug)); Inst23++; } } catch(e) {}
  exec_state.prepareStep(Debug.StepAction.StepNext);
}

try { if (Inst24 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<1874,1891,38>",(Debug.setListener)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1874,1879,38>",(Debug)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1892,1900,38>",(listener)); Inst26++; } } catch(e) {}
Debug.setListener(listener);

var F = function () {
  1, function () {
    var d = 0;
try { if (Inst28 <= 1000 && typeof (d) != "undefined") {_RecordType("<1953,1954,42>",(d)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (d) != "undefined") {_RecordType("<1979,1980,43>",(d)); Inst29++; } } catch(e) {}
    (function () { d; });
    debugger;
  }();
};
try { if (Inst27 <= 1000 && typeof (F) != "undefined") {_RecordType("<1908,1909,40>",(F)); Inst27++; } } catch(e) {}

try { if (Inst31 <= 1000 && typeof (F.toString) != "undefined") {_RecordType("<2027,2037,48>",(F.toString)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (F) != "undefined") {_RecordType("<2027,2028,48>",(F)); Inst32++; } } catch(e) {}
var src = "(" + F.toString() + ")()";
try { if (Inst30 <= 1000 && typeof (src) != "undefined") {_RecordType("<2015,2018,48>",(src)); Inst30++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2049,2053,49>",(eval)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (src) != "undefined") {_RecordType("<2054,2057,49>",(src)); Inst34++; } } catch(e) {}
eval(src);

try { if (Inst35 <= 1000 && typeof (Function.prototype.__defineGetter__) != "undefined") {_RecordType("<2061,2096,51>",(Function.prototype.__defineGetter__)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<2061,2079,51>",(Function.prototype)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Function) != "undefined") {_RecordType("<2061,2069,51>",(Function)); Inst37++; } } catch(e) {}
Function.prototype.__defineGetter__("f", function () {
  debugger;
  return 0;
});

var G = function () {
try { if (Inst39 <= 1000 && typeof (function () {
    var d = 0;
    (function () { d; });
    debugger;
  }['f']) != "undefined") {_RecordType("<2172,2249,57>",(function () {
    var d = 0;
    (function () { d; });
    debugger;
  }['f'])); Inst39++; } } catch(e) {}
  1, function () {
    var d = 0;
try { if (Inst40 <= 1000 && typeof (d) != "undefined") {_RecordType("<2194,2195,58>",(d)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (d) != "undefined") {_RecordType("<2220,2221,59>",(d)); Inst41++; } } catch(e) {}
    (function () { d; });
    debugger;
  }['f'];
};
try { if (Inst38 <= 1000 && typeof (G) != "undefined") {_RecordType("<2149,2150,56>",(G)); Inst38++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (G.toString) != "undefined") {_RecordType("<2271,2281,64>",(G.toString)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (G) != "undefined") {_RecordType("<2271,2272,64>",(G)); Inst44++; } } catch(e) {}
var src = "(" + G.toString() + ")()";
try { if (Inst42 <= 1000 && typeof (src) != "undefined") {_RecordType("<2259,2262,64>",(src)); Inst42++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2293,2297,65>",(eval)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (src) != "undefined") {_RecordType("<2298,2301,65>",(src)); Inst46++; } } catch(e) {}
eval(src);

