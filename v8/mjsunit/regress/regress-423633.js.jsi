var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<168,189,5>",(Object.defineProperty)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Object) != "undefined") {_RecordType("<168,174,5>",(Object)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<190,205,5>",(Array.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<190,195,5>",(Array)); Inst3++; } } catch(e) {}
Object.defineProperty(Array.prototype, '0', {
  get: function() { return false; },
});
var a = [1, 2, 3];
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<259,260,8>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<274,286,9>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<287,288,9>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<290,297,9>",(a.slice)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<290,291,9>",(a)); Inst8++; } } catch(e) {}
assertEquals(a, a.slice());
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<302,314,10>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a.splice) != "undefined") {_RecordType("<320,328,10>",(a.splice)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<320,321,10>",(a)); Inst11++; } } catch(e) {}
assertEquals([3], a.splice(2, 1));

a = [1, 2, 3];
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<338,339,12>",(a)); Inst12++; } } catch(e) {}
a[0xffff] = 4;
try { if (Inst13 <= 1000 && typeof (a[0xffff]) != "undefined") {_RecordType("<353,362,13>",(a[0xffff])); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<353,354,13>",(a)); Inst14++; } } catch(e) {}
// nulling the prototype lets us stay in the sparse case; otherwise the
// getter on Array.prototype would force us into the non-sparse code.
a.__proto__ = null;
try { if (Inst15 <= 1000 && typeof (a.__proto__) != "undefined") {_RecordType("<510,521,16>",(a.__proto__)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<510,511,16>",(a)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<530,542,17>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<543,544,17>",(a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<546,572,17>",(Array.prototype.slice.call)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<546,567,17>",(Array.prototype.slice)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<546,561,17>",(Array.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Array) != "undefined") {_RecordType("<546,551,17>",(Array)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<573,574,17>",(a)); Inst23++; } } catch(e) {}
assertEquals(a, Array.prototype.slice.call(a));
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<578,590,18>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Array.prototype.splice.call) != "undefined") {_RecordType("<596,623,18>",(Array.prototype.splice.call)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array.prototype.splice) != "undefined") {_RecordType("<596,618,18>",(Array.prototype.splice)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<596,611,18>",(Array.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array) != "undefined") {_RecordType("<596,601,18>",(Array)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<624,625,18>",(a)); Inst29++; } } catch(e) {}
assertEquals([3], Array.prototype.splice.call(a, 2, 1));

