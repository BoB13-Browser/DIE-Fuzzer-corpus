var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --allow-natives-syntax

// Regression for register allocation.
var x;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1675,1676,31>",(x)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Float32Array) != "undefined") {_RecordType("<1690,1702,32>",(Float32Array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1722,1725,32>",(NaN)); Inst3++; } } catch(e) {}
var a = new Float32Array([1,2, 4, 6, 8, 11, NaN, 1/0, -3])
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1682,1683,32>",(a)); Inst1++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<1751,1755,33>",(a[1])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1751,1752,33>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1756,1760,33>",(a[0])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<1756,1757,33>",(a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a[1*2*3*0]) != "undefined") {_RecordType("<1761,1771,33>",(a[1*2*3*0])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1761,1762,33>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a[1*1]) != "undefined") {_RecordType("<1772,1778,33>",(a[1*1])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1772,1773,33>",(a)); Inst12++; } } catch(e) {}
var val = 2.1*a[1]*a[0]*a[1*2*3*0]*a[1*1]*1.0;
try { if (Inst4 <= 1000 && typeof (val) != "undefined") {_RecordType("<1741,1744,33>",(val)); Inst4++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1784,1796,34>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (val) != "undefined") {_RecordType("<1802,1805,34>",(val)); Inst14++; } } catch(e) {}
assertEquals(8.4, val);

// Regression for double-phis
var a;
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1843,1844,37>",(a)); Inst15++; } } catch(e) {}
var t = true;
try { if (Inst16 <= 1000 && typeof (t) != "undefined") {_RecordType("<1850,1851,38>",(t)); Inst16++; } } catch(e) {}
var res = [2.5, 2];
try { if (Inst17 <= 1000 && typeof (res) != "undefined") {_RecordType("<1864,1867,39>",(res)); Inst17++; } } catch(e) {}
for (var i = 0; i < 2; i++) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1889,1890,40>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1896,1897,40>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1903,1904,40>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (t) != "undefined") {_RecordType("<1916,1917,41>",(t)); Inst21++; } } catch(e) {}
  if (t) {
    a = 1.5;
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<1925,1926,42>",(a)); Inst22++; } } catch(e) {}
  } else {
    a = true;
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<1949,1950,44>",(a)); Inst23++; } } catch(e) {}
  }
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1965,1977,46>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (res[i]) != "undefined") {_RecordType("<1978,1984,46>",(res[i])); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (res) != "undefined") {_RecordType("<1978,1981,46>",(res)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<1986,1987,46>",(a)); Inst27++; } } catch(e) {}
  assertEquals(res[i], a+1);
  t = false;
try { if (Inst28 <= 1000 && typeof (t) != "undefined") {_RecordType("<1994,1995,47>",(t)); Inst28++; } } catch(e) {}
}

