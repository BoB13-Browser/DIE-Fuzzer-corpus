var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug --allow-natives-syntax

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1664,1675,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1664,1669,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1656,1661,30>",(Debug)); Inst0++; } } catch(e) {}
var listened = false;
try { if (Inst3 <= 1000 && typeof (listened) != "undefined") {_RecordType("<1681,1689,31>",(listened)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1709,1717,33>",(listener)); Inst4++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst5 <= 1000 && typeof (event) != "undefined") {_RecordType("<1718,1723,33>",(event)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1725,1735,33>",(exec_state)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1737,1747,33>",(event_data)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (data) != "undefined") {_RecordType("<1749,1753,33>",(data)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (event) != "undefined") {_RecordType("<1763,1768,34>",(event)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug.DebugEvent.Exception) != "undefined") {_RecordType("<1772,1798,34>",(Debug.DebugEvent.Exception)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1772,1788,34>",(Debug.DebugEvent)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1772,1777,34>",(Debug)); Inst12++; } } catch(e) {}
  if (event == Debug.DebugEvent.Exception) {
    for (var i = 0; i < exec_state.frameCount(); i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1815,1816,35>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1822,1823,35>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (exec_state.frameCount) != "undefined") {_RecordType("<1826,1847,35>",(exec_state.frameCount)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1826,1836,35>",(exec_state)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1851,1852,35>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (print) != "undefined") {_RecordType("<1864,1869,36>",(print)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (exec_state.frame(i).receiver) != "undefined") {_RecordType("<1870,1898,36>",(exec_state.frame(i).receiver)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<1870,1886,36>",(exec_state.frame)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1870,1880,36>",(exec_state)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1887,1888,36>",(i)); Inst22++; } } catch(e) {}
      print(exec_state.frame(i).receiver());
try { if (Inst23 <= 1000 && typeof (print) != "undefined") {_RecordType("<1909,1914,37>",(print)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (exec_state.frame(i).func().name) != "undefined") {_RecordType("<1915,1946,37>",(exec_state.frame(i).func().name)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (exec_state.frame(i).func) != "undefined") {_RecordType("<1915,1939,37>",(exec_state.frame(i).func)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<1915,1931,37>",(exec_state.frame)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1915,1925,37>",(exec_state)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<1932,1933,37>",(i)); Inst28++; } } catch(e) {}
      print(exec_state.frame(i).func().name());
    }
  }
  listened = true;
try { if (Inst29 <= 1000 && typeof (listened) != "undefined") {_RecordType("<1963,1971,40>",(listened)); Inst29++; } } catch(e) {}
}

try { if (Inst30 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<1983,2000,43>",(Debug.setListener)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1983,1988,43>",(Debug)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2001,2009,43>",(listener)); Inst32++; } } catch(e) {}
Debug.setListener(listener);
try { if (Inst33 <= 1000 && typeof (Debug.setBreakOnException) != "undefined") {_RecordType("<2012,2037,44>",(Debug.setBreakOnException)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2012,2017,44>",(Debug)); Inst34++; } } catch(e) {}
Debug.setBreakOnException();

try { if (Inst35 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2042,2054,46>",(assertThrows)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (null['foo']) != "undefined") {_RecordType("<2075,2086,46>",(null['foo'])); Inst36++; } } catch(e) {}
assertThrows(function() { delete null['foo']; });

try { if (Inst37 <= 1000 && typeof (Debug.clearBreakOnException) != "undefined") {_RecordType("<2093,2120,48>",(Debug.clearBreakOnException)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2093,2098,48>",(Debug)); Inst38++; } } catch(e) {}
Debug.clearBreakOnException();
try { if (Inst39 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2124,2141,49>",(Debug.setListener)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2124,2129,49>",(Debug)); Inst40++; } } catch(e) {}
Debug.setListener(null);

try { if (Inst41 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2150,2160,51>",(assertTrue)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (listened) != "undefined") {_RecordType("<2161,2169,51>",(listened)); Inst42++; } } catch(e) {}
assertTrue(listened);

