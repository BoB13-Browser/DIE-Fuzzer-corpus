var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (newArrayWithGetter) != "undefined") {_RecordType("<177,195,5>",(newArrayWithGetter)); Inst0++; } } catch(e) {}
function newArrayWithGetter() {
  var arr = [1, 2, 3];
try { if (Inst1 <= 1000 && typeof (arr) != "undefined") {_RecordType("<206,209,6>",(arr)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<225,246,7>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<225,231,7>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arr) != "undefined") {_RecordType("<247,250,7>",(arr)); Inst4++; } } catch(e) {}
  Object.defineProperty(arr, '1', {
try { if (Inst5 <= 1000 && typeof (this[1]) != "undefined") {_RecordType("<288,295,8>",(this[1])); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<304,313,8>",(undefined)); Inst6++; } } catch(e) {}
    get: function() { delete this[1]; return undefined; },
    configurable: true
  });
try { if (Inst7 <= 1000 && typeof (arr) != "undefined") {_RecordType("<356,359,11>",(arr)); Inst7++; } } catch(e) {}
  return arr;
}

try { if (Inst9 <= 1000 && typeof (newArrayWithGetter) != "undefined") {_RecordType("<372,390,14>",(newArrayWithGetter)); Inst9++; } } catch(e) {}
var a = newArrayWithGetter();
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<368,369,14>",(a)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<402,409,15>",(a.slice)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<402,403,15>",(a)); Inst12++; } } catch(e) {}
var s = a.slice(1);
try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<398,399,15>",(s)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<414,424,16>",(assertTrue)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (s) != "undefined") {_RecordType("<432,433,16>",(s)); Inst14++; } } catch(e) {}
assertTrue('0' in s);

// Sparse case should hit the same code as above due to presence of the getter.
try { if (Inst16 <= 1000 && typeof (newArrayWithGetter) != "undefined") {_RecordType("<521,539,19>",(newArrayWithGetter)); Inst16++; } } catch(e) {}
a = newArrayWithGetter();
try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<517,518,19>",(a)); Inst15++; } } catch(e) {}
a[0xffff] = 4;
try { if (Inst17 <= 1000 && typeof (a[0xffff]) != "undefined") {_RecordType("<543,552,20>",(a[0xffff])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<543,544,20>",(a)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (a.slice) != "undefined") {_RecordType("<562,569,21>",(a.slice)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<562,563,21>",(a)); Inst21++; } } catch(e) {}
s = a.slice(1);
try { if (Inst19 <= 1000 && typeof (s) != "undefined") {_RecordType("<558,559,21>",(s)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<574,584,22>",(assertTrue)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (s) != "undefined") {_RecordType("<592,593,22>",(s)); Inst23++; } } catch(e) {}
assertTrue('0' in s);

try { if (Inst25 <= 1000 && typeof (newArrayWithGetter) != "undefined") {_RecordType("<601,619,24>",(newArrayWithGetter)); Inst25++; } } catch(e) {}
a = newArrayWithGetter();
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<597,598,24>",(a)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (a.shift) != "undefined") {_RecordType("<623,630,25>",(a.shift)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<623,624,25>",(a)); Inst27++; } } catch(e) {}
a.shift();
try { if (Inst28 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<634,644,26>",(assertTrue)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<652,653,26>",(a)); Inst29++; } } catch(e) {}
assertTrue('0' in a);

try { if (Inst31 <= 1000 && typeof (newArrayWithGetter) != "undefined") {_RecordType("<661,679,28>",(newArrayWithGetter)); Inst31++; } } catch(e) {}
a = newArrayWithGetter();
try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<657,658,28>",(a)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (a.unshift) != "undefined") {_RecordType("<683,692,29>",(a.unshift)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<683,684,29>",(a)); Inst33++; } } catch(e) {}
a.unshift(0);
try { if (Inst34 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<697,707,30>",(assertTrue)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a) != "undefined") {_RecordType("<715,716,30>",(a)); Inst35++; } } catch(e) {}
assertTrue('2' in a);

