var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (Receiver) != "undefined") {_RecordType("<177,185,5>",(Receiver)); Inst0++; } } catch(e) {}
function Receiver() { this.receiver = "receiver"; }
try { if (Inst1 <= 1000 && typeof (this.receiver) != "undefined") {_RecordType("<190,203,5>",(this.receiver)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Proto) != "undefined") {_RecordType("<229,234,6>",(Proto)); Inst2++; } } catch(e) {}
function Proto() { this.proto = "proto"; }
try { if (Inst3 <= 1000 && typeof (this.proto) != "undefined") {_RecordType("<239,249,6>",(this.proto)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<273,274,8>",(f)); Inst4++; } } catch(e) {}
function f(a) {
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<275,276,8>",(a)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a.foo) != "undefined") {_RecordType("<289,294,9>",(a.foo)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<289,290,9>",(a)); Inst7++; } } catch(e) {}
  return a.foo;
}

try { if (Inst9 <= 1000 && typeof (Receiver) != "undefined") {_RecordType("<313,321,12>",(Receiver)); Inst9++; } } catch(e) {}
var rec = new Receiver();
try { if (Inst8 <= 1000 && typeof (rec) != "undefined") {_RecordType("<303,306,12>",(rec)); Inst8++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (rec.__proto__.__proto__) != "undefined") {_RecordType("<338,361,14>",(rec.__proto__.__proto__)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (rec.__proto__) != "undefined") {_RecordType("<338,351,14>",(rec.__proto__)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (rec) != "undefined") {_RecordType("<338,341,14>",(rec)); Inst13++; } } catch(e) {}
var proto = rec.__proto__.__proto__;
try { if (Inst10 <= 1000 && typeof (proto) != "undefined") {_RecordType("<330,335,14>",(proto)); Inst10++; } } catch(e) {}

// Initialize prototype chain dependent IC (nonexistent load).
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<427,439,17>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<440,449,17>",(undefined)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<451,452,17>",(f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (rec) != "undefined") {_RecordType("<453,456,17>",(rec)); Inst17++; } } catch(e) {}
assertEquals(undefined, f(rec));
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<460,472,18>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<473,482,18>",(undefined)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<484,485,18>",(f)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (rec) != "undefined") {_RecordType("<486,489,18>",(rec)); Inst21++; } } catch(e) {}
assertEquals(undefined, f(rec));

// Add a new prototype to the end of the chain.
try { if (Inst23 <= 1000 && typeof (Proto) != "undefined") {_RecordType("<555,560,21>",(Proto)); Inst23++; } } catch(e) {}
var p2 = new Proto();
try { if (Inst22 <= 1000 && typeof (p2) != "undefined") {_RecordType("<546,548,21>",(p2)); Inst22++; } } catch(e) {}
p2.__proto__ = null;
try { if (Inst24 <= 1000 && typeof (p2.__proto__) != "undefined") {_RecordType("<564,576,22>",(p2.__proto__)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (p2) != "undefined") {_RecordType("<564,566,22>",(p2)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (p2) != "undefined") {_RecordType("<603,605,23>",(p2)); Inst28++; } } catch(e) {}
proto.__proto__ = p2;
try { if (Inst26 <= 1000 && typeof (proto.__proto__) != "undefined") {_RecordType("<585,600,23>",(proto.__proto__)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (proto) != "undefined") {_RecordType("<585,590,23>",(proto)); Inst27++; } } catch(e) {}

// Update the IC.
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<626,638,26>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<639,648,26>",(undefined)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<650,651,26>",(f)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (rec) != "undefined") {_RecordType("<652,655,26>",(rec)); Inst32++; } } catch(e) {}
assertEquals(undefined, f(rec));

// Now modify the most recently added prototype by adding a property...
p2.foo = "bar";
try { if (Inst33 <= 1000 && typeof (p2.foo) != "undefined") {_RecordType("<732,738,29>",(p2.foo)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (p2) != "undefined") {_RecordType("<732,734,29>",(p2)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<748,760,30>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<768,769,30>",(f)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (rec) != "undefined") {_RecordType("<770,773,30>",(rec)); Inst37++; } } catch(e) {}
assertEquals("bar", f(rec));

// ...and removing it again. Due to missing prototype user registrations,
// this fails to invalidate the IC.
try { if (Inst38 <= 1000 && typeof (p2.foo) != "undefined") {_RecordType("<895,901,34>",(p2.foo)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (p2) != "undefined") {_RecordType("<895,897,34>",(p2)); Inst39++; } } catch(e) {}
delete p2.foo;
p2.secret = "GAME OVER";
try { if (Inst40 <= 1000 && typeof (p2.secret) != "undefined") {_RecordType("<903,912,35>",(p2.secret)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (p2) != "undefined") {_RecordType("<903,905,35>",(p2)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<928,940,36>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<941,950,36>",(undefined)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (f) != "undefined") {_RecordType("<952,953,36>",(f)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (rec) != "undefined") {_RecordType("<954,957,36>",(rec)); Inst45++; } } catch(e) {}
assertEquals(undefined, f(rec));

