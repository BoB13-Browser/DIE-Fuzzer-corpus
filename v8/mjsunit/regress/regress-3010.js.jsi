var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(function() {
try { if (Inst0 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<1623,1634,29>",(testOneSize)); Inst0++; } } catch(e) {}
  function testOneSize(current_size) {
try { if (Inst1 <= 1000 && typeof (current_size) != "undefined") {_RecordType("<1635,1647,29>",(current_size)); Inst1++; } } catch(e) {}
    var eval_string = 'obj = {';
try { if (Inst2 <= 1000 && typeof (eval_string) != "undefined") {_RecordType("<1659,1670,30>",(eval_string)); Inst2++; } } catch(e) {}
    for (var current = 0; current <= current_size; ++current) {
try { if (Inst3 <= 1000 && typeof (current) != "undefined") {_RecordType("<1697,1704,31>",(current)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (current) != "undefined") {_RecordType("<1710,1717,31>",(current)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (current_size) != "undefined") {_RecordType("<1721,1733,31>",(current_size)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (current) != "undefined") {_RecordType("<1737,1744,31>",(current)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (current) != "undefined") {_RecordType("<1775,1782,32>",(current)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (current) != "undefined") {_RecordType("<1791,1798,32>",(current)); Inst9++; } } catch(e) {}
      eval_string += 'k' + current + ':' + current + ','
try { if (Inst7 <= 1000 && typeof (eval_string) != "undefined") {_RecordType("<1754,1765,32>",(eval_string)); Inst7++; } } catch(e) {}
    }
    eval_string += '};';
try { if (Inst10 <= 1000 && typeof (eval_string) != "undefined") {_RecordType("<1815,1826,34>",(eval_string)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1840,1844,35>",(eval)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (eval_string) != "undefined") {_RecordType("<1845,1856,35>",(eval_string)); Inst12++; } } catch(e) {}
    eval(eval_string);
    for (var i = 0; i <= current_size; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1872,1873,36>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1879,1880,36>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (current_size) != "undefined") {_RecordType("<1884,1896,36>",(current_size)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1898,1899,36>",(i)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1911,1923,37>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<1924,1925,37>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (obj['k'+i]) != "undefined") {_RecordType("<1927,1937,37>",(obj['k'+i])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1927,1930,37>",(obj)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1935,1936,37>",(i)); Inst21++; } } catch(e) {}
      assertEquals(i, obj['k'+i]);
    }
    var current_number = 0;
try { if (Inst22 <= 1000 && typeof (current_number) != "undefined") {_RecordType("<1954,1968,39>",(current_number)); Inst22++; } } catch(e) {}
    for (var x in obj) {
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<1987,1988,40>",(x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1992,1995,40>",(obj)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2005,2017,41>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (current_number) != "undefined") {_RecordType("<2018,2032,41>",(current_number)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (obj[x]) != "undefined") {_RecordType("<2034,2040,41>",(obj[x])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (obj) != "undefined") {_RecordType("<2034,2037,41>",(obj)); Inst28++; } } catch(e) {}
      assertEquals(current_number, obj[x]);
try { if (Inst29 <= 1000 && typeof (current_number) != "undefined") {_RecordType("<2049,2063,42>",(current_number)); Inst29++; } } catch(e) {}
      current_number++;
    }
  }

try { if (Inst30 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2080,2091,46>",(testOneSize)); Inst30++; } } catch(e) {}
  testOneSize(127);
try { if (Inst31 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2100,2111,47>",(testOneSize)); Inst31++; } } catch(e) {}
  testOneSize(128);
try { if (Inst32 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2120,2131,48>",(testOneSize)); Inst32++; } } catch(e) {}
  testOneSize(129);

try { if (Inst33 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2141,2152,50>",(testOneSize)); Inst33++; } } catch(e) {}
  testOneSize(255);
try { if (Inst34 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2161,2172,51>",(testOneSize)); Inst34++; } } catch(e) {}
  testOneSize(256);
try { if (Inst35 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2181,2192,52>",(testOneSize)); Inst35++; } } catch(e) {}
  testOneSize(257);

try { if (Inst36 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2202,2213,54>",(testOneSize)); Inst36++; } } catch(e) {}
  testOneSize(511);
try { if (Inst37 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2222,2233,55>",(testOneSize)); Inst37++; } } catch(e) {}
  testOneSize(512);
try { if (Inst38 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2242,2253,56>",(testOneSize)); Inst38++; } } catch(e) {}
  testOneSize(513);

try { if (Inst39 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2263,2274,58>",(testOneSize)); Inst39++; } } catch(e) {}
  testOneSize(1023);
try { if (Inst40 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2284,2295,59>",(testOneSize)); Inst40++; } } catch(e) {}
  testOneSize(1024);
try { if (Inst41 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2305,2316,60>",(testOneSize)); Inst41++; } } catch(e) {}
  testOneSize(1025);

try { if (Inst42 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2327,2338,62>",(testOneSize)); Inst42++; } } catch(e) {}
  testOneSize(2047);
try { if (Inst43 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2348,2359,63>",(testOneSize)); Inst43++; } } catch(e) {}
  testOneSize(2048);
try { if (Inst44 <= 1000 && typeof (testOneSize) != "undefined") {_RecordType("<2369,2380,64>",(testOneSize)); Inst44++; } } catch(e) {}
  testOneSize(2049);
}())

