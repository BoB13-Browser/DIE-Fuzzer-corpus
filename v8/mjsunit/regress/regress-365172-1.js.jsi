var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --track-field-types

var b1 = {d: 1}; var b2 = {d: 2};
try { if (Inst0 <= 1000 && typeof (b1) != "undefined") {_RecordType("<203,205,7>",(b1)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (b2) != "undefined") {_RecordType("<220,222,7>",(b2)); Inst1++; } } catch(e) {}
var f1 = {x: 1}; var f2 = {x: 2};
try { if (Inst2 <= 1000 && typeof (f1) != "undefined") {_RecordType("<237,239,8>",(f1)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (f2) != "undefined") {_RecordType("<254,256,8>",(f2)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (b1) != "undefined") {_RecordType("<274,276,9>",(b1)); Inst6++; } } catch(e) {}
f1.b = b1;
try { if (Inst4 <= 1000 && typeof (f1.b) != "undefined") {_RecordType("<267,271,9>",(f1.b)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f1) != "undefined") {_RecordType("<267,269,9>",(f1)); Inst5++; } } catch(e) {}
f2.x = {};
try { if (Inst7 <= 1000 && typeof (f2.x) != "undefined") {_RecordType("<278,282,10>",(f2.x)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f2) != "undefined") {_RecordType("<278,280,10>",(f2)); Inst8++; } } catch(e) {}
b2.d = 4.2;
try { if (Inst9 <= 1000 && typeof (b2.d) != "undefined") {_RecordType("<289,293,11>",(b2.d)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b2) != "undefined") {_RecordType("<289,291,11>",(b2)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (b2) != "undefined") {_RecordType("<308,310,12>",(b2)); Inst13++; } } catch(e) {}
f2.b = b2;
try { if (Inst11 <= 1000 && typeof (f2.b) != "undefined") {_RecordType("<301,305,12>",(f2.b)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f2) != "undefined") {_RecordType("<301,303,12>",(f2)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (f1.x) != "undefined") {_RecordType("<320,324,13>",(f1.x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f1) != "undefined") {_RecordType("<320,322,13>",(f1)); Inst16++; } } catch(e) {}
var x = f1.x;
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<316,317,13>",(x)); Inst14++; } } catch(e) {}

