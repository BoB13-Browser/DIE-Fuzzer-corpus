var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (this.Worker) != "undefined") {_RecordType("<172,183,5>",(this.Worker)); Inst0++; } } catch(e) {}
if (this.Worker) {
try { if (Inst1 <= 1000 && typeof (__f_0) != "undefined") {_RecordType("<198,203,6>",(__f_0)); Inst1++; } } catch(e) {}
  function __f_0(byteLength) {
try { if (Inst2 <= 1000 && typeof (byteLength) != "undefined") {_RecordType("<204,214,6>",(byteLength)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<238,249,7>",(ArrayBuffer)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (byteLength) != "undefined") {_RecordType("<250,260,7>",(byteLength)); Inst5++; } } catch(e) {}
    var __v_1 = new ArrayBuffer(byteLength);
try { if (Inst3 <= 1000 && typeof (__v_1) != "undefined") {_RecordType("<226,231,7>",(__v_1)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<283,294,8>",(Uint32Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (__v_1) != "undefined") {_RecordType("<295,300,8>",(__v_1)); Inst8++; } } catch(e) {}
    var __v_5 = new Uint32Array(__v_1);
try { if (Inst6 <= 1000 && typeof (__v_5) != "undefined") {_RecordType("<271,276,8>",(__v_5)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (__v_5) != "undefined") {_RecordType("<314,319,9>",(__v_5)); Inst9++; } } catch(e) {}
    return __v_5;
  }
try { if (Inst11 <= 1000 && typeof (Worker) != "undefined") {_RecordType("<343,349,11>",(Worker)); Inst11++; } } catch(e) {}
  var __v_6 = new Worker('onmessage = function() {}');
try { if (Inst10 <= 1000 && typeof (__v_6) != "undefined") {_RecordType("<331,336,11>",(__v_6)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (__f_0) != "undefined") {_RecordType("<394,399,12>",(__f_0)); Inst13++; } } catch(e) {}
  var __v_3 = __f_0(16);
try { if (Inst12 <= 1000 && typeof (__v_3) != "undefined") {_RecordType("<386,391,12>",(__v_3)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (__v_6.postMessage) != "undefined") {_RecordType("<407,424,13>",(__v_6.postMessage)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (__v_6) != "undefined") {_RecordType("<407,412,13>",(__v_6)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (__v_3) != "undefined") {_RecordType("<425,430,13>",(__v_3)); Inst16++; } } catch(e) {}
  __v_6.postMessage(__v_3);
}

