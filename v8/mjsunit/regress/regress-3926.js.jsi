var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// See: http://code.google.com/p/v8/issues/detail?id=3926

// Switch statements should disable hole check elimination

// Ensure that both reads and writes encounter the hole check
// FullCodeGen had an issue on reads; TurboFan had an issue on writes
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<428,429,11>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<430,431,11>",(x)); Inst1++; } } catch(e) {}
  var z;
try { if (Inst2 <= 1000 && typeof (z) != "undefined") {_RecordType("<441,442,12>",(z)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<454,455,13>",(x)); Inst3++; } } catch(e) {}
  switch (x) {
    case 1:
      let y = 1;
try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<481,482,15>",(y)); Inst4++; } } catch(e) {}
    case 2:
      y = 2;
try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<506,507,17>",(y)); Inst5++; } } catch(e) {}
    case 3:
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<535,536,19>",(y)); Inst7++; } } catch(e) {}
      z = y;
try { if (Inst6 <= 1000 && typeof (z) != "undefined") {_RecordType("<531,532,19>",(z)); Inst6++; } } catch(e) {}
  }
try { if (Inst8 <= 1000 && typeof (z) != "undefined") {_RecordType("<551,552,21>",(z)); Inst8++; } } catch(e) {}
  return z;
}
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<556,568,23>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<572,573,23>",(f)); Inst10++; } } catch(e) {}
assertEquals(2, f(1));
try { if (Inst11 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<579,591,24>",(assertThrows)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<604,605,24>",(f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<611,625,24>",(ReferenceError)); Inst13++; } } catch(e) {}
assertThrows(function() {f(2)}, ReferenceError);
try { if (Inst14 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<628,640,25>",(assertThrows)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<653,654,25>",(f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<660,674,25>",(ReferenceError)); Inst16++; } } catch(e) {}
assertThrows(function() {f(3)}, ReferenceError);

// Ensure that hole checks are done even in subordinate scopes
try { if (Inst17 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<741,753,28>",(assertThrows)); Inst17++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<937,951,38>",(ReferenceError)); Inst21++; } } catch(e) {}
assertThrows(function() {
  switch (1) {
    case 0:
      let x = 2;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<804,805,31>",(x)); Inst18++; } } catch(e) {}
    case 1:
    { // this block, plus the let below, adds another linear lexical scope
      let y = 3;
try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<908,909,34>",(y)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<921,922,35>",(x)); Inst20++; } } catch(e) {}
      x;
    }
  }
}, ReferenceError);

// Ensure that inner functions and eval don't skip hole checks

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<1028,1029,42>",(g)); Inst22++; } } catch(e) {}
function g(x) {
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<1030,1031,42>",(x)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<1045,1046,43>",(x)); Inst24++; } } catch(e) {}
  switch (x) {
    case 1:
      let z;
try { if (Inst25 <= 1000 && typeof (z) != "undefined") {_RecordType("<1072,1073,45>",(z)); Inst25++; } } catch(e) {}
    case 2:
      return function() { z = 1; }
try { if (Inst26 <= 1000 && typeof (z) != "undefined") {_RecordType("<1113,1114,47>",(z)); Inst26++; } } catch(e) {}
    case 3:
try { if (Inst27 <= 1000 && typeof (z) != "undefined") {_RecordType("<1167,1168,49>",(z)); Inst27++; } } catch(e) {}
      return function() { return z; }
    case 4:
try { if (Inst28 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1197,1201,51>",(eval)); Inst28++; } } catch(e) {}
      return eval("z = 1");
    case 5:
try { if (Inst29 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1237,1241,53>",(eval)); Inst29++; } } catch(e) {}
      return eval("z");
  }
}

try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1255,1267,57>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1268,1277,57>",(undefined)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (g) != "undefined") {_RecordType("<1279,1280,57>",(g)); Inst32++; } } catch(e) {}
assertEquals(undefined, g(1)());
try { if (Inst33 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1288,1300,58>",(assertThrows)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (g) != "undefined") {_RecordType("<1301,1302,58>",(g)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1307,1321,58>",(ReferenceError)); Inst35++; } } catch(e) {}
assertThrows(g(2), ReferenceError);
try { if (Inst36 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1324,1336,59>",(assertThrows)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (g) != "undefined") {_RecordType("<1337,1338,59>",(g)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1343,1357,59>",(ReferenceError)); Inst38++; } } catch(e) {}
assertThrows(g(3), ReferenceError);
try { if (Inst39 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1360,1372,60>",(assertThrows)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (g) != "undefined") {_RecordType("<1386,1387,60>",(g)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1393,1407,60>",(ReferenceError)); Inst41++; } } catch(e) {}
assertThrows(function () {g(4)}, ReferenceError);
try { if (Inst42 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1410,1422,61>",(assertThrows)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (g) != "undefined") {_RecordType("<1436,1437,61>",(g)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1443,1457,61>",(ReferenceError)); Inst44++; } } catch(e) {}
assertThrows(function () {g(5)}, ReferenceError);

// Ensure the same in strict mode, with different eval and function semantics

try { if (Inst45 <= 1000 && typeof (h) != "undefined") {_RecordType("<1549,1550,65>",(h)); Inst45++; } } catch(e) {}
function h(x) {
try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<1551,1552,65>",(x)); Inst46++; } } catch(e) {}
  'use strict'
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<1581,1582,67>",(x)); Inst47++; } } catch(e) {}
  switch (x) {
    case 1:
      let z;
try { if (Inst48 <= 1000 && typeof (z) != "undefined") {_RecordType("<1608,1609,69>",(z)); Inst48++; } } catch(e) {}
    case 2:
      return function() { z = 1; }
try { if (Inst49 <= 1000 && typeof (z) != "undefined") {_RecordType("<1649,1650,71>",(z)); Inst49++; } } catch(e) {}
    case 3:
try { if (Inst50 <= 1000 && typeof (z) != "undefined") {_RecordType("<1703,1704,73>",(z)); Inst50++; } } catch(e) {}
      return function() { return z; }
    case 4:
try { if (Inst51 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1733,1737,75>",(eval)); Inst51++; } } catch(e) {}
      return eval("z = 1");
    case 5:
try { if (Inst52 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1773,1777,77>",(eval)); Inst52++; } } catch(e) {}
      return eval("z");
  }
}

try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1791,1803,81>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1804,1813,81>",(undefined)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (h) != "undefined") {_RecordType("<1815,1816,81>",(h)); Inst55++; } } catch(e) {}
assertEquals(undefined, h(1)());
try { if (Inst56 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1824,1836,82>",(assertThrows)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (h) != "undefined") {_RecordType("<1837,1838,82>",(h)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1843,1857,82>",(ReferenceError)); Inst58++; } } catch(e) {}
assertThrows(h(2), ReferenceError);
try { if (Inst59 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1860,1872,83>",(assertThrows)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (h) != "undefined") {_RecordType("<1873,1874,83>",(h)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1879,1893,83>",(ReferenceError)); Inst61++; } } catch(e) {}
assertThrows(h(3), ReferenceError);
try { if (Inst62 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1896,1908,84>",(assertThrows)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (h) != "undefined") {_RecordType("<1922,1923,84>",(h)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1929,1943,84>",(ReferenceError)); Inst64++; } } catch(e) {}
assertThrows(function () {h(4)}, ReferenceError);
try { if (Inst65 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1946,1958,85>",(assertThrows)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (h) != "undefined") {_RecordType("<1972,1973,85>",(h)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1979,1993,85>",(ReferenceError)); Inst67++; } } catch(e) {}
assertThrows(function () {h(5)}, ReferenceError);

