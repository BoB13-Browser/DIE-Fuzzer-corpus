var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1641,1652,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1641,1646,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1633,1638,30>",(Debug)); Inst0++; } } catch(e) {}

var error = null;
try { if (Inst3 <= 1000 && typeof (error) != "undefined") {_RecordType("<1658,1663,32>",(error)); Inst3++; } } catch(e) {}
var array = ["a", "b", "c"];
try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<1676,1681,33>",(array)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1711,1719,35>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<1720,1725,35>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1727,1737,35>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1739,1749,35>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1751,1755,35>",(data)); Inst9++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<1934,1935,41>",(e)); Inst20++; } } catch(e) {}
  try {
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<1775,1780,37>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<1784,1806,37>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1784,1800,37>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1784,1789,37>",(Debug)); Inst13++; } } catch(e) {}
    if (event == Debug.DebugEvent.Break) {
try { if (Inst14 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1816,1833,38>",(assertArrayEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (array) != "undefined") {_RecordType("<1834,1839,38>",(array)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state.frame(0).evaluate('arguments').value) != "undefined") {_RecordType("<1865,1912,39>",(exec_state.frame(0).evaluate('arguments').value)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<1865,1893,39>",(exec_state.frame(0).evaluate)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<1865,1881,39>",(exec_state.frame)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1865,1875,39>",(exec_state)); Inst19++; } } catch(e) {}
      assertArrayEquals(array,
                        exec_state.frame(0).evaluate('arguments').value());
    }
  } catch (e) {
try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<1951,1952,42>",(e)); Inst22++; } } catch(e) {}
    error = e;
try { if (Inst21 <= 1000 && typeof (error) != "undefined") {_RecordType("<1943,1948,42>",(error)); Inst21++; } } catch(e) {}
  }
};

try { if (Inst23 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<1962,1979,46>",(Debug.setListener)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1962,1967,46>",(Debug)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1980,1988,46>",(listener)); Inst25++; } } catch(e) {}
Debug.setListener(listener);


try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<2002,2003,49>",(f)); Inst26++; } } catch(e) {}
function f(a, b) {
try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<2004,2005,49>",(a)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (b) != "undefined") {_RecordType("<2007,2008,49>",(b)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2014,2023,50>",(arguments)); Inst29++; } } catch(e) {}
  arguments;
  debugger;  // Arguments object is already materialized.
}

try { if (Inst30 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<2086,2093,54>",(f.apply)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<2086,2087,54>",(f)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (array) != "undefined") {_RecordType("<2100,2105,54>",(array)); Inst32++; } } catch(e) {}
f.apply(this, array);
try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<2108,2109,55>",(f)); Inst33++; } } catch(e) {}
f("a", "b", "c");
try { if (Inst34 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<2126,2136,56>",(assertNull)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (error) != "undefined") {_RecordType("<2137,2142,56>",(error)); Inst35++; } } catch(e) {}
assertNull(error);

try { if (Inst36 <= 1000 && typeof (g) != "undefined") {_RecordType("<2155,2156,58>",(g)); Inst36++; } } catch(e) {}
function g(a, b) {
try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<2157,2158,58>",(a)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (b) != "undefined") {_RecordType("<2160,2161,58>",(b)); Inst38++; } } catch(e) {}
  debugger;  // Arguments object is not yet materialized.
}
try { if (Inst39 <= 1000 && typeof (g.apply) != "undefined") {_RecordType("<2225,2232,61>",(g.apply)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (g) != "undefined") {_RecordType("<2225,2226,61>",(g)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (array) != "undefined") {_RecordType("<2239,2244,61>",(array)); Inst41++; } } catch(e) {}
g.apply(this, array);
try { if (Inst42 <= 1000 && typeof (g) != "undefined") {_RecordType("<2247,2248,62>",(g)); Inst42++; } } catch(e) {}
g("a", "b", "c");
try { if (Inst43 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<2265,2275,63>",(assertNull)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (error) != "undefined") {_RecordType("<2276,2281,63>",(error)); Inst44++; } } catch(e) {}
assertNull(error);

