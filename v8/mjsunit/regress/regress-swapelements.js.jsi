var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Check that modifying an array while sorting it does not segfault. See
// http://code.google.com/p/chromium/issues/detail?id=66099.

try { if (Inst0 <= 1000 && typeof (Item) != "undefined") {_RecordType("<1742,1746,31>",(Item)); Inst0++; } } catch(e) {}
function Item(val) {
try { if (Inst1 <= 1000 && typeof (val) != "undefined") {_RecordType("<1747,1750,31>",(val)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (val) != "undefined") {_RecordType("<1769,1772,32>",(val)); Inst3++; } } catch(e) {}
  this.value = val;
try { if (Inst2 <= 1000 && typeof (this.value) != "undefined") {_RecordType("<1756,1766,32>",(this.value)); Inst2++; } } catch(e) {}
}


var size = 23;
try { if (Inst4 <= 1000 && typeof (size) != "undefined") {_RecordType("<1782,1786,36>",(size)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1810,1815,37>",(Array)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (size) != "undefined") {_RecordType("<1816,1820,37>",(size)); Inst7++; } } catch(e) {}
var array1 = new Array(size);
try { if (Inst5 <= 1000 && typeof (array1) != "undefined") {_RecordType("<1797,1803,37>",(array1)); Inst5++; } } catch(e) {}


try { if (Inst8 <= 1000 && typeof (myToString) != "undefined") {_RecordType("<1834,1844,40>",(myToString)); Inst8++; } } catch(e) {}
function myToString() {
try { if (Inst9 <= 1000 && typeof (array1.splice) != "undefined") {_RecordType("<1851,1864,41>",(array1.splice)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array1) != "undefined") {_RecordType("<1851,1857,41>",(array1)); Inst10++; } } catch(e) {}
  array1.splice(0, 1);
try { if (Inst11 <= 1000 && typeof (this.value.toString) != "undefined") {_RecordType("<1881,1900,42>",(this.value.toString)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (this.value) != "undefined") {_RecordType("<1881,1891,42>",(this.value)); Inst12++; } } catch(e) {}
  return this.value.toString();
}


try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<1917,1921,46>",(test)); Inst13++; } } catch(e) {}
function test() {
  for (var i = 0; i < size; i++) {
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1937,1938,47>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1944,1945,47>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (size) != "undefined") {_RecordType("<1948,1952,47>",(size)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1954,1955,47>",(i)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Item) != "undefined") {_RecordType("<1981,1985,48>",(Item)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1986,1987,48>",(i)); Inst21++; } } catch(e) {}
    array1[i] = new Item(i);
try { if (Inst18 <= 1000 && typeof (array1[i]) != "undefined") {_RecordType("<1965,1974,48>",(array1[i])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (array1) != "undefined") {_RecordType("<1965,1971,48>",(array1)); Inst19++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (myToString) != "undefined") {_RecordType("<2015,2025,49>",(myToString)); Inst25++; } } catch(e) {}
    array1[i].toString = myToString;
try { if (Inst22 <= 1000 && typeof (array1[i].toString) != "undefined") {_RecordType("<1994,2012,49>",(array1[i].toString)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (array1[i]) != "undefined") {_RecordType("<1994,2003,49>",(array1[i])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (array1) != "undefined") {_RecordType("<1994,2000,49>",(array1)); Inst24++; } } catch(e) {}
  }
try { if (Inst26 <= 1000 && typeof (array1.sort) != "undefined") {_RecordType("<2033,2044,51>",(array1.sort)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (array1) != "undefined") {_RecordType("<2033,2039,51>",(array1)); Inst27++; } } catch(e) {}
  array1.sort();
}


try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<2052,2056,55>",(test)); Inst28++; } } catch(e) {}
test();

