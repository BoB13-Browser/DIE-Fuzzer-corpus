var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that using bind several time does not change the length of existing
// bound functions.

try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1704,1707,31>",(foo)); Inst0++; } } catch(e) {}
function foo() {
}

try { if (Inst2 <= 1000 && typeof (function (x) {}.bind) != "undefined") {_RecordType("<1724,1744,34>",(function (x) {}.bind)); Inst2++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1745,1748,34>",(foo)); Inst4++; } } catch(e) {}
var f1 = function (x) {}.bind(foo);
try { if (Inst1 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1719,1721,34>",(f1)); Inst1++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1734,1735,34>",(x)); Inst3++; } } catch(e) {}
var f2 = function () {};
try { if (Inst5 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1755,1757,35>",(f2)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1777,1789,37>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f1.length) != "undefined") {_RecordType("<1793,1802,37>",(f1.length)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1793,1795,37>",(f1)); Inst8++; } } catch(e) {}
assertEquals(1, f1.length);

// the object we bind to can be any object
try { if (Inst9 <= 1000 && typeof (f2.bind) != "undefined") {_RecordType("<1849,1856,40>",(f2.bind)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1849,1851,40>",(f2)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1857,1860,40>",(foo)); Inst11++; } } catch(e) {}
f2.bind(foo);

try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1864,1876,42>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f1.length) != "undefined") {_RecordType("<1880,1889,42>",(f1.length)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1880,1882,42>",(f1)); Inst14++; } } catch(e) {}
assertEquals(1, f1.length);

try { if (Inst16 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1904,1935,44>",(Object.getOwnPropertyDescriptor)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1904,1910,44>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1936,1938,44>",(f1)); Inst18++; } } catch(e) {}
var desc = Object.getOwnPropertyDescriptor(f1, 'length');
try { if (Inst15 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1897,1901,44>",(desc)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1951,1963,45>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (desc.writable) != "undefined") {_RecordType("<1971,1984,45>",(desc.writable)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (desc) != "undefined") {_RecordType("<1971,1975,45>",(desc)); Inst21++; } } catch(e) {}
assertEquals(false, desc.writable);
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1987,1999,46>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (desc.enumerable) != "undefined") {_RecordType("<2007,2022,46>",(desc.enumerable)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2007,2011,46>",(desc)); Inst24++; } } catch(e) {}
assertEquals(false, desc.enumerable);
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2025,2037,47>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (desc.configurable) != "undefined") {_RecordType("<2044,2061,47>",(desc.configurable)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (desc) != "undefined") {_RecordType("<2044,2048,47>",(desc)); Inst27++; } } catch(e) {}
assertEquals(true, desc.configurable);

try { if (Inst28 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2065,2086,49>",(Object.defineProperty)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2065,2071,49>",(Object)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2087,2089,49>",(f1)); Inst30++; } } catch(e) {}
Object.defineProperty(f1, 'length', {
  value: 'abc',
  writable: true
});
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2140,2152,53>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (f1.length) != "undefined") {_RecordType("<2160,2169,53>",(f1.length)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2160,2162,53>",(f1)); Inst33++; } } catch(e) {}
assertEquals('abc', f1.length);
f1.length = 42;
try { if (Inst34 <= 1000 && typeof (f1.length) != "undefined") {_RecordType("<2172,2181,54>",(f1.length)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2172,2174,54>",(f1)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2188,2200,55>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (f1.length) != "undefined") {_RecordType("<2205,2214,55>",(f1.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (f1) != "undefined") {_RecordType("<2205,2207,55>",(f1)); Inst38++; } } catch(e) {}
assertEquals(42, f1.length);

