var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Ensure extending an empty packed smi array with a double initializes the
// array with holes.
var a = [1,2,3];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1699,1700,30>",(a)); Inst0++; } } catch(e) {}
a.length = 0;
try { if (Inst1 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1712,1720,31>",(a.length)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1712,1713,31>",(a)); Inst2++; } } catch(e) {}
a[0] = 1.4;
try { if (Inst3 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1726,1730,32>",(a[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1726,1727,32>",(a)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1738,1750,33>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1756,1760,33>",(a[0])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1756,1757,33>",(a)); Inst7++; } } catch(e) {}
assertEquals(1.4, a[0]);
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1763,1775,34>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1776,1785,34>",(undefined)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a[1]) != "undefined") {_RecordType("<1787,1791,34>",(a[1])); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1787,1788,34>",(a)); Inst11++; } } catch(e) {}
assertEquals(undefined, a[1]);
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1794,1806,35>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1807,1816,35>",(undefined)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<1818,1822,35>",(a[2])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1818,1819,35>",(a)); Inst15++; } } catch(e) {}
assertEquals(undefined, a[2]);
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1825,1837,36>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1838,1847,36>",(undefined)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a[3]) != "undefined") {_RecordType("<1849,1853,36>",(a[3])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (a) != "undefined") {_RecordType("<1849,1850,36>",(a)); Inst19++; } } catch(e) {}
assertEquals(undefined, a[3]);

// Ensure the double array growstub initializes the array with holes.
try { if (Inst20 <= 1000 && typeof (grow_store) != "undefined") {_RecordType("<1936,1946,39>",(grow_store)); Inst20++; } } catch(e) {}
function grow_store(a,i,v) {
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1947,1948,39>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1949,1950,39>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (v) != "undefined") {_RecordType("<1951,1952,39>",(v)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (v) != "undefined") {_RecordType("<1965,1966,40>",(v)); Inst26++; } } catch(e) {}
  a[i] = v;
try { if (Inst24 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1958,1962,40>",(a[i])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a) != "undefined") {_RecordType("<1958,1959,40>",(a)); Inst25++; } } catch(e) {}
}

var a2 = [1.3];
try { if (Inst27 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1975,1977,43>",(a2)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (grow_store) != "undefined") {_RecordType("<1987,1997,44>",(grow_store)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1998,2000,44>",(a2)); Inst29++; } } catch(e) {}
grow_store(a2,1,1.4);
a2.length = 0;
try { if (Inst30 <= 1000 && typeof (a2.length) != "undefined") {_RecordType("<2009,2018,45>",(a2.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2009,2011,45>",(a2)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (grow_store) != "undefined") {_RecordType("<2024,2034,46>",(grow_store)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2035,2037,46>",(a2)); Inst33++; } } catch(e) {}
grow_store(a2,0,1.5);
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2046,2058,47>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a2[0]) != "undefined") {_RecordType("<2064,2069,47>",(a2[0])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2064,2066,47>",(a2)); Inst36++; } } catch(e) {}
assertEquals(1.5, a2[0]);
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2072,2084,48>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2085,2094,48>",(undefined)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (a2[1]) != "undefined") {_RecordType("<2096,2101,48>",(a2[1])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2096,2098,48>",(a2)); Inst40++; } } catch(e) {}
assertEquals(undefined, a2[1]);
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2104,2116,49>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2117,2126,49>",(undefined)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (a2[2]) != "undefined") {_RecordType("<2128,2133,49>",(a2[2])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2128,2130,49>",(a2)); Inst44++; } } catch(e) {}
assertEquals(undefined, a2[2]);
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2136,2148,50>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2149,2158,50>",(undefined)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (a2[3]) != "undefined") {_RecordType("<2160,2165,50>",(a2[3])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2160,2162,50>",(a2)); Inst48++; } } catch(e) {}
assertEquals(undefined, a2[3]);

// Check storing objects using the double grow stub.
var a3 = [1.3];
try { if (Inst49 <= 1000 && typeof (a3) != "undefined") {_RecordType("<2226,2228,53>",(a3)); Inst49++; } } catch(e) {}
var o = {};
try { if (Inst50 <= 1000 && typeof (o) != "undefined") {_RecordType("<2242,2243,54>",(o)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (grow_store) != "undefined") {_RecordType("<2250,2260,55>",(grow_store)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (a3) != "undefined") {_RecordType("<2261,2263,55>",(a3)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (o) != "undefined") {_RecordType("<2268,2269,55>",(o)); Inst53++; } } catch(e) {}
grow_store(a3, 1, o);
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2272,2284,56>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (a3[0]) != "undefined") {_RecordType("<2290,2295,56>",(a3[0])); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (a3) != "undefined") {_RecordType("<2290,2292,56>",(a3)); Inst56++; } } catch(e) {}
assertEquals(1.3, a3[0]);
try { if (Inst57 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2298,2310,57>",(assertEquals)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (o) != "undefined") {_RecordType("<2311,2312,57>",(o)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (a3[1]) != "undefined") {_RecordType("<2314,2319,57>",(a3[1])); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (a3) != "undefined") {_RecordType("<2314,2316,57>",(a3)); Inst60++; } } catch(e) {}
assertEquals(o, a3[1]);

// Ensure the double array growstub initializes the array with holes.
try { if (Inst61 <= 1000 && typeof (grow_store2) != "undefined") {_RecordType("<2402,2413,60>",(grow_store2)); Inst61++; } } catch(e) {}
function grow_store2(a,i,v) {
try { if (Inst62 <= 1000 && typeof (a) != "undefined") {_RecordType("<2414,2415,60>",(a)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (i) != "undefined") {_RecordType("<2416,2417,60>",(i)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (v) != "undefined") {_RecordType("<2418,2419,60>",(v)); Inst64++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (v) != "undefined") {_RecordType("<2432,2433,61>",(v)); Inst67++; } } catch(e) {}
  a[i] = v;
try { if (Inst65 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<2425,2429,61>",(a[i])); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (a) != "undefined") {_RecordType("<2425,2426,61>",(a)); Inst66++; } } catch(e) {}
}

var a4 = [1.3];
try { if (Inst68 <= 1000 && typeof (a4) != "undefined") {_RecordType("<2442,2444,64>",(a4)); Inst68++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (grow_store2) != "undefined") {_RecordType("<2454,2465,65>",(grow_store2)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (a4) != "undefined") {_RecordType("<2466,2468,65>",(a4)); Inst70++; } } catch(e) {}
grow_store2(a4,1,1.4);
a4.length = 0;
try { if (Inst71 <= 1000 && typeof (a4.length) != "undefined") {_RecordType("<2477,2486,66>",(a4.length)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (a4) != "undefined") {_RecordType("<2477,2479,66>",(a4)); Inst72++; } } catch(e) {}
try { if (Inst73 <= 1000 && typeof (grow_store2) != "undefined") {_RecordType("<2492,2503,67>",(grow_store2)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (a4) != "undefined") {_RecordType("<2504,2506,67>",(a4)); Inst74++; } } catch(e) {}
grow_store2(a4,0,1);
try { if (Inst75 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2513,2525,68>",(assertEquals)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (a4[0]) != "undefined") {_RecordType("<2529,2534,68>",(a4[0])); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (a4) != "undefined") {_RecordType("<2529,2531,68>",(a4)); Inst77++; } } catch(e) {}
assertEquals(1, a4[0]);
try { if (Inst78 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2537,2549,69>",(assertEquals)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2550,2559,69>",(undefined)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (a4[1]) != "undefined") {_RecordType("<2561,2566,69>",(a4[1])); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (a4) != "undefined") {_RecordType("<2561,2563,69>",(a4)); Inst81++; } } catch(e) {}
assertEquals(undefined, a4[1]);
try { if (Inst82 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2569,2581,70>",(assertEquals)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2582,2591,70>",(undefined)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (a4[2]) != "undefined") {_RecordType("<2593,2598,70>",(a4[2])); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (a4) != "undefined") {_RecordType("<2593,2595,70>",(a4)); Inst85++; } } catch(e) {}
assertEquals(undefined, a4[2]);
try { if (Inst86 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2601,2613,71>",(assertEquals)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2614,2623,71>",(undefined)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (a4[3]) != "undefined") {_RecordType("<2625,2630,71>",(a4[3])); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (a4) != "undefined") {_RecordType("<2625,2627,71>",(a4)); Inst89++; } } catch(e) {}
assertEquals(undefined, a4[3]);

