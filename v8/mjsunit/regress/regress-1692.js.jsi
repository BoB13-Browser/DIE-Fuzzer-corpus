var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that Object.prototype.propertyIsEnumerable handles array indices
// correctly.

try { if (Inst1 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<1694,1707,31>",(Object.create)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1694,1700,31>",(Object)); Inst2++; } } catch(e) {}
var p = Object.create({}, {
  a : { value : 42, enumerable : true },
  b : { value : 42, enumerable : false },
  1 : { value : 42, enumerable : true },
  2 : { value : 42, enumerable : false },
  f : { get: function(){}, enumerable: true },
  g : { get: function(){}, enumerable: false },
  11 : { get: function(){}, enumerable: true },
  12 : { get: function(){}, enumerable: false }
});
try { if (Inst0 <= 1000 && typeof (p) != "undefined") {_RecordType("<1690,1691,31>",(p)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Object.create) != "undefined") {_RecordType("<2083,2096,41>",(Object.create)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2083,2089,41>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<2097,2098,41>",(p)); Inst6++; } } catch(e) {}
var o = Object.create(p, {
  c : { value : 42, enumerable : true },
  d : { value : 42, enumerable : false },
  3 : { value : 42, enumerable : true },
  4 : { value : 42, enumerable : false },
  h : { get: function(){}, enumerable: true },
  k : { get: function(){}, enumerable: false },
  13 : { get: function(){}, enumerable: true },
  14 : { get: function(){}, enumerable: false }
});
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<2079,2080,41>",(o)); Inst3++; } } catch(e) {}

// Inherited properties are ignored.
try { if (Inst7 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2501,2512,53>",(assertFalse)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2513,2535,53>",(o.propertyIsEnumerable)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<2513,2514,53>",(o)); Inst9++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("a"));
try { if (Inst10 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2543,2554,54>",(assertFalse)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2555,2577,54>",(o.propertyIsEnumerable)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<2555,2556,54>",(o)); Inst12++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("b"));
try { if (Inst13 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2585,2596,55>",(assertFalse)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2597,2619,55>",(o.propertyIsEnumerable)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<2597,2598,55>",(o)); Inst15++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("1"));
try { if (Inst16 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2627,2638,56>",(assertFalse)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2639,2661,56>",(o.propertyIsEnumerable)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<2639,2640,56>",(o)); Inst18++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("2"));

// Own properties.
try { if (Inst19 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2689,2699,59>",(assertTrue)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2700,2722,59>",(o.propertyIsEnumerable)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<2700,2701,59>",(o)); Inst21++; } } catch(e) {}
assertTrue(o.propertyIsEnumerable("c"));
try { if (Inst22 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2730,2741,60>",(assertFalse)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2742,2764,60>",(o.propertyIsEnumerable)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<2742,2743,60>",(o)); Inst24++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("d"));
try { if (Inst25 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2772,2782,61>",(assertTrue)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2783,2805,61>",(o.propertyIsEnumerable)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<2783,2784,61>",(o)); Inst27++; } } catch(e) {}
assertTrue(o.propertyIsEnumerable("3"));
try { if (Inst28 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2813,2824,62>",(assertFalse)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2825,2847,62>",(o.propertyIsEnumerable)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o) != "undefined") {_RecordType("<2825,2826,62>",(o)); Inst30++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("4"));

// Inherited accessors.
try { if (Inst31 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2880,2891,65>",(assertFalse)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2892,2914,65>",(o.propertyIsEnumerable)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<2892,2893,65>",(o)); Inst33++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("f"));
try { if (Inst34 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2922,2933,66>",(assertFalse)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2934,2956,66>",(o.propertyIsEnumerable)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o) != "undefined") {_RecordType("<2934,2935,66>",(o)); Inst36++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("g"));
try { if (Inst37 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2964,2975,67>",(assertFalse)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<2976,2998,67>",(o.propertyIsEnumerable)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (o) != "undefined") {_RecordType("<2976,2977,67>",(o)); Inst39++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("11"));
try { if (Inst40 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3007,3018,68>",(assertFalse)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3019,3041,68>",(o.propertyIsEnumerable)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o) != "undefined") {_RecordType("<3019,3020,68>",(o)); Inst42++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("12"));

// Own accessors.
try { if (Inst43 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3069,3079,71>",(assertTrue)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3080,3102,71>",(o.propertyIsEnumerable)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (o) != "undefined") {_RecordType("<3080,3081,71>",(o)); Inst45++; } } catch(e) {}
assertTrue(o.propertyIsEnumerable("h"));
try { if (Inst46 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3110,3121,72>",(assertFalse)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3122,3144,72>",(o.propertyIsEnumerable)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (o) != "undefined") {_RecordType("<3122,3123,72>",(o)); Inst48++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("k"));
try { if (Inst49 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3152,3162,73>",(assertTrue)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3163,3185,73>",(o.propertyIsEnumerable)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (o) != "undefined") {_RecordType("<3163,3164,73>",(o)); Inst51++; } } catch(e) {}
assertTrue(o.propertyIsEnumerable("13"));
try { if (Inst52 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3194,3205,74>",(assertFalse)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3206,3228,74>",(o.propertyIsEnumerable)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (o) != "undefined") {_RecordType("<3206,3207,74>",(o)); Inst54++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("14"));

// Nonexisting properties.
try { if (Inst55 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3265,3276,77>",(assertFalse)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3277,3299,77>",(o.propertyIsEnumerable)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (o) != "undefined") {_RecordType("<3277,3278,77>",(o)); Inst57++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("xxx"));
try { if (Inst58 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<3309,3320,78>",(assertFalse)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3321,3343,78>",(o.propertyIsEnumerable)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (o) != "undefined") {_RecordType("<3321,3322,78>",(o)); Inst60++; } } catch(e) {}
assertFalse(o.propertyIsEnumerable("999"));

// String object properties.
try { if (Inst62 <= 1000 && typeof (Object) != "undefined") {_RecordType("<3391,3397,81>",(Object)); Inst62++; } } catch(e) {}
var o = Object("string");
try { if (Inst61 <= 1000 && typeof (o) != "undefined") {_RecordType("<3387,3388,81>",(o)); Inst61++; } } catch(e) {}
// Non-string property on String object.
o[10] = 42;
try { if (Inst63 <= 1000 && typeof (o[10]) != "undefined") {_RecordType("<3450,3455,83>",(o[10])); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (o) != "undefined") {_RecordType("<3450,3451,83>",(o)); Inst64++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3462,3472,84>",(assertTrue)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3473,3495,84>",(o.propertyIsEnumerable)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (o) != "undefined") {_RecordType("<3473,3474,84>",(o)); Inst67++; } } catch(e) {}
assertTrue(o.propertyIsEnumerable(10));
try { if (Inst68 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3502,3512,85>",(assertTrue)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3513,3535,85>",(o.propertyIsEnumerable)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (o) != "undefined") {_RecordType("<3513,3514,85>",(o)); Inst70++; } } catch(e) {}
assertTrue(o.propertyIsEnumerable(0));

// Fast elements.
var o = [1,2,3,4,5];
try { if (Inst71 <= 1000 && typeof (o) != "undefined") {_RecordType("<3564,3565,88>",(o)); Inst71++; } } catch(e) {}
try { if (Inst72 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3581,3591,89>",(assertTrue)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (o.propertyIsEnumerable) != "undefined") {_RecordType("<3592,3614,89>",(o.propertyIsEnumerable)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (o) != "undefined") {_RecordType("<3592,3593,89>",(o)); Inst74++; } } catch(e) {}
assertTrue(o.propertyIsEnumerable(3));

