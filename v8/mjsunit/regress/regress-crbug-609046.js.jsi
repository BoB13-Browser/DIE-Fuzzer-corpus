var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

// Test that hidden scopes are correctly walked in the scope chain.

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<284,295,9>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<284,289,9>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<276,281,9>",(Debug)); Inst0++; } } catch(e) {}
var exception = null;
try { if (Inst3 <= 1000 && typeof (exception) != "undefined") {_RecordType("<301,310,10>",(exception)); Inst3++; } } catch(e) {}
var delegate = null;
try { if (Inst4 <= 1000 && typeof (delegate) != "undefined") {_RecordType("<323,331,11>",(delegate)); Inst4++; } } catch(e) {}
var done = false;
try { if (Inst5 <= 1000 && typeof (done) != "undefined") {_RecordType("<344,348,12>",(done)); Inst5++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (listener) != "undefined") {_RecordType("<368,376,14>",(listener)); Inst6++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst7 <= 1000 && typeof (event) != "undefined") {_RecordType("<377,382,14>",(event)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<384,394,14>",(exec_state)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<396,406,14>",(event_data)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (data) != "undefined") {_RecordType("<408,412,14>",(data)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (event) != "undefined") {_RecordType("<422,427,15>",(event)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<431,453,15>",(Debug.DebugEvent.Break)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<431,447,15>",(Debug.DebugEvent)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<431,436,15>",(Debug)); Inst14++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<704,705,22>",(e)); Inst33++; } } catch(e) {}
  try {
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<475,487,17>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (debug.ScopeType.Block) != "undefined") {_RecordType("<490,511,17>",(debug.ScopeType.Block)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (debug.ScopeType) != "undefined") {_RecordType("<490,505,17>",(debug.ScopeType)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (debug) != "undefined") {_RecordType("<490,495,17>",(debug)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (debug.ScopeType.Script) != "undefined") {_RecordType("<532,554,18>",(debug.ScopeType.Script)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (debug.ScopeType) != "undefined") {_RecordType("<532,547,18>",(debug.ScopeType)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (debug) != "undefined") {_RecordType("<532,537,18>",(debug)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (debug.ScopeType.Global) != "undefined") {_RecordType("<575,597,19>",(debug.ScopeType.Global)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (debug.ScopeType) != "undefined") {_RecordType("<575,590,19>",(debug.ScopeType)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (debug) != "undefined") {_RecordType("<575,580,19>",(debug)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (exec_state.frame(0).allScopes().map) != "undefined") {_RecordType("<618,653,20>",(exec_state.frame(0).allScopes().map)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (exec_state.frame(0).allScopes) != "undefined") {_RecordType("<618,647,20>",(exec_state.frame(0).allScopes)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<618,634,20>",(exec_state.frame)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<618,628,20>",(exec_state)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (s) != "undefined") {_RecordType("<654,655,20>",(s)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (s.scopeType) != "undefined") {_RecordType("<659,670,20>",(s.scopeType)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (s) != "undefined") {_RecordType("<659,660,20>",(s)); Inst31++; } } catch(e) {}
    assertEquals([ debug.ScopeType.Block,
                   debug.ScopeType.Script,
                   debug.ScopeType.Global ],
                 exec_state.frame(0).allScopes().map(s => s.scopeType()));
    done = true;
try { if (Inst32 <= 1000 && typeof (done) != "undefined") {_RecordType("<680,684,21>",(done)); Inst32++; } } catch(e) {}
  } catch (e) {
try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<725,726,23>",(e)); Inst35++; } } catch(e) {}
    exception = e;
try { if (Inst34 <= 1000 && typeof (exception) != "undefined") {_RecordType("<713,722,23>",(exception)); Inst34++; } } catch(e) {}
  }
}

try { if (Inst36 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<735,752,27>",(Debug.setListener)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<735,740,27>",(Debug)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (listener) != "undefined") {_RecordType("<753,761,27>",(listener)); Inst38++; } } catch(e) {}
Debug.setListener(listener);

for(let a = 0; a < 3; a++) {
try { if (Inst39 <= 1000 && typeof (a) != "undefined") {_RecordType("<773,774,29>",(a)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (a) != "undefined") {_RecordType("<780,781,29>",(a)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a) != "undefined") {_RecordType("<787,788,29>",(a)); Inst41++; } } catch(e) {}
  debugger;
try { if (Inst42 <= 1000 && typeof (eval) != "undefined") {_RecordType("<808,812,31>",(eval)); Inst42++; } } catch(e) {}
  eval();  // Force context-allocation of everything.
}

try { if (Inst43 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<863,880,34>",(Debug.setListener)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<863,868,34>",(Debug)); Inst44++; } } catch(e) {}
Debug.setListener(null);
try { if (Inst45 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<888,898,35>",(assertNull)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (exception) != "undefined") {_RecordType("<899,908,35>",(exception)); Inst46++; } } catch(e) {}
assertNull(exception);
try { if (Inst47 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<911,921,36>",(assertTrue)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (done) != "undefined") {_RecordType("<922,926,36>",(done)); Inst48++; } } catch(e) {}
assertTrue(done);

