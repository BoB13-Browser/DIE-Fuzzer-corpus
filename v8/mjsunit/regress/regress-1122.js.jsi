var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that we can handle function calls with up to 32766 arguments, and
// that function calls with more arguments throw an exception.  Apply a
// similar limit to the number of function parameters.

// See http://code.google.com/p/v8/issues/detail?id=1122 and
// http://code.google.com/p/v8/issues/detail?id=1413.

try { if (Inst0 <= 1000 && typeof (function_with_n_params_and_m_args) != "undefined") {_RecordType("<1925,1958,35>",(function_with_n_params_and_m_args)); Inst0++; } } catch(e) {}
function function_with_n_params_and_m_args(n, m) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<1959,1960,35>",(n)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (m) != "undefined") {_RecordType("<1962,1963,35>",(m)); Inst2++; } } catch(e) {}
  test_prefix = 'prefix ';
try { if (Inst3 <= 1000 && typeof (test_prefix) != "undefined") {_RecordType("<1969,1980,36>",(test_prefix)); Inst3++; } } catch(e) {}
  test_suffix = ' suffix';
try { if (Inst4 <= 1000 && typeof (test_suffix) != "undefined") {_RecordType("<1996,2007,37>",(test_suffix)); Inst4++; } } catch(e) {}
  var source = 'test_prefix + (function f(';
try { if (Inst5 <= 1000 && typeof (source) != "undefined") {_RecordType("<2027,2033,38>",(source)); Inst5++; } } catch(e) {}
  for (var arg = 0; arg < n ; arg++) {
try { if (Inst6 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2077,2080,39>",(arg)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2086,2089,39>",(arg)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (n) != "undefined") {_RecordType("<2092,2093,39>",(n)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2096,2099,39>",(arg)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2113,2116,40>",(arg)); Inst10++; } } catch(e) {}
    if (arg != 0) source += ',';
try { if (Inst11 <= 1000 && typeof (source) != "undefined") {_RecordType("<2123,2129,40>",(source)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2160,2163,41>",(arg)); Inst13++; } } catch(e) {}
    source += 'arg' + arg;
try { if (Inst12 <= 1000 && typeof (source) != "undefined") {_RecordType("<2142,2148,41>",(source)); Inst12++; } } catch(e) {}
  }
try { if (Inst15 <= 1000 && typeof (n) != "undefined") {_RecordType("<2201,2202,43>",(n)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (n) != "undefined") {_RecordType("<2205,2206,43>",(n)); Inst16++; } } catch(e) {}
  source += ') { return arg' + (n - n % 2) / 2 + '; })(';
try { if (Inst14 <= 1000 && typeof (source) != "undefined") {_RecordType("<2171,2177,43>",(source)); Inst14++; } } catch(e) {}
  for (var arg = 0; arg < m ; arg++) {
try { if (Inst17 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2238,2241,44>",(arg)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2247,2250,44>",(arg)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (m) != "undefined") {_RecordType("<2253,2254,44>",(m)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2257,2260,44>",(arg)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2274,2277,45>",(arg)); Inst21++; } } catch(e) {}
    if (arg != 0) source += ',';
try { if (Inst22 <= 1000 && typeof (source) != "undefined") {_RecordType("<2284,2290,45>",(source)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2313,2316,46>",(arg)); Inst24++; } } catch(e) {}
    source += arg;
try { if (Inst23 <= 1000 && typeof (source) != "undefined") {_RecordType("<2303,2309,46>",(source)); Inst23++; } } catch(e) {}
  }
  source += ') + test_suffix';
try { if (Inst25 <= 1000 && typeof (source) != "undefined") {_RecordType("<2324,2330,48>",(source)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2362,2366,49>",(eval)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (source) != "undefined") {_RecordType("<2367,2373,49>",(source)); Inst27++; } } catch(e) {}
  return eval(source);
}

try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2379,2391,52>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (function_with_n_params_and_m_args) != "undefined") {_RecordType("<2427,2460,53>",(function_with_n_params_and_m_args)); Inst29++; } } catch(e) {}
assertEquals('prefix 4000 suffix',
             function_with_n_params_and_m_args(8000, 8000));
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2475,2487,54>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (function_with_n_params_and_m_args) != "undefined") {_RecordType("<2523,2556,55>",(function_with_n_params_and_m_args)); Inst31++; } } catch(e) {}
assertEquals('prefix 3000 suffix',
             function_with_n_params_and_m_args(6000, 8000));
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2571,2583,56>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (function_with_n_params_and_m_args) != "undefined") {_RecordType("<2619,2652,57>",(function_with_n_params_and_m_args)); Inst33++; } } catch(e) {}
assertEquals('prefix 5000 suffix',
             function_with_n_params_and_m_args(10000, 8000));
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2668,2680,58>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (function_with_n_params_and_m_args) != "undefined") {_RecordType("<2716,2749,59>",(function_with_n_params_and_m_args)); Inst35++; } } catch(e) {}
assertEquals('prefix 9000 suffix',
             function_with_n_params_and_m_args(18000, 18000));
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2766,2778,60>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (function_with_n_params_and_m_args) != "undefined") {_RecordType("<2815,2848,61>",(function_with_n_params_and_m_args)); Inst37++; } } catch(e) {}
assertEquals('prefix 16000 suffix',
             function_with_n_params_and_m_args(32000, 32000));
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2865,2877,62>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (function_with_n_params_and_m_args) != "undefined") {_RecordType("<2918,2951,63>",(function_with_n_params_and_m_args)); Inst39++; } } catch(e) {}
assertEquals('prefix undefined suffix',
             function_with_n_params_and_m_args(32000, 10000));

try { if (Inst40 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2969,2981,65>",(assertThrows)); Inst40++; } } catch(e) {}
assertThrows("function_with_n_params_and_m_args(66000, 30000)");
try { if (Inst41 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3034,3046,66>",(assertThrows)); Inst41++; } } catch(e) {}
assertThrows("function_with_n_params_and_m_args(30000, 66000)");

