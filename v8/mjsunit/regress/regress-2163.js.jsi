var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-gc

// Handy abbreviation.
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1653,1674,31>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1653,1659,31>",(Object)); Inst2++; } } catch(e) {}
var dp = Object.defineProperty;
try { if (Inst0 <= 1000 && typeof (dp) != "undefined") {_RecordType("<1648,1650,31>",(dp)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (getter) != "undefined") {_RecordType("<1686,1692,33>",(getter)); Inst3++; } } catch(e) {}
function getter() { return 111; }
try { if (Inst4 <= 1000 && typeof (setter) != "undefined") {_RecordType("<1720,1726,34>",(setter)); Inst4++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (print) != "undefined") {_RecordType("<1732,1737,34>",(print)); Inst6++; } } catch(e) {}
function setter(x) { print(222); }
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<1727,1728,34>",(x)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (anotherGetter) != "undefined") {_RecordType("<1755,1768,35>",(anotherGetter)); Inst7++; } } catch(e) {}
function anotherGetter() { return 333; }
try { if (Inst8 <= 1000 && typeof (anotherSetter) != "undefined") {_RecordType("<1796,1809,36>",(anotherSetter)); Inst8++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (print) != "undefined") {_RecordType("<1815,1820,36>",(print)); Inst10++; } } catch(e) {}
function anotherSetter(x) { print(444); }
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1810,1811,36>",(x)); Inst9++; } } catch(e) {}
var obj1, obj2;
try { if (Inst11 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<1833,1837,37>",(obj1)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<1839,1843,37>",(obj2)); Inst12++; } } catch(e) {}

// obj1 and obj2 share the getter accessor.
obj1 = {};
try { if (Inst13 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<1890,1894,40>",(obj1)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (dp) != "undefined") {_RecordType("<1901,1903,41>",(dp)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<1904,1908,41>",(obj1)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (getter) != "undefined") {_RecordType("<1926,1932,41>",(getter)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (setter) != "undefined") {_RecordType("<1939,1945,41>",(setter)); Inst17++; } } catch(e) {}
dp(obj1, "alpha", { get: getter, set: setter });
obj2 = {}
try { if (Inst18 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<1950,1954,42>",(obj2)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (dp) != "undefined") {_RecordType("<1960,1962,43>",(dp)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<1963,1967,43>",(obj2)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (getter) != "undefined") {_RecordType("<1985,1991,43>",(getter)); Inst21++; } } catch(e) {}
dp(obj2, "alpha", { get: getter });
obj1 = {};
try { if (Inst22 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<1996,2000,44>",(obj1)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2007,2019,45>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (obj2.alpha) != "undefined") {_RecordType("<2025,2035,45>",(obj2.alpha)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2025,2029,45>",(obj2)); Inst25++; } } catch(e) {}
assertEquals(111, obj2.alpha);
try { if (Inst26 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2038,2040,46>",(gc)); Inst26++; } } catch(e) {}
gc();
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2044,2056,47>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (obj2.alpha) != "undefined") {_RecordType("<2062,2072,47>",(obj2.alpha)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2062,2066,47>",(obj2)); Inst29++; } } catch(e) {}
assertEquals(111, obj2.alpha);

// obj1, obj2, and obj3 share the getter accessor.
obj1 = {};
try { if (Inst30 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2127,2131,50>",(obj1)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (dp) != "undefined") {_RecordType("<2138,2140,51>",(dp)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2141,2145,51>",(obj1)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (getter) != "undefined") {_RecordType("<2163,2169,51>",(getter)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (setter) != "undefined") {_RecordType("<2176,2182,51>",(setter)); Inst34++; } } catch(e) {}
dp(obj1, "alpha", { get: getter, set: setter });
obj2 = {}
try { if (Inst35 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2187,2191,52>",(obj2)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (dp) != "undefined") {_RecordType("<2197,2199,53>",(dp)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2200,2204,53>",(obj2)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (getter) != "undefined") {_RecordType("<2222,2228,53>",(getter)); Inst38++; } } catch(e) {}
dp(obj2, "alpha", { get: getter });
obj1 = {};
try { if (Inst39 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2233,2237,54>",(obj1)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2244,2246,55>",(gc)); Inst40++; } } catch(e) {}
gc();
obj3 = {}
try { if (Inst41 <= 1000 && typeof (obj3) != "undefined") {_RecordType("<2250,2254,56>",(obj3)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (dp) != "undefined") {_RecordType("<2260,2262,57>",(dp)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (obj3) != "undefined") {_RecordType("<2263,2267,57>",(obj3)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (getter) != "undefined") {_RecordType("<2285,2291,57>",(getter)); Inst44++; } } catch(e) {}
dp(obj3, "alpha", { get: getter });


// obj1 and obj2 share the getter and setter accessor.
obj1 = {};
try { if (Inst45 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2353,2357,61>",(obj1)); Inst45++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (dp) != "undefined") {_RecordType("<2364,2366,62>",(dp)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2367,2371,62>",(obj1)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (getter) != "undefined") {_RecordType("<2389,2395,62>",(getter)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (setter) != "undefined") {_RecordType("<2402,2408,62>",(setter)); Inst49++; } } catch(e) {}
dp(obj1, "alpha", { get: getter, set: setter });
obj1.beta = 10;
try { if (Inst50 <= 1000 && typeof (obj1.beta) != "undefined") {_RecordType("<2413,2422,63>",(obj1.beta)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2413,2417,63>",(obj1)); Inst51++; } } catch(e) {}
obj2 = {}
try { if (Inst52 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2429,2433,64>",(obj2)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (dp) != "undefined") {_RecordType("<2439,2441,65>",(dp)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2442,2446,65>",(obj2)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (getter) != "undefined") {_RecordType("<2464,2470,65>",(getter)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (setter) != "undefined") {_RecordType("<2477,2483,65>",(setter)); Inst56++; } } catch(e) {}
dp(obj2, "alpha", { get: getter, set: setter });
obj1 = {};
try { if (Inst57 <= 1000 && typeof (obj1) != "undefined") {_RecordType("<2488,2492,66>",(obj1)); Inst57++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2499,2511,67>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (obj2.alpha) != "undefined") {_RecordType("<2517,2527,67>",(obj2.alpha)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2517,2521,67>",(obj2)); Inst60++; } } catch(e) {}
assertEquals(111, obj2.alpha);
try { if (Inst61 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2530,2532,68>",(gc)); Inst61++; } } catch(e) {}
gc();
obj2.alpha = 100
try { if (Inst62 <= 1000 && typeof (obj2.alpha) != "undefined") {_RecordType("<2536,2546,69>",(obj2.alpha)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2536,2540,69>",(obj2)); Inst63++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2553,2565,70>",(assertEquals)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (obj2.alpha) != "undefined") {_RecordType("<2571,2581,70>",(obj2.alpha)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (obj2) != "undefined") {_RecordType("<2571,2575,70>",(obj2)); Inst66++; } } catch(e) {}
assertEquals(111, obj2.alpha);

