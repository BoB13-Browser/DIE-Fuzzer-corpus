var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// In ES#sec-array.prototype.concat
// When concat makes a new integer-indexed exotic object, the resulting properties
// are non-configurable and cannot have CreateDataPropertyOrThrow called on them,
// so it throws a TypeError on failure to make a new property.

try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<445,455,10>",(Uint8Array)); Inst1++; } } catch(e) {}
__v_0 = new Uint8Array(100);
try { if (Inst0 <= 1000 && typeof (__v_0) != "undefined") {_RecordType("<433,438,10>",(__v_0)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Array) != "undefined") {_RecordType("<474,479,11>",(Array)); Inst3++; } } catch(e) {}
array = new Array(10);
try { if (Inst2 <= 1000 && typeof (array) != "undefined") {_RecordType("<462,467,11>",(array)); Inst2++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (__v_0) != "undefined") {_RecordType("<503,508,12>",(__v_0)); Inst6++; } } catch(e) {}
array.__proto__ = __v_0;
try { if (Inst4 <= 1000 && typeof (array.__proto__) != "undefined") {_RecordType("<485,500,12>",(array.__proto__)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (array) != "undefined") {_RecordType("<485,490,12>",(array)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<510,522,13>",(assertThrows)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<529,556,13>",(Array.prototype.concat.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<529,551,13>",(Array.prototype.concat)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<529,544,13>",(Array.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Array) != "undefined") {_RecordType("<529,534,13>",(Array)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<557,562,13>",(array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<565,574,13>",(TypeError)); Inst13++; } } catch(e) {}
assertThrows(() => Array.prototype.concat.call(array), TypeError);

