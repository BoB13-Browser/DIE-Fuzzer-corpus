var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug

// If a function parameter is forced to be context allocated,
// debug evaluate need to resolve it to a context slot instead of
// parameter slot on the stack.

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1806,1817,34>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1806,1811,34>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1798,1803,34>",(Debug)); Inst0++; } } catch(e) {}

var expected;
try { if (Inst3 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1824,1832,36>",(expected)); Inst3++; } } catch(e) {}
var exception = null;
try { if (Inst4 <= 1000 && typeof (exception) != "undefined") {_RecordType("<1838,1847,37>",(exception)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1866,1874,39>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<1875,1880,39>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1882,1892,39>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1894,1904,39>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1906,1910,39>",(data)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<1920,1925,40>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<1929,1951,40>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1929,1945,40>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1929,1934,40>",(Debug)); Inst13++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<2123,2124,44>",(e)); Inst23++; } } catch(e) {}
  try {
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1973,1985,42>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1986,1994,42>",(expected)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state.frame(0).evaluate('arg').value) != "undefined") {_RecordType("<1996,2037,42>",(exec_state.frame(0).evaluate('arg').value)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<1996,2024,42>",(exec_state.frame(0).evaluate)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<1996,2012,42>",(exec_state.frame)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1996,2006,42>",(exec_state)); Inst19++; } } catch(e) {}
    assertEquals(expected, exec_state.frame(0).evaluate('arg').value());
try { if (Inst20 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<2046,2074,43>",(exec_state.frame(0).evaluate)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<2046,2062,43>",(exec_state.frame)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2046,2056,43>",(exec_state)); Inst22++; } } catch(e) {}
    exec_state.frame(0).evaluate('arg = "evaluated";');  // no effect
  } catch (e) {
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<2144,2145,45>",(e)); Inst25++; } } catch(e) {}
    exception = e;
try { if (Inst24 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2132,2141,45>",(exception)); Inst24++; } } catch(e) {}
  }
}

try { if (Inst26 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2154,2171,49>",(Debug.setListener)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2154,2159,49>",(Debug)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2172,2180,49>",(listener)); Inst28++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<2193,2194,51>",(f)); Inst29++; } } catch(e) {}
function f(arg) {
try { if (Inst30 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2195,2198,51>",(arg)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2215,2218,52>",(arg)); Inst32++; } } catch(e) {}
  expected = arg;
try { if (Inst31 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2204,2212,52>",(expected)); Inst31++; } } catch(e) {}
  debugger;
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2234,2246,54>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2260,2263,54>",(arg)); Inst34++; } } catch(e) {}
  assertEquals("evaluated", arg);

  arg = "value";
try { if (Inst35 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2269,2272,56>",(arg)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2297,2300,57>",(arg)); Inst37++; } } catch(e) {}
  expected = arg;
try { if (Inst36 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2286,2294,57>",(expected)); Inst36++; } } catch(e) {}
  debugger;
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2316,2328,59>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2342,2345,59>",(arg)); Inst39++; } } catch(e) {}
  assertEquals("evaluated", arg);

  // Forces arg to be context allocated even though a parameter.
try { if (Inst40 <= 1000 && typeof (g) != "undefined") {_RecordType("<2425,2426,62>",(g)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (arg) != "undefined") {_RecordType("<2431,2434,62>",(arg)); Inst41++; } } catch(e) {}
  function g() { arg; }
}

try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<2441,2442,65>",(f)); Inst42++; } } catch(e) {}
f();
try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<2446,2447,66>",(f)); Inst43++; } } catch(e) {}
f(1);
try { if (Inst44 <= 1000 && typeof (f) != "undefined") {_RecordType("<2452,2453,67>",(f)); Inst44++; } } catch(e) {}
f(1, 2);

try { if (Inst45 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<2462,2472,69>",(assertNull)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2473,2482,69>",(exception)); Inst46++; } } catch(e) {}
assertNull(exception);

