var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1607,1610,28>",(foo)); Inst0++; } } catch(e) {}
function foo(a) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1611,1612,28>",(a)); Inst1++; } } catch(e) {}
  for (var i = 0; i < 100; ++i)
try { if (Inst6 <= 1000 && typeof (String) != "undefined") {_RecordType("<1660,1666,30>",(String)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1667,1668,30>",(a)); Inst7++; } } catch(e) {}
    a = new String(a);
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1627,1628,29>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1634,1635,29>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1645,1646,29>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1652,1653,30>",(a)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<1680,1681,31>",(a)); Inst8++; } } catch(e) {}
  return a;
}

var expected = "hello";
try { if (Inst9 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1690,1698,34>",(expected)); Inst9++; } } catch(e) {}
for (var i = 0; i < 4; ++i) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1719,1720,35>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1726,1727,35>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<1735,1736,35>",(i)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1746,1747,36>",(i)); Inst13++; } } catch(e) {}
  if (i == 2) {
    String.prototype.valueOf = function() { return 42; }
try { if (Inst14 <= 1000 && typeof (String.prototype.valueOf) != "undefined") {_RecordType("<1760,1784,37>",(String.prototype.valueOf)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<1760,1776,37>",(String.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (String) != "undefined") {_RecordType("<1760,1766,37>",(String)); Inst16++; } } catch(e) {}
    expected = "42";
try { if (Inst17 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1817,1825,38>",(expected)); Inst17++; } } catch(e) {}
  }
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1840,1852,40>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1853,1861,40>",(expected)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1868,1871,40>",(foo)); Inst20++; } } catch(e) {}
  assertEquals(expected, "" + foo("hello"));
}

// Make sure we look up "valueOf" only once.
var count = 0;
try { if (Inst21 <= 1000 && typeof (count) != "undefined") {_RecordType("<1935,1940,44>",(count)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (String) != "undefined") {_RecordType("<1958,1964,45>",(String)); Inst23++; } } catch(e) {}
var x = new String("foo");
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1950,1951,45>",(x)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<1973,1994,46>",(Object.defineProperty)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1973,1979,46>",(Object)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1995,1996,46>",(x)); Inst26++; } } catch(e) {}
Object.defineProperty(x, "valueOf",
    { get: function() {
try { if (Inst27 <= 1000 && typeof (count) != "undefined") {_RecordType("<2046,2051,48>",(count)); Inst27++; } } catch(e) {}
             count++;
             return function() {
                      return 11;
                    }
           }
    });
for (var i = 0; i < 3; i++) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<2173,2174,54>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2180,2181,54>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2187,2188,54>",(i)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2196,2208,55>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<2220,2221,55>",(x)); Inst32++; } } catch(e) {}
  assertEquals("11", "" + x);
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2226,2238,56>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2239,2240,56>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (count) != "undefined") {_RecordType("<2246,2251,56>",(count)); Inst35++; } } catch(e) {}
  assertEquals(i + 1, count);
}

