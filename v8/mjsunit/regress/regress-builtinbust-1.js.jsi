var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (nope) != "undefined") {_RecordType("<177,181,5>",(nope)); Inst0++; } } catch(e) {}
function nope() { return false; }
var a = [ 1, 2, 3 ];
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<206,207,6>",(a)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Object.seal) != "undefined") {_RecordType("<223,234,7>",(Object.seal)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<223,229,7>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<235,236,7>",(a)); Inst4++; } } catch(e) {}
Object.seal(a);
try { if (Inst7 <= 1000 && typeof (nope) != "undefined") {_RecordType("<257,261,8>",(nope)); Inst7++; } } catch(e) {}
Object.isSealed = nope;
try { if (Inst5 <= 1000 && typeof (Object.isSealed) != "undefined") {_RecordType("<239,254,8>",(Object.isSealed)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object) != "undefined") {_RecordType("<239,245,8>",(Object)); Inst6++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<264,276,10>",(assertThrows)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a.pop) != "undefined") {_RecordType("<290,295,10>",(a.pop)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<290,291,10>",(a)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<302,311,10>",(TypeError)); Inst11++; } } catch(e) {}
assertThrows(function() { a.pop(); }, TypeError);
try { if (Inst12 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<314,326,11>",(assertThrows)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<340,346,11>",(a.push)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<340,341,11>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<354,363,11>",(TypeError)); Inst15++; } } catch(e) {}
assertThrows(function() { a.push(5); }, TypeError);
try { if (Inst16 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<366,378,12>",(assertThrows)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (a.shift) != "undefined") {_RecordType("<392,399,12>",(a.shift)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<392,393,12>",(a)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<406,415,12>",(TypeError)); Inst19++; } } catch(e) {}
assertThrows(function() { a.shift(); }, TypeError);
try { if (Inst20 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<418,430,13>",(assertThrows)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a.unshift) != "undefined") {_RecordType("<444,453,13>",(a.unshift)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<444,445,13>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<461,470,13>",(TypeError)); Inst23++; } } catch(e) {}
assertThrows(function() { a.unshift(5); }, TypeError);
try { if (Inst24 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<473,485,14>",(assertThrows)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (a.splice) != "undefined") {_RecordType("<499,507,14>",(a.splice)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (a) != "undefined") {_RecordType("<499,500,14>",(a)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<518,527,14>",(TypeError)); Inst27++; } } catch(e) {}
assertThrows(function() { a.splice(0, 1); }, TypeError);

