var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var r = /[^\u{1}-\u{1000}\u{1002}-\u{2000}]/u;
try { if (Inst0 <= 1000 && typeof (r) != "undefined") {_RecordType("<172,173,5>",(r)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<215,225,6>",(assertTrue)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (r.test) != "undefined") {_RecordType("<226,232,6>",(r.test)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (r) != "undefined") {_RecordType("<226,227,6>",(r)); Inst3++; } } catch(e) {}
assertTrue(r.test("\u{0}"));
try { if (Inst4 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<244,255,7>",(assertFalse)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (r.test) != "undefined") {_RecordType("<256,262,7>",(r.test)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (r) != "undefined") {_RecordType("<256,257,7>",(r)); Inst6++; } } catch(e) {}
assertFalse(r.test("\u{1}"));
try { if (Inst7 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<274,285,8>",(assertFalse)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (r.test) != "undefined") {_RecordType("<286,292,8>",(r.test)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (r) != "undefined") {_RecordType("<286,287,8>",(r)); Inst9++; } } catch(e) {}
assertFalse(r.test("\u{1000}"));
try { if (Inst10 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<307,317,9>",(assertTrue)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (r.test) != "undefined") {_RecordType("<318,324,9>",(r.test)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (r) != "undefined") {_RecordType("<318,319,9>",(r)); Inst12++; } } catch(e) {}
assertTrue(r.test("\u{1001}"));
try { if (Inst13 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<339,350,10>",(assertFalse)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (r.test) != "undefined") {_RecordType("<351,357,10>",(r.test)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (r) != "undefined") {_RecordType("<351,352,10>",(r)); Inst15++; } } catch(e) {}
assertFalse(r.test("\u{1002}"));
try { if (Inst16 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<372,383,11>",(assertFalse)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (r.test) != "undefined") {_RecordType("<384,390,11>",(r.test)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (r) != "undefined") {_RecordType("<384,385,11>",(r)); Inst18++; } } catch(e) {}
assertFalse(r.test("\u{2000}"));
try { if (Inst19 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<405,415,12>",(assertTrue)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (r.test) != "undefined") {_RecordType("<416,422,12>",(r.test)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (r) != "undefined") {_RecordType("<416,417,12>",(r)); Inst21++; } } catch(e) {}
assertTrue(r.test("\u{2001}"));

