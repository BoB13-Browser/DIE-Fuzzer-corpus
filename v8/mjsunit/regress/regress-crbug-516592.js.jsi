var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst1 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<176,184,5>",(Math.pow)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<176,180,5>",(Math)); Inst2++; } } catch(e) {}
var i = Math.pow(2, 31);
try { if (Inst0 <= 1000 && typeof (i) != "undefined") {_RecordType("<172,173,5>",(i)); Inst0++; } } catch(e) {}
var a = [];
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<197,198,6>",(a)); Inst3++; } } catch(e) {}
a[i] = 31;
try { if (Inst4 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<205,209,7>",(a[i])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<205,206,7>",(a)); Inst5++; } } catch(e) {}
var b = [];
try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<220,221,8>",(b)); Inst6++; } } catch(e) {}
b[i - 2] = 33;
try { if (Inst7 <= 1000 && typeof (b[i - 2]) != "undefined") {_RecordType("<228,236,9>",(b[i - 2])); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<228,229,9>",(b)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<230,231,9>",(i)); Inst9++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<441,442,16>",(e)); Inst19++; } } catch(e) {}
try {
  // This is supposed to throw a RangeError.
try { if (Inst11 <= 1000 && typeof (a.concat) != "undefined") {_RecordType("<304,312,12>",(a.concat)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<304,305,12>",(a)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<313,314,12>",(b)); Inst13++; } } catch(e) {}
  var c = a.concat(b);
try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<300,301,12>",(c)); Inst10++; } } catch(e) {}
  // If it didn't, ObservableSetLength will detect the problem.
try { if (Inst14 <= 1000 && typeof (Object.observe) != "undefined") {_RecordType("<383,397,14>",(Object.observe)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Object) != "undefined") {_RecordType("<383,389,14>",(Object)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<398,399,14>",(c)); Inst16++; } } catch(e) {}
  Object.observe(c, function() {});
  c.length = 1;
try { if (Inst17 <= 1000 && typeof (c.length) != "undefined") {_RecordType("<419,427,15>",(c.length)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<419,420,15>",(c)); Inst18++; } } catch(e) {}
} catch(e) {
try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<448,458,17>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (e) != "undefined") {_RecordType("<459,460,17>",(e)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<472,482,17>",(RangeError)); Inst22++; } } catch(e) {}
  assertTrue(e instanceof RangeError);
}

