var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// See: http://code.google.com/p/v8/issues/detail?id=4377

// Switch statements should introduce their own lexical scope

'use strict';

switch (1) { case 1: let x = 2; }
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<330,331,11>",(x)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<340,352,13>",(assertThrows)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<373,374,13>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<379,393,13>",(ReferenceError)); Inst3++; } } catch(e) {}
assertThrows(function() { return x; }, ReferenceError);

{
  let result;
try { if (Inst4 <= 1000 && typeof (result) != "undefined") {_RecordType("<405,411,16>",(result)); Inst4++; } } catch(e) {}
  let x = 1;
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<419,420,17>",(x)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<436,437,18>",(x)); Inst6++; } } catch(e) {}
  switch (x) {
    case 1:
      let x = 2;
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<463,464,20>",(x)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<485,486,21>",(x)); Inst9++; } } catch(e) {}
      result = x;
try { if (Inst8 <= 1000 && typeof (result) != "undefined") {_RecordType("<476,482,21>",(result)); Inst8++; } } catch(e) {}
      break;
    default:
      result = 0;
try { if (Inst10 <= 1000 && typeof (result) != "undefined") {_RecordType("<520,526,24>",(result)); Inst10++; } } catch(e) {}
      break;
  }
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<551,563,27>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<567,568,27>",(x)); Inst12++; } } catch(e) {}
  assertEquals(1, x);
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<573,585,28>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (result) != "undefined") {_RecordType("<589,595,28>",(result)); Inst14++; } } catch(e) {}
  assertEquals(2, result);
}

{
  let result;
try { if (Inst15 <= 1000 && typeof (result) != "undefined") {_RecordType("<609,615,32>",(result)); Inst15++; } } catch(e) {}
  let x = 1;
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<623,624,33>",(x)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (eval) != "undefined") {_RecordType("<640,644,34>",(eval)); Inst17++; } } catch(e) {}
  switch (eval('x')) {
    case 1:
      let x = 2;
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<675,676,36>",(x)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<697,698,37>",(x)); Inst20++; } } catch(e) {}
      result = x;
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<688,694,37>",(result)); Inst19++; } } catch(e) {}
      break;
    default:
      result = 0;
try { if (Inst21 <= 1000 && typeof (result) != "undefined") {_RecordType("<732,738,40>",(result)); Inst21++; } } catch(e) {}
      break;
  }
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<763,775,43>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<779,780,43>",(x)); Inst23++; } } catch(e) {}
  assertEquals(1, x);
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<785,797,44>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (result) != "undefined") {_RecordType("<801,807,44>",(result)); Inst25++; } } catch(e) {}
  assertEquals(2, result);
}

