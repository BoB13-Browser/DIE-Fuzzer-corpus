var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Check that "name"'s property descriptor for non-strict and strict
// functions correspond.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1702,1703,31>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1704,1705,31>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1718,1719,32>",(x)); Inst2++; } } catch(e) {}
  return x;
}

try { if (Inst3 <= 1000 && typeof (g) != "undefined") {_RecordType("<1733,1734,35>",(g)); Inst3++; } } catch(e) {}
function g(x) {
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1735,1736,35>",(x)); Inst4++; } } catch(e) {}
  "use strict";
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<1765,1766,37>",(x)); Inst5++; } } catch(e) {}
  return x;
}

try { if (Inst6 <= 1000 && typeof (checkNameDescriptor) != "undefined") {_RecordType("<1780,1799,40>",(checkNameDescriptor)); Inst6++; } } catch(e) {}
function checkNameDescriptor(f) {
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<1800,1801,40>",(f)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1824,1855,41>",(Object.getOwnPropertyDescriptor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1824,1830,41>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<1856,1857,41>",(f)); Inst11++; } } catch(e) {}
  var descriptor = Object.getOwnPropertyDescriptor(f, "name");
try { if (Inst8 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1811,1821,41>",(descriptor)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1870,1880,42>",(assertTrue)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (descriptor.configurable) != "undefined") {_RecordType("<1881,1904,42>",(descriptor.configurable)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1881,1891,42>",(descriptor)); Inst14++; } } catch(e) {}
  assertTrue(descriptor.configurable);
try { if (Inst15 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1909,1920,43>",(assertFalse)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (descriptor.enumerable) != "undefined") {_RecordType("<1921,1942,43>",(descriptor.enumerable)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1921,1931,43>",(descriptor)); Inst17++; } } catch(e) {}
  assertFalse(descriptor.enumerable);
try { if (Inst18 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1947,1958,44>",(assertFalse)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (descriptor.writable) != "undefined") {_RecordType("<1959,1978,44>",(descriptor.writable)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1959,1969,44>",(descriptor)); Inst20++; } } catch(e) {}
  assertFalse(descriptor.writable);
}

try { if (Inst21 <= 1000 && typeof (checkNameDescriptor) != "undefined") {_RecordType("<1984,2003,47>",(checkNameDescriptor)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f) != "undefined") {_RecordType("<2004,2005,47>",(f)); Inst22++; } } catch(e) {}
checkNameDescriptor(f);
try { if (Inst23 <= 1000 && typeof (checkNameDescriptor) != "undefined") {_RecordType("<2008,2027,48>",(checkNameDescriptor)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<2028,2029,48>",(g)); Inst24++; } } catch(e) {}
checkNameDescriptor(g);

