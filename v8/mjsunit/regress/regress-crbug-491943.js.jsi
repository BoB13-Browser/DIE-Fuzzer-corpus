var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<215,226,7>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<215,220,7>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<207,212,7>",(Debug)); Inst0++; } } catch(e) {}
var receiver = null;
try { if (Inst3 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<232,240,8>",(receiver)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<250,267,10>",(Debug.setListener)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<250,255,10>",(Debug)); Inst5++; } } catch(e) {}
Debug.setListener(function(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<277,282,10>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<284,294,10>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<296,306,10>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<308,312,10>",(data)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<322,327,11>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<331,353,11>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<331,347,11>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<331,336,11>",(Debug)); Inst13++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst15 <= 1000 && typeof (exec_state.frame(0).evaluate('this').value) != "undefined") {_RecordType("<376,418,12>",(exec_state.frame(0).evaluate('this').value)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<376,404,12>",(exec_state.frame(0).evaluate)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<376,392,12>",(exec_state.frame)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<376,386,12>",(exec_state)); Inst18++; } } catch(e) {}
  receiver = exec_state.frame(0).evaluate('this').value();
try { if (Inst14 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<365,373,12>",(receiver)); Inst14++; } } catch(e) {}
});


try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<437,438,16>",(f)); Inst19++; } } catch(e) {}
function f() {
  var context_local = 1;
try { if (Inst20 <= 1000 && typeof (context_local) != "undefined") {_RecordType("<449,462,17>",(context_local)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (context_local) != "undefined") {_RecordType("<491,504,18>",(context_local)); Inst21++; } } catch(e) {}
  (function() { return context_local; })();
  debugger;
}

var expected = {};
try { if (Inst22 <= 1000 && typeof (expected) != "undefined") {_RecordType("<531,539,22>",(expected)); Inst22++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (f.call) != "undefined") {_RecordType("<546,552,23>",(f.call)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<546,547,23>",(f)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (expected) != "undefined") {_RecordType("<553,561,23>",(expected)); Inst25++; } } catch(e) {}
f.call(expected);

try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<565,577,25>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (expected) != "undefined") {_RecordType("<578,586,25>",(expected)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<588,596,25>",(receiver)); Inst28++; } } catch(e) {}
assertEquals(expected, receiver);

