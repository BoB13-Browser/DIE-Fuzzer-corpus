var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1598,1610,28>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof ('\0'.charCodeAt) != "undefined") {_RecordType("<1615,1630,28>",('\0'.charCodeAt)); Inst1++; } } catch(e) {}
assertEquals(0,  '\0'.charCodeAt(0));
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1636,1648,29>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof ('\1'.charCodeAt) != "undefined") {_RecordType("<1653,1668,29>",('\1'.charCodeAt)); Inst3++; } } catch(e) {}
assertEquals(1,  '\1'.charCodeAt(0));
try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1674,1686,30>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof ('\2'.charCodeAt) != "undefined") {_RecordType("<1691,1706,30>",('\2'.charCodeAt)); Inst5++; } } catch(e) {}
assertEquals(2,  '\2'.charCodeAt(0));
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1712,1724,31>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof ('\3'.charCodeAt) != "undefined") {_RecordType("<1729,1744,31>",('\3'.charCodeAt)); Inst7++; } } catch(e) {}
assertEquals(3,  '\3'.charCodeAt(0));
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1750,1762,32>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof ('\4'.charCodeAt) != "undefined") {_RecordType("<1767,1782,32>",('\4'.charCodeAt)); Inst9++; } } catch(e) {}
assertEquals(4,  '\4'.charCodeAt(0));
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1788,1800,33>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof ('\5'.charCodeAt) != "undefined") {_RecordType("<1805,1820,33>",('\5'.charCodeAt)); Inst11++; } } catch(e) {}
assertEquals(5,  '\5'.charCodeAt(0));
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1826,1838,34>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof ('\6'.charCodeAt) != "undefined") {_RecordType("<1843,1858,34>",('\6'.charCodeAt)); Inst13++; } } catch(e) {}
assertEquals(6,  '\6'.charCodeAt(0));
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1864,1876,35>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof ('\7'.charCodeAt) != "undefined") {_RecordType("<1881,1896,35>",('\7'.charCodeAt)); Inst15++; } } catch(e) {}
assertEquals(7,  '\7'.charCodeAt(0));
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1902,1914,36>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof ('\8'.charCodeAt) != "undefined") {_RecordType("<1919,1934,36>",('\8'.charCodeAt)); Inst17++; } } catch(e) {}
assertEquals(56, '\8'.charCodeAt(0));

try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1941,1953,38>",(assertEquals)); Inst18++; } } catch(e) {}
assertEquals('\010', '\10');
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1970,1982,39>",(assertEquals)); Inst19++; } } catch(e) {}
assertEquals('\011', '\11');
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1999,2011,40>",(assertEquals)); Inst20++; } } catch(e) {}
assertEquals('\012', '\12');
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2028,2040,41>",(assertEquals)); Inst21++; } } catch(e) {}
assertEquals('\013', '\13');
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2057,2069,42>",(assertEquals)); Inst22++; } } catch(e) {}
assertEquals('\014', '\14');
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2086,2098,43>",(assertEquals)); Inst23++; } } catch(e) {}
assertEquals('\015', '\15');
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2115,2127,44>",(assertEquals)); Inst24++; } } catch(e) {}
assertEquals('\016', '\16');
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2144,2156,45>",(assertEquals)); Inst25++; } } catch(e) {}
assertEquals('\017', '\17');

try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2174,2186,47>",(assertEquals)); Inst26++; } } catch(e) {}
assertEquals('\020', '\20');
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2203,2215,48>",(assertEquals)); Inst27++; } } catch(e) {}
assertEquals('\021', '\21');
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2232,2244,49>",(assertEquals)); Inst28++; } } catch(e) {}
assertEquals('\022', '\22');
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2261,2273,50>",(assertEquals)); Inst29++; } } catch(e) {}
assertEquals('\023', '\23');
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2290,2302,51>",(assertEquals)); Inst30++; } } catch(e) {}
assertEquals('\024', '\24');
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2319,2331,52>",(assertEquals)); Inst31++; } } catch(e) {}
assertEquals('\025', '\25');
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2348,2360,53>",(assertEquals)); Inst32++; } } catch(e) {}
assertEquals('\026', '\26');
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2377,2389,54>",(assertEquals)); Inst33++; } } catch(e) {}
assertEquals('\027', '\27');

try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2407,2419,56>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof ('\111'.charCodeAt) != "undefined") {_RecordType("<2425,2442,56>",('\111'.charCodeAt)); Inst35++; } } catch(e) {}
assertEquals(73,  '\111'.charCodeAt(0));
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2448,2460,57>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof ('\151'.charCodeAt) != "undefined") {_RecordType("<2466,2483,57>",('\151'.charCodeAt)); Inst37++; } } catch(e) {}
assertEquals(105, '\151'.charCodeAt(0));

