var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Some surrounding cases which already worked, for good measure
try { if (Inst0 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<233,243,6>",(assertTrue)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Date) != "undefined") {_RecordType("<248,252,6>",(Date)); Inst1++; } } catch(e) {}
assertTrue(new Date('275760-10-14') == 'Invalid Date');
try { if (Inst2 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<289,299,7>",(assertTrue)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Date) != "undefined") {_RecordType("<304,308,7>",(Date)); Inst3++; } } catch(e) {}
assertTrue(new Date('275760-09-23') == 'Invalid Date');
try { if (Inst4 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<345,355,8>",(assertTrue)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Date) != "undefined") {_RecordType("<360,364,8>",(Date)); Inst5++; } } catch(e) {}
assertTrue(new Date('+275760-09-24') == 'Invalid Date');
try { if (Inst6 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<402,412,9>",(assertTrue)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Date) != "undefined") {_RecordType("<417,421,9>",(Date)); Inst7++; } } catch(e) {}
assertTrue(new Date('+275760-10-13') == 'Invalid Date');

// The following cases used to throw "illegal access"
try { if (Inst8 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<514,524,12>",(assertTrue)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Date) != "undefined") {_RecordType("<529,533,12>",(Date)); Inst9++; } } catch(e) {}
assertTrue(new Date('275760-09-24') == 'Invalid Date');
try { if (Inst10 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<570,580,13>",(assertTrue)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Date) != "undefined") {_RecordType("<585,589,13>",(Date)); Inst11++; } } catch(e) {}
assertTrue(new Date('275760-10-13') == 'Invalid Date');
try { if (Inst12 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<626,636,14>",(assertTrue)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Date) != "undefined") {_RecordType("<641,645,14>",(Date)); Inst13++; } } catch(e) {}
assertTrue(new Date('+275760-10-13 ') == 'Invalid Date');

// However, dates within the range or valid
try { if (Inst14 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<729,739,17>",(assertTrue)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Date) != "undefined") {_RecordType("<744,748,17>",(Date)); Inst15++; } } catch(e) {}
assertTrue(new Date('100000-10-13') != 'Invalid Date');
try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<785,795,18>",(assertTrue)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Date) != "undefined") {_RecordType("<800,804,18>",(Date)); Inst17++; } } catch(e) {}
assertTrue(new Date('+100000-10-13') != 'Invalid Date');
try { if (Inst18 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<842,852,19>",(assertTrue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Date) != "undefined") {_RecordType("<857,861,19>",(Date)); Inst19++; } } catch(e) {}
assertTrue(new Date('+100000-10-13 ') != 'Invalid Date');

