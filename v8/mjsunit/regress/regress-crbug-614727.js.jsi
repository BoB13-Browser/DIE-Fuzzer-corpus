var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

"use strict";

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<192,193,7>",(f)); Inst0++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<212,221,7>",(arguments)); Inst4++; } } catch(e) {}
function f(a, b, c) { return arguments }
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<194,195,7>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<197,198,7>",(b)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (c) != "undefined") {_RecordType("<200,201,7>",(c)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (g) != "undefined") {_RecordType("<233,234,8>",(g)); Inst5++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (args) != "undefined") {_RecordType("<253,257,8>",(args)); Inst7++; } } catch(e) {}
function g(...args) { return args }
try { if (Inst6 <= 1000 && typeof (args) != "undefined") {_RecordType("<238,242,8>",(args)); Inst6++; } } catch(e) {}

// On 64-bit machine this produces a 768K array which is sufficiently small to
// not cause a stack overflow, but big enough to move the allocated arguments
// object into large object space (kMaxRegularHeapObjectSize == 600K).
try { if (Inst9 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<502,510,13>",(Math.pow)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Math) != "undefined") {_RecordType("<502,506,13>",(Math)); Inst10++; } } catch(e) {}
var length = Math.pow(2, 15) * 3;
try { if (Inst8 <= 1000 && typeof (length) != "undefined") {_RecordType("<493,499,13>",(length)); Inst8++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Array) != "undefined") {_RecordType("<538,543,14>",(Array)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (length) != "undefined") {_RecordType("<544,550,14>",(length)); Inst13++; } } catch(e) {}
var args = new Array(length);
try { if (Inst11 <= 1000 && typeof (args) != "undefined") {_RecordType("<527,531,14>",(args)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<553,565,15>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (length) != "undefined") {_RecordType("<566,572,15>",(length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f.apply(null, args).length) != "undefined") {_RecordType("<574,600,15>",(f.apply(null, args).length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<574,581,15>",(f.apply)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<574,575,15>",(f)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (args) != "undefined") {_RecordType("<588,592,15>",(args)); Inst19++; } } catch(e) {}
assertEquals(length, f.apply(null, args).length);
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<603,615,16>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (length) != "undefined") {_RecordType("<616,622,16>",(length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (g.apply(null, args).length) != "undefined") {_RecordType("<624,650,16>",(g.apply(null, args).length)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (g.apply) != "undefined") {_RecordType("<624,631,16>",(g.apply)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<624,625,16>",(g)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (args) != "undefined") {_RecordType("<638,642,16>",(args)); Inst25++; } } catch(e) {}
assertEquals(length, g.apply(null, args).length);

// On 32-bit machines this produces an equally sized array, however it might in
// turn trigger a stack overflow on 64-bit machines, which we need to catch.
try { if (Inst27 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<824,832,20>",(Math.pow)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<824,828,20>",(Math)); Inst28++; } } catch(e) {}
var length = Math.pow(2, 16) * 3;
try { if (Inst26 <= 1000 && typeof (length) != "undefined") {_RecordType("<815,821,20>",(length)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (Array) != "undefined") {_RecordType("<860,865,21>",(Array)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (length) != "undefined") {_RecordType("<866,872,21>",(length)); Inst31++; } } catch(e) {}
var args = new Array(length);
try { if (Inst29 <= 1000 && typeof (args) != "undefined") {_RecordType("<849,853,21>",(args)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (f.apply) != "undefined") {_RecordType("<881,888,22>",(f.apply)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<881,882,22>",(f)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (args) != "undefined") {_RecordType("<895,899,22>",(args)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<909,910,22>",(e)); Inst35++; } } catch(e) {}
try { f.apply(null, args) } catch(e) {}
try { if (Inst36 <= 1000 && typeof (g.apply) != "undefined") {_RecordType("<921,928,23>",(g.apply)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (g) != "undefined") {_RecordType("<921,922,23>",(g)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (args) != "undefined") {_RecordType("<935,939,23>",(args)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<949,950,23>",(e)); Inst39++; } } catch(e) {}
try { g.apply(null, args) } catch(e) {}

