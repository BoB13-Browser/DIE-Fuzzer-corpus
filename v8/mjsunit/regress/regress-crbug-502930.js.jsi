var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


var accessor_to_data_case = (function() {
  var v = {};
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<217,218,7>",(v)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<227,248,8>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<227,233,8>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (v) != "undefined") {_RecordType("<249,250,8>",(v)); Inst4++; } } catch(e) {}
  Object.defineProperty(v, "foo", { get: function() { return 42; }, configurable: true});

  var obj = {};
try { if (Inst5 <= 1000 && typeof (obj) != "undefined") {_RecordType("<322,325,10>",(obj)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (v) != "undefined") {_RecordType("<348,349,11>",(v)); Inst8++; } } catch(e) {}
  obj["boom"] = v;
try { if (Inst6 <= 1000 && typeof (obj["boom"]) != "undefined") {_RecordType("<334,345,11>",(obj["boom"])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (obj) != "undefined") {_RecordType("<334,337,11>",(obj)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<354,375,13>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<354,360,13>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (v) != "undefined") {_RecordType("<376,377,13>",(v)); Inst11++; } } catch(e) {}
  Object.defineProperty(v, "foo", { value: 0, writable: true, configurable: true });
try { if (Inst12 <= 1000 && typeof (obj) != "undefined") {_RecordType("<446,449,14>",(obj)); Inst12++; } } catch(e) {}
  return obj;
})();
try { if (Inst0 <= 1000 && typeof (accessor_to_data_case) != "undefined") {_RecordType("<173,194,6>",(accessor_to_data_case)); Inst0++; } } catch(e) {}


var data_to_accessor_case = (function() {
  var v = {};
try { if (Inst14 <= 1000 && typeof (v) != "undefined") {_RecordType("<507,508,19>",(v)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<517,538,20>",(Object.defineProperty)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<517,523,20>",(Object)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (v) != "undefined") {_RecordType("<539,540,20>",(v)); Inst17++; } } catch(e) {}
  Object.defineProperty(v, "bar", { value: 0, writable: true, configurable: true });

  var obj = {};
try { if (Inst18 <= 1000 && typeof (obj) != "undefined") {_RecordType("<607,610,22>",(obj)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (v) != "undefined") {_RecordType("<632,633,23>",(v)); Inst21++; } } catch(e) {}
  obj["bam"] = v;
try { if (Inst19 <= 1000 && typeof (obj["bam"]) != "undefined") {_RecordType("<619,629,23>",(obj["bam"])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (obj) != "undefined") {_RecordType("<619,622,23>",(obj)); Inst20++; } } catch(e) {}

try { if (Inst22 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<638,659,25>",(Object.defineProperty)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<638,644,25>",(Object)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (v) != "undefined") {_RecordType("<660,661,25>",(v)); Inst24++; } } catch(e) {}
  Object.defineProperty(v, "bar", { get: function() { return 42; }, configurable: true});
try { if (Inst25 <= 1000 && typeof (obj) != "undefined") {_RecordType("<735,738,26>",(obj)); Inst25++; } } catch(e) {}
  return obj;
})();
try { if (Inst13 <= 1000 && typeof (data_to_accessor_case) != "undefined") {_RecordType("<463,484,18>",(data_to_accessor_case)); Inst13++; } } catch(e) {}

