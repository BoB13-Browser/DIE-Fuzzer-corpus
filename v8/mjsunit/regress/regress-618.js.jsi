var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Simple class using inline constructor.
try { if (Inst0 <= 1000 && typeof (C1) != "undefined") {_RecordType("<1649,1651,29>",(C1)); Inst0++; } } catch(e) {}
function C1() {
  this.x = 23;
try { if (Inst1 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1658,1664,30>",(this.x)); Inst1++; } } catch(e) {}
};
try { if (Inst3 <= 1000 && typeof (C1) != "undefined") {_RecordType("<1687,1689,32>",(C1)); Inst3++; } } catch(e) {}
var c1 = new C1();
try { if (Inst2 <= 1000 && typeof (c1) != "undefined") {_RecordType("<1678,1680,32>",(c1)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1693,1705,33>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (c1.x) != "undefined") {_RecordType("<1710,1714,33>",(c1.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (c1) != "undefined") {_RecordType("<1710,1712,33>",(c1)); Inst6++; } } catch(e) {}
assertEquals(23, c1.x);
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1717,1729,34>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (c1.y) != "undefined") {_RecordType("<1750,1754,34>",(c1.y)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (c1) != "undefined") {_RecordType("<1750,1752,34>",(c1)); Inst9++; } } catch(e) {}
assertEquals("undefined", typeof c1.y);

// Add setter somewhere on the prototype chain after having constructed the
// first instance.
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<1874,1875,38>",(x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (value) != "undefined") {_RecordType("<1876,1881,38>",(value)); Inst13++; } } catch(e) {}
C1.prototype = { set x(value) { this.y = 23; } };
try { if (Inst10 <= 1000 && typeof (C1.prototype) != "undefined") {_RecordType("<1853,1865,38>",(C1.prototype)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (C1) != "undefined") {_RecordType("<1853,1855,38>",(C1)); Inst11++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<1885,1891,38>",(this.y)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (C1) != "undefined") {_RecordType("<1916,1918,39>",(C1)); Inst16++; } } catch(e) {}
var c1 = new C1();
try { if (Inst15 <= 1000 && typeof (c1) != "undefined") {_RecordType("<1907,1909,39>",(c1)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1922,1934,40>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (c1.x) != "undefined") {_RecordType("<1955,1959,40>",(c1.x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (c1) != "undefined") {_RecordType("<1955,1957,40>",(c1)); Inst19++; } } catch(e) {}
assertEquals("undefined", typeof c1.x);
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1962,1974,41>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (c1.y) != "undefined") {_RecordType("<1979,1983,41>",(c1.y)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (c1) != "undefined") {_RecordType("<1979,1981,41>",(c1)); Inst22++; } } catch(e) {}
assertEquals(23, c1.y);

// Simple class using inline constructor.
try { if (Inst23 <= 1000 && typeof (C2) != "undefined") {_RecordType("<2038,2040,44>",(C2)); Inst23++; } } catch(e) {}
function C2() {
  this.x = 23;
try { if (Inst24 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<2047,2053,45>",(this.x)); Inst24++; } } catch(e) {}
};
try { if (Inst26 <= 1000 && typeof (C2) != "undefined") {_RecordType("<2076,2078,47>",(C2)); Inst26++; } } catch(e) {}
var c2 = new C2();
try { if (Inst25 <= 1000 && typeof (c2) != "undefined") {_RecordType("<2067,2069,47>",(c2)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2082,2094,48>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (c2.x) != "undefined") {_RecordType("<2099,2103,48>",(c2.x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (c2) != "undefined") {_RecordType("<2099,2101,48>",(c2)); Inst29++; } } catch(e) {}
assertEquals(23, c2.x);
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2106,2118,49>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (c2.y) != "undefined") {_RecordType("<2139,2143,49>",(c2.y)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (c2) != "undefined") {_RecordType("<2139,2141,49>",(c2)); Inst32++; } } catch(e) {}
assertEquals("undefined", typeof c2.y);

// Add setter somewhere on the prototype chain after having constructed the
// first instance.
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2273,2274,53>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (value) != "undefined") {_RecordType("<2275,2280,53>",(value)); Inst37++; } } catch(e) {}
C2.prototype.__proto__ = { set x(value) { this.y = 23; } };
try { if (Inst33 <= 1000 && typeof (C2.prototype.__proto__) != "undefined") {_RecordType("<2242,2264,53>",(C2.prototype.__proto__)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (C2.prototype) != "undefined") {_RecordType("<2242,2254,53>",(C2.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (C2) != "undefined") {_RecordType("<2242,2244,53>",(C2)); Inst35++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<2284,2290,53>",(this.y)); Inst38++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (C2) != "undefined") {_RecordType("<2315,2317,54>",(C2)); Inst40++; } } catch(e) {}
var c2 = new C2();
try { if (Inst39 <= 1000 && typeof (c2) != "undefined") {_RecordType("<2306,2308,54>",(c2)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2321,2333,55>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (c2.x) != "undefined") {_RecordType("<2354,2358,55>",(c2.x)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (c2) != "undefined") {_RecordType("<2354,2356,55>",(c2)); Inst43++; } } catch(e) {}
assertEquals("undefined", typeof c2.x);
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2361,2373,56>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (c2.y) != "undefined") {_RecordType("<2378,2382,56>",(c2.y)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (c2) != "undefined") {_RecordType("<2378,2380,56>",(c2)); Inst46++; } } catch(e) {}
assertEquals(23, c2.y);

// Simple class using inline constructor.
try { if (Inst47 <= 1000 && typeof (C3) != "undefined") {_RecordType("<2437,2439,59>",(C3)); Inst47++; } } catch(e) {}
function C3() {
  this.x = 23;
try { if (Inst48 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<2446,2452,60>",(this.x)); Inst48++; } } catch(e) {}
};
try { if (Inst50 <= 1000 && typeof (C3) != "undefined") {_RecordType("<2475,2477,62>",(C3)); Inst50++; } } catch(e) {}
var c3 = new C3();
try { if (Inst49 <= 1000 && typeof (c3) != "undefined") {_RecordType("<2466,2468,62>",(c3)); Inst49++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2481,2493,63>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (c3.x) != "undefined") {_RecordType("<2498,2502,63>",(c3.x)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (c3) != "undefined") {_RecordType("<2498,2500,63>",(c3)); Inst53++; } } catch(e) {}
assertEquals(23, c3.x);
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2505,2517,64>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (c3.y) != "undefined") {_RecordType("<2538,2542,64>",(c3.y)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (c3) != "undefined") {_RecordType("<2538,2540,64>",(c3)); Inst56++; } } catch(e) {}
assertEquals("undefined", typeof c3.y);

// Add setter somewhere on the prototype chain after having constructed the
// first instance.
try { if (Inst57 <= 1000 && typeof (C3.prototype.__defineSetter__) != "undefined") {_RecordType("<2641,2670,68>",(C3.prototype.__defineSetter__)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (C3.prototype) != "undefined") {_RecordType("<2641,2653,68>",(C3.prototype)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (C3) != "undefined") {_RecordType("<2641,2643,68>",(C3)); Inst59++; } } catch(e) {}
C3.prototype.__defineSetter__('x', function(value) { this.y = 23; });
try { if (Inst60 <= 1000 && typeof (value) != "undefined") {_RecordType("<2685,2690,68>",(value)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<2694,2700,68>",(this.y)); Inst61++; } } catch(e) {}
try { if (Inst63 <= 1000 && typeof (C3) != "undefined") {_RecordType("<2724,2726,69>",(C3)); Inst63++; } } catch(e) {}
var c3 = new C3();
try { if (Inst62 <= 1000 && typeof (c3) != "undefined") {_RecordType("<2715,2717,69>",(c3)); Inst62++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2730,2742,70>",(assertEquals)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (c3.x) != "undefined") {_RecordType("<2763,2767,70>",(c3.x)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (c3) != "undefined") {_RecordType("<2763,2765,70>",(c3)); Inst66++; } } catch(e) {}
assertEquals("undefined", typeof c3.x);
try { if (Inst67 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2770,2782,71>",(assertEquals)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (c3.y) != "undefined") {_RecordType("<2787,2791,71>",(c3.y)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (c3) != "undefined") {_RecordType("<2787,2789,71>",(c3)); Inst69++; } } catch(e) {}
assertEquals(23, c3.y);

// Simple class using inline constructor.
try { if (Inst70 <= 1000 && typeof (C4) != "undefined") {_RecordType("<2846,2848,74>",(C4)); Inst70++; } } catch(e) {}
function C4() {
  this.x = 23;
try { if (Inst71 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<2855,2861,75>",(this.x)); Inst71++; } } catch(e) {}
};
try { if (Inst73 <= 1000 && typeof (C4) != "undefined") {_RecordType("<2884,2886,77>",(C4)); Inst73++; } } catch(e) {}
var c4 = new C4();
try { if (Inst72 <= 1000 && typeof (c4) != "undefined") {_RecordType("<2875,2877,77>",(c4)); Inst72++; } } catch(e) {}
try { if (Inst74 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2890,2902,78>",(assertEquals)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (c4.x) != "undefined") {_RecordType("<2907,2911,78>",(c4.x)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (c4) != "undefined") {_RecordType("<2907,2909,78>",(c4)); Inst76++; } } catch(e) {}
assertEquals(23, c4.x);
try { if (Inst77 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2914,2926,79>",(assertEquals)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (c4.y) != "undefined") {_RecordType("<2947,2951,79>",(c4.y)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (c4) != "undefined") {_RecordType("<2947,2949,79>",(c4)); Inst79++; } } catch(e) {}
assertEquals("undefined", typeof c4.y);

// Add setter somewhere on the prototype chain after having constructed the
// first instance.
try { if (Inst80 <= 1000 && typeof (C4.prototype.__proto__.__defineSetter__) != "undefined") {_RecordType("<3050,3089,83>",(C4.prototype.__proto__.__defineSetter__)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (C4.prototype.__proto__) != "undefined") {_RecordType("<3050,3072,83>",(C4.prototype.__proto__)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (C4.prototype) != "undefined") {_RecordType("<3050,3062,83>",(C4.prototype)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (C4) != "undefined") {_RecordType("<3050,3052,83>",(C4)); Inst83++; } } catch(e) {}
C4.prototype.__proto__.__defineSetter__('x', function(value) { this.y = 23; });
try { if (Inst84 <= 1000 && typeof (value) != "undefined") {_RecordType("<3104,3109,83>",(value)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<3113,3119,83>",(this.y)); Inst85++; } } catch(e) {}
try { if (Inst87 <= 1000 && typeof (C4) != "undefined") {_RecordType("<3143,3145,84>",(C4)); Inst87++; } } catch(e) {}
var c4 = new C4();
try { if (Inst86 <= 1000 && typeof (c4) != "undefined") {_RecordType("<3134,3136,84>",(c4)); Inst86++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3149,3161,85>",(assertEquals)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (c4.x) != "undefined") {_RecordType("<3182,3186,85>",(c4.x)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (c4) != "undefined") {_RecordType("<3182,3184,85>",(c4)); Inst90++; } } catch(e) {}
assertEquals("undefined", typeof c4.x);
try { if (Inst91 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3189,3201,86>",(assertEquals)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (c4.y) != "undefined") {_RecordType("<3206,3210,86>",(c4.y)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (c4) != "undefined") {_RecordType("<3206,3208,86>",(c4)); Inst93++; } } catch(e) {}
assertEquals(23, c4.y);

