var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<168,180,5>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (Math.E) != "undefined") {_RecordType("<181,187,5>",(Math.E)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Math) != "undefined") {_RecordType("<181,185,5>",(Math)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math.exp) != "undefined") {_RecordType("<189,197,5>",(Math.exp)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Math) != "undefined") {_RecordType("<189,193,5>",(Math)); Inst4++; } } catch(e) {}
assertEquals(Math.E, Math.exp(1));
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<203,215,6>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math.LN10) != "undefined") {_RecordType("<216,225,6>",(Math.LN10)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<216,220,6>",(Math)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math.log) != "undefined") {_RecordType("<227,235,6>",(Math.log)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<227,231,6>",(Math)); Inst9++; } } catch(e) {}
assertEquals(Math.LN10, Math.log(10));
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<242,254,7>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math.LN2) != "undefined") {_RecordType("<255,263,7>",(Math.LN2)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Math) != "undefined") {_RecordType("<255,259,7>",(Math)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math.log) != "undefined") {_RecordType("<265,273,7>",(Math.log)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<265,269,7>",(Math)); Inst14++; } } catch(e) {}
assertEquals(Math.LN2, Math.log(2));
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<279,291,8>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math.LOG10E) != "undefined") {_RecordType("<292,303,8>",(Math.LOG10E)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<292,296,8>",(Math)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math.log10) != "undefined") {_RecordType("<305,315,8>",(Math.log10)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Math) != "undefined") {_RecordType("<305,309,8>",(Math)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math.E) != "undefined") {_RecordType("<316,322,8>",(Math.E)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<316,320,8>",(Math)); Inst21++; } } catch(e) {}
assertEquals(Math.LOG10E, Math.log10(Math.E));
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<326,338,9>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Math.LOG2E) != "undefined") {_RecordType("<339,349,9>",(Math.LOG2E)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math) != "undefined") {_RecordType("<339,343,9>",(Math)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math.log2) != "undefined") {_RecordType("<351,360,9>",(Math.log2)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Math) != "undefined") {_RecordType("<351,355,9>",(Math)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math.E) != "undefined") {_RecordType("<361,367,9>",(Math.E)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<361,365,9>",(Math)); Inst28++; } } catch(e) {}
assertEquals(Math.LOG2E, Math.log2(Math.E));
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<371,383,10>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Math.SQRT1_2) != "undefined") {_RecordType("<384,396,10>",(Math.SQRT1_2)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Math) != "undefined") {_RecordType("<384,388,10>",(Math)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<398,407,10>",(Math.sqrt)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Math) != "undefined") {_RecordType("<398,402,10>",(Math)); Inst33++; } } catch(e) {}
assertEquals(Math.SQRT1_2, Math.sqrt(0.5));
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<415,427,11>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math.SQRT2) != "undefined") {_RecordType("<428,438,11>",(Math.SQRT2)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Math) != "undefined") {_RecordType("<428,432,11>",(Math)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<440,449,11>",(Math.sqrt)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math) != "undefined") {_RecordType("<440,444,11>",(Math)); Inst38++; } } catch(e) {}
assertEquals(Math.SQRT2, Math.sqrt(2));

