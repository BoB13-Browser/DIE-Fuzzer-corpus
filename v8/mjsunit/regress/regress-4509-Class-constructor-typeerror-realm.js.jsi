var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

"use strict";
try { if (Inst1 <= 1000 && typeof (Realm.create) != "undefined") {_RecordType("<194,206,6>",(Realm.create)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Realm) != "undefined") {_RecordType("<194,199,6>",(Realm)); Inst2++; } } catch(e) {}
var realm = Realm.create();
try { if (Inst0 <= 1000 && typeof (realm) != "undefined") {_RecordType("<186,191,6>",(realm)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (Realm.eval) != "undefined") {_RecordType("<231,241,7>",(Realm.eval)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Realm) != "undefined") {_RecordType("<231,236,7>",(Realm)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (realm) != "undefined") {_RecordType("<242,247,7>",(realm)); Inst6++; } } catch(e) {}
var OtherTypeError = Realm.eval(realm, 'TypeError');
try { if (Inst3 <= 1000 && typeof (OtherTypeError) != "undefined") {_RecordType("<214,228,7>",(OtherTypeError)); Inst3++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (Object) != "undefined") {_RecordType("<286,292,9>",(Object)); Inst8++; } } catch(e) {}
class Derived extends Object {
  constructor() {
    return null;
  }
}
try { if (Inst7 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<270,277,9>",(Derived)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<337,349,15>",(assertThrows)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Derived) != "undefined") {_RecordType("<362,369,15>",(Derived)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<375,384,15>",(TypeError)); Inst11++; } } catch(e) {}
assertThrows(() => { new Derived() }, TypeError);

try { if (Inst13 <= 1000 && typeof (Realm.eval) != "undefined") {_RecordType("<407,417,17>",(Realm.eval)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Realm) != "undefined") {_RecordType("<407,412,17>",(Realm)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (realm) != "undefined") {_RecordType("<418,423,17>",(realm)); Inst15++; } } catch(e) {}
var OtherDerived = Realm.eval(realm,
   "'use strict';" +
   "class Derived extends Object {" +
      "constructor() {" +
        "return null;" +
      "}};");
try { if (Inst12 <= 1000 && typeof (OtherDerived) != "undefined") {_RecordType("<392,404,17>",(OtherDerived)); Inst12++; } } catch(e) {}

// Before throwing the TypeError we have to switch to the caller context.
try { if (Inst16 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<624,636,25>",(assertThrows)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (OtherDerived) != "undefined") {_RecordType("<649,661,25>",(OtherDerived)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<667,676,25>",(TypeError)); Inst18++; } } catch(e) {}
assertThrows(() => { new OtherDerived() }, TypeError);

