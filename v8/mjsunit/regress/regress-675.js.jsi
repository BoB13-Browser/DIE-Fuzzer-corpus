var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Regression test for http://code.google.com/p/v8/issues/detail?id=675.
//
// Test that load ICs for nonexistent properties check global
// property cells.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1765,1766,33>",(f)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1778,1784,33>",(this.x)); Inst1++; } } catch(e) {}
function f() { return this.x; }

// Initialize IC for nonexistent x property on global object.
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<1851,1852,36>",(f)); Inst2++; } } catch(e) {}
f();
try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<1856,1857,37>",(f)); Inst3++; } } catch(e) {}
f();

// Assign to global property cell for x.
this.x = 23;
try { if (Inst4 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1903,1909,40>",(this.x)); Inst4++; } } catch(e) {}

// Check that we bail out from the IC.
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1956,1968,43>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<1973,1974,43>",(f)); Inst6++; } } catch(e) {}
assertEquals(23, f());


// Same test, but test that the global property cell is also checked
// if the global object is the last object in the prototype chain for
// the load.
this.__proto__ = null;
try { if (Inst7 <= 1000 && typeof (this.__proto__) != "undefined") {_RecordType("<2133,2147,49>",(this.__proto__)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (g) != "undefined") {_RecordType("<2165,2166,50>",(g)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<2178,2184,50>",(this.y)); Inst9++; } } catch(e) {}
function g() { return this.y; }

// Initialize IC.
try { if (Inst10 <= 1000 && typeof (g) != "undefined") {_RecordType("<2207,2208,53>",(g)); Inst10++; } } catch(e) {}
g();
try { if (Inst11 <= 1000 && typeof (g) != "undefined") {_RecordType("<2212,2213,54>",(g)); Inst11++; } } catch(e) {}
g();

// Update global property cell.
this.y = 42;
try { if (Inst12 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<2250,2256,57>",(this.y)); Inst12++; } } catch(e) {}

// Check that IC bails out.
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2292,2304,60>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (g) != "undefined") {_RecordType("<2309,2310,60>",(g)); Inst14++; } } catch(e) {}
assertEquals(42, g());

