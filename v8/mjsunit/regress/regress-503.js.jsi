var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1598,1608,28>",(assertTrue)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1609,1618,28>",(undefined)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1622,1631,28>",(undefined)); Inst2++; } } catch(e) {}
assertTrue(undefined == undefined, 1);
try { if (Inst3 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1637,1648,29>",(assertFalse)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1649,1658,29>",(undefined)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1662,1671,29>",(undefined)); Inst5++; } } catch(e) {}
assertFalse(undefined <= undefined, 2);
try { if (Inst6 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1677,1688,30>",(assertFalse)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1689,1698,30>",(undefined)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1702,1711,30>",(undefined)); Inst8++; } } catch(e) {}
assertFalse(undefined >= undefined, 3);
try { if (Inst9 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1717,1728,31>",(assertFalse)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1729,1738,31>",(undefined)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1741,1750,31>",(undefined)); Inst11++; } } catch(e) {}
assertFalse(undefined < undefined, 4);
try { if (Inst12 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1756,1767,32>",(assertFalse)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1768,1777,32>",(undefined)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1780,1789,32>",(undefined)); Inst14++; } } catch(e) {}
assertFalse(undefined > undefined, 5);

try { if (Inst15 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1796,1806,34>",(assertTrue)); Inst15++; } } catch(e) {}
assertTrue(null == null, 6);
try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1825,1835,35>",(assertTrue)); Inst16++; } } catch(e) {}
assertTrue(null <= null, 7);
try { if (Inst17 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1854,1864,36>",(assertTrue)); Inst17++; } } catch(e) {}
assertTrue(null >= null, 8);
try { if (Inst18 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1883,1894,37>",(assertFalse)); Inst18++; } } catch(e) {}
assertFalse(null < null, 9);
try { if (Inst19 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1912,1923,38>",(assertFalse)); Inst19++; } } catch(e) {}
assertFalse(null > null, 10);

try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1943,1953,40>",(assertTrue)); Inst20++; } } catch(e) {}
assertTrue(void 0 == void 0, 11);
try { if (Inst21 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1977,1988,41>",(assertFalse)); Inst21++; } } catch(e) {}
assertFalse(void 0 <= void 0, 12);
try { if (Inst22 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2012,2023,42>",(assertFalse)); Inst22++; } } catch(e) {}
assertFalse(void 0 >= void 0, 13);
try { if (Inst23 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2047,2058,43>",(assertFalse)); Inst23++; } } catch(e) {}
assertFalse(void 0 < void 0, 14);
try { if (Inst24 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2081,2092,44>",(assertFalse)); Inst24++; } } catch(e) {}
assertFalse(void 0 > void 0, 15);

var x = void 0;
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<2120,2121,46>",(x)); Inst25++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2133,2143,48>",(assertTrue)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<2144,2145,48>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<2149,2150,48>",(x)); Inst28++; } } catch(e) {}
assertTrue(x == x, 16);
try { if (Inst29 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2157,2168,49>",(assertFalse)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<2169,2170,49>",(x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<2174,2175,49>",(x)); Inst31++; } } catch(e) {}
assertFalse(x <= x, 17);
try { if (Inst32 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2182,2193,50>",(assertFalse)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<2194,2195,50>",(x)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<2199,2200,50>",(x)); Inst34++; } } catch(e) {}
assertFalse(x >= x, 18);
try { if (Inst35 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2207,2218,51>",(assertFalse)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2219,2220,51>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<2223,2224,51>",(x)); Inst37++; } } catch(e) {}
assertFalse(x < x, 19);
try { if (Inst38 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2231,2242,52>",(assertFalse)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<2243,2244,52>",(x)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2247,2248,52>",(x)); Inst40++; } } catch(e) {}
assertFalse(x > x, 20);

var not_undefined = [null, 0, 1, 1/0, -1/0, "", true, false];
try { if (Inst41 <= 1000 && typeof (not_undefined) != "undefined") {_RecordType("<2260,2273,54>",(not_undefined)); Inst41++; } } catch(e) {}
for (var i = 0; i < not_undefined.length; i++) {
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2327,2328,55>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<2334,2335,55>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (not_undefined.length) != "undefined") {_RecordType("<2338,2358,55>",(not_undefined.length)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (not_undefined) != "undefined") {_RecordType("<2338,2351,55>",(not_undefined)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<2360,2361,55>",(i)); Inst46++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (not_undefined[i]) != "undefined") {_RecordType("<2373,2389,56>",(not_undefined[i])); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (not_undefined) != "undefined") {_RecordType("<2373,2386,56>",(not_undefined)); Inst49++; } } catch(e) {}
  x = not_undefined[i];
try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<2369,2370,56>",(x)); Inst47++; } } catch(e) {}

try { if (Inst50 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2394,2404,58>",(assertTrue)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (x) != "undefined") {_RecordType("<2405,2406,58>",(x)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<2410,2411,58>",(x)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (x) != "undefined") {_RecordType("<2423,2424,58>",(x)); Inst53++; } } catch(e) {}
  assertTrue(x == x, "" + 21 + x);
try { if (Inst54 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2429,2439,59>",(assertTrue)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (x) != "undefined") {_RecordType("<2440,2441,59>",(x)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<2445,2446,59>",(x)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (x) != "undefined") {_RecordType("<2458,2459,59>",(x)); Inst57++; } } catch(e) {}
  assertTrue(x <= x, "" + 22 + x);
try { if (Inst58 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2464,2474,60>",(assertTrue)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (x) != "undefined") {_RecordType("<2475,2476,60>",(x)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (x) != "undefined") {_RecordType("<2480,2481,60>",(x)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (x) != "undefined") {_RecordType("<2493,2494,60>",(x)); Inst61++; } } catch(e) {}
  assertTrue(x >= x, "" + 23 + x);
try { if (Inst62 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2499,2510,61>",(assertFalse)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (x) != "undefined") {_RecordType("<2511,2512,61>",(x)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (x) != "undefined") {_RecordType("<2515,2516,61>",(x)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (x) != "undefined") {_RecordType("<2528,2529,61>",(x)); Inst65++; } } catch(e) {}
  assertFalse(x < x, "" + 24 + x);
try { if (Inst66 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2534,2545,62>",(assertFalse)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (x) != "undefined") {_RecordType("<2546,2547,62>",(x)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (x) != "undefined") {_RecordType("<2550,2551,62>",(x)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (x) != "undefined") {_RecordType("<2563,2564,62>",(x)); Inst69++; } } catch(e) {}
  assertFalse(x > x, "" + 25 + x);
}

