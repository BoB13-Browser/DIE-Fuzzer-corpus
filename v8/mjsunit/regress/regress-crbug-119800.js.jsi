var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<212,213,7>",(f)); Inst0++; } } catch(e) {}
function f() {
try { if (Inst1 <= 1000 && typeof (print) != "undefined") {_RecordType("<220,225,8>",(print)); Inst1++; } } catch(e) {}
  print(1);
try { if (Inst2 <= 1000 && typeof (print) != "undefined") {_RecordType("<232,237,9>",(print)); Inst2++; } } catch(e) {}
  print(2);
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<244,249,10>",(print)); Inst3++; } } catch(e) {}
  print(3);
}

try { if (Inst5 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<269,280,13>",(debug.Debug)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (debug) != "undefined") {_RecordType("<269,274,13>",(debug)); Inst6++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst4 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<261,266,13>",(Debug)); Inst4++; } } catch(e) {}
var exception = null;
try { if (Inst7 <= 1000 && typeof (exception) != "undefined") {_RecordType("<286,295,14>",(exception)); Inst7++; } } catch(e) {}
var breaks = [];
try { if (Inst8 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<308,314,15>",(breaks)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (listener) != "undefined") {_RecordType("<331,339,17>",(listener)); Inst9++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<340,345,17>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<347,357,17>",(exec_state)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<359,369,17>",(event_data)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (data) != "undefined") {_RecordType("<371,375,17>",(data)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (event) != "undefined") {_RecordType("<385,390,18>",(event)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<394,416,18>",(Debug.DebugEvent.Break)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<394,410,18>",(Debug.DebugEvent)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<394,399,18>",(Debug)); Inst17++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<624,625,23>",(e)); Inst33++; } } catch(e) {}
  try {
try { if (Inst18 <= 1000 && typeof (Debug.debuggerFlags().breakPointsActive.setValue) != "undefined") {_RecordType("<438,486,20>",(Debug.debuggerFlags().breakPointsActive.setValue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug.debuggerFlags().breakPointsActive) != "undefined") {_RecordType("<438,477,20>",(Debug.debuggerFlags().breakPointsActive)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Debug.debuggerFlags) != "undefined") {_RecordType("<438,457,20>",(Debug.debuggerFlags)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<438,443,20>",(Debug)); Inst21++; } } catch(e) {}
    Debug.debuggerFlags().breakPointsActive.setValue(false);
try { if (Inst22 <= 1000 && typeof (breaks.push) != "undefined") {_RecordType("<499,510,21>",(breaks.push)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<499,505,21>",(breaks)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (exec_state.frame().sourceLineText().trimLeft) != "undefined") {_RecordType("<511,555,21>",(exec_state.frame().sourceLineText().trimLeft)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (exec_state.frame().sourceLineText) != "undefined") {_RecordType("<511,544,21>",(exec_state.frame().sourceLineText)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<511,527,21>",(exec_state.frame)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<511,521,21>",(exec_state)); Inst27++; } } catch(e) {}
    breaks.push(exec_state.frame().sourceLineText().trimLeft());
try { if (Inst28 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<564,586,22>",(exec_state.prepareStep)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<564,574,22>",(exec_state)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<587,610,22>",(Debug.StepAction.StepIn)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<587,603,22>",(Debug.StepAction)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<587,592,22>",(Debug)); Inst32++; } } catch(e) {}
    exec_state.prepareStep(Debug.StepAction.StepIn);
  } catch (e) {
try { if (Inst35 <= 1000 && typeof (e) != "undefined") {_RecordType("<645,646,24>",(e)); Inst35++; } } catch(e) {}
    exception = e;
try { if (Inst34 <= 1000 && typeof (exception) != "undefined") {_RecordType("<633,642,24>",(exception)); Inst34++; } } catch(e) {}
  }
}

try { if (Inst36 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<655,672,28>",(Debug.setListener)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<655,660,28>",(Debug)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (listener) != "undefined") {_RecordType("<673,681,28>",(listener)); Inst38++; } } catch(e) {}
Debug.setListener(listener);
try { if (Inst39 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<684,703,29>",(Debug.setBreakPoint)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<684,689,29>",(Debug)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (f) != "undefined") {_RecordType("<704,705,29>",(f)); Inst41++; } } catch(e) {}
Debug.setBreakPoint(f, 0, 0);

try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<715,716,31>",(f)); Inst42++; } } catch(e) {}
f();

try { if (Inst43 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<721,738,33>",(Debug.setListener)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<721,726,33>",(Debug)); Inst44++; } } catch(e) {}
Debug.setListener(null);
try { if (Inst45 <= 1000 && typeof (Debug.debuggerFlags().breakPointsActive.setValue) != "undefined") {_RecordType("<746,794,34>",(Debug.debuggerFlags().breakPointsActive.setValue)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Debug.debuggerFlags().breakPointsActive) != "undefined") {_RecordType("<746,785,34>",(Debug.debuggerFlags().breakPointsActive)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Debug.debuggerFlags) != "undefined") {_RecordType("<746,765,34>",(Debug.debuggerFlags)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<746,751,34>",(Debug)); Inst48++; } } catch(e) {}
Debug.debuggerFlags().breakPointsActive.setValue(true);

try { if (Inst49 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<803,813,36>",(assertNull)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (exception) != "undefined") {_RecordType("<814,823,36>",(exception)); Inst50++; } } catch(e) {}
assertNull(exception);
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<826,838,37>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (breaks) != "undefined") {_RecordType("<839,845,37>",(breaks)); Inst52++; } } catch(e) {}
assertEquals(breaks, ["print(1);", "print(2);", "print(3);", "}",
                      "Debug.setListener(null);"]);

