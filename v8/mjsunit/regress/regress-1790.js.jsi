var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Regression test checking that the sequence of element access in built-in
// array functions is specification conform (i.e. [[HasProperty]] might return
// bogus result after [[Get]] has been called).

try { if (Inst0 <= 1000 && typeof (CheckSequence) != "undefined") {_RecordType("<1811,1824,32>",(CheckSequence)); Inst0++; } } catch(e) {}
function CheckSequence(builtin, callback) {
try { if (Inst1 <= 1000 && typeof (builtin) != "undefined") {_RecordType("<1825,1832,32>",(builtin)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (callback) != "undefined") {_RecordType("<1834,1842,32>",(callback)); Inst2++; } } catch(e) {}
  var array = [1,2,3];
try { if (Inst3 <= 1000 && typeof (array) != "undefined") {_RecordType("<1852,1857,33>",(array)); Inst3++; } } catch(e) {}
  var callback_count = 0;
try { if (Inst4 <= 1000 && typeof (callback_count) != "undefined") {_RecordType("<1875,1889,34>",(callback_count)); Inst4++; } } catch(e) {}
  var callback_wrapper = function() {
try { if (Inst6 <= 1000 && typeof (callback_count) != "undefined") {_RecordType("<1937,1951,36>",(callback_count)); Inst6++; } } catch(e) {}
    callback_count++;
try { if (Inst7 <= 1000 && typeof (callback) != "undefined") {_RecordType("<1966,1974,37>",(callback)); Inst7++; } } catch(e) {}
    return callback()
  }
try { if (Inst5 <= 1000 && typeof (callback_wrapper) != "undefined") {_RecordType("<1901,1917,35>",(callback_wrapper)); Inst5++; } } catch(e) {}

  // Define getter that will delete itself upon first invocation.
try { if (Inst8 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2050,2071,41>",(Object.defineProperty)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2050,2056,41>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<2072,2077,41>",(array)); Inst10++; } } catch(e) {}
  Object.defineProperty(array, '1', {
try { if (Inst11 <= 1000 && typeof (array[1]) != "undefined") {_RecordType("<2116,2124,42>",(array[1])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<2116,2121,42>",(array)); Inst12++; } } catch(e) {}
    get: function () { delete array[1]; },
    configurable: true
  });

try { if (Inst13 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2161,2171,46>",(assertTrue)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (array.hasOwnProperty) != "undefined") {_RecordType("<2172,2192,46>",(array.hasOwnProperty)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (array) != "undefined") {_RecordType("<2172,2177,46>",(array)); Inst15++; } } catch(e) {}
  assertTrue(array.hasOwnProperty('1'));
try { if (Inst16 <= 1000 && typeof (builtin.apply) != "undefined") {_RecordType("<2202,2215,47>",(builtin.apply)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (builtin) != "undefined") {_RecordType("<2202,2209,47>",(builtin)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (array) != "undefined") {_RecordType("<2216,2221,47>",(array)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (callback_wrapper) != "undefined") {_RecordType("<2224,2240,47>",(callback_wrapper)); Inst19++; } } catch(e) {}
  builtin.apply(array, [callback_wrapper, 'argument']);
try { if (Inst20 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2258,2269,48>",(assertFalse)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (array.hasOwnProperty) != "undefined") {_RecordType("<2270,2290,48>",(array.hasOwnProperty)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array) != "undefined") {_RecordType("<2270,2275,48>",(array)); Inst22++; } } catch(e) {}
  assertFalse(array.hasOwnProperty('1'));
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2300,2312,49>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (callback_count) != "undefined") {_RecordType("<2316,2330,49>",(callback_count)); Inst24++; } } catch(e) {}
  assertEquals(3, callback_count);
}

try { if (Inst25 <= 1000 && typeof (CheckSequence) != "undefined") {_RecordType("<2336,2349,52>",(CheckSequence)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Array.prototype.every) != "undefined") {_RecordType("<2350,2371,52>",(Array.prototype.every)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2350,2365,52>",(Array.prototype)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2350,2355,52>",(Array)); Inst28++; } } catch(e) {}
CheckSequence(Array.prototype.every,       function() { return true; });
try { if (Inst29 <= 1000 && typeof (CheckSequence) != "undefined") {_RecordType("<2409,2422,53>",(CheckSequence)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Array.prototype.filter) != "undefined") {_RecordType("<2423,2445,53>",(Array.prototype.filter)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2423,2438,53>",(Array.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2423,2428,53>",(Array)); Inst32++; } } catch(e) {}
CheckSequence(Array.prototype.filter,      function() { return true; });
try { if (Inst33 <= 1000 && typeof (CheckSequence) != "undefined") {_RecordType("<2482,2495,54>",(CheckSequence)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Array.prototype.forEach) != "undefined") {_RecordType("<2496,2519,54>",(Array.prototype.forEach)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2496,2511,54>",(Array.prototype)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2496,2501,54>",(Array)); Inst36++; } } catch(e) {}
CheckSequence(Array.prototype.forEach,     function() { return 0; });
try { if (Inst37 <= 1000 && typeof (CheckSequence) != "undefined") {_RecordType("<2552,2565,55>",(CheckSequence)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Array.prototype.map) != "undefined") {_RecordType("<2566,2585,55>",(Array.prototype.map)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2566,2581,55>",(Array.prototype)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2566,2571,55>",(Array)); Inst40++; } } catch(e) {}
CheckSequence(Array.prototype.map,         function() { return 0; });
try { if (Inst41 <= 1000 && typeof (CheckSequence) != "undefined") {_RecordType("<2622,2635,56>",(CheckSequence)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Array.prototype.reduce) != "undefined") {_RecordType("<2636,2658,56>",(Array.prototype.reduce)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2636,2651,56>",(Array.prototype)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2636,2641,56>",(Array)); Inst44++; } } catch(e) {}
CheckSequence(Array.prototype.reduce,      function() { return 0; });
try { if (Inst45 <= 1000 && typeof (CheckSequence) != "undefined") {_RecordType("<2692,2705,57>",(CheckSequence)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Array.prototype.reduceRight) != "undefined") {_RecordType("<2706,2733,57>",(Array.prototype.reduceRight)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2706,2721,57>",(Array.prototype)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2706,2711,57>",(Array)); Inst48++; } } catch(e) {}
CheckSequence(Array.prototype.reduceRight, function() { return 0; });
try { if (Inst49 <= 1000 && typeof (CheckSequence) != "undefined") {_RecordType("<2762,2775,58>",(CheckSequence)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Array.prototype.some) != "undefined") {_RecordType("<2776,2796,58>",(Array.prototype.some)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2776,2791,58>",(Array.prototype)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2776,2781,58>",(Array)); Inst52++; } } catch(e) {}
CheckSequence(Array.prototype.some,        function() { return false; });

