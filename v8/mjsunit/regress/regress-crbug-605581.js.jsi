var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<215,226,7>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<215,220,7>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<207,212,7>",(Debug)); Inst0++; } } catch(e) {}
var exception = null;
try { if (Inst3 <= 1000 && typeof (exception) != "undefined") {_RecordType("<232,241,8>",(exception)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (listener) != "undefined") {_RecordType("<260,268,10>",(listener)); Inst4++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst5 <= 1000 && typeof (event) != "undefined") {_RecordType("<269,274,10>",(event)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<276,286,10>",(exec_state)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<288,298,10>",(event_data)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (data) != "undefined") {_RecordType("<300,304,10>",(data)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (event) != "undefined") {_RecordType("<314,319,11>",(event)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<323,345,11>",(Debug.DebugEvent.Break)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<323,339,11>",(Debug.DebugEvent)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<323,328,11>",(Debug)); Inst12++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<455,456,14>",(e)); Inst18++; } } catch(e) {}
  try {
try { if (Inst13 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<367,379,13>",(assertThrows)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<386,414,13>",(exec_state.frame(0).evaluate)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<386,402,13>",(exec_state.frame)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<386,396,13>",(exec_state)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<427,441,13>",(ReferenceError)); Inst17++; } } catch(e) {}
    assertThrows(() => exec_state.frame(0).evaluate("bar.baz"), ReferenceError);
  } catch (e) {
try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<476,477,15>",(e)); Inst20++; } } catch(e) {}
    exception = e;
try { if (Inst19 <= 1000 && typeof (exception) != "undefined") {_RecordType("<464,473,15>",(exception)); Inst19++; } } catch(e) {}
  }
}

try { if (Inst21 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<486,503,19>",(Debug.setListener)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<486,491,19>",(Debug)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (listener) != "undefined") {_RecordType("<504,512,19>",(listener)); Inst23++; } } catch(e) {}
Debug.setListener(listener);

(function() {
  debugger;    // bar is still in TDZ at this point.
  let bar = 1;
try { if (Inst24 <= 1000 && typeof (bar) != "undefined") {_RecordType("<589,592,23>",(bar)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<601,602,24>",(x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (bar) != "undefined") {_RecordType("<606,609,24>",(bar)); Inst26++; } } catch(e) {}
  (x => bar);  // force bar to be context-allocated.
})();

try { if (Inst27 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<658,675,27>",(Debug.setListener)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<658,663,27>",(Debug)); Inst28++; } } catch(e) {}
Debug.setListener(null);
try { if (Inst29 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<683,693,28>",(assertNull)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (exception) != "undefined") {_RecordType("<694,703,28>",(exception)); Inst30++; } } catch(e) {}
assertNull(exception);

