var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

"use strict";

try { if (Inst0 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<192,203,7>",(getTypeName)); Inst0++; } } catch(e) {}
function getTypeName(receiver) {
try { if (Inst1 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<204,212,7>",(receiver)); Inst1++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (stack) != "undefined") {_RecordType("<272,277,8>",(stack)); Inst6++; } } catch(e) {}
  Error.prepareStackTrace = function(e, stack) { return stack; }
try { if (Inst2 <= 1000 && typeof (Error.prepareStackTrace) != "undefined") {_RecordType("<218,241,8>",(Error.prepareStackTrace)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Error) != "undefined") {_RecordType("<218,223,8>",(Error)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<253,254,8>",(e)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (stack) != "undefined") {_RecordType("<256,261,8>",(stack)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof ((function() { return new Error().stack; }).call) != "undefined") {_RecordType("<295,342,9>",((function() { return new Error().stack; }).call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (new Error().stack) != "undefined") {_RecordType("<316,333,9>",(new Error().stack)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Error) != "undefined") {_RecordType("<320,325,9>",(Error)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (receiver) != "undefined") {_RecordType("<343,351,9>",(receiver)); Inst11++; } } catch(e) {}
  var stack = (function() { return new Error().stack; }).call(receiver);
try { if (Inst7 <= 1000 && typeof (stack) != "undefined") {_RecordType("<287,292,9>",(stack)); Inst7++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<382,391,10>",(undefined)); Inst14++; } } catch(e) {}
  Error.prepareStackTrace = undefined;
try { if (Inst12 <= 1000 && typeof (Error.prepareStackTrace) != "undefined") {_RecordType("<356,379,10>",(Error.prepareStackTrace)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Error) != "undefined") {_RecordType("<356,361,10>",(Error)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (stack[0].getTypeName) != "undefined") {_RecordType("<402,422,11>",(stack[0].getTypeName)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (stack[0]) != "undefined") {_RecordType("<402,410,11>",(stack[0])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (stack) != "undefined") {_RecordType("<402,407,11>",(stack)); Inst17++; } } catch(e) {}
  return stack[0].getTypeName();
}

try { if (Inst18 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<429,439,14>",(assertNull)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<440,451,14>",(getTypeName)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<452,461,14>",(undefined)); Inst20++; } } catch(e) {}
assertNull(getTypeName(undefined));
try { if (Inst21 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<465,475,15>",(assertNull)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<476,487,15>",(getTypeName)); Inst22++; } } catch(e) {}
assertNull(getTypeName(null));
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<496,508,16>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<519,530,16>",(getTypeName)); Inst24++; } } catch(e) {}
assertEquals("Number", getTypeName(1));
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<536,548,17>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<559,570,17>",(getTypeName)); Inst26++; } } catch(e) {}
assertEquals("String", getTypeName(""));
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<577,589,18>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<601,612,18>",(getTypeName)); Inst28++; } } catch(e) {}
assertEquals("Boolean", getTypeName(false));
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<622,634,19>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<645,656,19>",(getTypeName)); Inst30++; } } catch(e) {}
assertEquals("Object", getTypeName({}));
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<663,675,20>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<685,696,20>",(getTypeName)); Inst32++; } } catch(e) {}
assertEquals("Array", getTypeName([]));
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<703,715,21>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (getTypeName) != "undefined") {_RecordType("<726,737,21>",(getTypeName)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Custom) != "undefined") {_RecordType("<752,758,21>",(Custom)); Inst35++; } } catch(e) {}
assertEquals("Custom", getTypeName(new (function Custom(){})()));

