var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var a = [];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1602,1603,28>",(a)); Inst0++; } } catch(e) {}
var new_space_string = "a";
try { if (Inst1 <= 1000 && typeof (new_space_string) != "undefined") {_RecordType("<1614,1630,29>",(new_space_string)); Inst1++; } } catch(e) {}
for (var i = 0; i < 8; i++) {
try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1647,1648,30>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1654,1655,30>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1661,1662,30>",(i)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (new_space_string) != "undefined") {_RecordType("<1690,1706,31>",(new_space_string)); Inst6++; } } catch(e) {}
  new_space_string += new_space_string;
try { if (Inst5 <= 1000 && typeof (new_space_string) != "undefined") {_RecordType("<1670,1686,31>",(new_space_string)); Inst5++; } } catch(e) {}
}
try { if (Inst10 <= 1000 && typeof (a.push) != "undefined") {_RecordType("<1742,1748,33>",(a.push)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1742,1743,33>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (new_space_string) != "undefined") {_RecordType("<1749,1765,33>",(new_space_string)); Inst12++; } } catch(e) {}
for (var i = 0; i < 10000; i++) a.push(new_space_string);
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1719,1720,33>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1726,1727,33>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1737,1738,33>",(i)); Inst9++; } } catch(e) {}

// At some point during the first stringify, allocation causes a GC and
// new_space_string is moved to old space. Make sure that this does not
// screw up reading from the correct location.
try { if (Inst14 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1968,1982,38>",(JSON.stringify)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1968,1972,38>",(JSON)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1983,1984,38>",(a)); Inst16++; } } catch(e) {}
json1 = JSON.stringify(a);
try { if (Inst13 <= 1000 && typeof (json1) != "undefined") {_RecordType("<1960,1965,38>",(json1)); Inst13++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1995,2009,39>",(JSON.stringify)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1995,1999,39>",(JSON)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<2010,2011,39>",(a)); Inst20++; } } catch(e) {}
json2 = JSON.stringify(a);
try { if (Inst17 <= 1000 && typeof (json2) != "undefined") {_RecordType("<1987,1992,39>",(json2)); Inst17++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2014,2024,40>",(assertTrue)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (json1) != "undefined") {_RecordType("<2025,2030,40>",(json1)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (json2) != "undefined") {_RecordType("<2034,2039,40>",(json2)); Inst23++; } } catch(e) {}
assertTrue(json1 == json2, "GC caused JSON.stringify to fail.");

// Check that the slow path of JSON.stringify works correctly wrt GC.
for (var i = 0; i < 10000; i++) {
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2159,2160,43>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2166,2167,43>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2177,2178,43>",(i)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<2194,2204,44>",(i.toString)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2194,2195,44>",(i)); Inst29++; } } catch(e) {}
  var s = i.toString();
try { if (Inst27 <= 1000 && typeof (s) != "undefined") {_RecordType("<2190,2191,44>",(s)); Inst27++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2210,2222,45>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (s) != "undefined") {_RecordType("<2229,2230,45>",(s)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2238,2252,45>",(JSON.stringify)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2238,2242,45>",(JSON)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (s) != "undefined") {_RecordType("<2253,2254,45>",(s)); Inst34++; } } catch(e) {}
  assertEquals('"' + s + '"', JSON.stringify(s, null, 0));
}

for (var i = 0; i < 10000; i++) {
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2279,2280,48>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<2286,2287,48>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2297,2298,48>",(i)); Inst37++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (i.toString) != "undefined") {_RecordType("<2314,2324,49>",(i.toString)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<2314,2315,49>",(i)); Inst40++; } } catch(e) {}
  var s = i.toString() + "\u2603";
try { if (Inst38 <= 1000 && typeof (s) != "undefined") {_RecordType("<2310,2311,49>",(s)); Inst38++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2341,2353,50>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (s) != "undefined") {_RecordType("<2360,2361,50>",(s)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2369,2383,50>",(JSON.stringify)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2369,2373,50>",(JSON)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (s) != "undefined") {_RecordType("<2384,2385,50>",(s)); Inst45++; } } catch(e) {}
  assertEquals('"' + s + '"', JSON.stringify(s, null, 0));
}

