var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<1607,1608,28>",(s)); Inst0++; } } catch(e) {}
function s(v) {
try { if (Inst1 <= 1000 && typeof (v) != "undefined") {_RecordType("<1609,1610,28>",(v)); Inst1++; } } catch(e) {}
  v.x = 1;
try { if (Inst2 <= 1000 && typeof (v.x) != "undefined") {_RecordType("<1616,1619,29>",(v.x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (v) != "undefined") {_RecordType("<1616,1617,29>",(v)); Inst3++; } } catch(e) {}
}

try { if (Inst4 <= 1000 && typeof (c) != "undefined") {_RecordType("<1637,1638,32>",(c)); Inst4++; } } catch(e) {}
function c(p) {
try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<1639,1640,32>",(p)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (p) != "undefined") {_RecordType("<1665,1666,33>",(p)); Inst6++; } } catch(e) {}
  return {__proto__: p};
}

var p = {};
try { if (Inst7 <= 1000 && typeof (p) != "undefined") {_RecordType("<1676,1677,36>",(p)); Inst7++; } } catch(e) {}

// Make p the last prototype in the chain.
p.__proto__ = null;
try { if (Inst8 <= 1000 && typeof (p.__proto__) != "undefined") {_RecordType("<1728,1739,39>",(p.__proto__)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (p) != "undefined") {_RecordType("<1728,1729,39>",(p)); Inst9++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (c) != "undefined") {_RecordType("<1758,1759,41>",(c)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (p) != "undefined") {_RecordType("<1760,1761,41>",(p)); Inst12++; } } catch(e) {}
var o1 = c(p);
try { if (Inst10 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1753,1755,41>",(o1)); Inst10++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (c) != "undefined") {_RecordType("<1773,1774,42>",(c)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (p) != "undefined") {_RecordType("<1775,1776,42>",(p)); Inst15++; } } catch(e) {}
var o2 = c(p);
try { if (Inst13 <= 1000 && typeof (o2) != "undefined") {_RecordType("<1768,1770,42>",(o2)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (c) != "undefined") {_RecordType("<1788,1789,43>",(c)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (p) != "undefined") {_RecordType("<1790,1791,43>",(p)); Inst18++; } } catch(e) {}
var o3 = c(p);
try { if (Inst16 <= 1000 && typeof (o3) != "undefined") {_RecordType("<1783,1785,43>",(o3)); Inst16++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (c) != "undefined") {_RecordType("<1803,1804,44>",(c)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<1805,1806,44>",(p)); Inst21++; } } catch(e) {}
var o4 = c(p);
try { if (Inst19 <= 1000 && typeof (o4) != "undefined") {_RecordType("<1798,1800,44>",(o4)); Inst19++; } } catch(e) {}

// Make y go to slow mode.
// Do this after using p as prototype, since using an object as prototype kicks
// it back into fast mode.
p.y = 1;
try { if (Inst22 <= 1000 && typeof (p.y) != "undefined") {_RecordType("<1944,1947,49>",(p.y)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (p) != "undefined") {_RecordType("<1944,1945,49>",(p)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (p.y) != "undefined") {_RecordType("<1960,1963,50>",(p.y)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (p) != "undefined") {_RecordType("<1960,1961,50>",(p)); Inst25++; } } catch(e) {}
delete p.y;

// Initialize the store IC.
try { if (Inst26 <= 1000 && typeof (s) != "undefined") {_RecordType("<1994,1995,53>",(s)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o1) != "undefined") {_RecordType("<1996,1998,53>",(o1)); Inst27++; } } catch(e) {}
s(o1);
try { if (Inst28 <= 1000 && typeof (s) != "undefined") {_RecordType("<2001,2002,54>",(s)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o2) != "undefined") {_RecordType("<2003,2005,54>",(o2)); Inst29++; } } catch(e) {}
s(o2);

// Do something with x in slow-mode p.
try { if (Inst30 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2048,2069,57>",(Object.defineProperty)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2048,2054,57>",(Object)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (p) != "undefined") {_RecordType("<2070,2071,57>",(p)); Inst32++; } } catch(e) {}
Object.defineProperty(p, "x", { writable: false, value: 5 });

// Verify that directly setting x fails.
o3.x = 10;
try { if (Inst33 <= 1000 && typeof (o3.x) != "undefined") {_RecordType("<2152,2156,60>",(o3.x)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2152,2154,60>",(o3)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2163,2175,61>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o3.x) != "undefined") {_RecordType("<2179,2183,61>",(o3.x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o3) != "undefined") {_RecordType("<2179,2181,61>",(o3)); Inst37++; } } catch(e) {}
assertEquals(5, o3.x);

// Verify that setting x through the IC fails.
try { if (Inst38 <= 1000 && typeof (s) != "undefined") {_RecordType("<2234,2235,64>",(s)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (o4) != "undefined") {_RecordType("<2236,2238,64>",(o4)); Inst39++; } } catch(e) {}
s(o4);
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2241,2253,65>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o4.x) != "undefined") {_RecordType("<2257,2261,65>",(o4.x)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o4) != "undefined") {_RecordType("<2257,2259,65>",(o4)); Inst42++; } } catch(e) {}
assertEquals(5, o4.x);

