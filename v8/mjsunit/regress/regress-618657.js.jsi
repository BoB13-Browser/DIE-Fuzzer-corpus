var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --ignition --ignition-generators --ignition-filter=-foo

try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<245,248,7>",(foo)); Inst0++; } } catch(e) {}
function* foo() { yield 42 }
try { if (Inst1 <= 1000 && typeof (goo) != "undefined") {_RecordType("<274,277,8>",(goo)); Inst1++; } } catch(e) {}
function* goo() { yield 42 }
try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<301,304,9>",(foo)); Inst3++; } } catch(e) {}
var f = foo();
try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<297,298,9>",(f)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (goo) != "undefined") {_RecordType("<316,319,10>",(goo)); Inst5++; } } catch(e) {}
var g = goo();
try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<312,313,10>",(g)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<323,335,11>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f.next().value) != "undefined") {_RecordType("<340,354,11>",(f.next().value)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f.next) != "undefined") {_RecordType("<340,346,11>",(f.next)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<340,341,11>",(f)); Inst9++; } } catch(e) {}
assertEquals(42, f.next().value);
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<357,369,12>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (g.next().value) != "undefined") {_RecordType("<374,388,12>",(g.next().value)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (g.next) != "undefined") {_RecordType("<374,380,12>",(g.next)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<374,375,12>",(g)); Inst13++; } } catch(e) {}
assertEquals(42, g.next().value);
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<391,403,13>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f.next().done) != "undefined") {_RecordType("<410,423,13>",(f.next().done)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f.next) != "undefined") {_RecordType("<410,416,13>",(f.next)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<410,411,13>",(f)); Inst17++; } } catch(e) {}
assertEquals(true, f.next().done);
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<426,438,14>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (g.next().done) != "undefined") {_RecordType("<445,458,14>",(g.next().done)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (g.next) != "undefined") {_RecordType("<445,451,14>",(g.next)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (g) != "undefined") {_RecordType("<445,446,14>",(g)); Inst21++; } } catch(e) {}
assertEquals(true, g.next().done);

