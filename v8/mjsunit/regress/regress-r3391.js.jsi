var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Check what we do if toLocaleString doesn't return a string when we are
// calling Array.prototype.toLocaleString.  The standard is somewhat
// vague on this point.  This test is now passed by both V8 and JSC.

var evil_called = 0;
try { if (Inst0 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<1815,1826,32>",(evil_called)); Inst0++; } } catch(e) {}
var evil_locale_called = 0;
try { if (Inst1 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<1836,1854,33>",(evil_locale_called)); Inst1++; } } catch(e) {}
var exception_thrown = 0;
try { if (Inst2 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<1864,1880,34>",(exception_thrown)); Inst2++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (evil_to_string) != "undefined") {_RecordType("<1896,1910,36>",(evil_to_string)); Inst3++; } } catch(e) {}
function evil_to_string() {
try { if (Inst4 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<1917,1928,37>",(evil_called)); Inst4++; } } catch(e) {}
  evil_called++;
  return this;
}

try { if (Inst5 <= 1000 && typeof (evil_to_locale_string) != "undefined") {_RecordType("<1959,1980,41>",(evil_to_locale_string)); Inst5++; } } catch(e) {}
function evil_to_locale_string() {
try { if (Inst6 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<1987,2005,42>",(evil_locale_called)); Inst6++; } } catch(e) {}
  evil_locale_called++;
  return this;
}

try { if (Inst8 <= 1000 && typeof (evil_to_string) != "undefined") {_RecordType("<2046,2060,46>",(evil_to_string)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (evil_to_locale_string) != "undefined") {_RecordType("<2078,2099,46>",(evil_to_locale_string)); Inst9++; } } catch(e) {}
var o = {toString: evil_to_string, toLocaleString: evil_to_locale_string};
try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<2031,2032,46>",(o)); Inst7++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (e) != "undefined") {_RecordType("<2141,2142,50>",(e)); Inst12++; } } catch(e) {}
try {
try { if (Inst10 <= 1000 && typeof ([o].toLocaleString) != "undefined") {_RecordType("<2111,2129,49>",([o].toLocaleString)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<2112,2113,49>",(o)); Inst11++; } } catch(e) {}
  [o].toLocaleString();
} catch(e) {
try { if (Inst13 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2148,2164,51>",(exception_thrown)); Inst13++; } } catch(e) {}
  exception_thrown++;
}

try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2171,2183,54>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<2187,2198,54>",(evil_called)); Inst15++; } } catch(e) {}
assertEquals(1, evil_called, "evil1");
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2210,2222,55>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<2226,2244,55>",(evil_locale_called)); Inst17++; } } catch(e) {}
assertEquals(1, evil_locale_called, "local1");
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2257,2269,56>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2273,2289,56>",(exception_thrown)); Inst19++; } } catch(e) {}
assertEquals(1, exception_thrown, "exception1");

try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<2339,2340,60>",(e)); Inst22++; } } catch(e) {}
try {
try { if (Inst20 <= 1000 && typeof ([o].toString) != "undefined") {_RecordType("<2315,2327,59>",([o].toString)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o) != "undefined") {_RecordType("<2316,2317,59>",(o)); Inst21++; } } catch(e) {}
  [o].toString();
} catch(e) {
try { if (Inst23 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2346,2362,61>",(exception_thrown)); Inst23++; } } catch(e) {}
  exception_thrown++;
}

try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2369,2381,64>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<2385,2396,64>",(evil_called)); Inst25++; } } catch(e) {}
assertEquals(2, evil_called, "evil2");
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2408,2420,65>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<2424,2442,65>",(evil_locale_called)); Inst27++; } } catch(e) {}
assertEquals(1, evil_locale_called, "local2");
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2455,2467,66>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2471,2487,66>",(exception_thrown)); Inst29++; } } catch(e) {}
assertEquals(2, exception_thrown, "exception2");

try { if (Inst33 <= 1000 && typeof (e) != "undefined") {_RecordType("<2534,2535,70>",(e)); Inst33++; } } catch(e) {}
try {
try { if (Inst30 <= 1000 && typeof ([o].join) != "undefined") {_RecordType("<2513,2521,69>",([o].join)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<2514,2515,69>",(o)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o) != "undefined") {_RecordType("<2522,2523,69>",(o)); Inst32++; } } catch(e) {}
  [o].join(o);
} catch(e) {
try { if (Inst34 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2541,2557,71>",(exception_thrown)); Inst34++; } } catch(e) {}
  exception_thrown++;
}

try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2564,2576,74>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (evil_called) != "undefined") {_RecordType("<2580,2591,74>",(evil_called)); Inst36++; } } catch(e) {}
assertEquals(3, evil_called, "evil3");
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2603,2615,75>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (evil_locale_called) != "undefined") {_RecordType("<2619,2637,75>",(evil_locale_called)); Inst38++; } } catch(e) {}
assertEquals(1, evil_locale_called, "local3");
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2650,2662,76>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (exception_thrown) != "undefined") {_RecordType("<2666,2682,76>",(exception_thrown)); Inst40++; } } catch(e) {}
assertEquals(3, exception_thrown, "exception3");
try { if (Inst41 <= 1000 && typeof (print) != "undefined") {_RecordType("<2699,2704,77>",(print)); Inst41++; } } catch(e) {}
print("ok");

