var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Ensure that null only equals null and undefined, also for variables.

var null_var = null;
try { if (Inst0 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<1675,1683,30>",(null_var)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof ([][0]) != "undefined") {_RecordType("<1708,1713,31>",([][0])); Inst2++; } } catch(e) {}
var undef_var = [][0];
try { if (Inst1 <= 1000 && typeof (undef_var) != "undefined") {_RecordType("<1696,1705,31>",(undef_var)); Inst1++; } } catch(e) {}
var boolean_var = false;
try { if (Inst3 <= 1000 && typeof (boolean_var) != "undefined") {_RecordType("<1719,1730,32>",(boolean_var)); Inst3++; } } catch(e) {}
var number_var = 0;
try { if (Inst4 <= 1000 && typeof (number_var) != "undefined") {_RecordType("<1744,1754,33>",(number_var)); Inst4++; } } catch(e) {}
var string_var = "";
try { if (Inst5 <= 1000 && typeof (string_var) != "undefined") {_RecordType("<1764,1774,34>",(string_var)); Inst5++; } } catch(e) {}
var object_var = { foo : 0 };
try { if (Inst6 <= 1000 && typeof (object_var) != "undefined") {_RecordType("<1785,1795,35>",(object_var)); Inst6++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1812,1822,37>",(assertTrue)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<1823,1831,37>",(null_var)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<1835,1843,37>",(null_var)); Inst9++; } } catch(e) {}
assertTrue(null_var == null_var);
try { if (Inst10 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1846,1856,38>",(assertTrue)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<1857,1865,38>",(null_var)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (undef_var) != "undefined") {_RecordType("<1869,1878,38>",(undef_var)); Inst12++; } } catch(e) {}
assertTrue(null_var == undef_var);
try { if (Inst13 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1881,1891,39>",(assertTrue)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<1892,1900,39>",(null_var)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (boolean_var) != "undefined") {_RecordType("<1904,1915,39>",(boolean_var)); Inst15++; } } catch(e) {}
assertTrue(null_var != boolean_var);
try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1918,1928,40>",(assertTrue)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<1929,1937,40>",(null_var)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (number_var) != "undefined") {_RecordType("<1941,1951,40>",(number_var)); Inst18++; } } catch(e) {}
assertTrue(null_var != number_var);
try { if (Inst19 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1954,1964,41>",(assertTrue)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<1965,1973,41>",(null_var)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (string_var) != "undefined") {_RecordType("<1977,1987,41>",(string_var)); Inst21++; } } catch(e) {}
assertTrue(null_var != string_var);
try { if (Inst22 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1990,2000,42>",(assertTrue)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<2001,2009,42>",(null_var)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (object_var) != "undefined") {_RecordType("<2013,2023,42>",(object_var)); Inst24++; } } catch(e) {}
assertTrue(null_var != object_var);

try { if (Inst25 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2027,2037,44>",(assertTrue)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (undef_var) != "undefined") {_RecordType("<2038,2047,44>",(undef_var)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<2051,2059,44>",(null_var)); Inst27++; } } catch(e) {}
assertTrue(undef_var == null_var);
try { if (Inst28 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2062,2072,45>",(assertTrue)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (boolean_var) != "undefined") {_RecordType("<2073,2084,45>",(boolean_var)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<2088,2096,45>",(null_var)); Inst30++; } } catch(e) {}
assertTrue(boolean_var != null_var);
try { if (Inst31 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2099,2109,46>",(assertTrue)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (number_var) != "undefined") {_RecordType("<2110,2120,46>",(number_var)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<2124,2132,46>",(null_var)); Inst33++; } } catch(e) {}
assertTrue(number_var != null_var);
try { if (Inst34 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2135,2145,47>",(assertTrue)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (string_var) != "undefined") {_RecordType("<2146,2156,47>",(string_var)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<2160,2168,47>",(null_var)); Inst36++; } } catch(e) {}
assertTrue(string_var != null_var);
try { if (Inst37 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2171,2181,48>",(assertTrue)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (object_var) != "undefined") {_RecordType("<2182,2192,48>",(object_var)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (null_var) != "undefined") {_RecordType("<2196,2204,48>",(null_var)); Inst39++; } } catch(e) {}
assertTrue(object_var != null_var);

