var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst1 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<188,203,5>",(Array.prototype)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Array) != "undefined") {_RecordType("<188,193,5>",(Array)); Inst2++; } } catch(e) {}
var o = { __proto__:Array.prototype, 0:"x" };
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<172,173,5>",(o)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (boomer) != "undefined") {_RecordType("<223,229,6>",(boomer)); Inst3++; } } catch(e) {}
function boomer() { return 0; }
try { if (Inst4 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<246,267,7>",(Object.defineProperty)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Object) != "undefined") {_RecordType("<246,252,7>",(Object)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<268,269,7>",(o)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (boomer) != "undefined") {_RecordType("<287,293,7>",(boomer)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (boomer) != "undefined") {_RecordType("<299,305,7>",(boomer)); Inst8++; } } catch(e) {}
Object.defineProperty(o, "length", { get:boomer, set:boomer });
try { if (Inst9 <= 1000 && typeof (Object.seal) != "undefined") {_RecordType("<310,321,8>",(Object.seal)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<310,316,8>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<322,323,8>",(o)); Inst11++; } } catch(e) {}
Object.seal(o);

try { if (Inst12 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<327,345,10>",(assertDoesNotThrow)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o.push) != "undefined") {_RecordType("<359,365,10>",(o.push)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<359,360,10>",(o)); Inst14++; } } catch(e) {}
assertDoesNotThrow(function() { o.push(1); });
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<374,386,11>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o.length) != "undefined") {_RecordType("<390,398,11>",(o.length)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<390,391,11>",(o)); Inst17++; } } catch(e) {}
assertEquals(0, o.length);
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<401,413,12>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<417,421,12>",(o[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<417,418,12>",(o)); Inst20++; } } catch(e) {}
assertEquals(1, o[0]);

try { if (Inst21 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<425,443,14>",(assertDoesNotThrow)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o.unshift) != "undefined") {_RecordType("<457,466,14>",(o.unshift)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<457,458,14>",(o)); Inst23++; } } catch(e) {}
assertDoesNotThrow(function() { o.unshift(2); });
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<475,487,15>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o.length) != "undefined") {_RecordType("<491,499,15>",(o.length)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<491,492,15>",(o)); Inst26++; } } catch(e) {}
assertEquals(0, o.length);
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<502,514,16>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<518,522,16>",(o[0])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<518,519,16>",(o)); Inst29++; } } catch(e) {}
assertEquals(2, o[0]);

