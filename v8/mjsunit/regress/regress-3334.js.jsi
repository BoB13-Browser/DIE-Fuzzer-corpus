var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<177,180,5>",(foo)); Inst0++; } } catch(e) {}
function foo(){}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<185,206,6>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<185,191,6>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<207,210,6>",(foo)); Inst3++; } } catch(e) {}
Object.defineProperty(foo, "prototype", { value: 2 });
try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<240,252,7>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (foo.prototype) != "undefined") {_RecordType("<256,269,7>",(foo.prototype)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (foo) != "undefined") {_RecordType("<256,259,7>",(foo)); Inst6++; } } catch(e) {}
assertEquals(2, foo.prototype);

try { if (Inst7 <= 1000 && typeof (bar) != "undefined") {_RecordType("<282,285,9>",(bar)); Inst7++; } } catch(e) {}
function bar(){}
try { if (Inst8 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<290,311,10>",(Object.defineProperty)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object) != "undefined") {_RecordType("<290,296,10>",(Object)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (bar) != "undefined") {_RecordType("<312,315,10>",(bar)); Inst10++; } } catch(e) {}
Object.defineProperty(bar, "prototype", { value: 2, writable: false });
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<362,374,11>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (bar.prototype) != "undefined") {_RecordType("<378,391,11>",(bar.prototype)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (bar) != "undefined") {_RecordType("<378,381,11>",(bar)); Inst13++; } } catch(e) {}
assertEquals(2, bar.prototype);
try { if (Inst14 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<394,406,12>",(assertThrows)); Inst14++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<457,466,12>",(TypeError)); Inst17++; } } catch(e) {}
assertThrows(function() { "use strict"; bar.prototype = 10; }, TypeError);
try { if (Inst15 <= 1000 && typeof (bar.prototype) != "undefined") {_RecordType("<434,447,12>",(bar.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (bar) != "undefined") {_RecordType("<434,437,12>",(bar)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<469,481,13>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Object.getOwnPropertyDescriptor(bar,"prototype").writable) != "undefined") {_RecordType("<489,546,13>",(Object.getOwnPropertyDescriptor(bar,"prototype").writable)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<489,520,13>",(Object.getOwnPropertyDescriptor)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Object) != "undefined") {_RecordType("<489,495,13>",(Object)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (bar) != "undefined") {_RecordType("<521,524,13>",(bar)); Inst22++; } } catch(e) {}
assertEquals(false, Object.getOwnPropertyDescriptor(bar,"prototype").writable);

