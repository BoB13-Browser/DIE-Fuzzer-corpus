var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --allow-natives-syntax

try { if (Inst1 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<216,227,7>",(ArrayBuffer)); Inst1++; } } catch(e) {}
var ab1 = new ArrayBuffer(8);
try { if (Inst0 <= 1000 && typeof (ab1) != "undefined") {_RecordType("<206,209,7>",(ab1)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (ab1.__defineGetter__) != "undefined") {_RecordType("<232,252,8>",(ab1.__defineGetter__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ab1) != "undefined") {_RecordType("<232,235,8>",(ab1)); Inst3++; } } catch(e) {}
ab1.__defineGetter__("byteLength", function() { return 1000000; });
try { if (Inst5 <= 1000 && typeof (ab1.slice) != "undefined") {_RecordType("<310,319,9>",(ab1.slice)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ab1) != "undefined") {_RecordType("<310,313,9>",(ab1)); Inst6++; } } catch(e) {}
var ab2 = ab1.slice(800000, 900000);
try { if (Inst4 <= 1000 && typeof (ab2) != "undefined") {_RecordType("<304,307,9>",(ab2)); Inst4++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<353,363,10>",(Uint8Array)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ab2) != "undefined") {_RecordType("<364,367,10>",(ab2)); Inst9++; } } catch(e) {}
var array = new Uint8Array(ab2);
try { if (Inst7 <= 1000 && typeof (array) != "undefined") {_RecordType("<341,346,10>",(array)); Inst7++; } } catch(e) {}
for (var i = 0; i < array.length; i++) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<379,380,11>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<386,387,11>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<390,402,11>",(array.length)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (array) != "undefined") {_RecordType("<390,395,11>",(array)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<404,405,11>",(i)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<413,425,12>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (array[i]) != "undefined") {_RecordType("<429,437,12>",(array[i])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (array) != "undefined") {_RecordType("<429,434,12>",(array)); Inst17++; } } catch(e) {}
  assertEquals(0, array[i]);
}
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<442,454,14>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<458,470,14>",(array.length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<458,463,14>",(array)); Inst20++; } } catch(e) {}
assertEquals(0, array.length);


try { if (Inst22 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<489,500,17>",(ArrayBuffer)); Inst22++; } } catch(e) {}
var ab3 = new ArrayBuffer(8);
try { if (Inst21 <= 1000 && typeof (ab3) != "undefined") {_RecordType("<479,482,17>",(ab3)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (ab3.__defineGetter__) != "undefined") {_RecordType("<505,525,18>",(ab3.__defineGetter__)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ab3) != "undefined") {_RecordType("<505,508,18>",(ab3)); Inst24++; } } catch(e) {}
ab3.__defineGetter__("byteLength", function() { return 0xFFFFFFFC; });
try { if (Inst26 <= 1000 && typeof (DataView) != "undefined") {_RecordType("<590,598,19>",(DataView)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ab3) != "undefined") {_RecordType("<599,602,19>",(ab3)); Inst27++; } } catch(e) {}
var aaa = new DataView(ab3);
try { if (Inst25 <= 1000 && typeof (aaa) != "undefined") {_RecordType("<580,583,19>",(aaa)); Inst25++; } } catch(e) {}

for (var i = 10; i < aaa.length; i++) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<615,616,21>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<623,624,21>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (aaa.length) != "undefined") {_RecordType("<627,637,21>",(aaa.length)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (aaa) != "undefined") {_RecordType("<627,630,21>",(aaa)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<639,640,21>",(i)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (aaa.setInt8) != "undefined") {_RecordType("<648,659,22>",(aaa.setInt8)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (aaa) != "undefined") {_RecordType("<648,651,22>",(aaa)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<660,661,22>",(i)); Inst35++; } } catch(e) {}
  aaa.setInt8(i, 0xcc);
}
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<672,684,24>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (aaa.byteLength) != "undefined") {_RecordType("<688,702,24>",(aaa.byteLength)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (aaa) != "undefined") {_RecordType("<688,691,24>",(aaa)); Inst38++; } } catch(e) {}
assertEquals(8, aaa.byteLength);


try { if (Inst40 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<719,728,27>",(Int8Array)); Inst40++; } } catch(e) {}
var a = new Int8Array(4);
try { if (Inst39 <= 1000 && typeof (a) != "undefined") {_RecordType("<711,712,27>",(a)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (a.__defineGetter__) != "undefined") {_RecordType("<733,751,28>",(a.__defineGetter__)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (a) != "undefined") {_RecordType("<733,734,28>",(a)); Inst42++; } } catch(e) {}
a.__defineGetter__("length", function() { return 0xFFFF; });
try { if (Inst44 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<806,815,29>",(Int8Array)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (a) != "undefined") {_RecordType("<816,817,29>",(a)); Inst45++; } } catch(e) {}
var b = new Int8Array(a);
try { if (Inst43 <= 1000 && typeof (b) != "undefined") {_RecordType("<798,799,29>",(b)); Inst43++; } } catch(e) {}
for (var i = 0; i < b.length; i++) {
try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<829,830,30>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<836,837,30>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (b.length) != "undefined") {_RecordType("<840,848,30>",(b.length)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (b) != "undefined") {_RecordType("<840,841,30>",(b)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (i) != "undefined") {_RecordType("<850,851,30>",(i)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<859,871,31>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (b[i]) != "undefined") {_RecordType("<875,879,31>",(b[i])); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (b) != "undefined") {_RecordType("<875,876,31>",(b)); Inst53++; } } catch(e) {}
  assertEquals(0, b[i]);
}


try { if (Inst55 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<900,911,35>",(ArrayBuffer)); Inst55++; } } catch(e) {}
var ab4 = new ArrayBuffer(8);
try { if (Inst54 <= 1000 && typeof (ab4) != "undefined") {_RecordType("<890,893,35>",(ab4)); Inst54++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (ab4.__defineGetter__) != "undefined") {_RecordType("<916,936,36>",(ab4.__defineGetter__)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (ab4) != "undefined") {_RecordType("<916,919,36>",(ab4)); Inst57++; } } catch(e) {}
ab4.__defineGetter__("byteLength", function() { return 0xFFFFFFFC; });
try { if (Inst59 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<1002,1013,37>",(Uint32Array)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (ab4) != "undefined") {_RecordType("<1014,1017,37>",(ab4)); Inst60++; } } catch(e) {}
var aaaa = new Uint32Array(ab4);
try { if (Inst58 <= 1000 && typeof (aaaa) != "undefined") {_RecordType("<991,995,37>",(aaaa)); Inst58++; } } catch(e) {}

for (var i = 10; i < aaaa.length; i++) {
try { if (Inst61 <= 1000 && typeof (i) != "undefined") {_RecordType("<1030,1031,39>",(i)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (i) != "undefined") {_RecordType("<1038,1039,39>",(i)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (aaaa.length) != "undefined") {_RecordType("<1042,1053,39>",(aaaa.length)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (aaaa) != "undefined") {_RecordType("<1042,1046,39>",(aaaa)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (i) != "undefined") {_RecordType("<1055,1056,39>",(i)); Inst65++; } } catch(e) {}
  aaaa[i] = 0xcccccccc;
try { if (Inst66 <= 1000 && typeof (aaaa[i]) != "undefined") {_RecordType("<1064,1071,40>",(aaaa[i])); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (aaaa) != "undefined") {_RecordType("<1064,1068,40>",(aaaa)); Inst67++; } } catch(e) {}
}
try { if (Inst68 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1088,1100,42>",(assertEquals)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (aaaa.length) != "undefined") {_RecordType("<1104,1115,42>",(aaaa.length)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (aaaa) != "undefined") {_RecordType("<1104,1108,42>",(aaaa)); Inst70++; } } catch(e) {}
assertEquals(2, aaaa.length);

