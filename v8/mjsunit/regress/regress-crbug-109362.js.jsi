var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<178,182,6>",(test)); Inst0++; } } catch(e) {}
function test(expectation, f) {
try { if (Inst1 <= 1000 && typeof (expectation) != "undefined") {_RecordType("<183,194,6>",(expectation)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<196,197,6>",(f)); Inst2++; } } catch(e) {}
  var stack;
try { if (Inst3 <= 1000 && typeof (stack) != "undefined") {_RecordType("<207,212,7>",(stack)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<242,243,10>",(e)); Inst5++; } } catch(e) {}
  try {
try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<226,227,9>",(f)); Inst4++; } } catch(e) {}
    f();
  } catch (e) {
try { if (Inst7 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<259,266,11>",(e.stack)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<259,260,11>",(e)); Inst8++; } } catch(e) {}
    stack = e.stack;
try { if (Inst6 <= 1000 && typeof (stack) != "undefined") {_RecordType("<251,256,11>",(stack)); Inst6++; } } catch(e) {}
  }
try { if (Inst9 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<274,284,13>",(assertTrue)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (stack.indexOf) != "undefined") {_RecordType("<285,298,13>",(stack.indexOf)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (stack) != "undefined") {_RecordType("<285,290,13>",(stack)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (expectation) != "undefined") {_RecordType("<322,333,13>",(expectation)); Inst12++; } } catch(e) {}
  assertTrue(stack.indexOf("at eval (evaltest:" + expectation + ")") > 0);
}

/*
(function() {
1 + reference_error //@ sourceURL=evaltest
})
*/
try { if (Inst13 <= 1000 && typeof (test) != "undefined") {_RecordType("<416,420,21>",(test)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Function) != "undefined") {_RecordType("<432,440,21>",(Function)); Inst14++; } } catch(e) {}
test("2:5", new Function(
    '1 + reference_error //@ sourceURL=evaltest'));
/*
(function(x
/\**\/) {

 1 + reference_error //@ sourceURL=evaltest
})
*/
try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<570,574,30>",(test)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Function) != "undefined") {_RecordType("<586,594,30>",(Function)); Inst16++; } } catch(e) {}
test("4:6", new Function(
    'x', '\n 1 + reference_error //@ sourceURL=evaltest'));
/*
(function(x

,z//
,y
/\**\/) {

 1 + reference_error //@ sourceURL=evaltest
})
*/
try { if (Inst17 <= 1000 && typeof (test) != "undefined") {_RecordType("<741,745,42>",(test)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Function) != "undefined") {_RecordType("<757,765,42>",(Function)); Inst18++; } } catch(e) {}
test("7:6", new Function(
    'x\n\n', "z//\n", "y", '\n 1 + reference_error //@ sourceURL=evaltest'));
/*
(function(x/\*,z//
,y*\/
/\**\/) {
1 + reference_error //@ sourceURL=evaltest
})
*/
try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<932,936,51>",(test)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Function) != "undefined") {_RecordType("<948,956,51>",(Function)); Inst20++; } } catch(e) {}
test("4:5", new Function(
    'x/*', "z//\n", "y*/", '1 + reference_error //@ sourceURL=evaltest'));
/*
(function () {
 1 + reference_error //@ sourceURL=evaltest5
})
*/
try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<1102,1106,58>",(test)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1114,1118,58>",(eval)); Inst22++; } } catch(e) {}
test("2:6", eval(
    '(function () {\n 1 + reference_error //@ sourceURL=evaltest\n})'));

