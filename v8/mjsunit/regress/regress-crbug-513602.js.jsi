var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (Parent) != "undefined") {_RecordType("<177,183,5>",(Parent)); Inst0++; } } catch(e) {}
function Parent() {}

try { if (Inst1 <= 1000 && typeof (Child) != "undefined") {_RecordType("<199,204,7>",(Child)); Inst1++; } } catch(e) {}
function Child() {}
try { if (Inst4 <= 1000 && typeof (Parent) != "undefined") {_RecordType("<232,238,8>",(Parent)); Inst4++; } } catch(e) {}
Child.prototype = new Parent();
try { if (Inst2 <= 1000 && typeof (Child.prototype) != "undefined") {_RecordType("<210,225,8>",(Child.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Child) != "undefined") {_RecordType("<210,215,8>",(Child)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (Child) != "undefined") {_RecordType("<258,263,9>",(Child)); Inst6++; } } catch(e) {}
var child = new Child();
try { if (Inst5 <= 1000 && typeof (child) != "undefined") {_RecordType("<246,251,9>",(child)); Inst5++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (crash) != "undefined") {_RecordType("<277,282,11>",(crash)); Inst7++; } } catch(e) {}
function crash() {
try { if (Inst8 <= 1000 && typeof (child.__proto__) != "undefined") {_RecordType("<296,311,12>",(child.__proto__)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (child) != "undefined") {_RecordType("<296,301,12>",(child)); Inst9++; } } catch(e) {}
  return child.__proto__;
}

try { if (Inst10 <= 1000 && typeof (crash) != "undefined") {_RecordType("<316,321,15>",(crash)); Inst10++; } } catch(e) {}
crash();
try { if (Inst11 <= 1000 && typeof (crash) != "undefined") {_RecordType("<325,330,16>",(crash)); Inst11++; } } catch(e) {}
crash();

// Trigger a fast->slow->fast dance of Parent.prototype's map...
try { if (Inst12 <= 1000 && typeof (Parent.prototype.__defineSetter__) != "undefined") {_RecordType("<400,433,19>",(Parent.prototype.__defineSetter__)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Parent.prototype) != "undefined") {_RecordType("<400,416,19>",(Parent.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Parent) != "undefined") {_RecordType("<400,406,19>",(Parent)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<454,459,19>",(print)); Inst15++; } } catch(e) {}
Parent.prototype.__defineSetter__("foo", function() { print("A"); });
try { if (Inst16 <= 1000 && typeof (Parent.prototype.__defineSetter__) != "undefined") {_RecordType("<470,503,20>",(Parent.prototype.__defineSetter__)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Parent.prototype) != "undefined") {_RecordType("<470,486,20>",(Parent.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Parent) != "undefined") {_RecordType("<470,476,20>",(Parent)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<524,529,20>",(print)); Inst19++; } } catch(e) {}
Parent.prototype.__defineSetter__("foo", function() { print("B"); });
// ...and collect more type feedback.
try { if (Inst20 <= 1000 && typeof (crash) != "undefined") {_RecordType("<578,583,22>",(crash)); Inst20++; } } catch(e) {}
crash();

// Now modify the prototype chain. The right cell fails to get invalidated.
try { if (Inst21 <= 1000 && typeof (Object.prototype.__proto__) != "undefined") {_RecordType("<671,697,25>",(Object.prototype.__proto__)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<671,687,25>",(Object.prototype)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Object) != "undefined") {_RecordType("<671,677,25>",(Object)); Inst23++; } } catch(e) {}
delete Object.prototype.__proto__;
try { if (Inst24 <= 1000 && typeof (crash) != "undefined") {_RecordType("<699,704,26>",(crash)); Inst24++; } } catch(e) {}
crash();

