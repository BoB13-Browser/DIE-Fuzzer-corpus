var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<177,178,5>",(f)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<190,199,5>",(arguments)); Inst1++; } } catch(e) {}
function f() { return arguments }

// Reconfiguring function.name should update both the attributes and the value.
try { if (Inst2 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<283,304,8>",(Object.defineProperty)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<283,289,8>",(Object)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<305,306,8>",(f)); Inst4++; } } catch(e) {}
Object.defineProperty(f, "name", {
  writable: true, configurable: true, value: 10});
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<369,381,10>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<463,494,11>",(Object.getOwnPropertyDescriptor)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<463,469,11>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<495,496,11>",(f)); Inst8++; } } catch(e) {}
assertEquals({value: 10, writable: true, enumerable: false, configurable: true},
             Object.getOwnPropertyDescriptor(f, "name"));

try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<520,521,13>",(f)); Inst10++; } } catch(e) {}
var args = f();
try { if (Inst9 <= 1000 && typeof (args) != "undefined") {_RecordType("<513,517,13>",(args)); Inst9++; } } catch(e) {}

// Setting a value for arguments[Symbol.iterator] should not affect the
// attributes.
args[Symbol.iterator] = 10;
try { if (Inst11 <= 1000 && typeof (args[Symbol.iterator]) != "undefined") {_RecordType("<613,634,17>",(args[Symbol.iterator])); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (args) != "undefined") {_RecordType("<613,617,17>",(args)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<618,633,17>",(Symbol.iterator)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<618,624,17>",(Symbol)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<641,653,18>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<735,766,19>",(Object.getOwnPropertyDescriptor)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Object) != "undefined") {_RecordType("<735,741,19>",(Object)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (args) != "undefined") {_RecordType("<767,771,19>",(args)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Symbol.iterator) != "undefined") {_RecordType("<773,788,19>",(Symbol.iterator)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<773,779,19>",(Symbol)); Inst20++; } } catch(e) {}
assertEquals({value: 10, writable: true, configurable: true, enumerable: false},
             Object.getOwnPropertyDescriptor(args, Symbol.iterator));

