var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Whenever we enter a with-scope, we copy the context. This in itself is fine
// (contexts may escape), but when leaving a with-scope, we currently also copy
// the context instead of reverting to the original. This does not work because
// inner functions may already have been created using the original context. In
// the failing test case below, the inner function is run in the original context
// (where x is undefined), but the assignment to x after the with-statement is
// run in the copied context:

// RegExp caching doesn't set lastIndex correctly.
// See http://code.google.com/p/chromium/issues/detail?id=52801

var re = /a/g;
try { if (Inst0 <= 1000 && typeof (re) != "undefined") {_RecordType("<2229,2231,39>",(re)); Inst0++; } } catch(e) {}

var str = "bbbbabbbbabbbb";
try { if (Inst1 <= 1000 && typeof (str) != "undefined") {_RecordType("<2245,2248,41>",(str)); Inst1++; } } catch(e) {}

// Test

try { if (Inst2 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<2279,2286,45>",(re.test)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (re) != "undefined") {_RecordType("<2279,2281,45>",(re)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (str) != "undefined") {_RecordType("<2287,2290,45>",(str)); Inst4++; } } catch(e) {}
re.test(str);
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2293,2305,46>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2309,2321,46>",(re.lastIndex)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (re) != "undefined") {_RecordType("<2309,2311,46>",(re)); Inst7++; } } catch(e) {}
assertEquals(5, re.lastIndex);

re.lastIndex = 0;
try { if (Inst8 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2325,2337,48>",(re.lastIndex)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (re) != "undefined") {_RecordType("<2325,2327,48>",(re)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<2343,2350,49>",(re.test)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (re) != "undefined") {_RecordType("<2343,2345,49>",(re)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (str) != "undefined") {_RecordType("<2351,2354,49>",(str)); Inst12++; } } catch(e) {}
re.test(str);
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2357,2369,50>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2373,2385,50>",(re.lastIndex)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (re) != "undefined") {_RecordType("<2373,2375,50>",(re)); Inst15++; } } catch(e) {}
assertEquals(5, re.lastIndex);  // Fails if caching.

re.lastIndex = 0;
try { if (Inst16 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2411,2423,52>",(re.lastIndex)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (re) != "undefined") {_RecordType("<2411,2413,52>",(re)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<2429,2436,53>",(re.test)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (re) != "undefined") {_RecordType("<2429,2431,53>",(re)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (str) != "undefined") {_RecordType("<2437,2440,53>",(str)); Inst20++; } } catch(e) {}
re.test(str);
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2443,2455,54>",(assertEquals)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2459,2471,54>",(re.lastIndex)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (re) != "undefined") {_RecordType("<2459,2461,54>",(re)); Inst23++; } } catch(e) {}
assertEquals(5, re.lastIndex);  // Fails if caching.

// Exec

re = /a/g;
try { if (Inst24 <= 1000 && typeof (re) != "undefined") {_RecordType("<2506,2508,58>",(re)); Inst24++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<2518,2525,60>",(re.exec)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (re) != "undefined") {_RecordType("<2518,2520,60>",(re)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (str) != "undefined") {_RecordType("<2526,2529,60>",(str)); Inst27++; } } catch(e) {}
re.exec(str);
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2532,2544,61>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2548,2560,61>",(re.lastIndex)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (re) != "undefined") {_RecordType("<2548,2550,61>",(re)); Inst30++; } } catch(e) {}
assertEquals(5, re.lastIndex);

re.lastIndex = 0;
try { if (Inst31 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2564,2576,63>",(re.lastIndex)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (re) != "undefined") {_RecordType("<2564,2566,63>",(re)); Inst32++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<2582,2589,64>",(re.exec)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (re) != "undefined") {_RecordType("<2582,2584,64>",(re)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (str) != "undefined") {_RecordType("<2590,2593,64>",(str)); Inst35++; } } catch(e) {}
re.exec(str);
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2596,2608,65>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2612,2624,65>",(re.lastIndex)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (re) != "undefined") {_RecordType("<2612,2614,65>",(re)); Inst38++; } } catch(e) {}
assertEquals(5, re.lastIndex);  // Fails if caching.

re.lastIndex = 0;
try { if (Inst39 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2650,2662,67>",(re.lastIndex)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (re) != "undefined") {_RecordType("<2650,2652,67>",(re)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<2668,2675,68>",(re.exec)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (re) != "undefined") {_RecordType("<2668,2670,68>",(re)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (str) != "undefined") {_RecordType("<2676,2679,68>",(str)); Inst43++; } } catch(e) {}
re.exec(str);
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2682,2694,69>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (re.lastIndex) != "undefined") {_RecordType("<2698,2710,69>",(re.lastIndex)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (re) != "undefined") {_RecordType("<2698,2700,69>",(re)); Inst46++; } } catch(e) {}
assertEquals(5, re.lastIndex);  // Fails if caching.

