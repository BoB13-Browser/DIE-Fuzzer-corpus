var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-gc

try { if (Inst1 <= 1000 && typeof (Array) != "undefined") {_RecordType("<203,208,7>",(Array)); Inst1++; } } catch(e) {}
array = new Array(10);
try { if (Inst0 <= 1000 && typeof (array) != "undefined") {_RecordType("<191,196,7>",(array)); Inst0++; } } catch(e) {}
array[0] = 0.1;
try { if (Inst2 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<214,222,8>",(array[0])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (array) != "undefined") {_RecordType("<214,219,8>",(array)); Inst3++; } } catch(e) {}
// array[1] = THE_HOLE, reading through the prototype chain
array[2] = 2.1;
try { if (Inst4 <= 1000 && typeof (array[2]) != "undefined") {_RecordType("<290,298,10>",(array[2])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (array) != "undefined") {_RecordType("<290,295,10>",(array)); Inst5++; } } catch(e) {}
array[3] = 3.1;
try { if (Inst6 <= 1000 && typeof (array[3]) != "undefined") {_RecordType("<306,314,11>",(array[3])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (array) != "undefined") {_RecordType("<306,311,11>",(array)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (array.slice) != "undefined") {_RecordType("<334,345,13>",(array.slice)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<334,339,13>",(array)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<349,361,13>",(array.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<349,354,13>",(array)); Inst12++; } } catch(e) {}
var copy = array.slice(0, array.length);
try { if (Inst8 <= 1000 && typeof (copy) != "undefined") {_RecordType("<327,331,13>",(copy)); Inst8++; } } catch(e) {}

// Change the array's prototype.
var proto = {};
try { if (Inst13 <= 1000 && typeof (proto) != "undefined") {_RecordType("<402,407,16>",(proto)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (proto) != "undefined") {_RecordType("<432,437,17>",(proto)); Inst16++; } } catch(e) {}
array.__proto__ = proto;
try { if (Inst14 <= 1000 && typeof (array.__proto__) != "undefined") {_RecordType("<414,429,17>",(array.__proto__)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (array) != "undefined") {_RecordType("<414,419,17>",(array)); Inst15++; } } catch(e) {}

// Define [1] on the prototype to alter the array during concatenation.
try { if (Inst17 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<512,533,20>",(Object.defineProperty)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Object) != "undefined") {_RecordType("<512,518,20>",(Object)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (proto) != "undefined") {_RecordType("<537,542,21>",(proto)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (get) != "undefined") {_RecordType("<553,556,22>",(get)); Inst20++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (set) != "undefined") {_RecordType("<704,707,29>",(set)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (new_value) != "undefined") {_RecordType("<708,717,29>",(new_value)); Inst25++; } } catch(e) {}
Object.defineProperty(
  proto, 1, {
    get() {
      // Alter the array.
      array.length = 1;
try { if (Inst21 <= 1000 && typeof (array.length) != "undefined") {_RecordType("<593,605,24>",(array.length)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (array) != "undefined") {_RecordType("<593,598,24>",(array)); Inst22++; } } catch(e) {}
      // Force gc to move the array.
try { if (Inst23 <= 1000 && typeof (gc) != "undefined") {_RecordType("<654,656,26>",(gc)); Inst23++; } } catch(e) {}
      gc();
      return "value from proto";
    },
    set(new_value) { }
});

try { if (Inst27 <= 1000 && typeof (Array.prototype.concat.call) != "undefined") {_RecordType("<750,777,32>",(Array.prototype.concat.call)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array.prototype.concat) != "undefined") {_RecordType("<750,772,32>",(Array.prototype.concat)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<750,765,32>",(Array.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Array) != "undefined") {_RecordType("<750,755,32>",(Array)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (array) != "undefined") {_RecordType("<778,783,32>",(array)); Inst31++; } } catch(e) {}
var concatted_array = Array.prototype.concat.call(array);
try { if (Inst26 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<732,747,32>",(concatted_array)); Inst26++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<786,798,33>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (concatted_array[0]) != "undefined") {_RecordType("<799,817,33>",(concatted_array[0])); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<799,814,33>",(concatted_array)); Inst34++; } } catch(e) {}
assertEquals(concatted_array[0], 0.1);
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<825,837,34>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (concatted_array[1]) != "undefined") {_RecordType("<838,856,34>",(concatted_array[1])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<838,853,34>",(concatted_array)); Inst37++; } } catch(e) {}
assertEquals(concatted_array[1], "value from proto");
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<879,891,35>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (concatted_array[2]) != "undefined") {_RecordType("<892,910,35>",(concatted_array[2])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<892,907,35>",(concatted_array)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<912,921,35>",(undefined)); Inst41++; } } catch(e) {}
assertEquals(concatted_array[2], undefined);
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<924,936,36>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (concatted_array[3]) != "undefined") {_RecordType("<937,955,36>",(concatted_array[3])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (concatted_array) != "undefined") {_RecordType("<937,952,36>",(concatted_array)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<957,966,36>",(undefined)); Inst45++; } } catch(e) {}
assertEquals(concatted_array[3], undefined);

