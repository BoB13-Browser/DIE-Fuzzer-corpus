var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --allow-natives-syntax

var a = ["string"];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<206,207,7>",(a)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (funky) != "undefined") {_RecordType("<231,236,8>",(funky)); Inst1++; } } catch(e) {}
function funky(array) { return array[0] = 1; }
try { if (Inst2 <= 1000 && typeof (array) != "undefined") {_RecordType("<237,242,8>",(array)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<253,261,8>",(array[0])); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (array) != "undefined") {_RecordType("<253,258,8>",(array)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (funky) != "undefined") {_RecordType("<269,274,9>",(funky)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<275,276,9>",(a)); Inst6++; } } catch(e) {}
funky(a);

try { if (Inst7 <= 1000 && typeof (crash) != "undefined") {_RecordType("<289,294,11>",(crash)); Inst7++; } } catch(e) {}
function crash() {
  var q = [0];
try { if (Inst8 <= 1000 && typeof (q) != "undefined") {_RecordType("<305,306,12>",(q)); Inst8++; } } catch(e) {}
  // The failing ASSERT was only triggered when compiling for OSR.
  for (var i = 0; i < 100000; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<392,393,14>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<399,400,14>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<411,412,14>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (funky) != "undefined") {_RecordType("<422,427,15>",(funky)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (q) != "undefined") {_RecordType("<428,429,15>",(q)); Inst13++; } } catch(e) {}
    funky(q);
  }
  q[0] = 0;
try { if (Inst14 <= 1000 && typeof (q[0]) != "undefined") {_RecordType("<438,442,17>",(q[0])); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (q) != "undefined") {_RecordType("<438,439,17>",(q)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (funky) != "undefined") {_RecordType("<450,455,18>",(funky)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (q) != "undefined") {_RecordType("<456,457,18>",(q)); Inst17++; } } catch(e) {}
  funky(q)
}

try { if (Inst18 <= 1000 && typeof (crash) != "undefined") {_RecordType("<462,467,21>",(crash)); Inst18++; } } catch(e) {}
crash();

