var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags:  --harmony-async-await --allow-natives-syntax --expose-debug-as debug

// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<327,338,8>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<327,332,8>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<319,324,8>",(Debug)); Inst0++; } } catch(e) {}

listenerComplete = false;
try { if (Inst3 <= 1000 && typeof (listenerComplete) != "undefined") {_RecordType("<340,356,10>",(listenerComplete)); Inst3++; } } catch(e) {}
breakPointCount = 0;
try { if (Inst4 <= 1000 && typeof (breakPointCount) != "undefined") {_RecordType("<366,381,11>",(breakPointCount)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<403,404,13>",(f)); Inst5++; } } catch(e) {}
async function f() {
  await (async function() { var a = "a"; await 1; debugger; })();
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<441,442,14>",(a)); Inst6++; } } catch(e) {}

  var b = "b";
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<482,483,16>",(b)); Inst7++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<494,504,18>",(assertTrue)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (listenerDone) != "undefined") {_RecordType("<505,517,18>",(listenerDone)); Inst9++; } } catch(e) {}
  assertTrue(listenerDone);
try { if (Inst10 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<522,533,19>",(assertFalse)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (exception) != "undefined") {_RecordType("<534,543,19>",(exception)); Inst11++; } } catch(e) {}
  assertFalse(exception);
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<548,560,20>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (breakpointCount) != "undefined") {_RecordType("<564,579,20>",(breakpointCount)); Inst13++; } } catch(e) {}
  assertEquals(1, breakpointCount);
}

try { if (Inst14 <= 1000 && typeof (listener) != "undefined") {_RecordType("<594,602,23>",(listener)); Inst14++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst15 <= 1000 && typeof (event) != "undefined") {_RecordType("<603,608,23>",(event)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<610,620,23>",(exec_state)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<622,632,23>",(event_data)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (data) != "undefined") {_RecordType("<634,638,23>",(data)); Inst18++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<933,934,32>",(e)); Inst37++; } } catch(e) {}
  try {
try { if (Inst19 <= 1000 && typeof (event) != "undefined") {_RecordType("<658,663,25>",(event)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<667,689,25>",(Debug.DebugEvent.Break)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<667,683,25>",(Debug.DebugEvent)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<667,672,25>",(Debug)); Inst22++; } } catch(e) {}
    if (event != Debug.DebugEvent.Break) return;

try { if (Inst23 <= 1000 && typeof (breakpointCount) != "undefined") {_RecordType("<704,719,27>",(breakpointCount)); Inst23++; } } catch(e) {}
    breakpointCount++;
    listenerDone = true;
try { if (Inst24 <= 1000 && typeof (listenerDone) != "undefined") {_RecordType("<727,739,28>",(listenerDone)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<752,764,29>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (exec_state.frame(0).evaluate) != "undefined") {_RecordType("<770,798,29>",(exec_state.frame(0).evaluate)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<770,786,29>",(exec_state.frame)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<770,780,29>",(exec_state)); Inst28++; } } catch(e) {}
    assertEquals("a", exec_state.frame(0).evaluate("a"));
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<810,822,30>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (exec_state.frame(1).evaluate) != "undefined") {_RecordType("<828,856,30>",(exec_state.frame(1).evaluate)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<828,844,30>",(exec_state.frame)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<828,838,30>",(exec_state)); Inst32++; } } catch(e) {}
    assertEquals("b", exec_state.frame(1).evaluate("b"));
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<868,880,31>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (exec_state.frame(2).evaluate) != "undefined") {_RecordType("<886,914,31>",(exec_state.frame(2).evaluate)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<886,902,31>",(exec_state.frame)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<886,896,31>",(exec_state)); Inst36++; } } catch(e) {}
    assertEquals("c", exec_state.frame(2).evaluate("c"));
  } catch (e) {
try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<954,955,33>",(e)); Inst39++; } } catch(e) {}
    exception = e;
try { if (Inst38 <= 1000 && typeof (exception) != "undefined") {_RecordType("<942,951,33>",(exception)); Inst38++; } } catch(e) {}
  };
};

try { if (Inst40 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<966,983,37>",(Debug.setListener)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<966,971,37>",(Debug)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (listener) != "undefined") {_RecordType("<984,992,37>",(listener)); Inst42++; } } catch(e) {}
Debug.setListener(listener);

var c = "c";
try { if (Inst43 <= 1000 && typeof (c) != "undefined") {_RecordType("<1000,1001,39>",(c)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (f) != "undefined") {_RecordType("<1009,1010,40>",(f)); Inst44++; } } catch(e) {}
f();

