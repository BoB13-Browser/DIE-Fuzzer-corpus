var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --harmony-unicode-regexps

// Non-unicode use toUpperCase mappings.
try { if (Inst0 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<246,257,8>",(assertFalse)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (/[\u00e5]/i.test) != "undefined") {_RecordType("<258,274,8>",(/[\u00e5]/i.test)); Inst1++; } } catch(e) {}
assertFalse(/[\u00e5]/i.test("\u212b"));
try { if (Inst2 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<287,298,9>",(assertFalse)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (/[\u212b]/i.test) != "undefined") {_RecordType("<299,315,9>",(/[\u212b]/i.test)); Inst3++; } } catch(e) {}
assertFalse(/[\u212b]/i.test("\u00e5\u1234"));
try { if (Inst4 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<334,345,10>",(assertFalse)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (/[\u212b]/i.test) != "undefined") {_RecordType("<346,362,10>",(/[\u212b]/i.test)); Inst5++; } } catch(e) {}
assertFalse(/[\u212b]/i.test("\u00e5"));

try { if (Inst6 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<376,386,12>",(assertTrue)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof ("\u212b".toLowerCase) != "undefined") {_RecordType("<387,407,12>",("\u212b".toLowerCase)); Inst7++; } } catch(e) {}
assertTrue("\u212b".toLowerCase() == "\u00e5");
try { if (Inst8 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<424,434,13>",(assertTrue)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof ("\u00c5".toLowerCase) != "undefined") {_RecordType("<435,455,13>",("\u00c5".toLowerCase)); Inst9++; } } catch(e) {}
assertTrue("\u00c5".toLowerCase() == "\u00e5");
try { if (Inst10 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<472,482,14>",(assertTrue)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof ("\u00e5".toUpperCase) != "undefined") {_RecordType("<483,503,14>",("\u00e5".toUpperCase)); Inst11++; } } catch(e) {}
assertTrue("\u00e5".toUpperCase() == "\u00c5");

// Unicode uses case folding mappings.
try { if (Inst12 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<560,571,17>",(assertFalse)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (/\u00e5/ui.test) != "undefined") {_RecordType("<572,587,17>",(/\u00e5/ui.test)); Inst13++; } } catch(e) {}
assertFalse(/\u00e5/ui.test("\u212b"));
try { if (Inst14 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<600,610,18>",(assertTrue)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (/\u00e5/ui.test) != "undefined") {_RecordType("<611,626,18>",(/\u00e5/ui.test)); Inst15++; } } catch(e) {}
assertTrue(/\u00e5/ui.test("\u00c5"));
try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<639,649,19>",(assertTrue)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (/\u00e5/ui.test) != "undefined") {_RecordType("<650,665,19>",(/\u00e5/ui.test)); Inst17++; } } catch(e) {}
assertTrue(/\u00e5/ui.test("\u00e5"));
try { if (Inst18 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<678,689,20>",(assertFalse)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (/\u00e5/ui.test) != "undefined") {_RecordType("<690,705,20>",(/\u00e5/ui.test)); Inst19++; } } catch(e) {}
assertFalse(/\u00e5/ui.test("\u212b"));
try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<718,728,21>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (/\u00c5/ui.test) != "undefined") {_RecordType("<729,744,21>",(/\u00c5/ui.test)); Inst21++; } } catch(e) {}
assertTrue(/\u00c5/ui.test("\u00e5"));
try { if (Inst22 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<757,768,22>",(assertFalse)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (/\u00c5/ui.test) != "undefined") {_RecordType("<769,784,22>",(/\u00c5/ui.test)); Inst23++; } } catch(e) {}
assertFalse(/\u00c5/ui.test("\u212b"));
try { if (Inst24 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<797,807,23>",(assertTrue)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (/\u00c5/ui.test) != "undefined") {_RecordType("<808,823,23>",(/\u00c5/ui.test)); Inst25++; } } catch(e) {}
assertTrue(/\u00c5/ui.test("\u00c5"));
try { if (Inst26 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<836,847,24>",(assertFalse)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (/\u212b/ui.test) != "undefined") {_RecordType("<848,863,24>",(/\u212b/ui.test)); Inst27++; } } catch(e) {}
assertFalse(/\u212b/ui.test("\u00c5"));
try { if (Inst28 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<876,887,25>",(assertFalse)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (/\u212b/ui.test) != "undefined") {_RecordType("<888,903,25>",(/\u212b/ui.test)); Inst29++; } } catch(e) {}
assertFalse(/\u212b/ui.test("\u00e5"));
try { if (Inst30 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<916,926,26>",(assertTrue)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (/\u212b/ui.test) != "undefined") {_RecordType("<927,942,26>",(/\u212b/ui.test)); Inst31++; } } catch(e) {}
assertTrue(/\u212b/ui.test("\u212b"));

// Non-BMP.
try { if (Inst32 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<968,979,29>",(assertFalse)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (/\u{10400}/i.test) != "undefined") {_RecordType("<980,997,29>",(/\u{10400}/i.test)); Inst33++; } } catch(e) {}
assertFalse(/\u{10400}/i.test("\u{10428}"));
try { if (Inst34 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1013,1024,30>",(assertFalse)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (/\u{10400}/ui.test) != "undefined") {_RecordType("<1025,1043,30>",(/\u{10400}/ui.test)); Inst35++; } } catch(e) {}
assertFalse(/\u{10400}/ui.test("\u{10428}"));
try { if (Inst36 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1059,1070,31>",(assertFalse)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (/\ud801\udc00/ui.test) != "undefined") {_RecordType("<1071,1092,31>",(/\ud801\udc00/ui.test)); Inst37++; } } catch(e) {}
assertFalse(/\ud801\udc00/ui.test("\u{10428}"));
try { if (Inst38 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1108,1119,32>",(assertFalse)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (/[\u{10428}]/ui.test) != "undefined") {_RecordType("<1120,1140,32>",(/[\u{10428}]/ui.test)); Inst39++; } } catch(e) {}
assertFalse(/[\u{10428}]/ui.test("\u{10400}"));
try { if (Inst40 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1156,1167,33>",(assertFalse)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (/[\ud801\udc28]/ui.test) != "undefined") {_RecordType("<1168,1191,33>",(/[\ud801\udc28]/ui.test)); Inst41++; } } catch(e) {}
assertFalse(/[\ud801\udc28]/ui.test("\u{10400}"));
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1207,1219,34>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (/[\uff40-\u{10428}]+/ui.exec) != "undefined") {_RecordType("<1254,1282,35>",(/[\uff40-\u{10428}]+/ui.exec)); Inst43++; } } catch(e) {}
assertEquals(["\uff21\u{10400}"],
             /[\uff40-\u{10428}]+/ui.exec("\uff21\u{10400}abc"));
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1307,1319,36>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (/[^\uff40-\u{10428}]+/ui.exec) != "undefined") {_RecordType("<1329,1358,36>",(/[^\uff40-\u{10428}]+/ui.exec)); Inst45++; } } catch(e) {}
assertEquals(["abc"], /[^\uff40-\u{10428}]+/ui.exec("\uff21\u{10400}abc\uff23"));
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1389,1401,37>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (/[\u24d5-\uff33]+/ui.exec) != "undefined") {_RecordType("<1433,1458,38>",(/[\u24d5-\uff33]+/ui.exec)); Inst47++; } } catch(e) {}
assertEquals(["\uff53\u24bb"],
             /[\u24d5-\uff33]+/ui.exec("\uff54\uff53\u24bb\u24ba"));

// Full mappings are ignored.
try { if (Inst48 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1520,1531,41>",(assertFalse)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (/\u00df/ui.test) != "undefined") {_RecordType("<1532,1547,41>",(/\u00df/ui.test)); Inst49++; } } catch(e) {}
assertFalse(/\u00df/ui.test("SS"));
try { if (Inst50 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1556,1567,42>",(assertFalse)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (/\u1f8d/ui.test) != "undefined") {_RecordType("<1568,1583,42>",(/\u1f8d/ui.test)); Inst51++; } } catch(e) {}
assertFalse(/\u1f8d/ui.test("\u1f05\u03b9"));

// Simple mappings.
try { if (Inst52 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1623,1634,45>",(assertFalse)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (/\u1f8d/ui.test) != "undefined") {_RecordType("<1635,1650,45>",(/\u1f8d/ui.test)); Inst53++; } } catch(e) {}
assertFalse(/\u1f8d/ui.test("\u1f85"));

// Common mappings.
try { if (Inst54 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1684,1694,48>",(assertTrue)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (/\u1f6b/ui.test) != "undefined") {_RecordType("<1695,1710,48>",(/\u1f6b/ui.test)); Inst55++; } } catch(e) {}
assertTrue(/\u1f6b/ui.test("\u1f63"));

// Back references.
try { if (Inst56 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1744,1754,51>",(assertNull)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (/(.)\1\1/ui.exec) != "undefined") {_RecordType("<1755,1771,51>",(/(.)\1\1/ui.exec)); Inst57++; } } catch(e) {}
assertNull(/(.)\1\1/ui.exec("\u00e5\u212b\u00c5"));
try { if (Inst58 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1796,1806,52>",(assertNull)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (/(.)\1/ui.exec) != "undefined") {_RecordType("<1807,1821,52>",(/(.)\1/ui.exec)); Inst59++; } } catch(e) {}
assertNull(/(.)\1/ui.exec("\u{118aa}\u{118ca}"));


// Non-Latin1 maps to Latin1.
try { if (Inst60 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1878,1888,56>",(assertNull)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (/^\u017F/ui.exec) != "undefined") {_RecordType("<1889,1905,56>",(/^\u017F/ui.exec)); Inst61++; } } catch(e) {}
assertNull(/^\u017F/ui.exec("s"));
try { if (Inst62 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1913,1923,57>",(assertNull)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (/^\u017F/ui.exec) != "undefined") {_RecordType("<1924,1940,57>",(/^\u017F/ui.exec)); Inst63++; } } catch(e) {}
assertNull(/^\u017F/ui.exec("s\u1234"));
try { if (Inst64 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1954,1964,58>",(assertNull)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (/^a[\u017F]/ui.exec) != "undefined") {_RecordType("<1965,1984,58>",(/^a[\u017F]/ui.exec)); Inst65++; } } catch(e) {}
assertNull(/^a[\u017F]/ui.exec("as"));
try { if (Inst66 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1993,2003,59>",(assertNull)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (/^a[\u017F]/ui.exec) != "undefined") {_RecordType("<2004,2023,59>",(/^a[\u017F]/ui.exec)); Inst67++; } } catch(e) {}
assertNull(/^a[\u017F]/ui.exec("as\u1234"));

