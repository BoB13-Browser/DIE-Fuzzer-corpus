var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --harmony-unicode-regexps

// test262/data/test/language/literals/regexp/u-dec-esc
try { if (Inst0 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<261,273,8>",(assertThrows)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<284,295,8>",(SyntaxError)); Inst1++; } } catch(e) {}
assertThrows("/\\1/u", SyntaxError);
// test262/language/literals/regexp/u-invalid-char-range-a
try { if (Inst2 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<357,369,10>",(assertThrows)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<384,395,10>",(SyntaxError)); Inst3++; } } catch(e) {}
assertThrows("/[\\w-a]/u", SyntaxError);
// test262/language/literals/regexp/u-invalid-char-range-b
try { if (Inst4 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<457,469,12>",(assertThrows)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<484,495,12>",(SyntaxError)); Inst5++; } } catch(e) {}
assertThrows("/[a-\\w]/u", SyntaxError);
// test262/language/literals/regexp/u-invalid-char-esc
try { if (Inst6 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<553,565,14>",(assertThrows)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<576,587,14>",(SyntaxError)); Inst7++; } } catch(e) {}
assertThrows("/\\c/u", SyntaxError);
try { if (Inst8 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<590,602,15>",(assertThrows)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<614,625,15>",(SyntaxError)); Inst9++; } } catch(e) {}
assertThrows("/\\c0/u", SyntaxError);
// test262/built-ins/RegExp/unicode_restricted_quantifiable_assertion
try { if (Inst10 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<698,710,17>",(assertThrows)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<724,735,17>",(SyntaxError)); Inst11++; } } catch(e) {}
assertThrows("/(?=.)*/u", SyntaxError);
// test262/built-ins/RegExp/unicode_restricted_octal_escape
try { if (Inst12 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<798,810,19>",(assertThrows)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<823,834,19>",(SyntaxError)); Inst13++; } } catch(e) {}
assertThrows("/[\\1]/u", SyntaxError);
try { if (Inst14 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<837,849,20>",(assertThrows)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<861,872,20>",(SyntaxError)); Inst15++; } } catch(e) {}
assertThrows("/\\00/u", SyntaxError);
try { if (Inst16 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<875,887,21>",(assertThrows)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<899,910,21>",(SyntaxError)); Inst17++; } } catch(e) {}
assertThrows("/\\09/u", SyntaxError);
// test262/built-ins/RegExp/unicode_restricted_identity_escape_alpha
try { if (Inst18 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<982,994,23>",(assertThrows)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1007,1018,23>",(SyntaxError)); Inst19++; } } catch(e) {}
assertThrows("/[\\c]/u", SyntaxError);
// test262/built-ins/RegExp/unicode_restricted_identity_escape_c
try { if (Inst20 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1086,1098,25>",(assertThrows)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1112,1123,25>",(SyntaxError)); Inst21++; } } catch(e) {}
assertThrows("/[\\c0]/u", SyntaxError);
// test262/built-ins/RegExp/unicode_restricted_incomple_quantifier
try { if (Inst22 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1193,1205,27>",(assertThrows)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1215,1226,27>",(SyntaxError)); Inst23++; } } catch(e) {}
assertThrows("/a{/u", SyntaxError);
try { if (Inst24 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1229,1241,28>",(assertThrows)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1253,1264,28>",(SyntaxError)); Inst25++; } } catch(e) {}
assertThrows("/a{1,/u", SyntaxError);
try { if (Inst26 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1267,1279,29>",(assertThrows)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1288,1299,29>",(SyntaxError)); Inst27++; } } catch(e) {}
assertThrows("/{/u", SyntaxError);
try { if (Inst28 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1302,1314,30>",(assertThrows)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1323,1334,30>",(SyntaxError)); Inst29++; } } catch(e) {}
assertThrows("/}/u", SyntaxError);
// test262/data/test/built-ins/RegExp/unicode_restricted_brackets
try { if (Inst30 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1403,1415,32>",(assertThrows)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1424,1435,32>",(SyntaxError)); Inst31++; } } catch(e) {}
assertThrows("/]/u", SyntaxError);
// test262/built-ins/RegExp/unicode_identity_escape
/\//u;

// escaped \0 is allowed inside a character class.
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1549,1561,37>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (/[\0]/u.exec) != "undefined") {_RecordType("<1570,1582,37>",(/[\0]/u.exec)); Inst33++; } } catch(e) {}
assertEquals(["\0"], /[\0]/u.exec("\0"));
// unless it is followed by another digit.
try { if (Inst34 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1634,1646,39>",(assertThrows)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1660,1671,39>",(SyntaxError)); Inst35++; } } catch(e) {}
assertThrows("/[\\00]/u", SyntaxError);
try { if (Inst36 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1674,1686,40>",(assertThrows)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1700,1711,40>",(SyntaxError)); Inst37++; } } catch(e) {}
assertThrows("/[\\01]/u", SyntaxError);
try { if (Inst38 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1714,1726,41>",(assertThrows)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1740,1751,41>",(SyntaxError)); Inst39++; } } catch(e) {}
assertThrows("/[\\09]/u", SyntaxError);
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1754,1766,42>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (/[1\0a]+/u.exec) != "undefined") {_RecordType("<1790,1805,42>",(/[1\0a]+/u.exec)); Inst41++; } } catch(e) {}
assertEquals(["\u{0}1\u{0}a\u{0}"], /[1\0a]+/u.exec("b\u{0}1\u{0}a\u{0}2"));
// escaped \- is allowed inside a character class.
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1882,1894,44>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (/[a\-z]/u.exec) != "undefined") {_RecordType("<1902,1916,44>",(/[a\-z]/u.exec)); Inst43++; } } catch(e) {}
assertEquals(["-"], /[a\-z]/u.exec("12-34"));

