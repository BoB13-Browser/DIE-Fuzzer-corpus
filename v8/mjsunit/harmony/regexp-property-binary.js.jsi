var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --harmony-regexp-property --harmony-unicode-regexps

try { if (Inst0 <= 1000 && typeof (t) != "undefined") {_RecordType("<240,241,7>",(t)); Inst0++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<251,261,7>",(assertTrue)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<262,269,7>",(re.test)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (re) != "undefined") {_RecordType("<262,264,7>",(re)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<270,271,7>",(s)); Inst6++; } } catch(e) {}
function t(re, s) { assertTrue(re.test(s)); }
try { if (Inst1 <= 1000 && typeof (re) != "undefined") {_RecordType("<242,244,7>",(re)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (s) != "undefined") {_RecordType("<246,247,7>",(s)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<286,287,8>",(f)); Inst7++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<297,308,8>",(assertFalse)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (re.test) != "undefined") {_RecordType("<309,316,8>",(re.test)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (re) != "undefined") {_RecordType("<309,311,8>",(re)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (s) != "undefined") {_RecordType("<317,318,8>",(s)); Inst13++; } } catch(e) {}
function f(re, s) { assertFalse(re.test(s)); }
try { if (Inst8 <= 1000 && typeof (re) != "undefined") {_RecordType("<288,290,8>",(re)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (s) != "undefined") {_RecordType("<292,293,8>",(s)); Inst9++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (t) != "undefined") {_RecordType("<325,326,10>",(t)); Inst14++; } } catch(e) {}
t(/\p{Bidi_Control}+/u, "\u200E");
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<360,361,11>",(f)); Inst15++; } } catch(e) {}
f(/\p{Bidi_C}+/u, "On a dark desert highway, cool wind in my hair");
try { if (Inst16 <= 1000 && typeof (t) != "undefined") {_RecordType("<429,430,12>",(t)); Inst16++; } } catch(e) {}
t(/\p{AHex}+/u, "DEADBEEF");
try { if (Inst17 <= 1000 && typeof (t) != "undefined") {_RecordType("<458,459,13>",(t)); Inst17++; } } catch(e) {}
t(/\p{Alphabetic}+/u, "abcdefg");
try { if (Inst18 <= 1000 && typeof (t) != "undefined") {_RecordType("<492,493,14>",(t)); Inst18++; } } catch(e) {}
t(/\P{Alphabetic}+/u, "1234");
try { if (Inst19 <= 1000 && typeof (t) != "undefined") {_RecordType("<523,524,15>",(t)); Inst19++; } } catch(e) {}
t(/\p{White_Space}+/u, "\u00A0");
try { if (Inst20 <= 1000 && typeof (t) != "undefined") {_RecordType("<557,558,16>",(t)); Inst20++; } } catch(e) {}
t(/\p{Uppercase}+/u, "V");
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<584,585,17>",(f)); Inst21++; } } catch(e) {}
f(/\p{Lower}+/u, "U");
try { if (Inst22 <= 1000 && typeof (t) != "undefined") {_RecordType("<607,608,18>",(t)); Inst22++; } } catch(e) {}
t(/\p{Ideo}+/u, "å­—");
try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<629,630,19>",(f)); Inst23++; } } catch(e) {}
f(/\p{Ideo}+/u, "x");

try { if (Inst24 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<652,664,21>",(assertThrows)); Inst24++; } } catch(e) {}
assertThrows("/\\p{Hiragana}/u");
try { if (Inst25 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<686,698,22>",(assertThrows)); Inst25++; } } catch(e) {}
assertThrows("/\\p{Bidi_Class}/u");
try { if (Inst26 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<722,734,23>",(assertThrows)); Inst26++; } } catch(e) {}
assertThrows("/\\p{Bidi_C=False}/u");
try { if (Inst27 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<760,772,24>",(assertThrows)); Inst27++; } } catch(e) {}
assertThrows("/\\P{Bidi_Control=Y}/u");
try { if (Inst28 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<800,812,25>",(assertThrows)); Inst28++; } } catch(e) {}
assertThrows("/\\p{AHex=Yes}/u");

