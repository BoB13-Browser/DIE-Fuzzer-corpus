var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --harmony-species

// Test the ES2015 @@species feature

'use strict';

try { if (Inst1 <= 1000 && typeof (Uint8Array.__proto__) != "undefined") {_RecordType("<267,287,11>",(Uint8Array.__proto__)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<267,277,11>",(Uint8Array)); Inst2++; } } catch(e) {}
let TypedArray = Uint8Array.__proto__;
try { if (Inst0 <= 1000 && typeof (TypedArray) != "undefined") {_RecordType("<254,264,11>",(TypedArray)); Inst0++; } } catch(e) {}

// The @@species property exists on the right objects and has the right values

try { if (Inst4 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<396,402,15>",(RegExp)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<404,409,15>",(Array)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (TypedArray) != "undefined") {_RecordType("<411,421,15>",(TypedArray)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<423,434,15>",(ArrayBuffer)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Map) != "undefined") {_RecordType("<436,439,15>",(Map)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Set) != "undefined") {_RecordType("<441,444,15>",(Set)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<446,453,15>",(Promise)); Inst10++; } } catch(e) {}
let classesWithSpecies = [RegExp, Array, TypedArray, ArrayBuffer, Map, Set, Promise];
try { if (Inst3 <= 1000 && typeof (classesWithSpecies) != "undefined") {_RecordType("<374,392,15>",(classesWithSpecies)); Inst3++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Object) != "undefined") {_RecordType("<485,491,16>",(Object)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Function) != "undefined") {_RecordType("<493,501,16>",(Function)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (String) != "undefined") {_RecordType("<503,509,16>",(String)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Number) != "undefined") {_RecordType("<511,517,16>",(Number)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<519,525,16>",(Symbol)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (WeakMap) != "undefined") {_RecordType("<527,534,16>",(WeakMap)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (WeakSet) != "undefined") {_RecordType("<536,543,16>",(WeakSet)); Inst18++; } } catch(e) {}
let classesWithoutSpecies = [Object, Function, String, Number, Symbol, WeakMap, WeakSet];
try { if (Inst11 <= 1000 && typeof (classesWithoutSpecies) != "undefined") {_RecordType("<460,481,16>",(classesWithoutSpecies)); Inst11++; } } catch(e) {}

for (let constructor of classesWithSpecies) {
try { if (Inst19 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<556,567,18>",(constructor)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (classesWithSpecies) != "undefined") {_RecordType("<571,589,18>",(classesWithSpecies)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<595,607,19>",(assertEquals)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<608,619,19>",(constructor)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<621,648,19>",(constructor[Symbol.species])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<621,632,19>",(constructor)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<633,647,19>",(Symbol.species)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<633,639,19>",(Symbol)); Inst26++; } } catch(e) {}
  assertEquals(constructor, constructor[Symbol.species]);
try { if (Inst27 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<653,665,20>",(assertThrows)); Inst27++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<709,718,20>",(undefined)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<722,731,20>",(TypeError)); Inst33++; } } catch(e) {}
  assertThrows(function() { constructor[Symbol.species] = undefined }, TypeError);
try { if (Inst28 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<679,706,20>",(constructor[Symbol.species])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<679,690,20>",(constructor)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<691,705,20>",(Symbol.species)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<691,697,20>",(Symbol)); Inst31++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<753,784,21>",(Object.getOwnPropertyDescriptor)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Object) != "undefined") {_RecordType("<753,759,21>",(Object)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<785,796,21>",(constructor)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<798,812,21>",(Symbol.species)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<798,804,21>",(Symbol)); Inst39++; } } catch(e) {}
  let descriptor = Object.getOwnPropertyDescriptor(constructor, Symbol.species);
try { if (Inst34 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<740,750,21>",(descriptor)); Inst34++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<817,827,22>",(assertTrue)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (descriptor.configurable) != "undefined") {_RecordType("<828,851,22>",(descriptor.configurable)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<828,838,22>",(descriptor)); Inst42++; } } catch(e) {}
  assertTrue(descriptor.configurable);
try { if (Inst43 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<856,867,23>",(assertFalse)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (descriptor.enumerable) != "undefined") {_RecordType("<868,889,23>",(descriptor.enumerable)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<868,878,23>",(descriptor)); Inst45++; } } catch(e) {}
  assertFalse(descriptor.enumerable);
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<894,906,24>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<907,916,24>",(undefined)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (descriptor.writable) != "undefined") {_RecordType("<918,937,24>",(descriptor.writable)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<918,928,24>",(descriptor)); Inst49++; } } catch(e) {}
  assertEquals(undefined, descriptor.writable);
try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<942,954,25>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<955,964,25>",(undefined)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (descriptor.set) != "undefined") {_RecordType("<966,980,25>",(descriptor.set)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<966,976,25>",(descriptor)); Inst53++; } } catch(e) {}
  assertEquals(undefined, descriptor.set);
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<985,997,26>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (descriptor.get) != "undefined") {_RecordType("<1017,1031,26>",(descriptor.get)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (descriptor) != "undefined") {_RecordType("<1017,1027,26>",(descriptor)); Inst56++; } } catch(e) {}
  assertEquals('function', typeof descriptor.get);
}

// @@species is defined with distinct getters
try { if (Inst57 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1083,1095,30>",(assertEquals)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (classesWithSpecies.length) != "undefined") {_RecordType("<1096,1121,30>",(classesWithSpecies.length)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (classesWithSpecies) != "undefined") {_RecordType("<1096,1114,30>",(classesWithSpecies)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (new Set(classesWithSpecies.map(constructor =>
                                            Object.getOwnPropertyDescriptor(
                                              constructor, Symbol.species).get)
                ).size) != "undefined") {_RecordType("<1136,1361,31>",(new Set(classesWithSpecies.map(constructor =>
                                            Object.getOwnPropertyDescriptor(
                                              constructor, Symbol.species).get)
                ).size)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Set) != "undefined") {_RecordType("<1140,1143,31>",(Set)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (classesWithSpecies.map) != "undefined") {_RecordType("<1144,1166,31>",(classesWithSpecies.map)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (classesWithSpecies) != "undefined") {_RecordType("<1144,1162,31>",(classesWithSpecies)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1167,1178,31>",(constructor)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Object.getOwnPropertyDescriptor(
                                              constructor, Symbol.species).get) != "undefined") {_RecordType("<1226,1337,32>",(Object.getOwnPropertyDescriptor(
                                              constructor, Symbol.species).get)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1226,1257,32>",(Object.getOwnPropertyDescriptor)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1226,1232,32>",(Object)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1305,1316,33>",(constructor)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<1318,1332,33>",(Symbol.species)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1318,1324,33>",(Symbol)); Inst70++; } } catch(e) {}
assertEquals(classesWithSpecies.length,
             new Set(classesWithSpecies.map(constructor =>
                                            Object.getOwnPropertyDescriptor(
                                              constructor, Symbol.species).get)
                ).size);

for (let constructor of classesWithoutSpecies)
try { if (Inst73 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1414,1426,37>",(assertEquals)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1427,1436,37>",(undefined)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (constructor[Symbol.species]) != "undefined") {_RecordType("<1438,1465,37>",(constructor[Symbol.species])); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1438,1449,37>",(constructor)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (Symbol.species) != "undefined") {_RecordType("<1450,1464,37>",(Symbol.species)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1450,1456,37>",(Symbol)); Inst78++; } } catch(e) {}
  assertEquals(undefined, constructor[Symbol.species]);
try { if (Inst71 <= 1000 && typeof (constructor) != "undefined") {_RecordType("<1374,1385,36>",(constructor)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (classesWithoutSpecies) != "undefined") {_RecordType("<1389,1410,36>",(classesWithoutSpecies)); Inst72++; } } catch(e) {}

