var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --harmony-regexp-subclass

var pattern = {};
try { if (Inst0 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<209,216,7>",(pattern)); Inst0++; } } catch(e) {}
var limit = { value: 3 };
try { if (Inst1 <= 1000 && typeof (limit) != "undefined") {_RecordType("<227,232,8>",(limit)); Inst1++; } } catch(e) {}
pattern[Symbol.split] = function(string, limit) {
try { if (Inst6 <= 1000 && typeof (string) != "undefined") {_RecordType("<282,288,9>",(string)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (limit) != "undefined") {_RecordType("<290,295,9>",(limit)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (string.length) != "undefined") {_RecordType("<308,321,10>",(string.length)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (string) != "undefined") {_RecordType("<308,314,10>",(string)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (limit.value) != "undefined") {_RecordType("<324,335,10>",(limit.value)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (limit) != "undefined") {_RecordType("<324,329,10>",(limit)); Inst11++; } } catch(e) {}
  return string.length * limit.value;
};
try { if (Inst2 <= 1000 && typeof (pattern[Symbol.split]) != "undefined") {_RecordType("<249,270,9>",(pattern[Symbol.split])); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<249,256,9>",(pattern)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<257,269,9>",(Symbol.split)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<257,263,9>",(Symbol)); Inst5++; } } catch(e) {}
// Check object coercible fails.
try { if (Inst12 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<373,385,13>",(assertThrows)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (String.prototype.split.call) != "undefined") {_RecordType("<392,419,13>",(String.prototype.split.call)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (String.prototype.split) != "undefined") {_RecordType("<392,414,13>",(String.prototype.split)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<392,408,13>",(String.prototype)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (String) != "undefined") {_RecordType("<392,398,13>",(String)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<426,433,13>",(pattern)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (limit) != "undefined") {_RecordType("<435,440,13>",(limit)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<456,465,14>",(TypeError)); Inst19++; } } catch(e) {}
assertThrows(() => String.prototype.split.call(null, pattern, limit),
             TypeError);
// Override is called.
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<491,503,16>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof ("abcde".split) != "undefined") {_RecordType("<508,521,16>",("abcde".split)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<522,529,16>",(pattern)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (limit) != "undefined") {_RecordType("<531,536,16>",(limit)); Inst23++; } } catch(e) {}
assertEquals(15, "abcde".split(pattern, limit));
// Non-callable override.
pattern[Symbol.split] = "dumdidum";
try { if (Inst24 <= 1000 && typeof (pattern[Symbol.split]) != "undefined") {_RecordType("<566,587,18>",(pattern[Symbol.split])); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<566,573,18>",(pattern)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<574,586,18>",(Symbol.split)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<574,580,18>",(Symbol)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<602,614,19>",(assertThrows)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof ("abcde".split) != "undefined") {_RecordType("<621,634,19>",("abcde".split)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (pattern) != "undefined") {_RecordType("<635,642,19>",(pattern)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (limit) != "undefined") {_RecordType("<644,649,19>",(limit)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<652,661,19>",(TypeError)); Inst32++; } } catch(e) {}
assertThrows(() => "abcde".split(pattern, limit), TypeError);

try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<665,677,21>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (RegExp.prototype[Symbol.split].name) != "undefined") {_RecordType("<696,731,21>",(RegExp.prototype[Symbol.split].name)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (RegExp.prototype[Symbol.split]) != "undefined") {_RecordType("<696,726,21>",(RegExp.prototype[Symbol.split])); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<696,712,21>",(RegExp.prototype)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<696,702,21>",(RegExp)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Symbol.split) != "undefined") {_RecordType("<713,725,21>",(Symbol.split)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<713,719,21>",(Symbol)); Inst39++; } } catch(e) {}
assertEquals("[Symbol.split]", RegExp.prototype[Symbol.split].name);

