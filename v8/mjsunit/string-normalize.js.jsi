var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<168,180,5>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<185,197,5>",(''.normalize)); Inst1++; } } catch(e) {}
assertEquals('', ''.normalize());
try { if (Inst2 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<202,212,6>",(assertTrue)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Array.prototype.indexOf) != "undefined") {_RecordType("<220,243,6>",(Array.prototype.indexOf)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<220,235,6>",(Array.prototype)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Array) != "undefined") {_RecordType("<220,225,6>",(Array)); Inst5++; } } catch(e) {}
assertTrue(delete Array.prototype.indexOf);
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<246,258,7>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<263,275,7>",(''.normalize)); Inst7++; } } catch(e) {}
assertEquals('', ''.normalize());

try { if (Inst8 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<281,293,9>",(assertThrows)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<307,319,9>",(''.normalize)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<335,345,9>",(RangeError)); Inst10++; } } catch(e) {}
assertThrows(function() { ''.normalize('invalid'); }, RangeError);
try { if (Inst11 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<348,358,10>",(assertTrue)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Array.prototype.join) != "undefined") {_RecordType("<366,386,10>",(Array.prototype.join)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<366,381,10>",(Array.prototype)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Array) != "undefined") {_RecordType("<366,371,10>",(Array)); Inst14++; } } catch(e) {}
assertTrue(delete Array.prototype.join);
try { if (Inst15 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<389,401,11>",(assertThrows)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<415,427,11>",(''.normalize)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<443,453,11>",(RangeError)); Inst17++; } } catch(e) {}
assertThrows(function() { ''.normalize('invalid'); }, RangeError);

// All of these toString to an invalid form argument.
try { if (Inst18 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<511,523,14>",(assertThrows)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<537,549,14>",(''.normalize)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<559,569,14>",(RangeError)); Inst20++; } } catch(e) {}
assertThrows(function() { ''.normalize(null) }, RangeError);
try { if (Inst21 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<572,584,15>",(assertThrows)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<598,610,15>",(''.normalize)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<620,630,15>",(RangeError)); Inst23++; } } catch(e) {}
assertThrows(function() { ''.normalize(true) }, RangeError);
try { if (Inst24 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<633,645,16>",(assertThrows)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<659,671,16>",(''.normalize)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<682,692,16>",(RangeError)); Inst26++; } } catch(e) {}
assertThrows(function() { ''.normalize(false) }, RangeError);
try { if (Inst27 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<695,707,17>",(assertThrows)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<721,733,17>",(''.normalize)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<741,751,17>",(RangeError)); Inst29++; } } catch(e) {}
assertThrows(function() { ''.normalize(42) }, RangeError);
try { if (Inst30 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<754,766,18>",(assertThrows)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<780,792,18>",(''.normalize)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<800,810,18>",(RangeError)); Inst32++; } } catch(e) {}
assertThrows(function() { ''.normalize({}) }, RangeError);
try { if (Inst33 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<813,825,19>",(assertThrows)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (''.normalize) != "undefined") {_RecordType("<839,851,19>",(''.normalize)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (RangeError) != "undefined") {_RecordType("<859,869,19>",(RangeError)); Inst35++; } } catch(e) {}
assertThrows(function() { ''.normalize([]) }, RangeError);

