var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1607,1616,28>",(Construct)); Inst0++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1629,1630,28>",(x)); Inst2++; } } catch(e) {}
function Construct(x) { return x; }
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1617,1618,28>",(x)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1635,1646,30>",(assertFalse)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1659,1668,30>",(Construct)); Inst4++; } } catch(e) {}
assertFalse(null == new Construct(null));
try { if (Inst5 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1677,1688,31>",(assertFalse)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1703,1712,31>",(Construct)); Inst6++; } } catch(e) {}
assertFalse(void 0 == new Construct(void 0));
try { if (Inst7 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1723,1734,32>",(assertFalse)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1744,1753,32>",(Construct)); Inst8++; } } catch(e) {}
assertFalse(0 == new Construct(0));
try { if (Inst9 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1759,1770,33>",(assertFalse)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1780,1789,33>",(Construct)); Inst10++; } } catch(e) {}
assertFalse(1 == new Construct(1));
try { if (Inst11 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1795,1806,34>",(assertFalse)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1818,1827,34>",(Construct)); Inst12++; } } catch(e) {}
assertFalse(4.2 == new Construct(4.2));
try { if (Inst13 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1835,1846,35>",(assertFalse)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1860,1869,35>",(Construct)); Inst14++; } } catch(e) {}
assertFalse('foo' == new Construct('foo'));
try { if (Inst15 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1879,1890,36>",(assertFalse)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1903,1912,36>",(Construct)); Inst16++; } } catch(e) {}
assertFalse(true == new Construct(true));

x = {};
try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<1922,1923,38>",(x)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1930,1940,39>",(assertTrue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<1941,1942,39>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1951,1960,39>",(Construct)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<1961,1962,39>",(x)); Inst21++; } } catch(e) {}
assertTrue(x === new Construct(x));
try { if (Inst22 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1966,1977,40>",(assertFalse)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<1978,1979,40>",(x)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<1988,1997,40>",(Construct)); Inst24++; } } catch(e) {}
assertFalse(x === new Construct(null));
try { if (Inst25 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2006,2017,41>",(assertFalse)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2018,2019,41>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2028,2037,41>",(Construct)); Inst27++; } } catch(e) {}
assertFalse(x === new Construct(void 0));
try { if (Inst28 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2048,2059,42>",(assertFalse)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<2060,2061,42>",(x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2070,2079,42>",(Construct)); Inst30++; } } catch(e) {}
assertFalse(x === new Construct(1));
try { if (Inst31 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2085,2096,43>",(assertFalse)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<2097,2098,43>",(x)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2107,2116,43>",(Construct)); Inst33++; } } catch(e) {}
assertFalse(x === new Construct(3.2));
try { if (Inst34 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2124,2135,44>",(assertFalse)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<2136,2137,44>",(x)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2146,2155,44>",(Construct)); Inst36++; } } catch(e) {}
assertFalse(x === new Construct(false));
try { if (Inst37 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2165,2176,45>",(assertFalse)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<2177,2178,45>",(x)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2187,2196,45>",(Construct)); Inst39++; } } catch(e) {}
assertFalse(x === new Construct('bar'));
x = [];
try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2206,2207,46>",(x)); Inst40++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2214,2224,47>",(assertTrue)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2225,2226,47>",(x)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2235,2244,47>",(Construct)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (x) != "undefined") {_RecordType("<2245,2246,47>",(x)); Inst44++; } } catch(e) {}
assertTrue(x === new Construct(x));
try { if (Inst46 <= 1000 && typeof (Boolean) != "undefined") {_RecordType("<2258,2265,48>",(Boolean)); Inst46++; } } catch(e) {}
x = new Boolean(true);
try { if (Inst45 <= 1000 && typeof (x) != "undefined") {_RecordType("<2250,2251,48>",(x)); Inst45++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2273,2283,49>",(assertTrue)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<2284,2285,49>",(x)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2294,2303,49>",(Construct)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (x) != "undefined") {_RecordType("<2304,2305,49>",(x)); Inst50++; } } catch(e) {}
assertTrue(x === new Construct(x));
try { if (Inst52 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2317,2323,50>",(Number)); Inst52++; } } catch(e) {}
x = new Number(42);
try { if (Inst51 <= 1000 && typeof (x) != "undefined") {_RecordType("<2309,2310,50>",(x)); Inst51++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2329,2339,51>",(assertTrue)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<2340,2341,51>",(x)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2350,2359,51>",(Construct)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<2360,2361,51>",(x)); Inst56++; } } catch(e) {}
assertTrue(x === new Construct(x));
try { if (Inst58 <= 1000 && typeof (String) != "undefined") {_RecordType("<2373,2379,52>",(String)); Inst58++; } } catch(e) {}
x = new String('foo');
try { if (Inst57 <= 1000 && typeof (x) != "undefined") {_RecordType("<2365,2366,52>",(x)); Inst57++; } } catch(e) {}
try { if (Inst59 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2388,2398,53>",(assertTrue)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (x) != "undefined") {_RecordType("<2399,2400,53>",(x)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2409,2418,53>",(Construct)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (x) != "undefined") {_RecordType("<2419,2420,53>",(x)); Inst62++; } } catch(e) {}
assertTrue(x === new Construct(x));
x = function() { };
try { if (Inst63 <= 1000 && typeof (x) != "undefined") {_RecordType("<2424,2425,54>",(x)); Inst63++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2444,2454,55>",(assertTrue)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (x) != "undefined") {_RecordType("<2455,2456,55>",(x)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Construct) != "undefined") {_RecordType("<2465,2474,55>",(Construct)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (x) != "undefined") {_RecordType("<2475,2476,55>",(x)); Inst67++; } } catch(e) {}
assertTrue(x === new Construct(x));

