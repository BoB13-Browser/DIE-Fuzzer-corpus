var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// The functions used for testing backtraces. They are at the top to make the
// testing of source line/column easier.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1760,1761,31>",(f)); Inst0++; } } catch(e) {}
function f(x, y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1762,1763,31>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<1765,1766,31>",(y)); Inst2++; } } catch(e) {}
  a=1;
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1772,1773,32>",(a)); Inst3++; } } catch(e) {}
};

try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<1790,1791,35>",(g)); Inst4++; } } catch(e) {}
function g() {
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<1802,1803,36>",(f)); Inst5++; } } catch(e) {}
  new f(1);
};


// Get the Debug object exposed from the debug context global object.
try { if (Inst7 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1891,1902,41>",(debug.Debug)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1891,1896,41>",(debug)); Inst8++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst6 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1883,1888,41>",(Debug)); Inst6++; } } catch(e) {}

listenerCallCount = 0;
try { if (Inst9 <= 1000 && typeof (listenerCallCount) != "undefined") {_RecordType("<1904,1921,43>",(listenerCallCount)); Inst9++; } } catch(e) {}
listenerExceptions = [];
try { if (Inst10 <= 1000 && typeof (listenerExceptions) != "undefined") {_RecordType("<1927,1945,44>",(listenerExceptions)); Inst10++; } } catch(e) {}


try { if (Inst11 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1963,1971,47>",(listener)); Inst11++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst12 <= 1000 && typeof (event) != "undefined") {_RecordType("<1972,1977,47>",(event)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1979,1989,47>",(exec_state)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1991,2001,47>",(event_data)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (data) != "undefined") {_RecordType("<2003,2007,47>",(data)); Inst15++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<2721,2722,70>",(e)); Inst37++; } } catch(e) {}
  try {
try { if (Inst16 <= 1000 && typeof (event) != "undefined") {_RecordType("<2025,2030,49>",(event)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<2034,2056,49>",(Debug.DebugEvent.Break)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<2034,2050,49>",(Debug.DebugEvent)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2034,2039,49>",(Debug)); Inst19++; } } catch(e) {}
  if (event == Debug.DebugEvent.Break)
  {
try { if (Inst20 <= 1000 && typeof (listenerCallCount) != "undefined") {_RecordType("<2066,2083,51>",(listenerCallCount)); Inst20++; } } catch(e) {}
    listenerCallCount++;

    // Check that mirror cache is cleared when entering debugger.
try { if (Inst21 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2158,2168,54>",(assertTrue)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (debug.MirrorCacheIsEmpty) != "undefined") {_RecordType("<2169,2193,54>",(debug.MirrorCacheIsEmpty)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2169,2174,54>",(debug)); Inst23++; } } catch(e) {}
    assertTrue(debug.MirrorCacheIsEmpty(), "Mirror cache not cleared");

    // Get the debug command processor in paused state.
try { if (Inst25 <= 1000 && typeof (exec_state.debugCommandProcessor) != "undefined") {_RecordType("<2297,2329,57>",(exec_state.debugCommandProcessor)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2297,2307,57>",(exec_state)); Inst26++; } } catch(e) {}
    var dcp = exec_state.debugCommandProcessor(false);
try { if (Inst24 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<2291,2294,57>",(dcp)); Inst24++; } } catch(e) {}

    // Make a backtrace request to create some mirrors.
    var json;
try { if (Inst27 <= 1000 && typeof (json) != "undefined") {_RecordType("<2403,2407,60>",(json)); Inst27++; } } catch(e) {}
    json = '{"seq":0,"type":"request","command":"backtrace"}'
try { if (Inst28 <= 1000 && typeof (json) != "undefined") {_RecordType("<2413,2417,61>",(json)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (dcp.processDebugJSONRequest) != "undefined") {_RecordType("<2475,2502,62>",(dcp.processDebugJSONRequest)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<2475,2478,62>",(dcp)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (json) != "undefined") {_RecordType("<2503,2507,62>",(json)); Inst31++; } } catch(e) {}
    dcp.processDebugJSONRequest(json);

    // Make sure looking up loaded scripts does not clear the cache.
try { if (Inst32 <= 1000 && typeof (Debug.scripts) != "undefined") {_RecordType("<2584,2597,65>",(Debug.scripts)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2584,2589,65>",(Debug)); Inst33++; } } catch(e) {}
    Debug.scripts();

    // Some mirrors where cached.
try { if (Inst34 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2640,2651,68>",(assertFalse)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (debug.MirrorCacheIsEmpty) != "undefined") {_RecordType("<2652,2676,68>",(debug.MirrorCacheIsEmpty)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2652,2657,68>",(debug)); Inst36++; } } catch(e) {}
    assertFalse(debug.MirrorCacheIsEmpty(), "Mirror cache not used");
  }
  } catch (e) {
try { if (Inst38 <= 1000 && typeof (print) != "undefined") {_RecordType("<2730,2735,71>",(print)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (e) != "undefined") {_RecordType("<2736,2737,71>",(e)); Inst39++; } } catch(e) {}
    print(e);
try { if (Inst40 <= 1000 && typeof (listenerExceptions.push) != "undefined") {_RecordType("<2744,2767,72>",(listenerExceptions.push)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (listenerExceptions) != "undefined") {_RecordType("<2744,2762,72>",(listenerExceptions)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (e) != "undefined") {_RecordType("<2768,2769,72>",(e)); Inst42++; } } catch(e) {}
    listenerExceptions.push(e);
  };
};

// Add the debug event listener.
try { if (Inst43 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2814,2831,77>",(Debug.setListener)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2814,2819,77>",(Debug)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2832,2840,77>",(listener)); Inst45++; } } catch(e) {}
Debug.setListener(listener);

// Enter the debugger twice.
debugger;
debugger;

try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2894,2906,83>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (listenerExceptions) != "undefined") {_RecordType("<2911,2929,83>",(listenerExceptions)); Inst47++; } } catch(e) {}
assertEquals([], listenerExceptions, "Exception in listener");
// Make sure that the debug event listener vas invoked.
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3013,3025,85>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (listenerCallCount) != "undefined") {_RecordType("<3029,3046,85>",(listenerCallCount)); Inst49++; } } catch(e) {}
assertEquals(2, listenerCallCount, "Listener not called");

