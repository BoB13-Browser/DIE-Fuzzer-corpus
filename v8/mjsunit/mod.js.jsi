var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1607,1610,28>",(foo)); Inst0++; } } catch(e) {}
function foo() {
  for (var i = 1; i < 100; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1626,1627,29>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1633,1634,29>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1642,1643,29>",(i)); Inst3++; } } catch(e) {}
    var answer = 1;
try { if (Inst4 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1657,1663,30>",(answer)); Inst4++; } } catch(e) {}
    for (var j = 1; j < 100; j++) {
try { if (Inst5 <= 1000 && typeof (j) != "undefined") {_RecordType("<1682,1683,31>",(j)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (j) != "undefined") {_RecordType("<1689,1690,31>",(j)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (j) != "undefined") {_RecordType("<1698,1699,31>",(j)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1715,1721,32>",(answer)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1725,1726,32>",(i)); Inst9++; } } catch(e) {}
      if (answer == i) answer = 0;
try { if (Inst10 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1728,1734,32>",(answer)); Inst10++; } } catch(e) {}
      // Positive case.
try { if (Inst11 <= 1000 && typeof (print) != "undefined") {_RecordType("<1770,1775,34>",(print)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (j) != "undefined") {_RecordType("<1776,1777,34>",(j)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1788,1789,34>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1800,1806,34>",(answer)); Inst14++; } } catch(e) {}
      print(j + " % " + i + " = " + answer);
try { if (Inst16 <= 1000 && typeof (j) != "undefined") {_RecordType("<1819,1820,35>",(j)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1823,1824,35>",(i)); Inst17++; } } catch(e) {}
      m = j % i;
try { if (Inst15 <= 1000 && typeof (m) != "undefined") {_RecordType("<1815,1816,35>",(m)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1832,1844,36>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1845,1851,36>",(answer)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (m) != "undefined") {_RecordType("<1853,1854,36>",(m)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (j) != "undefined") {_RecordType("<1856,1857,36>",(j)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<1868,1869,36>",(i)); Inst22++; } } catch(e) {}
      assertEquals(answer, m, j + " % " + i);
try { if (Inst24 <= 1000 && typeof (j) != "undefined") {_RecordType("<1882,1883,37>",(j)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<1888,1889,37>",(i)); Inst25++; } } catch(e) {}
      m = j % (-i);
try { if (Inst23 <= 1000 && typeof (m) != "undefined") {_RecordType("<1878,1879,37>",(m)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1898,1910,38>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (answer) != "undefined") {_RecordType("<1911,1917,38>",(answer)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (m) != "undefined") {_RecordType("<1919,1920,38>",(m)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (j) != "undefined") {_RecordType("<1922,1923,38>",(j)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<1935,1936,38>",(i)); Inst30++; } } catch(e) {}
      assertEquals(answer, m, j + " % -" + i);
      // Negative case.
try { if (Inst32 <= 1000 && typeof (j) != "undefined") {_RecordType("<1975,1976,40>",(j)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<1980,1981,40>",(i)); Inst33++; } } catch(e) {}
      m = (-j) % i;
try { if (Inst31 <= 1000 && typeof (m) != "undefined") {_RecordType("<1969,1970,40>",(m)); Inst31++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1989,2001,41>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2003,2009,41>",(answer)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (m) != "undefined") {_RecordType("<2011,2012,41>",(m)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (j) != "undefined") {_RecordType("<2014,2015,41>",(j)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2026,2027,41>",(i)); Inst38++; } } catch(e) {}
      assertEquals(-answer, m, j + " % " + i);
      // Check for negative zero.
try { if (Inst39 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2074,2080,43>",(answer)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2087,2099,43>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2101,2109,43>",(Infinity)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (m) != "undefined") {_RecordType("<2113,2114,43>",(m)); Inst42++; } } catch(e) {}
      if (answer == 0) assertEquals(-Infinity, 1/m);
try { if (Inst44 <= 1000 && typeof (j) != "undefined") {_RecordType("<2129,2130,44>",(j)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2136,2137,44>",(i)); Inst45++; } } catch(e) {}
      m = (-j) % (-i);
try { if (Inst43 <= 1000 && typeof (m) != "undefined") {_RecordType("<2123,2124,44>",(m)); Inst43++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2146,2158,45>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2160,2166,45>",(answer)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (m) != "undefined") {_RecordType("<2168,2169,45>",(m)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (j) != "undefined") {_RecordType("<2171,2172,45>",(j)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (i) != "undefined") {_RecordType("<2184,2185,45>",(i)); Inst50++; } } catch(e) {}
      assertEquals(-answer, m, j + " % -" + i);
      // Check for negative zero.
try { if (Inst51 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2232,2238,47>",(answer)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2245,2257,47>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2259,2267,47>",(Infinity)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (m) != "undefined") {_RecordType("<2271,2272,47>",(m)); Inst54++; } } catch(e) {}
      if (answer == 0) assertEquals(-Infinity, 1/m);
try { if (Inst55 <= 1000 && typeof (answer) != "undefined") {_RecordType("<2281,2287,48>",(answer)); Inst55++; } } catch(e) {}
      answer++;
    }
  }
}

try { if (Inst56 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2304,2307,53>",(foo)); Inst56++; } } catch(e) {}
foo();

