var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --no-harmony-regexp-exec

// Regexp shouldn't use String.prototype.slice()
try { if (Inst1 <= 1000 && typeof (String) != "undefined") {_RecordType("<1695,1701,31>",(String)); Inst1++; } } catch(e) {}
var s = new String("foo");
try { if (Inst0 <= 1000 && typeof (s) != "undefined") {_RecordType("<1687,1688,31>",(s)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1710,1722,32>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (s.slice) != "undefined") {_RecordType("<1728,1735,32>",(s.slice)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (s) != "undefined") {_RecordType("<1728,1729,32>",(s)); Inst4++; } } catch(e) {}
assertEquals("f", s.slice(0,1));
String.prototype.slice = function() { return "x"; };
try { if (Inst5 <= 1000 && typeof (String.prototype.slice) != "undefined") {_RecordType("<1743,1765,33>",(String.prototype.slice)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<1743,1759,33>",(String.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (String) != "undefined") {_RecordType("<1743,1749,33>",(String)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1796,1808,34>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (s.slice) != "undefined") {_RecordType("<1814,1821,34>",(s.slice)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<1814,1815,34>",(s)); Inst10++; } } catch(e) {}
assertEquals("x", s.slice(0,1));
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1829,1841,35>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (/g/.exec) != "undefined") {_RecordType("<1849,1857,35>",(/g/.exec)); Inst12++; } } catch(e) {}
assertEquals(["g"], /g/.exec("gg"));

// Regexp shouldn't use String.prototype.charAt()
try { if (Inst14 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<1930,1936,38>",(RegExp)); Inst14++; } } catch(e) {}
var f1 = new RegExp("f", "i");
try { if (Inst13 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1921,1923,38>",(f1)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1948,1960,39>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f1.exec) != "undefined") {_RecordType("<1968,1975,39>",(f1.exec)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1968,1970,39>",(f1)); Inst17++; } } catch(e) {}
assertEquals(["F"], f1.exec("F"));
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1983,1995,40>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof ("foo".charAt) != "undefined") {_RecordType("<2001,2013,40>",("foo".charAt)); Inst19++; } } catch(e) {}
assertEquals("f", "foo".charAt(0));
String.prototype.charAt = function(idx) { return 'g'; };
try { if (Inst20 <= 1000 && typeof (String.prototype.charAt) != "undefined") {_RecordType("<2019,2042,41>",(String.prototype.charAt)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<2019,2035,41>",(String.prototype)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (String) != "undefined") {_RecordType("<2019,2025,41>",(String)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (idx) != "undefined") {_RecordType("<2054,2057,41>",(idx)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2076,2088,42>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof ("foo".charAt) != "undefined") {_RecordType("<2094,2106,42>",("foo".charAt)); Inst25++; } } catch(e) {}
assertEquals("g", "foo".charAt(0));
try { if (Inst27 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2125,2131,43>",(RegExp)); Inst27++; } } catch(e) {}
var f2 = new RegExp("[g]", "i");
try { if (Inst26 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2116,2118,43>",(f2)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2145,2157,44>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (f2.exec) != "undefined") {_RecordType("<2165,2172,44>",(f2.exec)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2165,2167,44>",(f2)); Inst30++; } } catch(e) {}
assertEquals(["G"], f2.exec("G"));
try { if (Inst31 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2180,2190,45>",(assertTrue)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (f2.ignoreCase) != "undefined") {_RecordType("<2191,2204,45>",(f2.ignoreCase)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2191,2193,45>",(f2)); Inst33++; } } catch(e) {}
assertTrue(f2.ignoreCase);

// On the other hand test is defined in a semi-coherent way as a call to exec.
// 15.10.6.3
// We match other browsers in using the original value of RegExp.prototype.exec.
// I.e., RegExp.prototype.test shouldn't use the current value of
// RegExp.prototype.exec.
RegExp.prototype.exec = function(string) { return 'x'; };
try { if (Inst34 <= 1000 && typeof (RegExp.prototype.exec) != "undefined") {_RecordType("<2473,2494,52>",(RegExp.prototype.exec)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (RegExp.prototype) != "undefined") {_RecordType("<2473,2489,52>",(RegExp.prototype)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (RegExp) != "undefined") {_RecordType("<2473,2479,52>",(RegExp)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (string) != "undefined") {_RecordType("<2506,2512,52>",(string)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2531,2542,53>",(assertFalse)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (/f/.test) != "undefined") {_RecordType("<2543,2551,53>",(/f/.test)); Inst39++; } } catch(e) {}
assertFalse(/f/.test('x'));

