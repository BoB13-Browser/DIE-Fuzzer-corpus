var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test dictionary store ICs.

// Function that stores property 'x' on an object.
try { if (Inst0 <= 1000 && typeof (store) != "undefined") {_RecordType("<1689,1694,31>",(store)); Inst0++; } } catch(e) {}
function store(obj) { obj.x = 42; }
try { if (Inst1 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1695,1698,31>",(obj)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (obj.x) != "undefined") {_RecordType("<1702,1707,31>",(obj.x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (obj) != "undefined") {_RecordType("<1702,1705,31>",(obj)); Inst3++; } } catch(e) {}

// Create object and force it to dictionary mode by deleting property.
var o = { x: 32, y: 33 };
try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<1792,1793,34>",(o)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (o.y) != "undefined") {_RecordType("<1821,1824,35>",(o.y)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<1821,1822,35>",(o)); Inst6++; } } catch(e) {}
delete o.y;

// Make the store ic in the 'store' function go into dictionary store
// case.
for (var i = 0; i < 3; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1915,1916,39>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1922,1923,39>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1929,1930,39>",(i)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (store) != "undefined") {_RecordType("<1938,1943,40>",(store)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<1944,1945,40>",(o)); Inst11++; } } catch(e) {}
  store(o);
}
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1950,1962,42>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1967,1970,42>",(o.x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o) != "undefined") {_RecordType("<1967,1968,42>",(o)); Inst14++; } } catch(e) {}
assertEquals(42, o.x);

// Test that READ_ONLY property attribute is respected. Make 'x'
// READ_ONLY.
try { if (Inst15 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<2053,2074,46>",(Object.defineProperty)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2053,2059,46>",(Object)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<2075,2076,46>",(o)); Inst17++; } } catch(e) {}
Object.defineProperty(o, 'x', { value: 32, writable: false });

// Attempt to store using the store ic in the 'store' function.
try { if (Inst18 <= 1000 && typeof (store) != "undefined") {_RecordType("<2181,2186,49>",(store)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<2187,2188,49>",(o)); Inst19++; } } catch(e) {}
store(o);

// Check that the store did not change the value.
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2242,2254,52>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2259,2262,52>",(o.x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<2259,2260,52>",(o)); Inst22++; } } catch(e) {}
assertEquals(32, o.x);

// Check that bail-out code works.
// Smi.
try { if (Inst23 <= 1000 && typeof (store) != "undefined") {_RecordType("<2309,2314,56>",(store)); Inst23++; } } catch(e) {}
store(1);
// Fast case object.
try { if (Inst25 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2348,2354,58>",(Object)); Inst25++; } } catch(e) {}
o = new Object();
try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<2340,2341,58>",(o)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (store) != "undefined") {_RecordType("<2358,2363,59>",(store)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<2364,2365,59>",(o)); Inst27++; } } catch(e) {}
store(o);
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2368,2380,60>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2385,2388,60>",(o.x)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o) != "undefined") {_RecordType("<2385,2386,60>",(o)); Inst30++; } } catch(e) {}
assertEquals(42, o.x);
// Slow case object without x property.
try { if (Inst31 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2438,2441,62>",(o.x)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o) != "undefined") {_RecordType("<2438,2439,62>",(o)); Inst32++; } } catch(e) {}
delete o.x;
try { if (Inst33 <= 1000 && typeof (store) != "undefined") {_RecordType("<2443,2448,63>",(store)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (o) != "undefined") {_RecordType("<2449,2450,63>",(o)); Inst34++; } } catch(e) {}
store(o);
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2453,2465,64>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2470,2473,64>",(o.x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o) != "undefined") {_RecordType("<2470,2471,64>",(o)); Inst37++; } } catch(e) {}
assertEquals(42, o.x);

