var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Test the mirror object for boolean values

try { if (Inst0 <= 1000 && typeof (testDateMirror) != "undefined") {_RecordType("<1687,1701,31>",(testDateMirror)); Inst0++; } } catch(e) {}
function testDateMirror(d, iso8601) {
try { if (Inst1 <= 1000 && typeof (d) != "undefined") {_RecordType("<1702,1703,31>",(d)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (iso8601) != "undefined") {_RecordType("<1705,1712,31>",(iso8601)); Inst2++; } } catch(e) {}
  // Create mirror and JSON representation.
try { if (Inst4 <= 1000 && typeof (debug.MakeMirror) != "undefined") {_RecordType("<1775,1791,33>",(debug.MakeMirror)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1775,1780,33>",(debug)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (d) != "undefined") {_RecordType("<1792,1793,33>",(d)); Inst6++; } } catch(e) {}
  var mirror = debug.MakeMirror(d);
try { if (Inst3 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1766,1772,33>",(mirror)); Inst3++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (debug.MakeMirrorSerializer) != "undefined") {_RecordType("<1815,1841,34>",(debug.MakeMirrorSerializer)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1815,1820,34>",(debug)); Inst9++; } } catch(e) {}
  var serializer = debug.MakeMirrorSerializer();
try { if (Inst7 <= 1000 && typeof (serializer) != "undefined") {_RecordType("<1802,1812,34>",(serializer)); Inst7++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1858,1872,35>",(JSON.stringify)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1858,1862,35>",(JSON)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (serializer.serializeValue) != "undefined") {_RecordType("<1873,1898,35>",(serializer.serializeValue)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (serializer) != "undefined") {_RecordType("<1873,1883,35>",(serializer)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1899,1905,35>",(mirror)); Inst15++; } } catch(e) {}
  var json = JSON.stringify(serializer.serializeValue(mirror));
try { if (Inst10 <= 1000 && typeof (json) != "undefined") {_RecordType("<1851,1855,35>",(json)); Inst10++; } } catch(e) {}

  // Check the mirror hierachy.
try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1944,1954,38>",(assertTrue)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1955,1961,38>",(mirror)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (debug.Mirror) != "undefined") {_RecordType("<1973,1985,38>",(debug.Mirror)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1973,1978,38>",(debug)); Inst19++; } } catch(e) {}
  assertTrue(mirror instanceof debug.Mirror);
try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1990,2000,39>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2001,2007,39>",(mirror)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (debug.ValueMirror) != "undefined") {_RecordType("<2019,2036,39>",(debug.ValueMirror)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2019,2024,39>",(debug)); Inst23++; } } catch(e) {}
  assertTrue(mirror instanceof debug.ValueMirror);
try { if (Inst24 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2041,2051,40>",(assertTrue)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2052,2058,40>",(mirror)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (debug.ObjectMirror) != "undefined") {_RecordType("<2070,2088,40>",(debug.ObjectMirror)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2070,2075,40>",(debug)); Inst27++; } } catch(e) {}
  assertTrue(mirror instanceof debug.ObjectMirror);
try { if (Inst28 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2093,2103,41>",(assertTrue)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2104,2110,41>",(mirror)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (debug.DateMirror) != "undefined") {_RecordType("<2122,2138,41>",(debug.DateMirror)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2122,2127,41>",(debug)); Inst31++; } } catch(e) {}
  assertTrue(mirror instanceof debug.DateMirror);

  // Check the mirror properties.
try { if (Inst32 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2178,2188,44>",(assertTrue)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (mirror.isDate) != "undefined") {_RecordType("<2189,2202,44>",(mirror.isDate)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2189,2195,44>",(mirror)); Inst34++; } } catch(e) {}
  assertTrue(mirror.isDate());
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2209,2221,45>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (mirror.type) != "undefined") {_RecordType("<2232,2243,45>",(mirror.type)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2232,2238,45>",(mirror)); Inst37++; } } catch(e) {}
  assertEquals('object', mirror.type());
try { if (Inst38 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2250,2261,46>",(assertFalse)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (mirror.isPrimitive) != "undefined") {_RecordType("<2262,2280,46>",(mirror.isPrimitive)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2262,2268,46>",(mirror)); Inst40++; } } catch(e) {}
  assertFalse(mirror.isPrimitive());

  // Test text representation
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2318,2330,49>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (iso8601) != "undefined") {_RecordType("<2331,2338,49>",(iso8601)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (mirror.toText) != "undefined") {_RecordType("<2340,2353,49>",(mirror.toText)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2340,2346,49>",(mirror)); Inst44++; } } catch(e) {}
  assertEquals(iso8601, mirror.toText());

  // Parse JSON representation and check.
try { if (Inst46 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2418,2422,52>",(eval)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (json) != "undefined") {_RecordType("<2429,2433,52>",(json)); Inst47++; } } catch(e) {}
  var fromJSON = eval('(' + json + ')');
try { if (Inst45 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2407,2415,52>",(fromJSON)); Inst45++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2444,2456,53>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (fromJSON.type) != "undefined") {_RecordType("<2467,2480,53>",(fromJSON.type)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2467,2475,53>",(fromJSON)); Inst50++; } } catch(e) {}
  assertEquals('object', fromJSON.type);
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2485,2497,54>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (fromJSON.className) != "undefined") {_RecordType("<2506,2524,54>",(fromJSON.className)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2506,2514,54>",(fromJSON)); Inst53++; } } catch(e) {}
  assertEquals('Date', fromJSON.className);
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2529,2541,55>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (iso8601) != "undefined") {_RecordType("<2542,2549,55>",(iso8601)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (fromJSON.value) != "undefined") {_RecordType("<2551,2565,55>",(fromJSON.value)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2551,2559,55>",(fromJSON)); Inst57++; } } catch(e) {}
  assertEquals(iso8601, fromJSON.value);
}

// Test Date values.
try { if (Inst58 <= 1000 && typeof (testDateMirror) != "undefined") {_RecordType("<2592,2606,59>",(testDateMirror)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2611,2615,59>",(Date)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (Date.parse) != "undefined") {_RecordType("<2616,2626,59>",(Date.parse)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2616,2620,59>",(Date)); Inst61++; } } catch(e) {}
testDateMirror(new Date(Date.parse("Dec 25, 1995 1:30 UTC")),
               "1995-12-25T01:30:00.000Z");
try { if (Inst63 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2706,2710,61>",(Date)); Inst63++; } } catch(e) {}
d = new Date();
try { if (Inst62 <= 1000 && typeof (d) != "undefined") {_RecordType("<2698,2699,61>",(d)); Inst62++; } } catch(e) {}
try { if (Inst64 <= 1000 && typeof (d.setUTCFullYear) != "undefined") {_RecordType("<2714,2730,62>",(d.setUTCFullYear)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (d) != "undefined") {_RecordType("<2714,2715,62>",(d)); Inst65++; } } catch(e) {}
d.setUTCFullYear(1967);
try { if (Inst66 <= 1000 && typeof (d.setUTCMonth) != "undefined") {_RecordType("<2738,2751,63>",(d.setUTCMonth)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (d) != "undefined") {_RecordType("<2738,2739,63>",(d)); Inst67++; } } catch(e) {}
d.setUTCMonth(0); // January.
try { if (Inst68 <= 1000 && typeof (d.setUTCDate) != "undefined") {_RecordType("<2768,2780,64>",(d.setUTCDate)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (d) != "undefined") {_RecordType("<2768,2769,64>",(d)); Inst69++; } } catch(e) {}
d.setUTCDate(17);
try { if (Inst70 <= 1000 && typeof (d.setUTCHours) != "undefined") {_RecordType("<2786,2799,65>",(d.setUTCHours)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (d) != "undefined") {_RecordType("<2786,2787,65>",(d)); Inst71++; } } catch(e) {}
d.setUTCHours(9);
try { if (Inst72 <= 1000 && typeof (d.setUTCMinutes) != "undefined") {_RecordType("<2804,2819,66>",(d.setUTCMinutes)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (d) != "undefined") {_RecordType("<2804,2805,66>",(d)); Inst73++; } } catch(e) {}
d.setUTCMinutes(22);
try { if (Inst74 <= 1000 && typeof (d.setUTCSeconds) != "undefined") {_RecordType("<2825,2840,67>",(d.setUTCSeconds)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (d) != "undefined") {_RecordType("<2825,2826,67>",(d)); Inst75++; } } catch(e) {}
d.setUTCSeconds(59);
try { if (Inst76 <= 1000 && typeof (d.setUTCMilliseconds) != "undefined") {_RecordType("<2846,2866,68>",(d.setUTCMilliseconds)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (d) != "undefined") {_RecordType("<2846,2847,68>",(d)); Inst77++; } } catch(e) {}
d.setUTCMilliseconds(0);
try { if (Inst78 <= 1000 && typeof (testDateMirror) != "undefined") {_RecordType("<2871,2885,69>",(testDateMirror)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (d) != "undefined") {_RecordType("<2886,2887,69>",(d)); Inst79++; } } catch(e) {}
testDateMirror(d, "1967-01-17T09:22:59.000Z");
try { if (Inst80 <= 1000 && typeof (d.setUTCMilliseconds) != "undefined") {_RecordType("<2918,2938,70>",(d.setUTCMilliseconds)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (d) != "undefined") {_RecordType("<2918,2919,70>",(d)); Inst81++; } } catch(e) {}
d.setUTCMilliseconds(1);
try { if (Inst82 <= 1000 && typeof (testDateMirror) != "undefined") {_RecordType("<2943,2957,71>",(testDateMirror)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (d) != "undefined") {_RecordType("<2958,2959,71>",(d)); Inst83++; } } catch(e) {}
testDateMirror(d, "1967-01-17T09:22:59.001Z");
try { if (Inst84 <= 1000 && typeof (d.setUTCSeconds) != "undefined") {_RecordType("<2990,3005,72>",(d.setUTCSeconds)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (d) != "undefined") {_RecordType("<2990,2991,72>",(d)); Inst85++; } } catch(e) {}
d.setUTCSeconds(12);
try { if (Inst86 <= 1000 && typeof (testDateMirror) != "undefined") {_RecordType("<3011,3025,73>",(testDateMirror)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (d) != "undefined") {_RecordType("<3026,3027,73>",(d)); Inst87++; } } catch(e) {}
testDateMirror(d, "1967-01-17T09:22:12.001Z");
try { if (Inst88 <= 1000 && typeof (d.setUTCSeconds) != "undefined") {_RecordType("<3058,3073,74>",(d.setUTCSeconds)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (d) != "undefined") {_RecordType("<3058,3059,74>",(d)); Inst89++; } } catch(e) {}
d.setUTCSeconds(36);
try { if (Inst90 <= 1000 && typeof (testDateMirror) != "undefined") {_RecordType("<3079,3093,75>",(testDateMirror)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (d) != "undefined") {_RecordType("<3094,3095,75>",(d)); Inst91++; } } catch(e) {}
testDateMirror(d, "1967-01-17T09:22:36.001Z");
try { if (Inst92 <= 1000 && typeof (d.setUTCMilliseconds) != "undefined") {_RecordType("<3126,3146,76>",(d.setUTCMilliseconds)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (d) != "undefined") {_RecordType("<3126,3127,76>",(d)); Inst93++; } } catch(e) {}
d.setUTCMilliseconds(136);
try { if (Inst94 <= 1000 && typeof (testDateMirror) != "undefined") {_RecordType("<3153,3167,77>",(testDateMirror)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (d) != "undefined") {_RecordType("<3168,3169,77>",(d)); Inst95++; } } catch(e) {}
testDateMirror(d, "1967-01-17T09:22:36.136Z");

