var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}

// Simple constructor.
try { if (Inst3 <= 1000 && typeof (Point) != "undefined") {_RecordType("<1755,1760,33>",(Point)); Inst3++; } } catch(e) {}
function Point(x,y) {}
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1761,1762,33>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<1763,1764,33>",(y)); Inst5++; } } catch(e) {}

// Create mirror for the constructor.
try { if (Inst7 <= 1000 && typeof (debug.MakeMirror) != "undefined") {_RecordType("<1819,1835,36>",(debug.MakeMirror)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1819,1824,36>",(debug)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Point) != "undefined") {_RecordType("<1836,1841,36>",(Point)); Inst9++; } } catch(e) {}
var ctor = debug.MakeMirror(Point);
try { if (Inst6 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<1812,1816,36>",(ctor)); Inst6++; } } catch(e) {}

// Initially no instances.
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1872,1884,39>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ctor.constructedBy().length) != "undefined") {_RecordType("<1888,1915,39>",(ctor.constructedBy().length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<1888,1906,39>",(ctor.constructedBy)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<1888,1892,39>",(ctor)); Inst13++; } } catch(e) {}
assertEquals(0, ctor.constructedBy().length);
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1918,1930,40>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ctor.constructedBy(0).length) != "undefined") {_RecordType("<1934,1962,40>",(ctor.constructedBy(0).length)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<1934,1952,40>",(ctor.constructedBy)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<1934,1938,40>",(ctor)); Inst17++; } } catch(e) {}
assertEquals(0, ctor.constructedBy(0).length);
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1965,1977,41>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ctor.constructedBy(1).length) != "undefined") {_RecordType("<1981,2009,41>",(ctor.constructedBy(1).length)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<1981,1999,41>",(ctor.constructedBy)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<1981,1985,41>",(ctor)); Inst21++; } } catch(e) {}
assertEquals(0, ctor.constructedBy(1).length);
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2012,2024,42>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ctor.constructedBy(10).length) != "undefined") {_RecordType("<2028,2057,42>",(ctor.constructedBy(10).length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2028,2046,42>",(ctor.constructedBy)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2028,2032,42>",(ctor)); Inst25++; } } catch(e) {}
assertEquals(0, ctor.constructedBy(10).length);

// Create an instance.
try { if (Inst27 <= 1000 && typeof (Point) != "undefined") {_RecordType("<2096,2101,45>",(Point)); Inst27++; } } catch(e) {}
var p = new Point();
try { if (Inst26 <= 1000 && typeof (p) != "undefined") {_RecordType("<2088,2089,45>",(p)); Inst26++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2105,2117,46>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ctor.constructedBy().length) != "undefined") {_RecordType("<2121,2148,46>",(ctor.constructedBy().length)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2121,2139,46>",(ctor.constructedBy)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2121,2125,46>",(ctor)); Inst31++; } } catch(e) {}
assertEquals(1, ctor.constructedBy().length);
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2151,2163,47>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ctor.constructedBy(0).length) != "undefined") {_RecordType("<2167,2195,47>",(ctor.constructedBy(0).length)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2167,2185,47>",(ctor.constructedBy)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2167,2171,47>",(ctor)); Inst35++; } } catch(e) {}
assertEquals(1, ctor.constructedBy(0).length);
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2198,2210,48>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (ctor.constructedBy(1).length) != "undefined") {_RecordType("<2214,2242,48>",(ctor.constructedBy(1).length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2214,2232,48>",(ctor.constructedBy)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2214,2218,48>",(ctor)); Inst39++; } } catch(e) {}
assertEquals(1, ctor.constructedBy(1).length);
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2245,2257,49>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ctor.constructedBy(10).length) != "undefined") {_RecordType("<2261,2290,49>",(ctor.constructedBy(10).length)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2261,2279,49>",(ctor.constructedBy)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2261,2265,49>",(ctor)); Inst43++; } } catch(e) {}
assertEquals(1, ctor.constructedBy(10).length);


// Create 10 more instances making for 11.
ps = [];
try { if (Inst44 <= 1000 && typeof (ps) != "undefined") {_RecordType("<2338,2340,53>",(ps)); Inst44++; } } catch(e) {}
for (var i = 0; i < 10; i++) {
try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2356,2357,54>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<2363,2364,54>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<2371,2372,54>",(i)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (ps.push) != "undefined") {_RecordType("<2380,2387,55>",(ps.push)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (ps) != "undefined") {_RecordType("<2380,2382,55>",(ps)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Point) != "undefined") {_RecordType("<2392,2397,55>",(Point)); Inst50++; } } catch(e) {}
  ps.push(new Point());
}
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2404,2416,57>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (ctor.constructedBy().length) != "undefined") {_RecordType("<2421,2448,57>",(ctor.constructedBy().length)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2421,2439,57>",(ctor.constructedBy)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2421,2425,57>",(ctor)); Inst54++; } } catch(e) {}
assertEquals(11, ctor.constructedBy().length);
try { if (Inst55 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2451,2463,58>",(assertEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (ctor.constructedBy(0).length) != "undefined") {_RecordType("<2468,2496,58>",(ctor.constructedBy(0).length)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2468,2486,58>",(ctor.constructedBy)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2468,2472,58>",(ctor)); Inst58++; } } catch(e) {}
assertEquals(11, ctor.constructedBy(0).length);
try { if (Inst59 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2499,2511,59>",(assertEquals)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (ctor.constructedBy(1).length) != "undefined") {_RecordType("<2515,2543,59>",(ctor.constructedBy(1).length)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2515,2533,59>",(ctor.constructedBy)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2515,2519,59>",(ctor)); Inst62++; } } catch(e) {}
assertEquals(1, ctor.constructedBy(1).length);
try { if (Inst63 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2546,2558,60>",(assertEquals)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (ctor.constructedBy(10).length) != "undefined") {_RecordType("<2563,2592,60>",(ctor.constructedBy(10).length)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (ctor.constructedBy) != "undefined") {_RecordType("<2563,2581,60>",(ctor.constructedBy)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (ctor) != "undefined") {_RecordType("<2563,2567,60>",(ctor)); Inst66++; } } catch(e) {}
assertEquals(10, ctor.constructedBy(10).length);

