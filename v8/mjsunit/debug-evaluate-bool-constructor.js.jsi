var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}

var listenerComplete = false;
try { if (Inst3 <= 1000 && typeof (listenerComplete) != "undefined") {_RecordType("<1727,1743,32>",(listenerComplete)); Inst3++; } } catch(e) {}
var exception = false;
try { if (Inst4 <= 1000 && typeof (exception) != "undefined") {_RecordType("<1757,1766,33>",(exception)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1786,1794,35>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<1795,1800,35>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1802,1812,35>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1814,1824,35>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1826,1830,35>",(data)); Inst9++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (e) != "undefined") {_RecordType("<2560,2561,61>",(e)); Inst43++; } } catch(e) {}
  try {
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<1850,1855,37>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<1859,1881,37>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1859,1875,37>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1859,1864,37>",(Debug)); Inst13++; } } catch(e) {}
    if (event == Debug.DebugEvent.Break) {
      // Get the debug command processor.
try { if (Inst15 <= 1000 && typeof (exec_state.debugCommandProcessor) != "undefined") {_RecordType("<1943,1975,39>",(exec_state.debugCommandProcessor)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1943,1953,39>",(exec_state)); Inst16++; } } catch(e) {}
      var dcp = exec_state.debugCommandProcessor();
try { if (Inst14 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<1937,1940,39>",(dcp)); Inst14++; } } catch(e) {}

      var request = {
         seq: 0,
         type: 'request',
         command: 'evaluate',
         arguments: {
           expression: 'a',
           frame: 0
         }
      };
try { if (Inst17 <= 1000 && typeof (request) != "undefined") {_RecordType("<1990,1997,41>",(request)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2181,2195,50>",(JSON.stringify)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2181,2185,50>",(JSON)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (request) != "undefined") {_RecordType("<2196,2203,50>",(request)); Inst21++; } } catch(e) {}
      request = JSON.stringify(request);
try { if (Inst18 <= 1000 && typeof (request) != "undefined") {_RecordType("<2171,2178,50>",(request)); Inst18++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (dcp.processDebugJSONRequest) != "undefined") {_RecordType("<2224,2251,52>",(dcp.processDebugJSONRequest)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (dcp) != "undefined") {_RecordType("<2224,2227,52>",(dcp)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (request) != "undefined") {_RecordType("<2252,2259,52>",(request)); Inst25++; } } catch(e) {}
      var resp = dcp.processDebugJSONRequest(request);
try { if (Inst22 <= 1000 && typeof (resp) != "undefined") {_RecordType("<2217,2221,52>",(resp)); Inst22++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (JSON.parse) != "undefined") {_RecordType("<2283,2293,53>",(JSON.parse)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2283,2287,53>",(JSON)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (resp) != "undefined") {_RecordType("<2294,2298,53>",(resp)); Inst29++; } } catch(e) {}
      var response = JSON.parse(resp);
try { if (Inst26 <= 1000 && typeof (response) != "undefined") {_RecordType("<2272,2280,53>",(response)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2307,2317,54>",(assertTrue)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (response.success) != "undefined") {_RecordType("<2318,2334,54>",(response.success)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (response) != "undefined") {_RecordType("<2318,2326,54>",(response)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (resp) != "undefined") {_RecordType("<2357,2361,54>",(resp)); Inst33++; } } catch(e) {}
      assertTrue(response.success, 'Command failed: ' + resp);
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2370,2382,55>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (response.body.type) != "undefined") {_RecordType("<2393,2411,55>",(response.body.type)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (response.body) != "undefined") {_RecordType("<2393,2406,55>",(response.body)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (response) != "undefined") {_RecordType("<2393,2401,55>",(response)); Inst37++; } } catch(e) {}
      assertEquals('object', response.body.type);
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2420,2432,56>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (response.body.className) != "undefined") {_RecordType("<2443,2466,56>",(response.body.className)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (response.body) != "undefined") {_RecordType("<2443,2456,56>",(response.body)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (response) != "undefined") {_RecordType("<2443,2451,56>",(response)); Inst41++; } } catch(e) {}
      assertEquals('Object', response.body.className);

      // Indicate that all was processed.
      listenerComplete = true;
try { if (Inst42 <= 1000 && typeof (listenerComplete) != "undefined") {_RecordType("<2518,2534,59>",(listenerComplete)); Inst42++; } } catch(e) {}
    }
  } catch (e) {
try { if (Inst45 <= 1000 && typeof (e) != "undefined") {_RecordType("<2580,2581,62>",(e)); Inst45++; } } catch(e) {}
   exception = e
try { if (Inst44 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2568,2577,62>",(exception)); Inst44++; } } catch(e) {}
  };
};

// Add the debug event listener.
try { if (Inst46 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2624,2641,67>",(Debug.setListener)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2624,2629,67>",(Debug)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2642,2650,67>",(listener)); Inst48++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst49 <= 1000 && typeof (callDebugger) != "undefined") {_RecordType("<2663,2675,69>",(callDebugger)); Inst49++; } } catch(e) {}
function callDebugger() {
  // Add set constructor field to a non-function value.
  var a = {constructor:true};
try { if (Inst50 <= 1000 && typeof (a) != "undefined") {_RecordType("<2742,2743,71>",(a)); Inst50++; } } catch(e) {}
  debugger;
}

try { if (Inst51 <= 1000 && typeof (callDebugger) != "undefined") {_RecordType("<2781,2793,75>",(callDebugger)); Inst51++; } } catch(e) {}
callDebugger();


// Make sure that the debug event listener vas invoked.
try { if (Inst52 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2855,2866,79>",(assertFalse)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2867,2876,79>",(exception)); Inst53++; } } catch(e) {}
assertFalse(exception, "exception in listener")
try { if (Inst54 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2903,2913,80>",(assertTrue)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (listenerComplete) != "undefined") {_RecordType("<2914,2930,80>",(listenerComplete)); Inst55++; } } catch(e) {}
assertTrue(listenerComplete, "listener did not run to completion");

