var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test the optimized implementation of comparison with single-character
// strings.

try { if (Inst1 <= 1000 && typeof (String.fromCharCode) != "undefined") {_RecordType("<1697,1716,31>",(String.fromCharCode)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (String) != "undefined") {_RecordType("<1697,1703,31>",(String)); Inst2++; } } catch(e) {}
var a = ['', String.fromCharCode(0), ' ', 'e', 'erik', 'f', 'foo', 'g', 'goo',
         -1, 0, 1, 1.2, -7.9, true, false, 'foo', '0', 'NaN' ];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1688,1689,31>",(a)); Inst0++; } } catch(e) {}
for (var i in a) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1836,1837,33>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1841,1842,33>",(a)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1856,1860,34>",(a[i])); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1856,1857,34>",(a)); Inst7++; } } catch(e) {}
  var x = a[i];
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<1852,1853,34>",(x)); Inst5++; } } catch(e) {}
  var f = 'f';
try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<1868,1869,35>",(f)); Inst8++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1880,1892,37>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1893,1894,37>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<1898,1899,37>",(f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<1901,1902,37>",(x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1918,1919,37>",(x)); Inst13++; } } catch(e) {}
  assertEquals(x == f, x == 'f', "==" + x);
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1924,1936,38>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<1937,1938,38>",(x)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<1943,1944,38>",(f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<1946,1947,38>",(x)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1965,1966,38>",(x)); Inst18++; } } catch(e) {}
  assertEquals(x === f, x === 'f', "===" + x);
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1971,1983,39>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<1984,1985,39>",(x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<1988,1989,39>",(f)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1991,1992,39>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<2006,2007,39>",(x)); Inst23++; } } catch(e) {}
  assertEquals(x < f, x < 'f', "<" + x);
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2012,2024,40>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<2025,2026,40>",(x)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<2030,2031,40>",(f)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x) != "undefined") {_RecordType("<2033,2034,40>",(x)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<2050,2051,40>",(x)); Inst28++; } } catch(e) {}
  assertEquals(x <= f, x <= 'f', "<=" + x);
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2056,2068,41>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<2069,2070,41>",(x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<2073,2074,41>",(f)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<2076,2077,41>",(x)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<2091,2092,41>",(x)); Inst33++; } } catch(e) {}
  assertEquals(x > f, x > 'f', ">" + x);
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2097,2109,42>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (x) != "undefined") {_RecordType("<2110,2111,42>",(x)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (f) != "undefined") {_RecordType("<2115,2116,42>",(f)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<2118,2119,42>",(x)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<2135,2136,42>",(x)); Inst38++; } } catch(e) {}
  assertEquals(x >= f, x >= 'f', ">=" + x);
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2141,2153,43>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<2154,2155,43>",(f)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<2159,2160,43>",(x)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<2169,2170,43>",(x)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<2180,2181,43>",(x)); Inst43++; } } catch(e) {}
  assertEquals(f == x, 'f' == x, "==r" + x);
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2186,2198,44>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (f) != "undefined") {_RecordType("<2199,2200,44>",(f)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<2205,2206,44>",(x)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<2216,2217,44>",(x)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (x) != "undefined") {_RecordType("<2228,2229,44>",(x)); Inst48++; } } catch(e) {}
  assertEquals(f === x, 'f' === x, "===r" + x);
try { if (Inst49 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2234,2246,45>",(assertEquals)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (f) != "undefined") {_RecordType("<2247,2248,45>",(f)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (x) != "undefined") {_RecordType("<2251,2252,45>",(x)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<2260,2261,45>",(x)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (x) != "undefined") {_RecordType("<2270,2271,45>",(x)); Inst53++; } } catch(e) {}
  assertEquals(f > x, 'f' > x, "<r" + x);
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2276,2288,46>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (f) != "undefined") {_RecordType("<2289,2290,46>",(f)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<2294,2295,46>",(x)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (x) != "undefined") {_RecordType("<2304,2305,46>",(x)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (x) != "undefined") {_RecordType("<2315,2316,46>",(x)); Inst58++; } } catch(e) {}
  assertEquals(f >= x, 'f' >= x, "<=r" + x);
try { if (Inst59 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2321,2333,47>",(assertEquals)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (f) != "undefined") {_RecordType("<2334,2335,47>",(f)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (x) != "undefined") {_RecordType("<2338,2339,47>",(x)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (x) != "undefined") {_RecordType("<2347,2348,47>",(x)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (x) != "undefined") {_RecordType("<2357,2358,47>",(x)); Inst63++; } } catch(e) {}
  assertEquals(f < x, 'f' < x, ">r" + x);
try { if (Inst64 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2363,2375,48>",(assertEquals)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (f) != "undefined") {_RecordType("<2376,2377,48>",(f)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (x) != "undefined") {_RecordType("<2381,2382,48>",(x)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (x) != "undefined") {_RecordType("<2391,2392,48>",(x)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (x) != "undefined") {_RecordType("<2402,2403,48>",(x)); Inst68++; } } catch(e) {}
  assertEquals(f <= x, 'f' <= x, ">=r" + x);
}

