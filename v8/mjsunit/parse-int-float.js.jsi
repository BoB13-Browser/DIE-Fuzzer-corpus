var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
var Inst170 = 0;
var Inst171 = 0;
var Inst172 = 0;
var Inst173 = 0;
var Inst174 = 0;
var Inst175 = 0;
var Inst176 = 0;
var Inst177 = 0;
var Inst178 = 0;
var Inst179 = 0;
var Inst180 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1598,1610,28>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1614,1622,28>",(parseInt)); Inst1++; } } catch(e) {}
assertEquals(0, parseInt('0'));
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1630,1642,29>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1646,1654,29>",(parseInt)); Inst3++; } } catch(e) {}
assertEquals(0, parseInt(' 0'));
try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1663,1675,30>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1679,1687,30>",(parseInt)); Inst5++; } } catch(e) {}
assertEquals(0, parseInt(' 0 '));

try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1698,1710,32>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1715,1723,32>",(parseInt)); Inst7++; } } catch(e) {}
assertEquals(77, parseInt('077'));
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1733,1745,33>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1750,1758,33>",(parseInt)); Inst9++; } } catch(e) {}
assertEquals(77, parseInt('  077'));
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1770,1782,34>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1787,1795,34>",(parseInt)); Inst11++; } } catch(e) {}
assertEquals(77, parseInt('  077   '));
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1810,1822,35>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1828,1836,35>",(parseInt)); Inst13++; } } catch(e) {}
assertEquals(-77, parseInt('  -077'));

try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1850,1862,37>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1866,1874,37>",(parseInt)); Inst15++; } } catch(e) {}
assertEquals(3, parseInt('11', 2));
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1886,1898,38>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1902,1910,38>",(parseInt)); Inst17++; } } catch(e) {}
assertEquals(4, parseInt('11', 3));
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1922,1934,39>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1938,1946,39>",(parseInt)); Inst19++; } } catch(e) {}
assertEquals(4, parseInt('11', 3.8));

try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1961,1973,41>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<1980,1988,41>",(parseInt)); Inst21++; } } catch(e) {}
assertEquals(0x12, parseInt('0x12'));
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1999,2011,42>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2018,2026,42>",(parseInt)); Inst23++; } } catch(e) {}
assertEquals(0x12, parseInt('0x12', 16));
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2041,2053,43>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2060,2068,43>",(parseInt)); Inst25++; } } catch(e) {}
assertEquals(0x12, parseInt('0x12', 16.1));
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2085,2097,44>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2104,2112,44>",(parseInt)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2121,2124,44>",(NaN)); Inst28++; } } catch(e) {}
assertEquals(0x12, parseInt('0x12', NaN));
try { if (Inst29 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2128,2138,45>",(assertTrue)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2139,2144,45>",(isNaN)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2145,2153,45>",(parseInt)); Inst31++; } } catch(e) {}
assertTrue(isNaN(parseInt('0x  ')));
try { if (Inst32 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2165,2175,46>",(assertTrue)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2176,2181,46>",(isNaN)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2182,2190,46>",(parseInt)); Inst34++; } } catch(e) {}
assertTrue(isNaN(parseInt('0x')));
try { if (Inst35 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2200,2210,47>",(assertTrue)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2211,2216,47>",(isNaN)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2217,2225,47>",(parseInt)); Inst37++; } } catch(e) {}
assertTrue(isNaN(parseInt('0x  ', 16)));
try { if (Inst38 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2241,2251,48>",(assertTrue)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<2252,2257,48>",(isNaN)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2258,2266,48>",(parseInt)); Inst40++; } } catch(e) {}
assertTrue(isNaN(parseInt('0x', 16)));
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2280,2292,49>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2297,2305,49>",(parseInt)); Inst42++; } } catch(e) {}
assertEquals(12, parseInt('12aaa'));

try { if (Inst43 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2318,2330,51>",(assertEquals)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2336,2346,51>",(parseFloat)); Inst44++; } } catch(e) {}
assertEquals(0.1, parseFloat('0.1'));
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2356,2368,52>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2374,2384,52>",(parseFloat)); Inst46++; } } catch(e) {}
assertEquals(0.1, parseFloat('0.1aaa'));
try { if (Inst47 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2397,2409,53>",(assertEquals)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2413,2423,53>",(parseFloat)); Inst48++; } } catch(e) {}
assertEquals(0, parseFloat('0aaa'));
try { if (Inst49 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2434,2446,54>",(assertEquals)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2450,2460,54>",(parseFloat)); Inst50++; } } catch(e) {}
assertEquals(0, parseFloat('0x12'));
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2471,2483,55>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<2488,2498,55>",(parseFloat)); Inst52++; } } catch(e) {}
assertEquals(77, parseFloat('077'));

try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2509,2521,57>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2522,2530,57>",(Infinity)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2532,2540,57>",(parseInt)); Inst55++; } } catch(e) {}
assertEquals(Infinity, parseInt('1000000000000000000000000000000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000000000000'
    + '0000000000000'));

try { if (Inst56 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2940,2952,64>",(assertEquals)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2953,2961,64>",(Infinity)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<2963,2971,64>",(parseInt)); Inst58++; } } catch(e) {}
assertEquals(Infinity, parseInt('0x10000000000000000000000000000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000000000000'
    + '0000000000000'));


var i;
try { if (Inst59 <= 1000 && typeof (i) != "undefined") {_RecordType("<3376,3377,72>",(i)); Inst59++; } } catch(e) {}
var y = 10;
try { if (Inst60 <= 1000 && typeof (y) != "undefined") {_RecordType("<3383,3384,73>",(y)); Inst60++; } } catch(e) {}

for (i = 1; i < 21; i++) {
try { if (Inst61 <= 1000 && typeof (i) != "undefined") {_RecordType("<3397,3398,75>",(i)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (i) != "undefined") {_RecordType("<3404,3405,75>",(i)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (i) != "undefined") {_RecordType("<3412,3413,75>",(i)); Inst63++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3429,3433,76>",(eval)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (i) != "undefined") {_RecordType("<3443,3444,76>",(i)); Inst66++; } } catch(e) {}
  var x = eval("1.2e" + i);
try { if (Inst64 <= 1000 && typeof (x) != "undefined") {_RecordType("<3425,3426,76>",(x)); Inst64++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3449,3461,77>",(assertEquals)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<3462,3472,77>",(Math.floor)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (Math) != "undefined") {_RecordType("<3462,3466,77>",(Math)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (x) != "undefined") {_RecordType("<3473,3474,77>",(x)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3477,3485,77>",(parseInt)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (x) != "undefined") {_RecordType("<3486,3487,77>",(x)); Inst72++; } } catch(e) {}
  assertEquals(Math.floor(x), parseInt(x));
try { if (Inst74 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3497,3501,78>",(eval)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (i) != "undefined") {_RecordType("<3509,3510,78>",(i)); Inst75++; } } catch(e) {}
  x = eval("1e" + i);
try { if (Inst73 <= 1000 && typeof (x) != "undefined") {_RecordType("<3493,3494,78>",(x)); Inst73++; } } catch(e) {}
try { if (Inst76 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3515,3527,79>",(assertEquals)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (x) != "undefined") {_RecordType("<3528,3529,79>",(x)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (y) != "undefined") {_RecordType("<3531,3532,79>",(y)); Inst78++; } } catch(e) {}
  assertEquals(x, y);
  y *= 10;
try { if (Inst79 <= 1000 && typeof (y) != "undefined") {_RecordType("<3537,3538,80>",(y)); Inst79++; } } catch(e) {}
try { if (Inst80 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3548,3560,81>",(assertEquals)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<3561,3571,81>",(Math.floor)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (Math) != "undefined") {_RecordType("<3561,3565,81>",(Math)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (x) != "undefined") {_RecordType("<3572,3573,81>",(x)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3576,3584,81>",(parseInt)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (x) != "undefined") {_RecordType("<3585,3586,81>",(x)); Inst85++; } } catch(e) {}
  assertEquals(Math.floor(x), parseInt(x));
try { if (Inst87 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3596,3600,82>",(eval)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (i) != "undefined") {_RecordType("<3609,3610,82>",(i)); Inst88++; } } catch(e) {}
  x = eval("-1e" + i);
try { if (Inst86 <= 1000 && typeof (x) != "undefined") {_RecordType("<3592,3593,82>",(x)); Inst86++; } } catch(e) {}
try { if (Inst89 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3615,3627,83>",(assertEquals)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<3628,3637,83>",(Math.ceil)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (Math) != "undefined") {_RecordType("<3628,3632,83>",(Math)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (x) != "undefined") {_RecordType("<3638,3639,83>",(x)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3642,3650,83>",(parseInt)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (x) != "undefined") {_RecordType("<3651,3652,83>",(x)); Inst94++; } } catch(e) {}
  assertEquals(Math.ceil(x), parseInt(x));
try { if (Inst96 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3662,3666,84>",(eval)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (i) != "undefined") {_RecordType("<3677,3678,84>",(i)); Inst97++; } } catch(e) {}
  x = eval("-1.2e" + i);
try { if (Inst95 <= 1000 && typeof (x) != "undefined") {_RecordType("<3658,3659,84>",(x)); Inst95++; } } catch(e) {}
try { if (Inst98 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3683,3695,85>",(assertEquals)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (Math.ceil) != "undefined") {_RecordType("<3696,3705,85>",(Math.ceil)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (Math) != "undefined") {_RecordType("<3696,3700,85>",(Math)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (x) != "undefined") {_RecordType("<3706,3707,85>",(x)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3710,3718,85>",(parseInt)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (x) != "undefined") {_RecordType("<3719,3720,85>",(x)); Inst103++; } } catch(e) {}
  assertEquals(Math.ceil(x), parseInt(x));
}

for (i = 21; i < 53; i++) {
try { if (Inst104 <= 1000 && typeof (i) != "undefined") {_RecordType("<3732,3733,88>",(i)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (i) != "undefined") {_RecordType("<3740,3741,88>",(i)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (i) != "undefined") {_RecordType("<3748,3749,88>",(i)); Inst106++; } } catch(e) {}
try { if (Inst108 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3765,3769,89>",(eval)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (i) != "undefined") {_RecordType("<3777,3778,89>",(i)); Inst109++; } } catch(e) {}
  var x = eval("1e" + i);
try { if (Inst107 <= 1000 && typeof (x) != "undefined") {_RecordType("<3761,3762,89>",(x)); Inst107++; } } catch(e) {}
try { if (Inst110 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3783,3795,90>",(assertEquals)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3799,3807,90>",(parseInt)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (x) != "undefined") {_RecordType("<3808,3809,90>",(x)); Inst112++; } } catch(e) {}
  assertEquals(1, parseInt(x));
try { if (Inst114 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3819,3823,91>",(eval)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (i) != "undefined") {_RecordType("<3832,3833,91>",(i)); Inst115++; } } catch(e) {}
  x = eval("-1e" + i);
try { if (Inst113 <= 1000 && typeof (x) != "undefined") {_RecordType("<3815,3816,91>",(x)); Inst113++; } } catch(e) {}
try { if (Inst116 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3838,3850,92>",(assertEquals)); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3855,3863,92>",(parseInt)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (x) != "undefined") {_RecordType("<3864,3865,92>",(x)); Inst118++; } } catch(e) {}
  assertEquals(-1, parseInt(x));
}

try { if (Inst119 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3872,3882,95>",(assertTrue)); Inst119++; } } catch(e) {}try { if (Inst120 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3883,3888,95>",(isNaN)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3889,3897,95>",(parseInt)); Inst121++; } } catch(e) {}
assertTrue(isNaN(parseInt(0/0)));
try { if (Inst122 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3906,3916,96>",(assertTrue)); Inst122++; } } catch(e) {}try { if (Inst123 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3917,3922,96>",(isNaN)); Inst123++; } } catch(e) {}try { if (Inst124 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3923,3931,96>",(parseInt)); Inst124++; } } catch(e) {}
assertTrue(isNaN(parseInt(1/0)), "parseInt Infinity");
try { if (Inst125 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3961,3971,97>",(assertTrue)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<3972,3977,97>",(isNaN)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<3978,3986,97>",(parseInt)); Inst127++; } } catch(e) {}
assertTrue(isNaN(parseInt(-1/0)), "parseInt -Infinity");

try { if (Inst128 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<4019,4029,99>",(assertTrue)); Inst128++; } } catch(e) {}try { if (Inst129 <= 1000 && typeof (isNaN) != "undefined") {_RecordType("<4030,4035,99>",(isNaN)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<4036,4046,99>",(parseFloat)); Inst130++; } } catch(e) {}
assertTrue(isNaN(parseFloat(0/0)));
try { if (Inst131 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4055,4067,100>",(assertEquals)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<4068,4076,100>",(Infinity)); Inst132++; } } catch(e) {}try { if (Inst133 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<4078,4088,100>",(parseFloat)); Inst133++; } } catch(e) {}
assertEquals(Infinity, parseFloat(1/0), "parseFloat Infinity");
try { if (Inst134 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4119,4131,101>",(assertEquals)); Inst134++; } } catch(e) {}try { if (Inst135 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<4133,4141,101>",(Infinity)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<4143,4153,101>",(parseFloat)); Inst136++; } } catch(e) {}
assertEquals(-Infinity, parseFloat(-1/0), "parseFloat -Infinity");

var state;
try { if (Inst137 <= 1000 && typeof (state) != "undefined") {_RecordType("<4191,4196,103>",(state)); Inst137++; } } catch(e) {}
var throwingRadix = { valueOf: function() { state = "throwingRadix"; throw null; } };
try { if (Inst138 <= 1000 && typeof (throwingRadix) != "undefined") {_RecordType("<4202,4215,104>",(throwingRadix)); Inst138++; } } catch(e) {}try { if (Inst139 <= 1000 && typeof (state) != "undefined") {_RecordType("<4242,4247,104>",(state)); Inst139++; } } catch(e) {}
var throwingString = { toString: function() { state = "throwingString"; throw null; } };
try { if (Inst140 <= 1000 && typeof (throwingString) != "undefined") {_RecordType("<4288,4302,105>",(throwingString)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (state) != "undefined") {_RecordType("<4330,4335,105>",(state)); Inst141++; } } catch(e) {}
state = null;
try { if (Inst142 <= 1000 && typeof (state) != "undefined") {_RecordType("<4373,4378,106>",(state)); Inst142++; } } catch(e) {}
try { if (Inst143 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<4393,4401,107>",(parseInt)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (throwingRadix) != "undefined") {_RecordType("<4409,4422,107>",(throwingRadix)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (e) != "undefined") {_RecordType("<4434,4435,107>",(e)); Inst145++; } } catch(e) {}
try { parseInt('123', throwingRadix); } catch (e) {}
try { if (Inst146 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4440,4452,108>",(assertEquals)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (state) != "undefined") {_RecordType("<4453,4458,108>",(state)); Inst147++; } } catch(e) {}
assertEquals(state, "throwingRadix");

state = null;
try { if (Inst148 <= 1000 && typeof (state) != "undefined") {_RecordType("<4479,4484,110>",(state)); Inst148++; } } catch(e) {}
try { if (Inst149 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<4499,4507,111>",(parseInt)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (throwingString) != "undefined") {_RecordType("<4508,4522,111>",(throwingString)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (e) != "undefined") {_RecordType("<4538,4539,111>",(e)); Inst151++; } } catch(e) {}
try { parseInt(throwingString, 10); } catch (e) {}
try { if (Inst152 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4544,4556,112>",(assertEquals)); Inst152++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (state) != "undefined") {_RecordType("<4557,4562,112>",(state)); Inst153++; } } catch(e) {}
assertEquals(state, "throwingString");

state = null;
try { if (Inst154 <= 1000 && typeof (state) != "undefined") {_RecordType("<4584,4589,114>",(state)); Inst154++; } } catch(e) {}
try { if (Inst155 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<4604,4612,115>",(parseInt)); Inst155++; } } catch(e) {}try { if (Inst156 <= 1000 && typeof (throwingString) != "undefined") {_RecordType("<4613,4627,115>",(throwingString)); Inst156++; } } catch(e) {}try { if (Inst157 <= 1000 && typeof (throwingRadix) != "undefined") {_RecordType("<4629,4642,115>",(throwingRadix)); Inst157++; } } catch(e) {}try { if (Inst158 <= 1000 && typeof (e) != "undefined") {_RecordType("<4654,4655,115>",(e)); Inst158++; } } catch(e) {}
try { parseInt(throwingString, throwingRadix); } catch (e) {}
try { if (Inst159 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4660,4672,116>",(assertEquals)); Inst159++; } } catch(e) {}try { if (Inst160 <= 1000 && typeof (state) != "undefined") {_RecordType("<4673,4678,116>",(state)); Inst160++; } } catch(e) {}
assertEquals(state, "throwingString");

// And finally, check that the Harmony additions to the Number
// constructor is available:
try { if (Inst161 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<4792,4802,120>",(assertTrue)); Inst161++; } } catch(e) {}try { if (Inst162 <= 1000 && typeof (Number) != "undefined") {_RecordType("<4817,4823,120>",(Number)); Inst162++; } } catch(e) {}
assertTrue("parseInt" in Number);
try { if (Inst163 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<4826,4836,121>",(assertTrue)); Inst163++; } } catch(e) {}try { if (Inst164 <= 1000 && typeof (Number) != "undefined") {_RecordType("<4853,4859,121>",(Number)); Inst164++; } } catch(e) {}
assertTrue("parseFloat" in Number);
try { if (Inst165 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<4862,4872,122>",(assertSame)); Inst165++; } } catch(e) {}try { if (Inst166 <= 1000 && typeof (Number.parseInt) != "undefined") {_RecordType("<4874,4889,122>",(Number.parseInt)); Inst166++; } } catch(e) {}try { if (Inst167 <= 1000 && typeof (Number) != "undefined") {_RecordType("<4874,4880,122>",(Number)); Inst167++; } } catch(e) {}try { if (Inst168 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<4891,4899,122>",(parseInt)); Inst168++; } } catch(e) {}
assertSame( Number.parseInt, parseInt);
try { if (Inst169 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<4902,4912,123>",(assertSame)); Inst169++; } } catch(e) {}try { if (Inst170 <= 1000 && typeof (Number.parseFloat) != "undefined") {_RecordType("<4913,4930,123>",(Number.parseFloat)); Inst170++; } } catch(e) {}try { if (Inst171 <= 1000 && typeof (Number) != "undefined") {_RecordType("<4913,4919,123>",(Number)); Inst171++; } } catch(e) {}try { if (Inst172 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<4932,4942,123>",(parseFloat)); Inst172++; } } catch(e) {}
assertSame(Number.parseFloat, parseFloat);
try { if (Inst173 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4945,4957,124>",(assertEquals)); Inst173++; } } catch(e) {}try { if (Inst174 <= 1000 && typeof (Number.parseFloat) != "undefined") {_RecordType("<4958,4975,124>",(Number.parseFloat)); Inst174++; } } catch(e) {}try { if (Inst175 <= 1000 && typeof (Number) != "undefined") {_RecordType("<4958,4964,124>",(Number)); Inst175++; } } catch(e) {}try { if (Inst176 <= 1000 && typeof (parseFloat) != "undefined") {_RecordType("<4984,4994,124>",(parseFloat)); Inst176++; } } catch(e) {}
assertEquals(Number.parseFloat('0.1'), parseFloat('0.1'));
try { if (Inst177 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5004,5016,125>",(assertEquals)); Inst177++; } } catch(e) {}try { if (Inst178 <= 1000 && typeof (Number.parseInt) != "undefined") {_RecordType("<5017,5032,125>",(Number.parseInt)); Inst178++; } } catch(e) {}try { if (Inst179 <= 1000 && typeof (Number) != "undefined") {_RecordType("<5017,5023,125>",(Number)); Inst179++; } } catch(e) {}try { if (Inst180 <= 1000 && typeof (parseInt) != "undefined") {_RecordType("<5042,5050,125>",(parseInt)); Inst180++; } } catch(e) {}
assertEquals(Number.parseInt('0xea'), parseInt('0xEA'));

