var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --harmony-dynamic-import
var ran = false;
try { if (Inst0 <= 1000 && typeof (ran) != "undefined") {_RecordType("<229,232,5>",(ran)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<258,262,7>",(test)); Inst1++; } } catch(e) {}
async function test() {
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<538,539,17>",(e)); Inst15++; } } catch(e) {}
  try {
try { if (Inst4 <= 1000 && typeof (Promise.all) != "undefined") {_RecordType("<316,327,9>",(Promise.all)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<316,323,9>",(Promise)); Inst5++; } } catch(e) {}
    let [namespace1, namespace2] = await Promise.all([import('modules-skip-1.js'), import('modules-skip-3.js')]);
try { if (Inst2 <= 1000 && typeof (namespace1) != "undefined") {_RecordType("<284,294,9>",(namespace1)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (namespace2) != "undefined") {_RecordType("<296,306,9>",(namespace2)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (namespace1.life) != "undefined") {_RecordType("<404,419,10>",(namespace1.life)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (namespace1) != "undefined") {_RecordType("<404,414,10>",(namespace1)); Inst8++; } } catch(e) {}
    let life = namespace1.life();
try { if (Inst6 <= 1000 && typeof (life) != "undefined") {_RecordType("<397,401,10>",(life)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (namespace2.stringlife) != "undefined") {_RecordType("<444,465,11>",(namespace2.stringlife)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (namespace2) != "undefined") {_RecordType("<444,454,11>",(namespace2)); Inst11++; } } catch(e) {}
    let stringlife = namespace2.stringlife;
try { if (Inst9 <= 1000 && typeof (stringlife) != "undefined") {_RecordType("<431,441,11>",(stringlife)); Inst9++; } } catch(e) {}
    42;
try { if (Inst12 <= 1000 && typeof (life) != "undefined") {_RecordType("<479,483,13>",(life)); Inst12++; } } catch(e) {}
    life;
    "42";
try { if (Inst13 <= 1000 && typeof (stringlife) != "undefined") {_RecordType("<499,509,15>",(stringlife)); Inst13++; } } catch(e) {}
    stringlife;
    ran = true;
try { if (Inst14 <= 1000 && typeof (ran) != "undefined") {_RecordType("<515,518,16>",(ran)); Inst14++; } } catch(e) {}
  } catch (e) {
try { if (Inst16 <= 1000 && typeof (print) != "undefined") {_RecordType("<547,552,18>",(print)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (e) != "undefined") {_RecordType("<567,568,18>",(e)); Inst17++; } } catch(e) {}
    print("failure: " + e);
  }
}

try { if (Inst18 <= 1000 && typeof (test) != "undefined") {_RecordType("<578,582,22>",(test)); Inst18++; } } catch(e) {}
test();
try { if (Inst19 <= 1000 && typeof (ran) != "undefined") {_RecordType("<586,589,23>",(ran)); Inst19++; } } catch(e) {}
ran;

