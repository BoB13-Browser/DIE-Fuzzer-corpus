var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --harmony-dynamic-import
var ran = false;
try { if (Inst0 <= 1000 && typeof (ran) != "undefined") {_RecordType("<229,232,5>",(ran)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (toString) != "undefined") {_RecordType("<258,266,7>",(toString)); Inst2++; } } catch(e) {}
var x = {
  get toString() {
try { if (Inst3 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<282,291,8>",(undefined)); Inst3++; } } catch(e) {}
    return undefined;
  }

};
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<246,247,6>",(x)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<308,309,12>",(x)); Inst4++; } } catch(e) {}
import(x);
try { if (Inst6 <= 1000 && typeof (toString) != "undefined") {_RecordType("<324,332,14>",(toString)); Inst6++; } } catch(e) {}
var x = {
  toString() {
try { if (Inst7 <= 1000 && typeof (Error) != "undefined") {_RecordType("<351,356,15>",(Error)); Inst7++; } } catch(e) {}
    throw new Error('42 is the answer');
  }

};
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<316,317,13>",(x)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<393,394,19>",(x)); Inst8++; } } catch(e) {}
import(x);
try { if (Inst10 <= 1000 && typeof (toString) != "undefined") {_RecordType("<413,421,21>",(toString)); Inst10++; } } catch(e) {}
var x = {
  get toString() {
try { if (Inst11 <= 1000 && typeof (Error) != "undefined") {_RecordType("<440,445,22>",(Error)); Inst11++; } } catch(e) {}
    throw new Error('42 is the answer');
  }

};
try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<401,402,20>",(x)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<482,483,26>",(x)); Inst12++; } } catch(e) {}
import(x);

try { if (Inst13 <= 1000 && typeof (test1) != "undefined") {_RecordType("<502,507,28>",(test1)); Inst13++; } } catch(e) {}
async function test1() {
try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<703,704,38>",(e)); Inst20++; } } catch(e) {}
  try {
try { if (Inst15 <= 1000 && typeof (toString) != "undefined") {_RecordType("<540,548,31>",(toString)); Inst15++; } } catch(e) {}
    let x = {
      toString() {
try { if (Inst16 <= 1000 && typeof (Error) != "undefined") {_RecordType("<571,576,32>",(Error)); Inst16++; } } catch(e) {}
        throw new Error('42 is the answer');
      }

    };
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<528,529,30>",(x)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<647,648,36>",(x)); Inst18++; } } catch(e) {}
    let namespace = await import(x);
try { if (Inst17 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<622,631,36>",(namespace)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (print) != "undefined") {_RecordType("<655,660,37>",(print)); Inst19++; } } catch(e) {}
    print('failure: this should throw');
  } catch (e) {
try { if (Inst21 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<712,721,39>",(e.message)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<712,713,39>",(e)); Inst22++; } } catch(e) {}
    e.message;
    '42 is the answer';
    ran = true;
try { if (Inst23 <= 1000 && typeof (ran) != "undefined") {_RecordType("<751,754,41>",(ran)); Inst23++; } } catch(e) {}
  }
}

try { if (Inst24 <= 1000 && typeof (test1) != "undefined") {_RecordType("<770,775,45>",(test1)); Inst24++; } } catch(e) {}
test1();
try { if (Inst25 <= 1000 && typeof (ran) != "undefined") {_RecordType("<779,782,46>",(ran)); Inst25++; } } catch(e) {}
ran;
ran = false;
try { if (Inst26 <= 1000 && typeof (ran) != "undefined") {_RecordType("<784,787,47>",(ran)); Inst26++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (test2) != "undefined") {_RecordType("<813,818,49>",(test2)); Inst27++; } } catch(e) {}
async function test2() {
try { if (Inst34 <= 1000 && typeof (e) != "undefined") {_RecordType("<1018,1019,59>",(e)); Inst34++; } } catch(e) {}
  try {
try { if (Inst29 <= 1000 && typeof (toString) != "undefined") {_RecordType("<855,863,52>",(toString)); Inst29++; } } catch(e) {}
    let x = {
      get toString() {
try { if (Inst30 <= 1000 && typeof (Error) != "undefined") {_RecordType("<886,891,53>",(Error)); Inst30++; } } catch(e) {}
        throw new Error('42 is the answer');
      }

    };
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<839,840,51>",(x)); Inst28++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (x) != "undefined") {_RecordType("<962,963,57>",(x)); Inst32++; } } catch(e) {}
    let namespace = await import(x);
try { if (Inst31 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<937,946,57>",(namespace)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (print) != "undefined") {_RecordType("<970,975,58>",(print)); Inst33++; } } catch(e) {}
    print('failure: this should throw');
  } catch (e) {
try { if (Inst35 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<1027,1036,60>",(e.message)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (e) != "undefined") {_RecordType("<1027,1028,60>",(e)); Inst36++; } } catch(e) {}
    e.message;
    '42 is the answer';
    ran = true;
try { if (Inst37 <= 1000 && typeof (ran) != "undefined") {_RecordType("<1066,1069,62>",(ran)); Inst37++; } } catch(e) {}
  }
}

try { if (Inst38 <= 1000 && typeof (test2) != "undefined") {_RecordType("<1085,1090,66>",(test2)); Inst38++; } } catch(e) {}
test2();
try { if (Inst39 <= 1000 && typeof (ran) != "undefined") {_RecordType("<1094,1097,67>",(ran)); Inst39++; } } catch(e) {}
ran;
ran = false;
try { if (Inst40 <= 1000 && typeof (ran) != "undefined") {_RecordType("<1099,1102,68>",(ran)); Inst40++; } } catch(e) {}

try { if (Inst41 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1128,1133,70>",(test3)); Inst41++; } } catch(e) {}
async function test3() {
try { if (Inst48 <= 1000 && typeof (e) != "undefined") {_RecordType("<1314,1315,80>",(e)); Inst48++; } } catch(e) {}
  try {
try { if (Inst43 <= 1000 && typeof (toString) != "undefined") {_RecordType("<1170,1178,73>",(toString)); Inst43++; } } catch(e) {}
    let x = {
      get toString() {
try { if (Inst44 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1198,1207,74>",(undefined)); Inst44++; } } catch(e) {}
        return undefined;
      }

    };
try { if (Inst42 <= 1000 && typeof (x) != "undefined") {_RecordType("<1154,1155,72>",(x)); Inst42++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<1258,1259,78>",(x)); Inst46++; } } catch(e) {}
    let namespace = await import(x);
try { if (Inst45 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<1233,1242,78>",(namespace)); Inst45++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (print) != "undefined") {_RecordType("<1266,1271,79>",(print)); Inst47++; } } catch(e) {}
    print('failure: this should throw');
  } catch (e) {
try { if (Inst49 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<1323,1332,81>",(e.message)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (e) != "undefined") {_RecordType("<1323,1324,81>",(e)); Inst50++; } } catch(e) {}
    e.message;
    'Cannot convert object to primitive value';
    ran = true;
try { if (Inst51 <= 1000 && typeof (ran) != "undefined") {_RecordType("<1386,1389,83>",(ran)); Inst51++; } } catch(e) {}
  }
}

try { if (Inst52 <= 1000 && typeof (test3) != "undefined") {_RecordType("<1405,1410,87>",(test3)); Inst52++; } } catch(e) {}
test3();
try { if (Inst53 <= 1000 && typeof (ran) != "undefined") {_RecordType("<1414,1417,88>",(ran)); Inst53++; } } catch(e) {}
ran;

