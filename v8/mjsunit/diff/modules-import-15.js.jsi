var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --harmony-dynamic-import
var ran = false;
try { if (Inst0 <= 1000 && typeof (ran) != "undefined") {_RecordType("<229,232,5>",(ran)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test1) != "undefined") {_RecordType("<258,263,7>",(test1)); Inst1++; } } catch(e) {}
async function test1() {
try { if (Inst4 <= 1000 && typeof (e) != "undefined") {_RecordType("<379,380,11>",(e)); Inst4++; } } catch(e) {}
  try {
    let x = await import('modules-skip-8.js');
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<284,285,9>",(x)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (print) != "undefined") {_RecordType("<327,332,10>",(print)); Inst3++; } } catch(e) {}
    print('failure: should be unreachable');
  } catch (e) {
    'Unexpected reserved word';
try { if (Inst5 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<420,429,13>",(e.message)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<420,421,13>",(e)); Inst6++; } } catch(e) {}
    e.message;
    ran = true;
try { if (Inst7 <= 1000 && typeof (ran) != "undefined") {_RecordType("<435,438,14>",(ran)); Inst7++; } } catch(e) {}
  }
}

try { if (Inst8 <= 1000 && typeof (test1) != "undefined") {_RecordType("<454,459,18>",(test1)); Inst8++; } } catch(e) {}
test1();
try { if (Inst9 <= 1000 && typeof (ran) != "undefined") {_RecordType("<463,466,19>",(ran)); Inst9++; } } catch(e) {}
ran;
ran = false;
try { if (Inst10 <= 1000 && typeof (ran) != "undefined") {_RecordType("<468,471,20>",(ran)); Inst10++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (test2) != "undefined") {_RecordType("<497,502,22>",(test2)); Inst11++; } } catch(e) {}
async function test2() {
try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<618,619,26>",(e)); Inst14++; } } catch(e) {}
  try {
    let x = await import('modules-skip-9.js');
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<523,524,24>",(x)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (print) != "undefined") {_RecordType("<566,571,25>",(print)); Inst13++; } } catch(e) {}
    print('failure: should be unreachable');
  } catch (e) {
try { if (Inst15 <= 1000 && typeof (e) != "undefined") {_RecordType("<627,628,27>",(e)); Inst15++; } } catch(e) {}
    e;
try { if (Inst16 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<634,645,28>",(SyntaxError)); Inst16++; } } catch(e) {}
    SyntaxError;
try { if (Inst17 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<721,730,29>",(e.message)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (e) != "undefined") {_RecordType("<721,722,29>",(e)); Inst18++; } } catch(e) {}
    "The requested module 'modules-skip-empty.js' does not provide an " + e.message;
    ran = true;
try { if (Inst19 <= 1000 && typeof (ran) != "undefined") {_RecordType("<736,739,30>",(ran)); Inst19++; } } catch(e) {}
  }
}

try { if (Inst20 <= 1000 && typeof (test2) != "undefined") {_RecordType("<755,760,34>",(test2)); Inst20++; } } catch(e) {}
test2();
try { if (Inst21 <= 1000 && typeof (ran) != "undefined") {_RecordType("<764,767,35>",(ran)); Inst21++; } } catch(e) {}
ran;
ran = false;
try { if (Inst22 <= 1000 && typeof (ran) != "undefined") {_RecordType("<769,772,36>",(ran)); Inst22++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (test3) != "undefined") {_RecordType("<798,803,38>",(test3)); Inst23++; } } catch(e) {}
async function test3() {
try { if (Inst26 <= 1000 && typeof (e) != "undefined") {_RecordType("<921,922,42>",(e)); Inst26++; } } catch(e) {}
  try {
    let x = await import('nonexistent-file.js');
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<824,825,40>",(x)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (print) != "undefined") {_RecordType("<869,874,41>",(print)); Inst25++; } } catch(e) {}
    print('failure: should be unreachable');
  } catch (e) {
try { if (Inst27 <= 1000 && typeof (e.startsWith) != "undefined") {_RecordType("<930,942,43>",(e.startsWith)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<930,931,43>",(e)); Inst28++; } } catch(e) {}
    e.startsWith('Error reading');
    ran = true;
try { if (Inst29 <= 1000 && typeof (ran) != "undefined") {_RecordType("<965,968,44>",(ran)); Inst29++; } } catch(e) {}
  }
}

try { if (Inst30 <= 1000 && typeof (test3) != "undefined") {_RecordType("<984,989,48>",(test3)); Inst30++; } } catch(e) {}
test3();
try { if (Inst31 <= 1000 && typeof (ran) != "undefined") {_RecordType("<993,996,49>",(ran)); Inst31++; } } catch(e) {}
ran;

