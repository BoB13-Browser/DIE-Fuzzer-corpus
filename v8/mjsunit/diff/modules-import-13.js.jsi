var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --harmony-dynamic-import
// Resources: test/mjsunit/harmony/modules-skip-1.js
ran = false;
try { if (Inst0 <= 1000 && typeof (ran) != "undefined") {_RecordType("<278,281,6>",(ran)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test1) != "undefined") {_RecordType("<307,312,8>",(test1)); Inst1++; } } catch(e) {}
async function test1() {
try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<525,526,21>",(e)); Inst11++; } } catch(e) {}
  try {
try { if (Inst3 <= 1000 && typeof (toString) != "undefined") {_RecordType("<345,353,11>",(toString)); Inst3++; } } catch(e) {}
    let x = {
      toString() {
        return 'modules-skip-1.js';
      }

    };
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<333,334,10>",(x)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<443,444,16>",(x)); Inst5++; } } catch(e) {}
    let namespace = await import(x);
try { if (Inst4 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<418,427,16>",(namespace)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (namespace.life) != "undefined") {_RecordType("<462,476,17>",(namespace.life)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<462,471,17>",(namespace)); Inst8++; } } catch(e) {}
    let life = namespace.life();
try { if (Inst6 <= 1000 && typeof (life) != "undefined") {_RecordType("<455,459,17>",(life)); Inst6++; } } catch(e) {}
    42;
try { if (Inst9 <= 1000 && typeof (life) != "undefined") {_RecordType("<492,496,19>",(life)); Inst9++; } } catch(e) {}
    life;
    ran = true;
try { if (Inst10 <= 1000 && typeof (ran) != "undefined") {_RecordType("<502,505,20>",(ran)); Inst10++; } } catch(e) {}
  } catch (e) {
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<534,539,22>",(print)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<554,555,22>",(e)); Inst13++; } } catch(e) {}
    print('failure: ' + e);
  }
}

try { if (Inst14 <= 1000 && typeof (test1) != "undefined") {_RecordType("<565,570,26>",(test1)); Inst14++; } } catch(e) {}
test1();
try { if (Inst15 <= 1000 && typeof (ran) != "undefined") {_RecordType("<574,577,27>",(ran)); Inst15++; } } catch(e) {}
ran;
ran = false;
try { if (Inst16 <= 1000 && typeof (ran) != "undefined") {_RecordType("<579,582,28>",(ran)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (test2) != "undefined") {_RecordType("<608,613,30>",(test2)); Inst17++; } } catch(e) {}
async function test2() {
try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<836,837,43>",(e)); Inst27++; } } catch(e) {}
  try {
try { if (Inst19 <= 1000 && typeof (toString) != "undefined") {_RecordType("<650,658,33>",(toString)); Inst19++; } } catch(e) {}
    let x = {
      get toString() {
        return () => 'modules-skip-1.js';
      }

    };
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<634,635,32>",(x)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<754,755,38>",(x)); Inst21++; } } catch(e) {}
    let namespace = await import(x);
try { if (Inst20 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<729,738,38>",(namespace)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (namespace.life) != "undefined") {_RecordType("<773,787,39>",(namespace.life)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<773,782,39>",(namespace)); Inst24++; } } catch(e) {}
    let life = namespace.life();
try { if (Inst22 <= 1000 && typeof (life) != "undefined") {_RecordType("<766,770,39>",(life)); Inst22++; } } catch(e) {}
    42;
try { if (Inst25 <= 1000 && typeof (life) != "undefined") {_RecordType("<803,807,41>",(life)); Inst25++; } } catch(e) {}
    life;
    ran = true;
try { if (Inst26 <= 1000 && typeof (ran) != "undefined") {_RecordType("<813,816,42>",(ran)); Inst26++; } } catch(e) {}
  } catch (e) {
try { if (Inst28 <= 1000 && typeof (print) != "undefined") {_RecordType("<845,850,44>",(print)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (e) != "undefined") {_RecordType("<865,866,44>",(e)); Inst29++; } } catch(e) {}
    print('failure: ' + e);
  }
}

try { if (Inst30 <= 1000 && typeof (test2) != "undefined") {_RecordType("<876,881,48>",(test2)); Inst30++; } } catch(e) {}
test2();
try { if (Inst31 <= 1000 && typeof (ran) != "undefined") {_RecordType("<885,888,49>",(ran)); Inst31++; } } catch(e) {}
ran;

