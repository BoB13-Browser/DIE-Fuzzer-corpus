var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --harmony --allow-natives-syntax --stack-size=100
try { if (Inst0 <= 1000 && typeof (__f_0) != "undefined") {_RecordType("<236,241,5>",(__f_0)); Inst0++; } } catch(e) {}
function __f_0() {
try { if (Inst2 <= 1000 && typeof (e) != "undefined") {_RecordType("<285,286,8>",(e)); Inst2++; } } catch(e) {}
  try {
try { if (Inst1 <= 1000 && typeof (__f_0) != "undefined") {_RecordType("<265,270,7>",(__f_0)); Inst1++; } } catch(e) {}
    return __f_0();
  } catch (e) {
    return import('no-such-file');
  }
}

var done = false;
try { if (Inst3 <= 1000 && typeof (done) != "undefined") {_RecordType("<336,340,13>",(done)); Inst3++; } } catch(e) {}
var error;
try { if (Inst4 <= 1000 && typeof (error) != "undefined") {_RecordType("<354,359,14>",(error)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (__f_0) != "undefined") {_RecordType("<376,381,16>",(__f_0)); Inst6++; } } catch(e) {}
var promise = __f_0();
try { if (Inst5 <= 1000 && typeof (promise) != "undefined") {_RecordType("<366,373,16>",(promise)); Inst5++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (promise.then) != "undefined") {_RecordType("<386,398,18>",(promise.then)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (promise) != "undefined") {_RecordType("<386,393,18>",(promise)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<399,416,18>",(assertUnreachable)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (err) != "undefined") {_RecordType("<418,421,18>",(err)); Inst10++; } } catch(e) {}
promise.then(assertUnreachable, err => {
  done = true;
try { if (Inst11 <= 1000 && typeof (done) != "undefined") {_RecordType("<429,433,19>",(done)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (err) != "undefined") {_RecordType("<452,455,20>",(err)); Inst13++; } } catch(e) {}
  error = err;
try { if (Inst12 <= 1000 && typeof (error) != "undefined") {_RecordType("<444,449,20>",(error)); Inst12++; } } catch(e) {}
});
try { if (Inst14 <= 1000 && typeof (error.startsWith) != "undefined") {_RecordType("<461,477,22>",(error.startsWith)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (error) != "undefined") {_RecordType("<461,466,22>",(error)); Inst15++; } } catch(e) {}
error.startsWith('Error reading');
try { if (Inst16 <= 1000 && typeof (done) != "undefined") {_RecordType("<496,500,23>",(done)); Inst16++; } } catch(e) {}
done;

