var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --allow-natives-syntax --harmony-dynamic-import
var ran = false;
try { if (Inst0 <= 1000 && typeof (ran) != "undefined") {_RecordType("<229,232,5>",(ran)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<258,262,7>",(test)); Inst1++; } } catch(e) {}
async function test() {
try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<542,543,18>",(e)); Inst11++; } } catch(e) {}
  try {
    let x = await import('modules-skip-1.js'); // modules-skip-5.js statically imports modules-skip-1.js
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<283,284,9>",(x)); Inst2++; } } catch(e) {}

    let y = await import('modules-skip-5.js');
try { if (Inst3 <= 1000 && typeof (y) != "undefined") {_RecordType("<389,390,11>",(y)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<432,433,12>",(x)); Inst4++; } } catch(e) {}
    x;
try { if (Inst5 <= 1000 && typeof (y.static_life) != "undefined") {_RecordType("<439,452,13>",(y.static_life)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (y) != "undefined") {_RecordType("<439,440,13>",(y)); Inst6++; } } catch(e) {}
    y.static_life;
    let z = await import('modules-skip-1.js');
try { if (Inst7 <= 1000 && typeof (z) != "undefined") {_RecordType("<462,463,14>",(z)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<505,506,15>",(x)); Inst8++; } } catch(e) {}
    x;
try { if (Inst9 <= 1000 && typeof (z) != "undefined") {_RecordType("<512,513,16>",(z)); Inst9++; } } catch(e) {}
    z;
    ran = true;
try { if (Inst10 <= 1000 && typeof (ran) != "undefined") {_RecordType("<519,522,17>",(ran)); Inst10++; } } catch(e) {}
  } catch (e) {
try { if (Inst12 <= 1000 && typeof (print) != "undefined") {_RecordType("<551,556,19>",(print)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (e.message) != "undefined") {_RecordType("<571,580,19>",(e.message)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<571,572,19>",(e)); Inst14++; } } catch(e) {}
    print('failure: ' + e.message);
  }
}

try { if (Inst15 <= 1000 && typeof (test) != "undefined") {_RecordType("<590,594,23>",(test)); Inst15++; } } catch(e) {}
test();
try { if (Inst16 <= 1000 && typeof (ran) != "undefined") {_RecordType("<598,601,24>",(ran)); Inst16++; } } catch(e) {}
ran;

