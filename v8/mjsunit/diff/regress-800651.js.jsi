var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Flags: --allow-natives-syntax
var list = [];
try { if (Inst0 <= 1000 && typeof (list) != "undefined") {_RecordType("<207,211,6>",(list)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (log) != "undefined") {_RecordType("<228,231,8>",(log)); Inst1++; } } catch(e) {}
function log(item) {
try { if (Inst2 <= 1000 && typeof (item) != "undefined") {_RecordType("<232,236,8>",(item)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (list.push) != "undefined") {_RecordType("<242,251,9>",(list.push)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (list) != "undefined") {_RecordType("<242,246,9>",(list)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (item) != "undefined") {_RecordType("<252,256,9>",(item)); Inst5++; } } catch(e) {}
  list.push(item);
}

try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<277,278,12>",(f)); Inst6++; } } catch(e) {}
async function f() {
try { if (Inst8 <= 1000 && typeof (e) != "undefined") {_RecordType("<341,342,15>",(e)); Inst8++; } } catch(e) {}
  try {
    let namespace = await import(/a/);
try { if (Inst7 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<299,308,14>",(namespace)); Inst7++; } } catch(e) {}
  } catch (e) {
try { if (Inst9 <= 1000 && typeof (log) != "undefined") {_RecordType("<350,353,16>",(log)); Inst9++; } } catch(e) {}
    log(1);
  }
}

try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<365,366,20>",(f)); Inst10++; } } catch(e) {}
f();

try { if (Inst11 <= 1000 && typeof (importUndefined) != "undefined") {_RecordType("<386,401,22>",(importUndefined)); Inst11++; } } catch(e) {}
async function importUndefined() {
try { if (Inst14 <= 1000 && typeof (e) != "undefined") {_RecordType("<510,511,30>",(e)); Inst14++; } } catch(e) {}
  try {
try { if (Inst12 <= 1000 && typeof (toString) != "undefined") {_RecordType("<443,451,25>",(toString)); Inst12++; } } catch(e) {}
    await import({
      get toString() {
try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<471,480,26>",(undefined)); Inst13++; } } catch(e) {}
        return undefined;
      }

    });
  } catch (e) {
try { if (Inst15 <= 1000 && typeof (log) != "undefined") {_RecordType("<519,522,31>",(log)); Inst15++; } } catch(e) {}
    log(2);
  }
}

try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<543,544,35>",(g)); Inst16++; } } catch(e) {}
function g() {
try { if (Inst18 <= 1000 && typeof (Promise.resolve().then) != "undefined") {_RecordType("<567,589,36>",(Promise.resolve().then)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Promise.resolve) != "undefined") {_RecordType("<567,582,36>",(Promise.resolve)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<567,574,36>",(Promise)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (importUndefined) != "undefined") {_RecordType("<590,605,36>",(importUndefined)); Inst21++; } } catch(e) {}
  let namespace = Promise.resolve().then(importUndefined);
try { if (Inst17 <= 1000 && typeof (namespace) != "undefined") {_RecordType("<555,564,36>",(namespace)); Inst17++; } } catch(e) {}
}

try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<611,612,39>",(g)); Inst22++; } } catch(e) {}
g();
try { if (Inst23 <= 1000 && typeof (list) != "undefined") {_RecordType("<616,620,40>",(list)); Inst23++; } } catch(e) {}
list;
[1, 2];

