var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var global = this;
try { if (Inst0 <= 1000 && typeof (global) != "undefined") {_RecordType("<172,178,5>",(global)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<188,200,7>",(assertEquals)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (global) != "undefined") {_RecordType("<218,224,7>",(global)); Inst2++; } } catch(e) {}
assertEquals("object", typeof global);  // Global object.

try { if (Inst4 <= 1000 && typeof (Set) != "undefined") {_RecordType("<259,262,9>",(Set)); Inst4++; } } catch(e) {}
var s = new Set();
try { if (Inst3 <= 1000 && typeof (s) != "undefined") {_RecordType("<251,252,9>",(s)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (s.add) != "undefined") {_RecordType("<266,271,10>",(s.add)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (s) != "undefined") {_RecordType("<266,267,10>",(s)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (global) != "undefined") {_RecordType("<272,278,10>",(global)); Inst7++; } } catch(e) {}
s.add(global); // Puts a hash code on the global object.
try { if (Inst8 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<323,333,11>",(assertTrue)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<334,339,11>",(s.has)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (s) != "undefined") {_RecordType("<334,335,11>",(s)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (global) != "undefined") {_RecordType("<340,346,11>",(global)); Inst11++; } } catch(e) {}
assertTrue(s.has(global));
for (var i = 0; i < 100; i++) {
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<359,360,12>",(i)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<366,367,12>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<375,376,12>",(i)); Inst14++; } } catch(e) {}
  // Force rehash. Global object is placed according to the hash code that it
  // gets in the C++ runtime.
try { if (Inst15 <= 1000 && typeof (s.add) != "undefined") {_RecordType("<492,497,15>",(s.add)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (s) != "undefined") {_RecordType("<492,493,15>",(s)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<498,499,15>",(i)); Inst17++; } } catch(e) {}
  s.add(i);
}

// Hopefully still findable using the JS hash code.
try { if (Inst18 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<557,567,19>",(assertTrue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (s.has) != "undefined") {_RecordType("<568,573,19>",(s.has)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (s) != "undefined") {_RecordType("<568,569,19>",(s)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (global) != "undefined") {_RecordType("<574,580,19>",(global)); Inst21++; } } catch(e) {}
assertTrue(s.has(global));

