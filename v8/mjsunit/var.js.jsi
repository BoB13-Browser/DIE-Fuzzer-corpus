var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1598,1608,28>",(assertTrue)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1610,1611,28>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1622,1623,28>",(x)); Inst2++; } } catch(e) {}
assertTrue(!x && typeof x == 'undefined');
try { if (Inst3 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1641,1651,29>",(assertTrue)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<1653,1654,29>",(y)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<1665,1666,29>",(y)); Inst5++; } } catch(e) {}
assertTrue(!y && typeof y == 'undefined');
if (false) { var x = 42; }
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1701,1702,30>",(x)); Inst6++; } } catch(e) {}
if (true)  { var y = 87; }
try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1728,1729,31>",(y)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1738,1748,32>",(assertTrue)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (x) != "undefined") {_RecordType("<1750,1751,32>",(x)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1762,1763,32>",(x)); Inst10++; } } catch(e) {}
assertTrue(!x && typeof x == 'undefined');
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1781,1793,33>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<1798,1799,33>",(y)); Inst12++; } } catch(e) {}
assertEquals(87, y);

try { if (Inst13 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1803,1813,35>",(assertTrue)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (z) != "undefined") {_RecordType("<1815,1816,35>",(z)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (z) != "undefined") {_RecordType("<1827,1828,35>",(z)); Inst15++; } } catch(e) {}
assertTrue(!z && typeof z == 'undefined');
if (false) { var z; }
try { if (Inst16 <= 1000 && typeof (z) != "undefined") {_RecordType("<1863,1864,36>",(z)); Inst16++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1868,1878,37>",(assertTrue)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (z) != "undefined") {_RecordType("<1880,1881,37>",(z)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (z) != "undefined") {_RecordType("<1892,1893,37>",(z)); Inst19++; } } catch(e) {}
assertTrue(!z && typeof z == 'undefined');

try { if (Inst20 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1912,1924,39>",(assertThrows)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1940,1951,39>",(SyntaxError)); Inst21++; } } catch(e) {}
assertThrows("var \u2E2F;", SyntaxError);
try { if (Inst22 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1954,1966,40>",(assertThrows)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<1983,1994,40>",(SyntaxError)); Inst23++; } } catch(e) {}
assertThrows("var \\u2E2F;", SyntaxError);

try { if (Inst24 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<1998,2016,42>",(assertDoesNotThrow)); Inst24++; } } catch(e) {}
assertDoesNotThrow("var \u2118;");
try { if (Inst25 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2033,2051,43>",(assertDoesNotThrow)); Inst25++; } } catch(e) {}
assertDoesNotThrow("var \\u2118;");
try { if (Inst26 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2069,2087,44>",(assertDoesNotThrow)); Inst26++; } } catch(e) {}
assertDoesNotThrow("var \u212E;");
try { if (Inst27 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2104,2122,45>",(assertDoesNotThrow)); Inst27++; } } catch(e) {}
assertDoesNotThrow("var \\u212E;");
try { if (Inst28 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2140,2158,46>",(assertDoesNotThrow)); Inst28++; } } catch(e) {}
assertDoesNotThrow("var \u309B;");
try { if (Inst29 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2175,2193,47>",(assertDoesNotThrow)); Inst29++; } } catch(e) {}
assertDoesNotThrow("var \\u309B;");
try { if (Inst30 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2211,2229,48>",(assertDoesNotThrow)); Inst30++; } } catch(e) {}
assertDoesNotThrow("var \u309C;");
try { if (Inst31 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2246,2264,49>",(assertDoesNotThrow)); Inst31++; } } catch(e) {}
assertDoesNotThrow("var \\u309C;");

try { if (Inst32 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2283,2301,51>",(assertDoesNotThrow)); Inst32++; } } catch(e) {}
assertDoesNotThrow("var $\u00B7;");
try { if (Inst33 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2319,2337,52>",(assertDoesNotThrow)); Inst33++; } } catch(e) {}
assertDoesNotThrow("var $\u0387;");
try { if (Inst34 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2355,2373,53>",(assertDoesNotThrow)); Inst34++; } } catch(e) {}
assertDoesNotThrow("var $\u1369;");
try { if (Inst35 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2391,2409,54>",(assertDoesNotThrow)); Inst35++; } } catch(e) {}
assertDoesNotThrow("var $\u1370;");
try { if (Inst36 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2427,2445,55>",(assertDoesNotThrow)); Inst36++; } } catch(e) {}
assertDoesNotThrow("var $\u1371;");
try { if (Inst37 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2463,2481,56>",(assertDoesNotThrow)); Inst37++; } } catch(e) {}
assertDoesNotThrow("var $\u19DA;");

