var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// lastIndex is set according to funny rules. It is typically set only
// for global or sticky RegExps, but on a failure to find a match, it is
// set unconditionally. If a set fails, then it acts as if in strict mode
// and throws.

var re = /x/;
try { if (Inst0 <= 1000 && typeof (re) != "undefined") {_RecordType("<406,408,10>",(re)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<416,437,11>",(Object.defineProperty)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<416,422,11>",(Object)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (re) != "undefined") {_RecordType("<438,440,11>",(re)); Inst3++; } } catch(e) {}
Object.defineProperty(re, 'lastIndex', {writable: false});
try { if (Inst4 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<475,487,12>",(assertThrows)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<494,501,12>",(re.exec)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (re) != "undefined") {_RecordType("<494,496,12>",(re)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<507,516,12>",(TypeError)); Inst7++; } } catch(e) {}
assertThrows(() => re.exec(""), TypeError);
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<519,531,13>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<539,546,13>",(re.exec)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (re) != "undefined") {_RecordType("<539,541,13>",(re)); Inst10++; } } catch(e) {}
assertEquals(["x"], re.exec("x"));

var re = /x/y;
try { if (Inst11 <= 1000 && typeof (re) != "undefined") {_RecordType("<559,561,15>",(re)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<570,591,16>",(Object.defineProperty)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Object) != "undefined") {_RecordType("<570,576,16>",(Object)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (re) != "undefined") {_RecordType("<592,594,16>",(re)); Inst14++; } } catch(e) {}
Object.defineProperty(re, 'lastIndex', {writable: false});
try { if (Inst15 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<629,641,17>",(assertThrows)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<648,655,17>",(re.exec)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (re) != "undefined") {_RecordType("<648,650,17>",(re)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<661,670,17>",(TypeError)); Inst18++; } } catch(e) {}
assertThrows(() => re.exec(""), TypeError);
try { if (Inst19 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<673,685,18>",(assertThrows)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (re.exec) != "undefined") {_RecordType("<692,699,18>",(re.exec)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (re) != "undefined") {_RecordType("<692,694,18>",(re)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<706,715,18>",(TypeError)); Inst22++; } } catch(e) {}
assertThrows(() => re.exec("x"), TypeError);

