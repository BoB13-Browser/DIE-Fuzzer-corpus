var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1628,1629,28>",(a)); Inst2++; } } catch(e) {}
var a = [function(a) { return a+10; },
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1616,1617,28>",(a)); Inst1++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1667,1668,29>",(a)); Inst4++; } } catch(e) {}
         function(a) { return a+20; }];
try { if (Inst0 <= 1000 && typeof (a) != "undefined") {_RecordType("<1602,1603,28>",(a)); Inst0++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1655,1656,29>",(a)); Inst3++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1717,1718,30>",(a)); Inst9++; } } catch(e) {}
a.__proto__.test = function(a) { return a+30; }
try { if (Inst5 <= 1000 && typeof (a.__proto__.test) != "undefined") {_RecordType("<1677,1693,30>",(a.__proto__.test)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (a.__proto__) != "undefined") {_RecordType("<1677,1688,30>",(a.__proto__)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1677,1678,30>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<1705,1706,30>",(a)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<1734,1735,31>",(f)); Inst10++; } } catch(e) {}
function f(i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1736,1737,31>",(i)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1760,1764,32>",(a[i])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1760,1761,32>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1765,1766,32>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a[i]) != "undefined") {_RecordType("<1771,1775,32>",(a[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1771,1772,32>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1776,1777,32>",(i)); Inst17++; } } catch(e) {}
  return "r" + (1, a[i](i+1), a[i](i+2));
}

try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1786,1798,35>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<1806,1807,35>",(f)); Inst19++; } } catch(e) {}
assertEquals("r12", f(0));
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1813,1825,36>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<1833,1834,36>",(f)); Inst21++; } } catch(e) {}
assertEquals("r12", f(0));
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1840,1852,37>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1860,1861,37>",(f)); Inst23++; } } catch(e) {}
assertEquals("r23", f(1));
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1867,1879,38>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<1887,1888,38>",(f)); Inst25++; } } catch(e) {}
assertEquals("r23", f(1));

// Deopt the stub.
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1914,1926,41>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<1939,1940,41>",(f)); Inst27++; } } catch(e) {}
assertEquals("rtest230", f("test"));

try { if (Inst30 <= 1000 && typeof (a) != "undefined") {_RecordType("<1983,1984,43>",(a)); Inst30++; } } catch(e) {}
var a2 = [function(a) { return a+10; },,
try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<1971,1972,43>",(a)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (a) != "undefined") {_RecordType("<2024,2025,44>",(a)); Inst32++; } } catch(e) {}
          function(a) { return a+20; }];
try { if (Inst28 <= 1000 && typeof (a2) != "undefined") {_RecordType("<1956,1958,43>",(a2)); Inst28++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<2012,2013,44>",(a)); Inst31++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (a) != "undefined") {_RecordType("<2075,2076,45>",(a)); Inst37++; } } catch(e) {}
a2.__proto__.test = function(a) { return a+30; }
try { if (Inst33 <= 1000 && typeof (a2.__proto__.test) != "undefined") {_RecordType("<2034,2051,45>",(a2.__proto__.test)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (a2.__proto__) != "undefined") {_RecordType("<2034,2046,45>",(a2.__proto__)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2034,2036,45>",(a2)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<2063,2064,45>",(a)); Inst36++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2092,2094,46>",(f2)); Inst38++; } } catch(e) {}
function f2(i) {
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<2095,2096,46>",(i)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (a2[i]) != "undefined") {_RecordType("<2119,2124,47>",(a2[i])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2119,2121,47>",(a2)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2125,2126,47>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (a2[i]) != "undefined") {_RecordType("<2131,2136,47>",(a2[i])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (a2) != "undefined") {_RecordType("<2131,2133,47>",(a2)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2137,2138,47>",(i)); Inst45++; } } catch(e) {}
  return "r" + (1, a2[i](i+1), a2[i](i+2));
}

try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2147,2159,50>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2167,2169,50>",(f2)); Inst47++; } } catch(e) {}
assertEquals("r12", f2(0));
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2175,2187,51>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2195,2197,51>",(f2)); Inst49++; } } catch(e) {}
assertEquals("r12", f2(0));
try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2203,2215,52>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2223,2225,52>",(f2)); Inst51++; } } catch(e) {}
assertEquals("r24", f2(2));
try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2231,2243,53>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2251,2253,53>",(f2)); Inst53++; } } catch(e) {}
assertEquals("r24", f2(2));

// Deopt the stub. This will throw given that undefined is not a function.
try { if (Inst54 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2335,2347,56>",(assertThrows)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (f2) != "undefined") {_RecordType("<2361,2363,56>",(f2)); Inst55++; } } catch(e) {}
assertThrows(function() { f2(1) });

