var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that we get exceptions for invalid left-hand sides.  The
// exceptions are delayed until runtime.

// Normal assignments:
try { if (Inst0 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1728,1740,32>",(assertThrows)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1752,1766,32>",(ReferenceError)); Inst1++; } } catch(e) {}
assertThrows("12 = 12", ReferenceError);
try { if (Inst2 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1769,1781,33>",(assertThrows)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1794,1808,33>",(ReferenceError)); Inst3++; } } catch(e) {}
assertThrows("x++ = 12", ReferenceError);
try { if (Inst4 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1811,1823,34>",(assertThrows)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1846,1860,34>",(ReferenceError)); Inst5++; } } catch(e) {}
assertThrows("eval('var x') = 12", ReferenceError);
try { if (Inst6 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1863,1875,35>",(assertThrows)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1898,1912,35>",(ReferenceError)); Inst7++; } } catch(e) {}
assertThrows("if (false) 12 = 12", ReferenceError);
try { if (Inst8 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<1915,1933,36>",(assertDoesNotThrow)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<1967,1981,36>",(ReferenceError)); Inst9++; } } catch(e) {}
assertDoesNotThrow("if (false) eval('var x') = 12", ReferenceError);

// Pre- and post-fix operations:
try { if (Inst10 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2018,2030,39>",(assertThrows)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2039,2053,39>",(ReferenceError)); Inst11++; } } catch(e) {}
assertThrows("12++", ReferenceError);
try { if (Inst12 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2056,2068,40>",(assertThrows)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2077,2091,40>",(ReferenceError)); Inst13++; } } catch(e) {}
assertThrows("12--", ReferenceError);
try { if (Inst14 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2094,2106,41>",(assertThrows)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2115,2129,41>",(ReferenceError)); Inst15++; } } catch(e) {}
assertThrows("++12", ReferenceError);
try { if (Inst16 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2132,2144,42>",(assertThrows)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2153,2167,42>",(ReferenceError)); Inst17++; } } catch(e) {}
assertThrows("--12", ReferenceError);
try { if (Inst18 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2170,2182,43>",(assertThrows)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2201,2215,43>",(ReferenceError)); Inst19++; } } catch(e) {}
assertThrows("++(eval('12'))", ReferenceError);
try { if (Inst20 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2218,2230,44>",(assertThrows)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2249,2263,44>",(ReferenceError)); Inst21++; } } catch(e) {}
assertThrows("(eval('12'))++", ReferenceError);
try { if (Inst22 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2266,2278,45>",(assertThrows)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2298,2312,45>",(ReferenceError)); Inst23++; } } catch(e) {}
assertThrows("if (false) 12++", ReferenceError);
try { if (Inst24 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2315,2327,46>",(assertThrows)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2347,2361,46>",(ReferenceError)); Inst25++; } } catch(e) {}
assertThrows("if (false) 12--", ReferenceError);
try { if (Inst26 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2364,2376,47>",(assertThrows)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2396,2410,47>",(ReferenceError)); Inst27++; } } catch(e) {}
assertThrows("if (false) ++12", ReferenceError);
try { if (Inst28 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2413,2425,48>",(assertThrows)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2445,2459,48>",(ReferenceError)); Inst29++; } } catch(e) {}
assertThrows("if (false) --12", ReferenceError);
try { if (Inst30 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2462,2480,49>",(assertDoesNotThrow)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2510,2524,49>",(ReferenceError)); Inst31++; } } catch(e) {}
assertDoesNotThrow("if (false) ++(eval('12'))", ReferenceError);
try { if (Inst32 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2527,2545,50>",(assertDoesNotThrow)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2575,2589,50>",(ReferenceError)); Inst33++; } } catch(e) {}
assertDoesNotThrow("if (false) (eval('12'))++", ReferenceError);

// For in:
try { if (Inst34 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2604,2616,53>",(assertThrows)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<2647,2658,53>",(SyntaxError)); Inst35++; } } catch(e) {}
assertThrows("for (12 in [1]) print(12);", SyntaxError);
try { if (Inst36 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2661,2673,54>",(assertThrows)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2715,2729,54>",(ReferenceError)); Inst37++; } } catch(e) {}
assertThrows("for (eval('var x') in [1]) print(12);", ReferenceError);
try { if (Inst38 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2732,2744,55>",(assertThrows)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<2786,2797,55>",(SyntaxError)); Inst39++; } } catch(e) {}
assertThrows("if (false) for (12 in [1]) print(12);", SyntaxError);
try { if (Inst40 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2800,2818,56>",(assertDoesNotThrow)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2867,2881,56>",(ReferenceError)); Inst41++; } } catch(e) {}
assertDoesNotThrow("if (false) for (eval('0') in [1]) print(12);", ReferenceError);

// For:
try { if (Inst42 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2893,2905,59>",(assertThrows)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<2935,2949,59>",(ReferenceError)); Inst43++; } } catch(e) {}
assertThrows("for (12 = 1;;) print(12);", ReferenceError);
try { if (Inst44 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2952,2964,60>",(assertThrows)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3005,3019,60>",(ReferenceError)); Inst45++; } } catch(e) {}
assertThrows("for (eval('var x') = 1;;) print(12);", ReferenceError);
try { if (Inst46 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3022,3034,61>",(assertThrows)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3075,3089,61>",(ReferenceError)); Inst47++; } } catch(e) {}
assertThrows("if (false) for (12 = 1;;) print(12);", ReferenceError);
try { if (Inst48 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<3092,3110,62>",(assertDoesNotThrow)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3162,3176,62>",(ReferenceError)); Inst49++; } } catch(e) {}
assertDoesNotThrow("if (false) for (eval('var x') = 1;;) print(12);", ReferenceError);

// Assignments to 'this'.
try { if (Inst50 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3206,3218,65>",(assertThrows)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3232,3246,65>",(ReferenceError)); Inst51++; } } catch(e) {}
assertThrows("this = 42", ReferenceError);
try { if (Inst52 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3249,3261,66>",(assertThrows)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3293,3307,66>",(ReferenceError)); Inst53++; } } catch(e) {}
assertThrows("function f() { this = 12; }", ReferenceError);
try { if (Inst54 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3310,3322,67>",(assertThrows)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (SyntaxError) != "undefined") {_RecordType("<3358,3369,67>",(SyntaxError)); Inst55++; } } catch(e) {}
assertThrows("for (this in {x:3, y:4, z:5}) ;", SyntaxError);
try { if (Inst56 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3372,3384,68>",(assertThrows)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3407,3421,68>",(ReferenceError)); Inst57++; } } catch(e) {}
assertThrows("for (this = 0;;) ;", ReferenceError);
try { if (Inst58 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3424,3436,69>",(assertThrows)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3447,3461,69>",(ReferenceError)); Inst59++; } } catch(e) {}
assertThrows("this++", ReferenceError);
try { if (Inst60 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3464,3476,70>",(assertThrows)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3487,3501,70>",(ReferenceError)); Inst61++; } } catch(e) {}
assertThrows("++this", ReferenceError);
try { if (Inst62 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3504,3516,71>",(assertThrows)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3527,3541,71>",(ReferenceError)); Inst63++; } } catch(e) {}
assertThrows("this--", ReferenceError);
try { if (Inst64 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3544,3556,72>",(assertThrows)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3567,3581,72>",(ReferenceError)); Inst65++; } } catch(e) {}
assertThrows("--this", ReferenceError);
try { if (Inst66 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3584,3596,73>",(assertThrows)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3621,3635,73>",(ReferenceError)); Inst67++; } } catch(e) {}
assertThrows("if (false) this = 42", ReferenceError);
try { if (Inst68 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<3638,3650,74>",(assertThrows)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (ReferenceError) != "undefined") {_RecordType("<3672,3686,74>",(ReferenceError)); Inst69++; } } catch(e) {}
assertThrows("if (false) this++", ReferenceError);

