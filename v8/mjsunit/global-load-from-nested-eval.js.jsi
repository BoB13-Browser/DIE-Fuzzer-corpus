var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Tests global loads from nested eval.

var x = 42;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1643,1644,30>",(x)); Inst0++; } } catch(e) {}

// Load the global.
try { if (Inst1 <= 1000 && typeof (test) != "undefined") {_RecordType("<1681,1685,33>",(test)); Inst1++; } } catch(e) {}
function test(source) {
try { if (Inst2 <= 1000 && typeof (source) != "undefined") {_RecordType("<1686,1692,33>",(source)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1698,1702,34>",(eval)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (source) != "undefined") {_RecordType("<1713,1719,34>",(source)); Inst4++; } } catch(e) {}
  eval('eval(' + source +')');
}
try { if (Inst5 <= 1000 && typeof (test) != "undefined") {_RecordType("<1729,1733,36>",(test)); Inst5++; } } catch(e) {}
test('assertEquals(42, x)');

// Shadow variable with a with statement.
try { if (Inst6 <= 1000 && typeof (testWith) != "undefined") {_RecordType("<1810,1818,39>",(testWith)); Inst6++; } } catch(e) {}
function testWith(source) {
try { if (Inst7 <= 1000 && typeof (source) != "undefined") {_RecordType("<1819,1825,39>",(source)); Inst7++; } } catch(e) {}
  with ({ x: 1 }) {
try { if (Inst8 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1853,1857,41>",(eval)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (source) != "undefined") {_RecordType("<1868,1874,41>",(source)); Inst9++; } } catch(e) {}
    eval('eval(' + source +')');
  }
}
try { if (Inst10 <= 1000 && typeof (testWith) != "undefined") {_RecordType("<1888,1896,44>",(testWith)); Inst10++; } } catch(e) {}
testWith('assertEquals(1, x)');

// Shadow variable with an eval-introduced variable.
try { if (Inst11 <= 1000 && typeof (testEval) != "undefined") {_RecordType("<1983,1991,47>",(testEval)); Inst11++; } } catch(e) {}
function testEval(source) {
try { if (Inst12 <= 1000 && typeof (source) != "undefined") {_RecordType("<1992,1998,47>",(source)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2004,2008,48>",(eval)); Inst13++; } } catch(e) {}
  eval('var x = 1');
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<2034,2035,49>",(f)); Inst14++; } } catch(e) {}
  function f() {
try { if (Inst15 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2044,2048,50>",(eval)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (source) != "undefined") {_RecordType("<2058,2064,50>",(source)); Inst16++; } } catch(e) {}
    eval('eval('+ source + ')');
  }
try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<2079,2080,52>",(f)); Inst17++; } } catch(e) {}
  f();
}
try { if (Inst18 <= 1000 && typeof (testEval) != "undefined") {_RecordType("<2086,2094,54>",(testEval)); Inst18++; } } catch(e) {}
testEval('assertEquals(1, x)');

// Eval that does not shadow.
try { if (Inst19 <= 1000 && typeof (testEvalDontShadow) != "undefined") {_RecordType("<2158,2176,57>",(testEvalDontShadow)); Inst19++; } } catch(e) {}
function testEvalDontShadow(source) {
try { if (Inst20 <= 1000 && typeof (source) != "undefined") {_RecordType("<2177,2183,57>",(source)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2189,2193,58>",(eval)); Inst21++; } } catch(e) {}
  eval('1');
try { if (Inst22 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2202,2206,59>",(eval)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (source) != "undefined") {_RecordType("<2217,2223,59>",(source)); Inst23++; } } catch(e) {}
  eval('eval(' + source +')');
}
try { if (Inst24 <= 1000 && typeof (testEvalDontShadow) != "undefined") {_RecordType("<2233,2251,61>",(testEvalDontShadow)); Inst24++; } } catch(e) {}
testEvalDontShadow('assertEquals(42, x)');

