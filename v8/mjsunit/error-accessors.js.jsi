var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that the message property of error objects is a data property.

var o;
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<1674,1675,30>",(o)); Inst0++; } } catch(e) {}

// message is constructed using the constructor.
try { if (Inst2 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1744,1749,33>",(Error)); Inst2++; } } catch(e) {}
var error1 = new Error("custom message");
try { if (Inst1 <= 1000 && typeof (error1) != "undefined") {_RecordType("<1731,1737,33>",(error1)); Inst1++; } } catch(e) {}
o = {};
try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<1769,1770,34>",(o)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (error1) != "undefined") {_RecordType("<1791,1797,35>",(error1)); Inst6++; } } catch(e) {}
o.__proto__ = error1;
try { if (Inst4 <= 1000 && typeof (o.__proto__) != "undefined") {_RecordType("<1777,1788,35>",(o.__proto__)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<1777,1778,35>",(o)); Inst5++; } } catch(e) {}

try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1800,1812,37>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Object.getOwnPropertyDescriptor(error1, "message").value) != "undefined") {_RecordType("<1844,1900,38>",(Object.getOwnPropertyDescriptor(error1, "message").value)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<1844,1875,38>",(Object.getOwnPropertyDescriptor)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1844,1850,38>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (error1) != "undefined") {_RecordType("<1876,1882,38>",(error1)); Inst11++; } } catch(e) {}
assertEquals("custom message",
             Object.getOwnPropertyDescriptor(error1, "message").value);
o.message = "another message";
try { if (Inst12 <= 1000 && typeof (o.message) != "undefined") {_RecordType("<1903,1912,39>",(o.message)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<1903,1904,39>",(o)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1934,1946,40>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o.message) != "undefined") {_RecordType("<1966,1975,40>",(o.message)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<1966,1967,40>",(o)); Inst16++; } } catch(e) {}
assertEquals("another message", o.message);
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1978,1990,41>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (error1.message) != "undefined") {_RecordType("<2009,2023,41>",(error1.message)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (error1) != "undefined") {_RecordType("<2009,2015,41>",(error1)); Inst19++; } } catch(e) {}
assertEquals("custom message", error1.message);

// message is constructed by the runtime.
var error2;
try { if (Inst20 <= 1000 && typeof (error2) != "undefined") {_RecordType("<2073,2079,44>",(error2)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (x.x) != "undefined") {_RecordType("<2087,2090,45>",(x.x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<2087,2088,45>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<2100,2101,45>",(e)); Inst23++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<2114,2115,45>",(e)); Inst25++; } } catch(e) {}
try { x.x } catch (e) { error2 = e; }
try { if (Inst24 <= 1000 && typeof (error2) != "undefined") {_RecordType("<2105,2111,45>",(error2)); Inst24++; } } catch(e) {}
o = {};
try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<2119,2120,46>",(o)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (error2) != "undefined") {_RecordType("<2141,2147,47>",(error2)); Inst29++; } } catch(e) {}
o.__proto__ = error2;
try { if (Inst27 <= 1000 && typeof (o.__proto__) != "undefined") {_RecordType("<2127,2138,47>",(o.__proto__)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<2127,2128,47>",(o)); Inst28++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2150,2162,49>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Object.getOwnPropertyDescriptor(error2, "message").value) != "undefined") {_RecordType("<2196,2252,50>",(Object.getOwnPropertyDescriptor(error2, "message").value)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Object.getOwnPropertyDescriptor) != "undefined") {_RecordType("<2196,2227,50>",(Object.getOwnPropertyDescriptor)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Object) != "undefined") {_RecordType("<2196,2202,50>",(Object)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (error2) != "undefined") {_RecordType("<2228,2234,50>",(error2)); Inst34++; } } catch(e) {}
assertEquals("x is not defined",
             Object.getOwnPropertyDescriptor(error2, "message").value);
o.message = "another message";
try { if (Inst35 <= 1000 && typeof (o.message) != "undefined") {_RecordType("<2255,2264,51>",(o.message)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (o) != "undefined") {_RecordType("<2255,2256,51>",(o)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2286,2298,52>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o.message) != "undefined") {_RecordType("<2318,2327,52>",(o.message)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (o) != "undefined") {_RecordType("<2318,2319,52>",(o)); Inst39++; } } catch(e) {}
assertEquals("another message", o.message);
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2330,2342,53>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (error2.message) != "undefined") {_RecordType("<2363,2377,53>",(error2.message)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (error2) != "undefined") {_RecordType("<2363,2369,53>",(error2)); Inst42++; } } catch(e) {}
assertEquals("x is not defined", error2.message);

