var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --random-seed=20 --nostress-opt --noalways-opt --predictable

(function() {
  var kHistory = 2;
try { if (Inst0 <= 1000 && typeof (kHistory) != "undefined") {_RecordType("<260,268,8>",(kHistory)); Inst0++; } } catch(e) {}
  var kRepeats = 100;
try { if (Inst1 <= 1000 && typeof (kRepeats) != "undefined") {_RecordType("<280,288,9>",(kRepeats)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Uint32Array) != "undefined") {_RecordType("<316,327,10>",(Uint32Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (kHistory) != "undefined") {_RecordType("<328,336,10>",(kHistory)); Inst4++; } } catch(e) {}
  var history = new Uint32Array(kHistory);
try { if (Inst2 <= 1000 && typeof (history) != "undefined") {_RecordType("<302,309,10>",(history)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (random) != "undefined") {_RecordType("<351,357,12>",(random)); Inst5++; } } catch(e) {}
  function random() {
try { if (Inst6 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<374,385,13>",(Math.random)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<374,378,13>",(Math)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<390,398,13>",(Math.pow)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<390,394,13>",(Math)); Inst9++; } } catch(e) {}
    return (Math.random() * Math.pow(2, 32)) >>> 0;
  }

try { if (Inst10 <= 1000 && typeof (ChiSquared) != "undefined") {_RecordType("<430,440,16>",(ChiSquared)); Inst10++; } } catch(e) {}
  function ChiSquared(m, n) {
try { if (Inst11 <= 1000 && typeof (m) != "undefined") {_RecordType("<441,442,16>",(m)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (n) != "undefined") {_RecordType("<444,445,16>",(n)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (m) != "undefined") {_RecordType("<473,474,17>",(m)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (n) != "undefined") {_RecordType("<477,478,17>",(n)); Inst15++; } } catch(e) {}
    var ys_minus_np1 = (m - n / 2.0);
try { if (Inst13 <= 1000 && typeof (ys_minus_np1) != "undefined") {_RecordType("<457,469,17>",(ys_minus_np1)); Inst13++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (ys_minus_np1) != "undefined") {_RecordType("<511,523,18>",(ys_minus_np1)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (ys_minus_np1) != "undefined") {_RecordType("<526,538,18>",(ys_minus_np1)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (n) != "undefined") {_RecordType("<547,548,18>",(n)); Inst19++; } } catch(e) {}
    var chi_squared_1 = ys_minus_np1 * ys_minus_np1 * 2.0 / n;
try { if (Inst16 <= 1000 && typeof (chi_squared_1) != "undefined") {_RecordType("<495,508,18>",(chi_squared_1)); Inst16++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (n) != "undefined") {_RecordType("<575,576,19>",(n)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (m) != "undefined") {_RecordType("<579,580,19>",(m)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (n) != "undefined") {_RecordType("<584,585,19>",(n)); Inst23++; } } catch(e) {}
    var ys_minus_np2 = ((n - m) - n / 2.0);
try { if (Inst20 <= 1000 && typeof (ys_minus_np2) != "undefined") {_RecordType("<558,570,19>",(ys_minus_np2)); Inst20++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (ys_minus_np2) != "undefined") {_RecordType("<618,630,20>",(ys_minus_np2)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (ys_minus_np2) != "undefined") {_RecordType("<633,645,20>",(ys_minus_np2)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (n) != "undefined") {_RecordType("<654,655,20>",(n)); Inst27++; } } catch(e) {}
    var chi_squared_2 = ys_minus_np2 * ys_minus_np2 * 2.0 / n;
try { if (Inst24 <= 1000 && typeof (chi_squared_2) != "undefined") {_RecordType("<602,615,20>",(chi_squared_2)); Inst24++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (chi_squared_1) != "undefined") {_RecordType("<668,681,21>",(chi_squared_1)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (chi_squared_2) != "undefined") {_RecordType("<684,697,21>",(chi_squared_2)); Inst29++; } } catch(e) {}
    return chi_squared_1 + chi_squared_2;
  }
  for (var predictor_bit = -2; predictor_bit < 32; predictor_bit++) {
try { if (Inst30 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<714,727,23>",(predictor_bit)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<734,747,23>",(predictor_bit)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<754,767,23>",(predictor_bit)); Inst32++; } } catch(e) {}
    // The predicted bit is one of the bits from the PRNG.
    for (var random_bit = 0; random_bit < 32; random_bit++) {
try { if (Inst33 <= 1000 && typeof (random_bit) != "undefined") {_RecordType("<845,855,25>",(random_bit)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (random_bit) != "undefined") {_RecordType("<861,871,25>",(random_bit)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (random_bit) != "undefined") {_RecordType("<878,888,25>",(random_bit)); Inst35++; } } catch(e) {}
      for (var ago = 0; ago < kHistory; ago++) {
try { if (Inst36 <= 1000 && typeof (ago) != "undefined") {_RecordType("<909,912,26>",(ago)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (ago) != "undefined") {_RecordType("<918,921,26>",(ago)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (kHistory) != "undefined") {_RecordType("<924,932,26>",(kHistory)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (ago) != "undefined") {_RecordType("<934,937,26>",(ago)); Inst39++; } } catch(e) {}
        // We don't want to check whether each bit predicts itself.
try { if (Inst40 <= 1000 && typeof (ago) != "undefined") {_RecordType("<1023,1026,28>",(ago)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<1035,1048,28>",(predictor_bit)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (random_bit) != "undefined") {_RecordType("<1052,1062,28>",(random_bit)); Inst42++; } } catch(e) {}
        if (ago == 0 && predictor_bit == random_bit) continue;
        // Enter the new random value into the history
        for (var i = ago; i >= 0; i--) {
try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<1146,1147,30>",(i)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (ago) != "undefined") {_RecordType("<1150,1153,30>",(ago)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<1155,1156,30>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<1163,1164,30>",(i)); Inst46++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (random) != "undefined") {_RecordType("<1193,1199,31>",(random)); Inst49++; } } catch(e) {}
          history[i] = random();
try { if (Inst47 <= 1000 && typeof (history[i]) != "undefined") {_RecordType("<1180,1190,31>",(history[i])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (history) != "undefined") {_RecordType("<1180,1187,31>",(history)); Inst48++; } } catch(e) {}
        }
        // Find out how many of the bits are the same as the prediction bit.
        var m = 0;
try { if (Inst50 <= 1000 && typeof (m) != "undefined") {_RecordType("<1302,1303,34>",(m)); Inst50++; } } catch(e) {}
        for (var i = 0; i < kRepeats; i++) {
try { if (Inst51 <= 1000 && typeof (i) != "undefined") {_RecordType("<1326,1327,35>",(i)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (i) != "undefined") {_RecordType("<1333,1334,35>",(i)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (kRepeats) != "undefined") {_RecordType("<1337,1345,35>",(kRepeats)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (i) != "undefined") {_RecordType("<1347,1348,35>",(i)); Inst54++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (history[j]) != "undefined") {_RecordType("<1416,1426,36>",(history[j])); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (history) != "undefined") {_RecordType("<1416,1423,36>",(history)); Inst63++; } } catch(e) {}
          for (var j = ago - 1; j >= 0; j--) history[j + 1] = history[j];
try { if (Inst55 <= 1000 && typeof (j) != "undefined") {_RecordType("<1373,1374,36>",(j)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (ago) != "undefined") {_RecordType("<1377,1380,36>",(ago)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (j) != "undefined") {_RecordType("<1386,1387,36>",(j)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (j) != "undefined") {_RecordType("<1394,1395,36>",(j)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (history[j + 1]) != "undefined") {_RecordType("<1399,1413,36>",(history[j + 1])); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (history) != "undefined") {_RecordType("<1399,1406,36>",(history)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (j) != "undefined") {_RecordType("<1407,1408,36>",(j)); Inst61++; } } catch(e) {}
try { if (Inst66 <= 1000 && typeof (random) != "undefined") {_RecordType("<1451,1457,37>",(random)); Inst66++; } } catch(e) {}
          history[0] = random();
try { if (Inst64 <= 1000 && typeof (history[0]) != "undefined") {_RecordType("<1438,1448,37>",(history[0])); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (history) != "undefined") {_RecordType("<1438,1445,37>",(history)); Inst65++; } } catch(e) {}
          var predicted;
try { if (Inst67 <= 1000 && typeof (predicted) != "undefined") {_RecordType("<1475,1484,38>",(predicted)); Inst67++; } } catch(e) {}
try { if (Inst68 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<1500,1513,39>",(predictor_bit)); Inst68++; } } catch(e) {}
          if (predictor_bit >= 0) {
try { if (Inst70 <= 1000 && typeof (history[ago]) != "undefined") {_RecordType("<1547,1559,40>",(history[ago])); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (history) != "undefined") {_RecordType("<1547,1554,40>",(history)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<1563,1576,40>",(predictor_bit)); Inst72++; } } catch(e) {}
            predicted = (history[ago] >> predictor_bit) & 1;
try { if (Inst69 <= 1000 && typeof (predicted) != "undefined") {_RecordType("<1534,1543,40>",(predicted)); Inst69++; } } catch(e) {}
          } else {
try { if (Inst74 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<1626,1639,42>",(predictor_bit)); Inst74++; } } catch(e) {}
            predicted = predictor_bit == -2 ? 0 : 1;
try { if (Inst73 <= 1000 && typeof (predicted) != "undefined") {_RecordType("<1614,1623,42>",(predicted)); Inst73++; } } catch(e) {}
          }
try { if (Inst76 <= 1000 && typeof (history[0]) != "undefined") {_RecordType("<1688,1698,44>",(history[0])); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (history) != "undefined") {_RecordType("<1688,1695,44>",(history)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (random_bit) != "undefined") {_RecordType("<1702,1712,44>",(random_bit)); Inst78++; } } catch(e) {}
          var bit = (history[0] >> random_bit) & 1;
try { if (Inst75 <= 1000 && typeof (bit) != "undefined") {_RecordType("<1681,1684,44>",(bit)); Inst75++; } } catch(e) {}
try { if (Inst79 <= 1000 && typeof (bit) != "undefined") {_RecordType("<1733,1736,45>",(bit)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (predicted) != "undefined") {_RecordType("<1740,1749,45>",(predicted)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (m) != "undefined") {_RecordType("<1751,1752,45>",(m)); Inst81++; } } catch(e) {}
          if (bit == predicted) m++;
        }
        // Chi squared analysis for k = 2 (2, states: same/not-same) and one
        // degree of freedom (k - 1).
try { if (Inst83 <= 1000 && typeof (ChiSquared) != "undefined") {_RecordType("<1907,1917,49>",(ChiSquared)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (m) != "undefined") {_RecordType("<1918,1919,49>",(m)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (kRepeats) != "undefined") {_RecordType("<1921,1929,49>",(kRepeats)); Inst85++; } } catch(e) {}
        var chi_squared = ChiSquared(m, kRepeats);
try { if (Inst82 <= 1000 && typeof (chi_squared) != "undefined") {_RecordType("<1893,1904,49>",(chi_squared)); Inst82++; } } catch(e) {}
try { if (Inst86 <= 1000 && typeof (chi_squared) != "undefined") {_RecordType("<1944,1955,50>",(chi_squared)); Inst86++; } } catch(e) {}
        if (chi_squared > 24) {
try { if (Inst88 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<1988,1998,51>",(Math.floor)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1988,1992,51>",(Math)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (m) != "undefined") {_RecordType("<1999,2000,51>",(m)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (kRepeats) != "undefined") {_RecordType("<2011,2019,51>",(kRepeats)); Inst91++; } } catch(e) {}
          var percent = Math.floor(m * 100.0 / kRepeats);
try { if (Inst87 <= 1000 && typeof (percent) != "undefined") {_RecordType("<1978,1985,51>",(percent)); Inst87++; } } catch(e) {}
try { if (Inst92 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<2036,2049,52>",(predictor_bit)); Inst92++; } } catch(e) {}
          if (predictor_bit < 0) {
try { if (Inst94 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<2085,2098,53>",(predictor_bit)); Inst94++; } } catch(e) {}
            var bit_value = predictor_bit == -2 ? 0 : 1;
try { if (Inst93 <= 1000 && typeof (bit_value) != "undefined") {_RecordType("<2073,2082,53>",(bit_value)); Inst93++; } } catch(e) {}
try { if (Inst95 <= 1000 && typeof (print) != "undefined") {_RecordType("<2126,2131,54>",(print)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (random_bit) != "undefined") {_RecordType("<2139,2149,54>",(random_bit)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (bit_value) != "undefined") {_RecordType("<2156,2165,54>",(bit_value)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (percent) != "undefined") {_RecordType("<2169,2176,54>",(percent)); Inst98++; } } catch(e) {}
            print(`Bit ${random_bit} is ${bit_value} ${percent}% of the time`);
          } else {
try { if (Inst99 <= 1000 && typeof (print) != "undefined") {_RecordType("<2225,2230,56>",(print)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (random_bit) != "undefined") {_RecordType("<2238,2248,56>",(random_bit)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<2271,2284,56>",(predictor_bit)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (ago) != "undefined") {_RecordType("<2307,2310,57>",(ago)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (percent) != "undefined") {_RecordType("<2318,2325,57>",(percent)); Inst103++; } } catch(e) {}
            print(`Bit ${random_bit} is the same as bit ${predictor_bit} ` +
              `${ago} ago ${percent}% of the time`);
          }
        }
        // For 1 degree of freedom this corresponds to 1 in a million.  We are
        // running ~8000 tests, so that would be surprising.
try { if (Inst104 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2513,2523,62>",(assertTrue)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (chi_squared) != "undefined") {_RecordType("<2524,2535,62>",(chi_squared)); Inst105++; } } catch(e) {}
        assertTrue(chi_squared <= 24);
        // If the predictor bit is a fixed 0 or 1 then it makes no sense to
        // repeat the test with a different age.
try { if (Inst106 <= 1000 && typeof (predictor_bit) != "undefined") {_RecordType("<2681,2694,65>",(predictor_bit)); Inst106++; } } catch(e) {}
        if (predictor_bit < 0) break;
      }
    }
  }
})();

