var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Try catch scopes should be implemented with special extension
// objects so that __proto__ accessors and accessor setters in the
// Object prototype have no effect.

var setterCalled = false;
try { if (Inst0 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<1771,1783,32>",(setterCalled)); Inst0++; } } catch(e) {}
try { if (Inst1 <= 1000 && typeof (Object.prototype.__defineSetter__) != "undefined") {_RecordType("<1793,1826,33>",(Object.prototype.__defineSetter__)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Object.prototype) != "undefined") {_RecordType("<1793,1809,33>",(Object.prototype)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1793,1799,33>",(Object)); Inst3++; } } catch(e) {}
Object.prototype.__defineSetter__("x", function() { setterCalled = true; });
try { if (Inst4 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<1845,1857,33>",(setterCalled)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<1880,1887,35>",(runTest)); Inst5++; } } catch(e) {}
function runTest(test) {
try { if (Inst6 <= 1000 && typeof (test) != "undefined") {_RecordType("<1888,1892,35>",(test)); Inst6++; } } catch(e) {}
  setterCalled = false;
try { if (Inst7 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<1898,1910,36>",(setterCalled)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (test) != "undefined") {_RecordType("<1922,1926,37>",(test)); Inst8++; } } catch(e) {}
  test();
}

try { if (Inst9 <= 1000 && typeof (testProto) != "undefined") {_RecordType("<1942,1951,40>",(testProto)); Inst9++; } } catch(e) {}
function testProto() {
try { if (Inst10 <= 1000 && typeof (__proto__) != "undefined") {_RecordType("<1988,1997,43>",(__proto__)); Inst10++; } } catch(e) {}
  try {
    throw 42;
  } catch(__proto__) {
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2005,2017,44>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (__proto__) != "undefined") {_RecordType("<2022,2031,44>",(__proto__)); Inst12++; } } catch(e) {}
    assertEquals(42, __proto__);
  }
}

try { if (Inst13 <= 1000 && typeof (testAccessorSetter) != "undefined") {_RecordType("<2050,2068,48>",(testAccessorSetter)); Inst13++; } } catch(e) {}
function testAccessorSetter() {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<2105,2106,51>",(x)); Inst14++; } } catch(e) {}
  try {
    throw 42;
  } catch(x) {
try { if (Inst15 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2114,2125,52>",(assertFalse)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (setterCalled) != "undefined") {_RecordType("<2126,2138,52>",(setterCalled)); Inst16++; } } catch(e) {}
    assertFalse(setterCalled);
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2145,2157,53>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<2162,2163,53>",(x)); Inst18++; } } catch(e) {}
    assertEquals(42, x);
  }
}

try { if (Inst19 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2173,2180,57>",(runTest)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (testProto) != "undefined") {_RecordType("<2181,2190,57>",(testProto)); Inst20++; } } catch(e) {}
runTest(testProto);
try { if (Inst21 <= 1000 && typeof (runTest) != "undefined") {_RecordType("<2193,2200,58>",(runTest)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (testAccessorSetter) != "undefined") {_RecordType("<2201,2219,58>",(testAccessorSetter)); Inst22++; } } catch(e) {}
runTest(testAccessorSetter);

