var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var g = this;
try { if (Inst0 <= 1000 && typeof (g) != "undefined") {_RecordType("<1602,1603,28>",(g)); Inst0++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1624,1630,29>",(Object)); Inst2++; } } catch(e) {}
var x = new Object();
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1616,1617,29>",(x)); Inst1++; } } catch(e) {}
x.e = function() { return this; };
try { if (Inst3 <= 1000 && typeof (x.e) != "undefined") {_RecordType("<1634,1637,30>",(x.e)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1634,1635,30>",(x)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (e) != "undefined") {_RecordType("<1697,1698,33>",(e)); Inst7++; } } catch(e) {}
try {
try { if (Inst5 <= 1000 && typeof (x.e) != "undefined") {_RecordType("<1683,1686,32>",(x.e)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1683,1684,32>",(x)); Inst6++; } } catch(e) {}
  throw x.e;
} catch (e) {
try { if (Inst8 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1704,1714,34>",(assertTrue)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<1715,1716,34>",(e)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (g) != "undefined") {_RecordType("<1723,1724,34>",(g)); Inst10++; } } catch(e) {}
  assertTrue(e() === g);
}
try { if (Inst13 <= 1000 && typeof (e) != "undefined") {_RecordType("<1757,1758,38>",(e)); Inst13++; } } catch(e) {}
try {
try { if (Inst11 <= 1000 && typeof (x.e) != "undefined") {_RecordType("<1743,1746,37>",(x.e)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<1743,1744,37>",(x)); Inst12++; } } catch(e) {}
  throw x.e;
} catch (e) {
try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1769,1770,39>",(x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1774,1784,39>",(assertTrue)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (e) != "undefined") {_RecordType("<1785,1786,39>",(e)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (x) != "undefined") {_RecordType("<1793,1794,39>",(x)); Inst17++; } } catch(e) {}
  with(x) { assertTrue(e() === x); }
}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1806,1807,41>",(x)); Inst18++; } } catch(e) {}
with(x) {
try { if (Inst19 <= 1000 && typeof (e) != "undefined") {_RecordType("<1825,1826,42>",(e)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<1837,1838,42>",(e)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1842,1852,42>",(assertTrue)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e) != "undefined") {_RecordType("<1853,1854,42>",(e)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (g) != "undefined") {_RecordType("<1861,1862,42>",(g)); Inst23++; } } catch(e) {}
  try { throw e; } catch (e) { assertTrue(e() === g); }
}
var e = 0;
try { if (Inst24 <= 1000 && typeof (e) != "undefined") {_RecordType("<1873,1874,44>",(e)); Inst24++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (e) != "undefined") {_RecordType("<1908,1909,47>",(e)); Inst27++; } } catch(e) {}
try {
try { if (Inst25 <= 1000 && typeof (x.e) != "undefined") {_RecordType("<1894,1897,46>",(x.e)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1894,1895,46>",(x)); Inst26++; } } catch(e) {}
  throw x.e;
} catch (e) {
  var e = 7;
try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<1919,1920,48>",(e)); Inst28++; } } catch(e) {}
}
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1928,1940,50>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<1944,1945,50>",(e)); Inst30++; } } catch(e) {}
assertEquals(0, e);

