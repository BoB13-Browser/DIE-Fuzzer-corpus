var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1607,1608,28>",(f)); Inst0++; } } catch(e) {}
function f(match) {
try { if (Inst1 <= 1000 && typeof (match) != "undefined") {_RecordType("<1609,1614,28>",(match)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (g) != "undefined") {_RecordType("<1620,1621,29>",(g)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (match) != "undefined") {_RecordType("<1622,1627,29>",(match)); Inst3++; } } catch(e) {}
  g(match);
}

try { if (Inst4 <= 1000 && typeof (g) != "undefined") {_RecordType("<1642,1643,32>",(g)); Inst4++; } } catch(e) {}
function g(match) {
try { if (Inst5 <= 1000 && typeof (match) != "undefined") {_RecordType("<1644,1649,32>",(match)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1655,1667,33>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<1668,1669,33>",(f)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (g.caller) != "undefined") {_RecordType("<1671,1679,33>",(g.caller)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<1671,1672,33>",(g)); Inst9++; } } catch(e) {}
  assertEquals(f, g.caller);
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1684,1696,34>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (match) != "undefined") {_RecordType("<1697,1702,34>",(match)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f.caller) != "undefined") {_RecordType("<1704,1712,34>",(f.caller)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f) != "undefined") {_RecordType("<1704,1705,34>",(f)); Inst13++; } } catch(e) {}
  assertEquals(match, f.caller);
}

// Check called from function.
try { if (Inst14 <= 1000 && typeof (h) != "undefined") {_RecordType("<1758,1759,38>",(h)); Inst14++; } } catch(e) {}
function h() {
try { if (Inst15 <= 1000 && typeof (f) != "undefined") {_RecordType("<1766,1767,39>",(f)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (h) != "undefined") {_RecordType("<1768,1769,39>",(h)); Inst16++; } } catch(e) {}
  f(h);
}
try { if (Inst17 <= 1000 && typeof (h) != "undefined") {_RecordType("<1774,1775,41>",(h)); Inst17++; } } catch(e) {}
h();

// Check called from top-level.
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<1812,1813,44>",(f)); Inst18++; } } catch(e) {}
f(null);

// Check called from eval.
try { if (Inst19 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1849,1853,47>",(eval)); Inst19++; } } catch(e) {}
eval('f(null)');

// Check called from strict builtin functions.
try { if (Inst20 <= 1000 && typeof ([null, null].sort) != "undefined") {_RecordType("<1914,1931,50>",([null, null].sort)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<1932,1933,50>",(f)); Inst21++; } } catch(e) {}
[null, null].sort(f);
try { if (Inst22 <= 1000 && typeof ([null].forEach) != "undefined") {_RecordType("<1936,1950,51>",([null].forEach)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1951,1952,51>",(f)); Inst23++; } } catch(e) {}
[null].forEach(f, null);

// Check called from sloppy builtin functions.
try { if (Inst24 <= 1000 && typeof ("abel".replace) != "undefined") {_RecordType("<2009,2023,54>",("abel".replace)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (h) != "undefined") {_RecordType("<2039,2040,54>",(h)); Inst25++; } } catch(e) {}
"abel".replace(/b/g, function h() {
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2048,2060,55>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (String.prototype.replace) != "undefined") {_RecordType("<2061,2085,55>",(String.prototype.replace)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (String.prototype) != "undefined") {_RecordType("<2061,2077,55>",(String.prototype)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (String) != "undefined") {_RecordType("<2061,2067,55>",(String)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (h.caller) != "undefined") {_RecordType("<2087,2095,55>",(h.caller)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (h) != "undefined") {_RecordType("<2087,2088,55>",(h)); Inst31++; } } catch(e) {}
   assertEquals(String.prototype.replace, h.caller);
});

