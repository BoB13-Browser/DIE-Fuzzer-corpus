var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

var break_count = 0;
try { if (Inst0 <= 1000 && typeof (break_count) != "undefined") {_RecordType("<207,218,7>",(break_count)); Inst0++; } } catch(e) {}
var exception = null;
try { if (Inst1 <= 1000 && typeof (exception) != "undefined") {_RecordType("<228,237,8>",(exception)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (listener) != "undefined") {_RecordType("<256,264,10>",(listener)); Inst2++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst3 <= 1000 && typeof (event) != "undefined") {_RecordType("<265,270,10>",(event)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<272,282,10>",(exec_state)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<284,294,10>",(event_data)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (data) != "undefined") {_RecordType("<296,300,10>",(data)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (event) != "undefined") {_RecordType("<310,315,11>",(event)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<319,341,11>",(Debug.DebugEvent.Break)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<319,335,11>",(Debug.DebugEvent)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<319,324,11>",(Debug)); Inst10++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<526,527,17>",(e)); Inst23++; } } catch(e) {}
  try {
try { if (Inst12 <= 1000 && typeof (exec_state.frame(0).sourceLineText) != "undefined") {_RecordType("<381,415,13>",(exec_state.frame(0).sourceLineText)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<381,397,13>",(exec_state.frame)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<381,391,13>",(exec_state)); Inst14++; } } catch(e) {}
    var source_line = exec_state.frame(0).sourceLineText();
try { if (Inst11 <= 1000 && typeof (source_line) != "undefined") {_RecordType("<367,378,13>",(source_line)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (print) != "undefined") {_RecordType("<423,428,14>",(print)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (source_line) != "undefined") {_RecordType("<429,440,14>",(source_line)); Inst16++; } } catch(e) {}
    print(source_line);
try { if (Inst17 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<447,469,15>",(exec_state.prepareStep)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<447,457,15>",(exec_state)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<470,493,15>",(Debug.StepAction.StepIn)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<470,486,15>",(Debug.StepAction)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<470,475,15>",(Debug)); Inst21++; } } catch(e) {}
    exec_state.prepareStep(Debug.StepAction.StepIn);
try { if (Inst22 <= 1000 && typeof (break_count) != "undefined") {_RecordType("<500,511,16>",(break_count)); Inst22++; } } catch(e) {}
    break_count++;
  } catch (e) {
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<547,548,18>",(e)); Inst25++; } } catch(e) {}
    exception = e;
try { if (Inst24 <= 1000 && typeof (exception) != "undefined") {_RecordType("<535,544,18>",(exception)); Inst24++; } } catch(e) {}
  }
}

try { if (Inst27 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<569,580,22>",(debug.Debug)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (debug) != "undefined") {_RecordType("<569,574,22>",(debug)); Inst28++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst26 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<561,566,22>",(Debug)); Inst26++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<582,599,23>",(Debug.setListener)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<582,587,23>",(Debug)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (listener) != "undefined") {_RecordType("<600,608,23>",(listener)); Inst31++; } } catch(e) {}
Debug.setListener(listener);


try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<622,623,26>",(f)); Inst32++; } } catch(e) {}
function f() {
  this.x = 1;
try { if (Inst33 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<630,636,27>",(this.x)); Inst33++; } } catch(e) {}
}

try { if (Inst34 <= 1000 && typeof (g) != "undefined") {_RecordType("<654,655,30>",(g)); Inst34++; } } catch(e) {}
function g() {
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<666,667,31>",(f)); Inst35++; } } catch(e) {}
  new f();
}

try { if (Inst36 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<674,693,34>",(Debug.setBreakPoint)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<674,679,34>",(Debug)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (g) != "undefined") {_RecordType("<694,695,34>",(g)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Debug.BreakPositionAlignment.BreakPosition) != "undefined") {_RecordType("<700,742,34>",(Debug.BreakPositionAlignment.BreakPosition)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (Debug.BreakPositionAlignment) != "undefined") {_RecordType("<700,728,34>",(Debug.BreakPositionAlignment)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<700,705,34>",(Debug)); Inst41++; } } catch(e) {}
Debug.setBreakPoint(g, 6, Debug.BreakPositionAlignment.BreakPosition);
try { if (Inst42 <= 1000 && typeof (print) != "undefined") {_RecordType("<745,750,35>",(print)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Debug.showBreakPoints) != "undefined") {_RecordType("<751,772,35>",(Debug.showBreakPoints)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<751,756,35>",(Debug)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (g) != "undefined") {_RecordType("<773,774,35>",(g)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<776,785,35>",(undefined)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Debug.BreakPositionAlignment.BreakPosition) != "undefined") {_RecordType("<793,835,36>",(Debug.BreakPositionAlignment.BreakPosition)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Debug.BreakPositionAlignment) != "undefined") {_RecordType("<793,821,36>",(Debug.BreakPositionAlignment)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<793,798,36>",(Debug)); Inst49++; } } catch(e) {}
print(Debug.showBreakPoints(g, undefined,
      Debug.BreakPositionAlignment.BreakPosition));

try { if (Inst50 <= 1000 && typeof (g) != "undefined") {_RecordType("<840,841,38>",(g)); Inst50++; } } catch(e) {}
g();
try { if (Inst51 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<845,862,39>",(Debug.setListener)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<845,850,39>",(Debug)); Inst52++; } } catch(e) {}
Debug.setListener(null);

try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<871,883,41>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (break_count) != "undefined") {_RecordType("<887,898,41>",(break_count)); Inst54++; } } catch(e) {}
assertEquals(6, break_count);
try { if (Inst55 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<901,911,42>",(assertNull)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (exception) != "undefined") {_RecordType("<912,921,42>",(exception)); Inst56++; } } catch(e) {}
assertNull(exception);

