var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Tests from http://blog.stevenlevithan.com/archives/npcg-javascript

try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1669,1681,30>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (/(x)?\1y/.test) != "undefined") {_RecordType("<1688,1702,30>",(/(x)?\1y/.test)); Inst1++; } } catch(e) {}
assertEquals(true, /(x)?\1y/.test("y"));
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1710,1722,31>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1729,1738,31>",(undefined)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (/(x)?\1y/.exec) != "undefined") {_RecordType("<1741,1755,31>",(/(x)?\1y/.exec)); Inst4++; } } catch(e) {}
assertEquals(["y", undefined], /(x)?\1y/.exec("y"));
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1763,1775,32>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1782,1791,32>",(undefined)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (/(x)?y/.exec) != "undefined") {_RecordType("<1794,1806,32>",(/(x)?y/.exec)); Inst7++; } } catch(e) {}
assertEquals(["y", undefined], /(x)?y/.exec("y"));
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1814,1826,33>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1833,1842,33>",(undefined)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof ("y".match) != "undefined") {_RecordType("<1845,1854,33>",("y".match)); Inst10++; } } catch(e) {}
assertEquals(["y", undefined], "y".match(/(x)?\1y/));
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1868,1880,34>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1887,1896,34>",(undefined)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof ("y".match) != "undefined") {_RecordType("<1899,1908,34>",("y".match)); Inst13++; } } catch(e) {}
assertEquals(["y", undefined], "y".match(/(x)?y/));
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1920,1932,35>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof ("y".match) != "undefined") {_RecordType("<1940,1949,35>",("y".match)); Inst15++; } } catch(e) {}
assertEquals(["y"], "y".match(/(x)?\1y/g));
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1964,1976,36>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1982,1991,36>",(undefined)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof ("y".split) != "undefined") {_RecordType("<1998,2007,36>",("y".split)); Inst18++; } } catch(e) {}
assertEquals(["", undefined, ""], "y".split(/(x)?\1y/));
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2021,2033,37>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2039,2048,37>",(undefined)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof ("y".split) != "undefined") {_RecordType("<2055,2064,37>",("y".split)); Inst21++; } } catch(e) {}
assertEquals(["", undefined, ""], "y".split(/(x)?y/));
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2076,2088,38>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof ("y".search) != "undefined") {_RecordType("<2092,2102,38>",("y".search)); Inst23++; } } catch(e) {}
assertEquals(0, "y".search(/(x)?\1y/));
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2116,2128,39>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof ("y".replace) != "undefined") {_RecordType("<2134,2145,39>",("y".replace)); Inst25++; } } catch(e) {}
assertEquals("z", "y".replace(/(x)?\1y/, "z"));
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2164,2176,40>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof ("y".replace) != "undefined") {_RecordType("<2181,2192,40>",("y".replace)); Inst27++; } } catch(e) {}
assertEquals("", "y".replace(/(x)?y/, "$1"));
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2210,2222,41>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof ("y".replace) != "undefined") {_RecordType("<2236,2247,41>",("y".replace)); Inst29++; } } catch(e) {}
assertEquals("undefined", "y".replace(/(x)?\1y/,
    function($0, $1){
try { if (Inst30 <= 1000 && typeof ($0) != "undefined") {_RecordType("<2272,2274,42>",($0)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof ($1) != "undefined") {_RecordType("<2276,2278,42>",($1)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (String) != "undefined") {_RecordType("<2296,2302,43>",(String)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof ($1) != "undefined") {_RecordType("<2303,2305,43>",($1)); Inst33++; } } catch(e) {}
        return String($1);
    }));
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2317,2329,45>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof ("y".replace) != "undefined") {_RecordType("<2343,2354,45>",("y".replace)); Inst35++; } } catch(e) {}
assertEquals("undefined", "y".replace(/(x)?y/,
    function($0, $1){
try { if (Inst36 <= 1000 && typeof ($0) != "undefined") {_RecordType("<2377,2379,46>",($0)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof ($1) != "undefined") {_RecordType("<2381,2383,46>",($1)); Inst37++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (String) != "undefined") {_RecordType("<2401,2407,47>",(String)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof ($1) != "undefined") {_RecordType("<2408,2410,47>",($1)); Inst39++; } } catch(e) {}
        return String($1);
    }));
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2422,2434,49>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof ("y".replace) != "undefined") {_RecordType("<2448,2459,49>",("y".replace)); Inst41++; } } catch(e) {}
assertEquals("undefined", "y".replace(/(x)?y/,
    function($0, $1){
try { if (Inst42 <= 1000 && typeof ($0) != "undefined") {_RecordType("<2482,2484,50>",($0)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof ($1) != "undefined") {_RecordType("<2486,2488,50>",($1)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof ($1) != "undefined") {_RecordType("<2506,2508,51>",($1)); Inst44++; } } catch(e) {}
        return $1;
    }));

// See https://bugzilla.mozilla.org/show_bug.cgi?id=476146
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2579,2591,55>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (/^(b+|a){1,2}?bc/.exec) != "undefined") {_RecordType("<2606,2628,55>",(/^(b+|a){1,2}?bc/.exec)); Inst46++; } } catch(e) {}
assertEquals(["bbc", "b"], /^(b+|a){1,2}?bc/.exec("bbc"));
try { if (Inst47 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2638,2650,56>",(assertEquals)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (/((\3|b)\2(a)){2,}/.exec) != "undefined") {_RecordType("<2688,2712,57>",(/((\3|b)\2(a)){2,}/.exec)); Inst48++; } } catch(e) {}
assertEquals(["bbaa", "a", "", "a"],
             /((\3|b)\2(a)){2,}/.exec("bbaababbabaaaaabbaaaabba"));

// From crbug.com/128821 - don't hang:
try { if (Inst49 <= 1000 && typeof ("".match) != "undefined") {_RecordType("<2783,2791,60>",("".match)); Inst49++; } } catch(e) {}
"".match(/((a|i|A|I|u|o|U|O)(s|c|b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z|B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z)*) de\/da([.,!?\s]|$)/);

