var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<1607,1611,28>",(Hash)); Inst0++; } } catch(e) {}
function Hash() {
  for (var i = 0; i < 100; i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1627,1628,29>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1634,1635,29>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1643,1644,29>",(i)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1670,1671,30>",(i)); Inst6++; } } catch(e) {}
    this['a' + i] = i;
try { if (Inst4 <= 1000 && typeof (this['a' + i]) != "undefined") {_RecordType("<1654,1667,30>",(this['a' + i])); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1665,1666,30>",(i)); Inst5++; } } catch(e) {}
  }

try { if (Inst7 <= 1000 && typeof (this.a50) != "undefined") {_RecordType("<1687,1695,33>",(this.a50)); Inst7++; } } catch(e) {}
  delete this.a50;  // Ensure it's a normal object.
}

Hash.prototype.m = function() {
  return 1;
};
try { if (Inst8 <= 1000 && typeof (Hash.prototype.m) != "undefined") {_RecordType("<1733,1749,36>",(Hash.prototype.m)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Hash.prototype) != "undefined") {_RecordType("<1733,1747,36>",(Hash.prototype)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<1733,1737,36>",(Hash)); Inst10++; } } catch(e) {}

try { if (Inst12 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<1793,1797,40>",(Hash)); Inst12++; } } catch(e) {}
var h = new Hash();
try { if (Inst11 <= 1000 && typeof (h) != "undefined") {_RecordType("<1785,1786,40>",(h)); Inst11++; } } catch(e) {}

for (var i = 1; i < 100; i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1811,1812,42>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1818,1819,42>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1827,1828,42>",(i)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1840,1841,43>",(i)); Inst16++; } } catch(e) {}
  if (i == 50) {
    h.m = function() {
      return 2;
    };
try { if (Inst17 <= 1000 && typeof (h.m) != "undefined") {_RecordType("<1855,1858,44>",(h.m)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (h) != "undefined") {_RecordType("<1855,1856,44>",(h)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1910,1911,47>",(i)); Inst19++; } } catch(e) {}
  } else if (i == 70) {
try { if (Inst20 <= 1000 && typeof (h.m) != "undefined") {_RecordType("<1932,1935,48>",(h.m)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (h) != "undefined") {_RecordType("<1932,1933,48>",(h)); Inst21++; } } catch(e) {}
    delete h.m;
  }
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1943,1955,50>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<1956,1957,50>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<1966,1967,50>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (h.m) != "undefined") {_RecordType("<1983,1986,50>",(h.m)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (h) != "undefined") {_RecordType("<1983,1984,50>",(h)); Inst26++; } } catch(e) {}
  assertEquals(i < 50 || i >= 70 ? 1 : 2, h.m());
}


try { if (Inst28 <= 1000 && typeof ('wwwww '.split(' ')[0]) != "undefined") {_RecordType("<2011,2033,54>",('wwwww '.split(' ')[0])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof ('wwwww '.split) != "undefined") {_RecordType("<2011,2025,54>",('wwwww '.split)); Inst29++; } } catch(e) {}
var nonsymbol = 'wwwww '.split(' ')[0];
try { if (Inst27 <= 1000 && typeof (nonsymbol) != "undefined") {_RecordType("<1999,2008,54>",(nonsymbol)); Inst27++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (Hash.prototype.m) != "undefined") {_RecordType("<2058,2074,55>",(Hash.prototype.m)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Hash.prototype) != "undefined") {_RecordType("<2058,2072,55>",(Hash.prototype)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<2058,2062,55>",(Hash)); Inst35++; } } catch(e) {}
Hash.prototype.wwwww = Hash.prototype.m;
try { if (Inst30 <= 1000 && typeof (Hash.prototype.wwwww) != "undefined") {_RecordType("<2035,2055,55>",(Hash.prototype.wwwww)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Hash.prototype) != "undefined") {_RecordType("<2035,2049,55>",(Hash.prototype)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Hash) != "undefined") {_RecordType("<2035,2039,55>",(Hash)); Inst32++; } } catch(e) {}

for (var i = 1; i < 100; i++) {
try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<2086,2087,57>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2093,2094,57>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2102,2103,57>",(i)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<2115,2116,58>",(i)); Inst39++; } } catch(e) {}
  if (i == 50) {
    h[nonsymbol] = function() {
      return 2;
    };
try { if (Inst40 <= 1000 && typeof (h[nonsymbol]) != "undefined") {_RecordType("<2130,2142,59>",(h[nonsymbol])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (h) != "undefined") {_RecordType("<2130,2131,59>",(h)); Inst41++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2194,2195,62>",(i)); Inst42++; } } catch(e) {}
  } else if (i == 70) {
try { if (Inst43 <= 1000 && typeof (h[nonsymbol]) != "undefined") {_RecordType("<2216,2228,63>",(h[nonsymbol])); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (h) != "undefined") {_RecordType("<2216,2217,63>",(h)); Inst44++; } } catch(e) {}
    delete h[nonsymbol];
  }
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2236,2248,65>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<2249,2250,65>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (i) != "undefined") {_RecordType("<2259,2260,65>",(i)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (h.wwwww) != "undefined") {_RecordType("<2276,2283,65>",(h.wwwww)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (h) != "undefined") {_RecordType("<2276,2277,65>",(h)); Inst49++; } } catch(e) {}
  assertEquals(i < 50 || i >= 70 ? 1 : 2, h.wwwww());
}

