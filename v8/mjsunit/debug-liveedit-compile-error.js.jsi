var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1711,1722,31>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1711,1716,31>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1703,1708,31>",(Debug)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1724,1728,33>",(eval)); Inst3++; } } catch(e) {}
eval("var something1 = 25; \n"
     + " function ChooseAnimal() { return          'Cat';          } \n"
     + " ChooseAnimal.Helper = function() { return 'Help!'; }\n");

try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1896,1908,37>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (ChooseAnimal) != "undefined") {_RecordType("<1916,1928,37>",(ChooseAnimal)); Inst5++; } } catch(e) {}
assertEquals("Cat", ChooseAnimal());

try { if (Inst7 <= 1000 && typeof (Debug.findScript) != "undefined") {_RecordType("<1947,1963,39>",(Debug.findScript)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1947,1952,39>",(Debug)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (ChooseAnimal) != "undefined") {_RecordType("<1964,1976,39>",(ChooseAnimal)); Inst9++; } } catch(e) {}
var script = Debug.findScript(ChooseAnimal);
try { if (Inst6 <= 1000 && typeof (script) != "undefined") {_RecordType("<1938,1944,39>",(script)); Inst6++; } } catch(e) {}

var orig_animal = "Cat";
try { if (Inst10 <= 1000 && typeof (orig_animal) != "undefined") {_RecordType("<1984,1995,41>",(orig_animal)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (script.source.indexOf) != "undefined") {_RecordType("<2021,2042,42>",(script.source.indexOf)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (script.source) != "undefined") {_RecordType("<2021,2034,42>",(script.source)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (script) != "undefined") {_RecordType("<2021,2027,42>",(script)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (orig_animal) != "undefined") {_RecordType("<2043,2054,42>",(orig_animal)); Inst15++; } } catch(e) {}
var patch_pos = script.source.indexOf(orig_animal);
try { if (Inst11 <= 1000 && typeof (patch_pos) != "undefined") {_RecordType("<2009,2018,42>",(patch_pos)); Inst11++; } } catch(e) {}
var new_animal_patch = "Cap' + ) + 'bara";
try { if (Inst16 <= 1000 && typeof (new_animal_patch) != "undefined") {_RecordType("<2061,2077,43>",(new_animal_patch)); Inst16++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2122,2127,45>",(Array)); Inst18++; } } catch(e) {}
var change_log = new Array();
try { if (Inst17 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2105,2115,45>",(change_log)); Inst17++; } } catch(e) {}
var caught_exception = null;
try { if (Inst19 <= 1000 && typeof (caught_exception) != "undefined") {_RecordType("<2135,2151,46>",(caught_exception)); Inst19++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (e) != "undefined") {_RecordType("<2298,2299,50>",(e)); Inst30++; } } catch(e) {}
try {
try { if (Inst20 <= 1000 && typeof (Debug.LiveEdit.TestApi.ApplySingleChunkPatch) != "undefined") {_RecordType("<2168,2212,48>",(Debug.LiveEdit.TestApi.ApplySingleChunkPatch)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Debug.LiveEdit.TestApi) != "undefined") {_RecordType("<2168,2190,48>",(Debug.LiveEdit.TestApi)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Debug.LiveEdit) != "undefined") {_RecordType("<2168,2182,48>",(Debug.LiveEdit)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2168,2173,48>",(Debug)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (script) != "undefined") {_RecordType("<2213,2219,48>",(script)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (patch_pos) != "undefined") {_RecordType("<2221,2230,48>",(patch_pos)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (orig_animal.length) != "undefined") {_RecordType("<2238,2256,49>",(orig_animal.length)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (orig_animal) != "undefined") {_RecordType("<2238,2249,49>",(orig_animal)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (new_animal_patch) != "undefined") {_RecordType("<2258,2274,49>",(new_animal_patch)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2276,2286,49>",(change_log)); Inst29++; } } catch(e) {}
  Debug.LiveEdit.TestApi.ApplySingleChunkPatch(script, patch_pos,
      orig_animal.length, new_animal_patch, change_log);
} catch (e) {
try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<2324,2325,51>",(e)); Inst32++; } } catch(e) {}
  caught_exception = e;
try { if (Inst31 <= 1000 && typeof (caught_exception) != "undefined") {_RecordType("<2305,2321,51>",(caught_exception)); Inst31++; } } catch(e) {}
}

try { if (Inst33 <= 1000 && typeof (assertNotNull) != "undefined") {_RecordType("<2330,2343,54>",(assertNotNull)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (caught_exception) != "undefined") {_RecordType("<2344,2360,54>",(caught_exception)); Inst34++; } } catch(e) {}
assertNotNull(caught_exception);
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2363,2375,55>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (caught_exception.details.syntaxErrorMessage) != "undefined") {_RecordType("<2402,2445,56>",(caught_exception.details.syntaxErrorMessage)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (caught_exception.details) != "undefined") {_RecordType("<2402,2426,56>",(caught_exception.details)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (caught_exception) != "undefined") {_RecordType("<2402,2418,56>",(caught_exception)); Inst38++; } } catch(e) {}
assertEquals("Unexpected token )",
    caught_exception.details.syntaxErrorMessage);

try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2449,2461,58>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (caught_exception.details.position.start.line) != "undefined") {_RecordType("<2465,2509,58>",(caught_exception.details.position.start.line)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (caught_exception.details.position.start) != "undefined") {_RecordType("<2465,2504,58>",(caught_exception.details.position.start)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (caught_exception.details.position) != "undefined") {_RecordType("<2465,2498,58>",(caught_exception.details.position)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (caught_exception.details) != "undefined") {_RecordType("<2465,2489,58>",(caught_exception.details)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (caught_exception) != "undefined") {_RecordType("<2465,2481,58>",(caught_exception)); Inst44++; } } catch(e) {}
assertEquals(2, caught_exception.details.position.start.line);

