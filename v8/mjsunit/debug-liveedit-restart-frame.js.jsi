var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1711,1722,31>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1711,1716,31>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1703,1708,31>",(Debug)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (FindCallFrame) != "undefined") {_RecordType("<1733,1746,33>",(FindCallFrame)); Inst3++; } } catch(e) {}
function FindCallFrame(exec_state, frame_code) {
try { if (Inst4 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1747,1757,33>",(exec_state)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (frame_code) != "undefined") {_RecordType("<1759,1769,33>",(frame_code)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1788,1794,34>",(Number)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (frame_code) != "undefined") {_RecordType("<1795,1805,34>",(frame_code)); Inst8++; } } catch(e) {}
  var number = Number(frame_code);
try { if (Inst6 <= 1000 && typeof (number) != "undefined") {_RecordType("<1779,1785,34>",(number)); Inst6++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (number) != "undefined") {_RecordType("<1814,1820,35>",(number)); Inst9++; } } catch(e) {}
  if (number >= 0) {
try { if (Inst10 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<1840,1856,36>",(exec_state.frame)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1840,1850,36>",(exec_state)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (number) != "undefined") {_RecordType("<1857,1863,36>",(number)); Inst12++; } } catch(e) {}
    return exec_state.frame(number);
  } else {
    for (var i = 0; i < exec_state.frameCount(); i++) {
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<1890,1891,38>",(i)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1897,1898,38>",(i)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (exec_state.frameCount) != "undefined") {_RecordType("<1901,1922,38>",(exec_state.frameCount)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1901,1911,38>",(exec_state)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1926,1927,38>",(i)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<1951,1967,39>",(exec_state.frame)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1951,1961,39>",(exec_state)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1968,1969,39>",(i)); Inst21++; } } catch(e) {}
      var frame = exec_state.frame(i);
try { if (Inst18 <= 1000 && typeof (frame) != "undefined") {_RecordType("<1943,1948,39>",(frame)); Inst18++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (frame.func) != "undefined") {_RecordType("<1996,2006,40>",(frame.func)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (frame) != "undefined") {_RecordType("<1996,2001,40>",(frame)); Inst24++; } } catch(e) {}
      var func_mirror = frame.func();
try { if (Inst22 <= 1000 && typeof (func_mirror) != "undefined") {_RecordType("<1982,1993,40>",(func_mirror)); Inst22++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (frame_code) != "undefined") {_RecordType("<2020,2030,41>",(frame_code)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (func_mirror.name) != "undefined") {_RecordType("<2034,2050,41>",(func_mirror.name)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (func_mirror) != "undefined") {_RecordType("<2034,2045,41>",(func_mirror)); Inst27++; } } catch(e) {}
      if (frame_code == func_mirror.name()) {
try { if (Inst28 <= 1000 && typeof (frame) != "undefined") {_RecordType("<2071,2076,42>",(frame)); Inst28++; } } catch(e) {}
        return frame;
      }
    }
  }
try { if (Inst29 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2108,2113,46>",(Error)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (function_name) != "undefined") {_RecordType("<2148,2161,46>",(function_name)); Inst30++; } } catch(e) {}
  throw new Error("Failed to find function name " + function_name);
}

try { if (Inst31 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<2176,2184,49>",(TestCase)); Inst31++; } } catch(e) {}
function TestCase(test_scenario, expected_output) {
try { if (Inst32 <= 1000 && typeof (test_scenario) != "undefined") {_RecordType("<2185,2198,49>",(test_scenario)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (expected_output) != "undefined") {_RecordType("<2200,2215,49>",(expected_output)); Inst33++; } } catch(e) {}
  // Global variable, accessed from eval'd script.
  test_output = "";
try { if (Inst34 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<2272,2283,51>",(test_output)); Inst34++; } } catch(e) {}

try { if (Inst35 <= 1000 && typeof (TestCode) != "undefined") {_RecordType("<2302,2310,53>",(TestCode)); Inst35++; } } catch(e) {}
  function TestCode() {
try { if (Inst36 <= 1000 && typeof (A) != "undefined") {_RecordType("<2328,2329,54>",(A)); Inst36++; } } catch(e) {}
    function A() {
      // Extra stack variable. To make function not slim.
      // Restarter doesn't work on slim function when stopped on 'debugger'
      // statement. (There is no padding for 'debugger' statement).
      var o = {};
try { if (Inst37 <= 1000 && typeof (o) != "undefined") {_RecordType("<2546,2547,58>",(o)); Inst37++; } } catch(e) {}
      test_output += 'A';
try { if (Inst38 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<2560,2571,59>",(test_output)); Inst38++; } } catch(e) {}
      test_output += '=';
try { if (Inst39 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<2586,2597,60>",(test_output)); Inst39++; } } catch(e) {}
      debugger;
      return 'Capybara';
    }
try { if (Inst40 <= 1000 && typeof (B) != "undefined") {_RecordType("<2666,2667,64>",(B)); Inst40++; } } catch(e) {}
    function B(p1, p2) {
try { if (Inst41 <= 1000 && typeof (p1) != "undefined") {_RecordType("<2668,2670,64>",(p1)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (p2) != "undefined") {_RecordType("<2672,2674,64>",(p2)); Inst42++; } } catch(e) {}
      test_output += 'B';
try { if (Inst43 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<2684,2695,65>",(test_output)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (A) != "undefined") {_RecordType("<2717,2718,66>",(A)); Inst44++; } } catch(e) {}
      return A();
    }
try { if (Inst45 <= 1000 && typeof (C) != "undefined") {_RecordType("<2741,2742,68>",(C)); Inst45++; } } catch(e) {}
    function C() {
      test_output += 'C';
try { if (Inst46 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<2753,2764,69>",(test_output)); Inst46++; } } catch(e) {}
      // Function call with argument adaptor is intentional.
try { if (Inst47 <= 1000 && typeof (B) != "undefined") {_RecordType("<2847,2848,71>",(B)); Inst47++; } } catch(e) {}
      return B();
    }
try { if (Inst48 <= 1000 && typeof (D) != "undefined") {_RecordType("<2871,2872,73>",(D)); Inst48++; } } catch(e) {}
    function D() {
      test_output += 'D';
try { if (Inst49 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<2883,2894,74>",(test_output)); Inst49++; } } catch(e) {}
      // Function call with argument adaptor is intentional.
try { if (Inst50 <= 1000 && typeof (C) != "undefined") {_RecordType("<2977,2978,76>",(C)); Inst50++; } } catch(e) {}
      return C(1, 2);
    }
try { if (Inst51 <= 1000 && typeof (E) != "undefined") {_RecordType("<3005,3006,78>",(E)); Inst51++; } } catch(e) {}
    function E() {
      test_output += 'E';
try { if (Inst52 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<3017,3028,79>",(test_output)); Inst52++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (D) != "undefined") {_RecordType("<3050,3051,80>",(D)); Inst53++; } } catch(e) {}
      return D();
    }
try { if (Inst54 <= 1000 && typeof (F) != "undefined") {_RecordType("<3074,3075,82>",(F)); Inst54++; } } catch(e) {}
    function F() {
      test_output += 'F';
try { if (Inst55 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<3086,3097,83>",(test_output)); Inst55++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (E) != "undefined") {_RecordType("<3119,3120,84>",(E)); Inst56++; } } catch(e) {}
      return E();
    }
try { if (Inst57 <= 1000 && typeof (F) != "undefined") {_RecordType("<3141,3142,86>",(F)); Inst57++; } } catch(e) {}
    return F();
  }

  var scenario_pos = 0;
try { if (Inst58 <= 1000 && typeof (scenario_pos) != "undefined") {_RecordType("<3157,3169,89>",(scenario_pos)); Inst58++; } } catch(e) {}

try { if (Inst59 <= 1000 && typeof (DebuggerStatementHandler) != "undefined") {_RecordType("<3187,3211,91>",(DebuggerStatementHandler)); Inst59++; } } catch(e) {}
  function DebuggerStatementHandler(exec_state) {
try { if (Inst60 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<3212,3222,91>",(exec_state)); Inst60++; } } catch(e) {}
    while (true) {
try { if (Inst61 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3251,3261,93>",(assertTrue)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (scenario_pos) != "undefined") {_RecordType("<3262,3274,93>",(scenario_pos)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (test_scenario.length) != "undefined") {_RecordType("<3277,3297,93>",(test_scenario.length)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (test_scenario) != "undefined") {_RecordType("<3277,3290,93>",(test_scenario)); Inst64++; } } catch(e) {}
      assertTrue(scenario_pos < test_scenario.length);
try { if (Inst66 <= 1000 && typeof (test_scenario[scenario_pos++]) != "undefined") {_RecordType("<3324,3353,94>",(test_scenario[scenario_pos++])); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (test_scenario) != "undefined") {_RecordType("<3324,3337,94>",(test_scenario)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (scenario_pos) != "undefined") {_RecordType("<3338,3350,94>",(scenario_pos)); Inst68++; } } catch(e) {}
      var change_code = test_scenario[scenario_pos++];
try { if (Inst65 <= 1000 && typeof (change_code) != "undefined") {_RecordType("<3310,3321,94>",(change_code)); Inst65++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (change_code) != "undefined") {_RecordType("<3365,3376,95>",(change_code)); Inst69++; } } catch(e) {}
      if (change_code == '=') {
        // Continue.
        return;
      }
try { if (Inst71 <= 1000 && typeof (FindCallFrame) != "undefined") {_RecordType("<3450,3463,99>",(FindCallFrame)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<3464,3474,99>",(exec_state)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (change_code) != "undefined") {_RecordType("<3476,3487,99>",(change_code)); Inst73++; } } catch(e) {}
      var frame = FindCallFrame(exec_state, change_code);
try { if (Inst70 <= 1000 && typeof (frame) != "undefined") {_RecordType("<3442,3447,99>",(frame)); Inst70++; } } catch(e) {}
try { if (Inst75 <= 1000 && typeof (frame.restart) != "undefined") {_RecordType("<3508,3521,100>",(frame.restart)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (frame) != "undefined") {_RecordType("<3508,3513,100>",(frame)); Inst76++; } } catch(e) {}
      var error = frame.restart();
try { if (Inst74 <= 1000 && typeof (error) != "undefined") {_RecordType("<3500,3505,100>",(error)); Inst74++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (error) != "undefined") {_RecordType("<3542,3547,101>",(error)); Inst77++; } } catch(e) {}
      if (typeof error === 'string')
try { if (Inst78 <= 1000 && typeof (Error) != "undefined") {_RecordType("<3582,3587,102>",(Error)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (error) != "undefined") {_RecordType("<3588,3593,102>",(error)); Inst79++; } } catch(e) {}
          throw new Error(error);
    }
  }

  var saved_exception = null;
try { if (Inst80 <= 1000 && typeof (saved_exception) != "undefined") {_RecordType("<3613,3628,106>",(saved_exception)); Inst80++; } } catch(e) {}

try { if (Inst81 <= 1000 && typeof (listener) != "undefined") {_RecordType("<3649,3657,108>",(listener)); Inst81++; } } catch(e) {}
  function listener(event, exec_state, event_data, data) {
try { if (Inst82 <= 1000 && typeof (event) != "undefined") {_RecordType("<3658,3663,108>",(event)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<3665,3675,108>",(exec_state)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<3677,3687,108>",(event_data)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (data) != "undefined") {_RecordType("<3689,3693,108>",(data)); Inst85++; } } catch(e) {}
try { if (Inst86 <= 1000 && typeof (saved_exception) != "undefined") {_RecordType("<3705,3720,109>",(saved_exception)); Inst86++; } } catch(e) {}
    if (saved_exception != null) {
      return;
    }
try { if (Inst87 <= 1000 && typeof (event) != "undefined") {_RecordType("<3760,3765,112>",(event)); Inst87++; } } catch(e) {}try { if (Inst88 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<3769,3791,112>",(Debug.DebugEvent.Break)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<3769,3785,112>",(Debug.DebugEvent)); Inst89++; } } catch(e) {}try { if (Inst90 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<3769,3774,112>",(Debug)); Inst90++; } } catch(e) {}
    if (event == Debug.DebugEvent.Break) {
try { if (Inst93 <= 1000 && typeof (e) != "undefined") {_RecordType("<3868,3869,115>",(e)); Inst93++; } } catch(e) {}
      try {
try { if (Inst91 <= 1000 && typeof (DebuggerStatementHandler) != "undefined") {_RecordType("<3815,3839,114>",(DebuggerStatementHandler)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<3840,3850,114>",(exec_state)); Inst92++; } } catch(e) {}
        DebuggerStatementHandler(exec_state);
      } catch (e) {
try { if (Inst95 <= 1000 && typeof (e) != "undefined") {_RecordType("<3899,3900,116>",(e)); Inst95++; } } catch(e) {}
        saved_exception = e;
try { if (Inst94 <= 1000 && typeof (saved_exception) != "undefined") {_RecordType("<3881,3896,116>",(saved_exception)); Inst94++; } } catch(e) {}
      }
    } else {
try { if (Inst96 <= 1000 && typeof (print) != "undefined") {_RecordType("<3929,3934,119>",(print)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (event) != "undefined") {_RecordType("<3947,3952,119>",(event)); Inst97++; } } catch(e) {}
      print("Other: " + event);
    }
  }

try { if (Inst98 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<3968,3985,123>",(Debug.setListener)); Inst98++; } } catch(e) {}try { if (Inst99 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<3968,3973,123>",(Debug)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (listener) != "undefined") {_RecordType("<3986,3994,123>",(listener)); Inst100++; } } catch(e) {}
  Debug.setListener(listener);
try { if (Inst101 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3999,4011,124>",(assertEquals)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (TestCode) != "undefined") {_RecordType("<4024,4032,124>",(TestCode)); Inst102++; } } catch(e) {}
  assertEquals("Capybara", TestCode());
try { if (Inst103 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<4039,4056,125>",(Debug.setListener)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<4039,4044,125>",(Debug)); Inst104++; } } catch(e) {}
  Debug.setListener(null);

try { if (Inst105 <= 1000 && typeof (saved_exception) != "undefined") {_RecordType("<4071,4086,127>",(saved_exception)); Inst105++; } } catch(e) {}
  if (saved_exception) {
try { if (Inst106 <= 1000 && typeof (print) != "undefined") {_RecordType("<4094,4099,128>",(print)); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (saved_exception) != "undefined") {_RecordType("<4116,4131,128>",(saved_exception)); Inst107++; } } catch(e) {}
    print("Exception: " + saved_exception);
try { if (Inst108 <= 1000 && typeof (print) != "undefined") {_RecordType("<4138,4143,129>",(print)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (saved_exception.stack) != "undefined") {_RecordType("<4156,4177,129>",(saved_exception.stack)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (saved_exception) != "undefined") {_RecordType("<4156,4171,129>",(saved_exception)); Inst110++; } } catch(e) {}
    print("Stack: " + saved_exception.stack);
try { if (Inst111 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<4184,4201,130>",(assertUnreachable)); Inst111++; } } catch(e) {}
    assertUnreachable();
  }

try { if (Inst112 <= 1000 && typeof (print) != "undefined") {_RecordType("<4212,4217,133>",(print)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<4218,4229,133>",(test_output)); Inst113++; } } catch(e) {}
  print(test_output);

try { if (Inst114 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4235,4247,135>",(assertEquals)); Inst114++; } } catch(e) {}try { if (Inst115 <= 1000 && typeof (expected_output) != "undefined") {_RecordType("<4248,4263,135>",(expected_output)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (test_output) != "undefined") {_RecordType("<4265,4276,135>",(test_output)); Inst116++; } } catch(e) {}
  assertEquals(expected_output, test_output);
}

try { if (Inst117 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4282,4290,138>",(TestCase)); Inst117++; } } catch(e) {}
TestCase('0==', "FEDCBA=A=");
try { if (Inst118 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4312,4320,139>",(TestCase)); Inst118++; } } catch(e) {}
TestCase('1==', "FEDCBA=BA=");
try { if (Inst119 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4343,4351,140>",(TestCase)); Inst119++; } } catch(e) {}
TestCase('2==', "FEDCBA=CBA=");
try { if (Inst120 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4375,4383,141>",(TestCase)); Inst120++; } } catch(e) {}
TestCase('3==', "FEDCBA=DCBA=");
try { if (Inst121 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4408,4416,142>",(TestCase)); Inst121++; } } catch(e) {}
TestCase('4==', "FEDCBA=EDCBA=");
try { if (Inst122 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4442,4450,143>",(TestCase)); Inst122++; } } catch(e) {}
TestCase('5==', "FEDCBA=FEDCBA=");

try { if (Inst123 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4478,4486,145>",(TestCase)); Inst123++; } } catch(e) {}
TestCase('=', "FEDCBA=");

try { if (Inst124 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4505,4513,147>",(TestCase)); Inst124++; } } catch(e) {}
TestCase('C==', "FEDCBA=CBA=");

try { if (Inst125 <= 1000 && typeof (TestCase) != "undefined") {_RecordType("<4538,4546,149>",(TestCase)); Inst125++; } } catch(e) {}
TestCase('B=C=A=D==', "FEDCBA=BA=CBA=A=DCBA=");

// Successive restarts don't work now and require additional fix.
//TestCase('BCDE==', "FEDCBA=EDCBA=");
//TestCase('BC=BCDE==', "FEDCBA=CBA=EDCBA=");
//TestCase('EF==', "FEDCBA=FEDCBA=");

