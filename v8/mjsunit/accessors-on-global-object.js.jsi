var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that installing a getter on the global object instead of a
// normal property works.

x = 0;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1692,1693,31>",(x)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (getX) != "undefined") {_RecordType("<1709,1713,33>",(getX)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1725,1726,33>",(x)); Inst2++; } } catch(e) {}
function getX() { return x; }

for (var i = 0; i < 10; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1740,1741,35>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1747,1748,35>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1755,1756,35>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1764,1776,36>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1777,1778,36>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (getX) != "undefined") {_RecordType("<1793,1797,36>",(getX)); Inst8++; } } catch(e) {}
  assertEquals(i < 5 ? 0 : 42, getX());
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1808,1809,37>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (__defineGetter__) != "undefined") {_RecordType("<1816,1832,37>",(__defineGetter__)); Inst10++; } } catch(e) {}
  if (i == 4) __defineGetter__("x", function() { return 42; });
}


// Test that installing a setter on the global object instead of a
// normal property works.

y = 0;
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<1964,1965,44>",(y)); Inst11++; } } catch(e) {}
var setter_y;
try { if (Inst12 <= 1000 && typeof (setter_y) != "undefined") {_RecordType("<1975,1983,45>",(setter_y)); Inst12++; } } catch(e) {}

try { if (Inst13 <= 1000 && typeof (setY) != "undefined") {_RecordType("<1995,1999,47>",(setY)); Inst13++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (value) != "undefined") {_RecordType("<2013,2018,47>",(value)); Inst16++; } } catch(e) {}
function setY(value) { y = value; }
try { if (Inst14 <= 1000 && typeof (value) != "undefined") {_RecordType("<2000,2005,47>",(value)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<2009,2010,47>",(y)); Inst15++; } } catch(e) {}

for (var i = 0; i < 10; i++) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<2032,2033,49>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2039,2040,49>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<2047,2048,49>",(i)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (setY) != "undefined") {_RecordType("<2056,2060,50>",(setY)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2061,2062,50>",(i)); Inst21++; } } catch(e) {}
  setY(i);
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2067,2079,51>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2080,2081,51>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2088,2089,51>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2096,2097,51>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (y) != "undefined") {_RecordType("<2099,2100,51>",(y)); Inst26++; } } catch(e) {}
  assertEquals(i < 5 ? i : 2 * i, y);
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2109,2110,52>",(i)); Inst27++; } } catch(e) {}
  if (i == 4) {
try { if (Inst28 <= 1000 && typeof (__defineSetter__) != "undefined") {_RecordType("<2123,2139,53>",(__defineSetter__)); Inst28++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (value) != "undefined") {_RecordType("<2178,2183,53>",(value)); Inst31++; } } catch(e) {}
    __defineSetter__("y", function(value) { setter_y = 2 * value; });
try { if (Inst29 <= 1000 && typeof (value) != "undefined") {_RecordType("<2154,2159,53>",(value)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (setter_y) != "undefined") {_RecordType("<2163,2171,53>",(setter_y)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (__defineGetter__) != "undefined") {_RecordType("<2193,2209,54>",(__defineGetter__)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (setter_y) != "undefined") {_RecordType("<2235,2243,54>",(setter_y)); Inst33++; } } catch(e) {}
    __defineGetter__("y", function() { return setter_y; });
  }
}


// Test that replacing a getter with a normal property works as
// expected.

try { if (Inst34 <= 1000 && typeof (__defineGetter__) != "undefined") {_RecordType("<2335,2351,62>",(__defineGetter__)); Inst34++; } } catch(e) {}
__defineGetter__("z", function() { return 42; });

try { if (Inst35 <= 1000 && typeof (getZ) != "undefined") {_RecordType("<2395,2399,64>",(getZ)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (z) != "undefined") {_RecordType("<2411,2412,64>",(z)); Inst36++; } } catch(e) {}
function getZ() { return z; }

for (var i = 0; i < 10; i++) {
try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2426,2427,66>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (i) != "undefined") {_RecordType("<2433,2434,66>",(i)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (i) != "undefined") {_RecordType("<2441,2442,66>",(i)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2450,2462,67>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2463,2464,67>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (getZ) != "undefined") {_RecordType("<2479,2483,67>",(getZ)); Inst42++; } } catch(e) {}
  assertEquals(i < 5 ? 42 : 0, getZ());
try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<2494,2495,68>",(i)); Inst43++; } } catch(e) {}
  if (i == 4) {
try { if (Inst44 <= 1000 && typeof (z) != "undefined") {_RecordType("<2515,2516,69>",(z)); Inst44++; } } catch(e) {}
    delete z;
    z = 0;
try { if (Inst45 <= 1000 && typeof (z) != "undefined") {_RecordType("<2522,2523,70>",(z)); Inst45++; } } catch(e) {}
  }
}

