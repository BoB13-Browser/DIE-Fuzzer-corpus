var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1607,1610,28>",(foo)); Inst0++; } } catch(e) {}
function foo(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1611,1612,28>",(x)); Inst1++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1626,1635,29>",(arguments)); Inst3++; } } catch(e) {}
  var a = arguments;
try { if (Inst2 <= 1000 && typeof (a) != "undefined") {_RecordType("<1622,1623,29>",(a)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1648,1651,30>",(bar)); Inst4++; } } catch(e) {}
  function bar(i) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1652,1653,30>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1661,1673,31>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1674,1675,31>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1679,1683,31>",(a[0])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1679,1680,31>",(a)); Inst9++; } } catch(e) {}
    assertEquals(i, ++a[0]);
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1690,1702,32>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1703,1704,32>",(i)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<1706,1707,32>",(x)); Inst12++; } } catch(e) {}
    assertEquals(i, x);
  };
try { if (Inst13 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1717,1720,34>",(bar)); Inst13++; } } catch(e) {}
  bar(1);
try { if (Inst14 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1727,1730,35>",(bar)); Inst14++; } } catch(e) {}
  bar(2);
try { if (Inst15 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1737,1740,36>",(bar)); Inst15++; } } catch(e) {}
  bar(3);
try { if (Inst16 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1754,1757,37>",(bar)); Inst16++; } } catch(e) {}
  return bar;
}
try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<1771,1774,39>",(foo)); Inst18++; } } catch(e) {}
var baz = foo(0);
try { if (Inst17 <= 1000 && typeof (baz) != "undefined") {_RecordType("<1765,1768,39>",(baz)); Inst17++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (baz) != "undefined") {_RecordType("<1779,1782,40>",(baz)); Inst19++; } } catch(e) {}
baz(4);
try { if (Inst20 <= 1000 && typeof (baz) != "undefined") {_RecordType("<1787,1790,41>",(baz)); Inst20++; } } catch(e) {}
baz(5);
try { if (Inst21 <= 1000 && typeof (baz) != "undefined") {_RecordType("<1795,1798,42>",(baz)); Inst21++; } } catch(e) {}
baz(6);

// Test writing a non-smi.
try { if (Inst22 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<1840,1844,45>",(foo2)); Inst22++; } } catch(e) {}
function foo2(x) {
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<1845,1846,45>",(x)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1860,1869,46>",(arguments)); Inst25++; } } catch(e) {}
  var a = arguments;
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1856,1857,46>",(a)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (bar2) != "undefined") {_RecordType("<1882,1886,47>",(bar2)); Inst26++; } } catch(e) {}
  function bar2(i) {
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<1887,1888,47>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1896,1908,48>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<1909,1910,48>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (a[0]) != "undefined") {_RecordType("<1914,1918,48>",(a[0])); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a) != "undefined") {_RecordType("<1914,1915,48>",(a)); Inst31++; } } catch(e) {}
    assertEquals(i, ++a[0]);
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1925,1937,49>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<1938,1939,49>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<1941,1942,49>",(x)); Inst34++; } } catch(e) {}
    assertEquals(i, x);
  };
try { if (Inst35 <= 1000 && typeof (bar2) != "undefined") {_RecordType("<1952,1956,51>",(bar2)); Inst35++; } } catch(e) {}
  bar2(1.5);
try { if (Inst36 <= 1000 && typeof (bar2) != "undefined") {_RecordType("<1965,1969,52>",(bar2)); Inst36++; } } catch(e) {}
  bar2(2.5);
try { if (Inst37 <= 1000 && typeof (bar2) != "undefined") {_RecordType("<1978,1982,53>",(bar2)); Inst37++; } } catch(e) {}
  bar2(3.5);
try { if (Inst38 <= 1000 && typeof (bar2) != "undefined") {_RecordType("<1998,2002,54>",(bar2)); Inst38++; } } catch(e) {}
  return bar2;
}
try { if (Inst40 <= 1000 && typeof (foo2) != "undefined") {_RecordType("<2017,2021,56>",(foo2)); Inst40++; } } catch(e) {}
var baz2 = foo2(0.5);
try { if (Inst39 <= 1000 && typeof (baz2) != "undefined") {_RecordType("<2010,2014,56>",(baz2)); Inst39++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (baz2) != "undefined") {_RecordType("<2028,2032,57>",(baz2)); Inst41++; } } catch(e) {}
baz2(4.5);
try { if (Inst42 <= 1000 && typeof (baz2) != "undefined") {_RecordType("<2039,2043,58>",(baz2)); Inst42++; } } catch(e) {}
baz2(5.5);
try { if (Inst43 <= 1000 && typeof (baz2) != "undefined") {_RecordType("<2050,2054,59>",(baz2)); Inst43++; } } catch(e) {}
baz2(6.5);

