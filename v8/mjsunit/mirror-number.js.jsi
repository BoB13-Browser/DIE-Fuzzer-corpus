var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Test the mirror object for number values

try { if (Inst0 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<1686,1702,31>",(testNumberMirror)); Inst0++; } } catch(e) {}
function testNumberMirror(n) {
try { if (Inst1 <= 1000 && typeof (n) != "undefined") {_RecordType("<1703,1704,31>",(n)); Inst1++; } } catch(e) {}
  // Create mirror and JSON representation.
try { if (Inst3 <= 1000 && typeof (debug.MakeMirror) != "undefined") {_RecordType("<1767,1783,33>",(debug.MakeMirror)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1767,1772,33>",(debug)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (n) != "undefined") {_RecordType("<1784,1785,33>",(n)); Inst5++; } } catch(e) {}
  var mirror = debug.MakeMirror(n);
try { if (Inst2 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1758,1764,33>",(mirror)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (debug.MakeMirrorSerializer) != "undefined") {_RecordType("<1807,1833,34>",(debug.MakeMirrorSerializer)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1807,1812,34>",(debug)); Inst8++; } } catch(e) {}
  var serializer = debug.MakeMirrorSerializer();
try { if (Inst6 <= 1000 && typeof (serializer) != "undefined") {_RecordType("<1794,1804,34>",(serializer)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1850,1864,35>",(JSON.stringify)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1850,1854,35>",(JSON)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (serializer.serializeValue) != "undefined") {_RecordType("<1865,1890,35>",(serializer.serializeValue)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (serializer) != "undefined") {_RecordType("<1865,1875,35>",(serializer)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1891,1897,35>",(mirror)); Inst14++; } } catch(e) {}
  var json = JSON.stringify(serializer.serializeValue(mirror));
try { if (Inst9 <= 1000 && typeof (json) != "undefined") {_RecordType("<1843,1847,35>",(json)); Inst9++; } } catch(e) {}

  // Check the mirror hierachy.
try { if (Inst15 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1936,1946,38>",(assertTrue)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1947,1953,38>",(mirror)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (debug.Mirror) != "undefined") {_RecordType("<1965,1977,38>",(debug.Mirror)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1965,1970,38>",(debug)); Inst18++; } } catch(e) {}
  assertTrue(mirror instanceof debug.Mirror);
try { if (Inst19 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1982,1992,39>",(assertTrue)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1993,1999,39>",(mirror)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (debug.ValueMirror) != "undefined") {_RecordType("<2011,2028,39>",(debug.ValueMirror)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2011,2016,39>",(debug)); Inst22++; } } catch(e) {}
  assertTrue(mirror instanceof debug.ValueMirror);
try { if (Inst23 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2033,2043,40>",(assertTrue)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2044,2050,40>",(mirror)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (debug.NumberMirror) != "undefined") {_RecordType("<2062,2080,40>",(debug.NumberMirror)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2062,2067,40>",(debug)); Inst26++; } } catch(e) {}
  assertTrue(mirror instanceof debug.NumberMirror);

  // Check the mirror properties.
try { if (Inst27 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2120,2130,43>",(assertTrue)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (mirror.isNumber) != "undefined") {_RecordType("<2131,2146,43>",(mirror.isNumber)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2131,2137,43>",(mirror)); Inst29++; } } catch(e) {}
  assertTrue(mirror.isNumber());
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2153,2165,44>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (mirror.type) != "undefined") {_RecordType("<2176,2187,44>",(mirror.type)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2176,2182,44>",(mirror)); Inst32++; } } catch(e) {}
  assertEquals('number', mirror.type());
try { if (Inst33 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2194,2204,45>",(assertTrue)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (mirror.isPrimitive) != "undefined") {_RecordType("<2205,2223,45>",(mirror.isPrimitive)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2205,2211,45>",(mirror)); Inst35++; } } catch(e) {}
  assertTrue(mirror.isPrimitive());

  // Test text representation
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2261,2273,48>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (String) != "undefined") {_RecordType("<2274,2280,48>",(String)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (n) != "undefined") {_RecordType("<2281,2282,48>",(n)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (mirror.toText) != "undefined") {_RecordType("<2285,2298,48>",(mirror.toText)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2285,2291,48>",(mirror)); Inst40++; } } catch(e) {}
  assertEquals(String(n), mirror.toText());

  // Parse JSON representation and check.
try { if (Inst42 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2363,2367,51>",(eval)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (json) != "undefined") {_RecordType("<2374,2378,51>",(json)); Inst43++; } } catch(e) {}
  var fromJSON = eval('(' + json + ')');
try { if (Inst41 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2352,2360,51>",(fromJSON)); Inst41++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2389,2401,52>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (fromJSON.type) != "undefined") {_RecordType("<2412,2425,52>",(fromJSON.type)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2412,2420,52>",(fromJSON)); Inst46++; } } catch(e) {}
  assertEquals('number', fromJSON.type);
try { if (Inst47 <= 1000 && typeof (isFinite) != "undefined") {_RecordType("<2434,2442,53>",(isFinite)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (n) != "undefined") {_RecordType("<2443,2444,53>",(n)); Inst48++; } } catch(e) {}
  if (isFinite(n)) {
try { if (Inst49 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2453,2465,54>",(assertEquals)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (n) != "undefined") {_RecordType("<2466,2467,54>",(n)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (fromJSON.value) != "undefined") {_RecordType("<2469,2483,54>",(fromJSON.value)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2469,2477,54>",(fromJSON)); Inst52++; } } catch(e) {}
    assertEquals(n, fromJSON.value);
  } else {
    // NaN and Infinity values are encoded as strings.
try { if (Inst53 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2556,2566,57>",(assertTrue)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (fromJSON.value) != "undefined") {_RecordType("<2574,2588,57>",(fromJSON.value)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2574,2582,57>",(fromJSON)); Inst55++; } } catch(e) {}
    assertTrue(typeof fromJSON.value == 'string');
try { if (Inst56 <= 1000 && typeof (n) != "undefined") {_RecordType("<2611,2612,58>",(n)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2617,2625,58>",(Infinity)); Inst57++; } } catch(e) {}
    if (n === Infinity) {
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2635,2647,59>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (fromJSON.value) != "undefined") {_RecordType("<2660,2674,59>",(fromJSON.value)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2660,2668,59>",(fromJSON)); Inst60++; } } catch(e) {}
      assertEquals('Infinity', fromJSON.value);
try { if (Inst61 <= 1000 && typeof (n) != "undefined") {_RecordType("<2692,2693,60>",(n)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2699,2707,60>",(Infinity)); Inst62++; } } catch(e) {}
    } else if (n === -Infinity) {
try { if (Inst63 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2717,2729,61>",(assertEquals)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (fromJSON.value) != "undefined") {_RecordType("<2743,2757,61>",(fromJSON.value)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2743,2751,61>",(fromJSON)); Inst65++; } } catch(e) {}
      assertEquals('-Infinity', fromJSON.value);
    } else {
try { if (Inst66 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2779,2791,63>",(assertEquals)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (fromJSON.value) != "undefined") {_RecordType("<2799,2813,63>",(fromJSON.value)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2799,2807,63>",(fromJSON)); Inst68++; } } catch(e) {}
      assertEquals('NaN', fromJSON.value);
    }
  }
}


// Test a number of different numbers.
try { if (Inst69 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<2869,2885,70>",(testNumberMirror)); Inst69++; } } catch(e) {}
testNumberMirror(-7);
try { if (Inst70 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<2891,2907,71>",(testNumberMirror)); Inst70++; } } catch(e) {}
testNumberMirror(-6.5);
try { if (Inst71 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<2915,2931,72>",(testNumberMirror)); Inst71++; } } catch(e) {}
testNumberMirror(0);
try { if (Inst72 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<2936,2952,73>",(testNumberMirror)); Inst72++; } } catch(e) {}
testNumberMirror(42);
try { if (Inst73 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<2958,2974,74>",(testNumberMirror)); Inst73++; } } catch(e) {}
testNumberMirror(100.0002);
try { if (Inst74 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<2986,3002,75>",(testNumberMirror)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<3003,3011,75>",(Infinity)); Inst75++; } } catch(e) {}
testNumberMirror(Infinity);
try { if (Inst76 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<3014,3030,76>",(testNumberMirror)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<3032,3040,76>",(Infinity)); Inst77++; } } catch(e) {}
testNumberMirror(-Infinity);
try { if (Inst78 <= 1000 && typeof (testNumberMirror) != "undefined") {_RecordType("<3043,3059,77>",(testNumberMirror)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<3060,3063,77>",(NaN)); Inst79++; } } catch(e) {}
testNumberMirror(NaN);

