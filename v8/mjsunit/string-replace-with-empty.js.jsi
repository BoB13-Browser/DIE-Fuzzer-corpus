var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-externalize-string --expose-gc

try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<1658,1662,30>",(test)); Inst0++; } } catch(e) {}
function test() {
try { if (Inst1 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1669,1681,31>",(assertEquals)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof ("aa0bb1cc2dd3".replace) != "undefined") {_RecordType("<1690,1712,31>",("aa0bb1cc2dd3".replace)); Inst2++; } } catch(e) {}
  assertEquals("0123", "aa0bb1cc2dd3".replace(/[a-z]/g, ""));
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1731,1743,32>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof ("\u1234a0bb1cc2dd3".replace) != "undefined") {_RecordType("<1752,1779,32>",("\u1234a0bb1cc2dd3".replace)); Inst4++; } } catch(e) {}
  assertEquals("0123", "\u1234a0bb1cc2dd3".replace(/[\u1234a-z]/g, ""));

  var expected = "0123";
try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1809,1817,34>",(expected)); Inst5++; } } catch(e) {}
  var cons = "a0b1c2d3";
try { if (Inst6 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1834,1838,35>",(cons)); Inst6++; } } catch(e) {}
  for (var i = 0; i < 5; i++) {
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1864,1865,36>",(i)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1871,1872,36>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1878,1879,36>",(i)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1901,1909,37>",(expected)); Inst11++; } } catch(e) {}
    expected += expected;
try { if (Inst10 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1889,1897,37>",(expected)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1923,1927,38>",(cons)); Inst13++; } } catch(e) {}
    cons += cons;
try { if (Inst12 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1915,1919,38>",(cons)); Inst12++; } } catch(e) {}
  }
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1935,1947,40>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1948,1956,40>",(expected)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (cons.replace) != "undefined") {_RecordType("<1958,1970,40>",(cons.replace)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1958,1962,40>",(cons)); Inst17++; } } catch(e) {}
  assertEquals(expected, cons.replace(/[a-z]/g, ""));
  cons = "\u12340b1c2d3";
try { if (Inst18 <= 1000 && typeof (cons) != "undefined") {_RecordType("<1989,1993,41>",(cons)); Inst18++; } } catch(e) {}
  for (var i = 0; i < 5; i++) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<2024,2025,42>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<2031,2032,42>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2038,2039,42>",(i)); Inst21++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2057,2061,43>",(cons)); Inst23++; } } catch(e) {}
    cons += cons;
try { if (Inst22 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2049,2053,43>",(cons)); Inst22++; } } catch(e) {}
  }
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2069,2081,45>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2082,2090,45>",(expected)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (cons.replace) != "undefined") {_RecordType("<2092,2104,45>",(cons.replace)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2092,2096,45>",(cons)); Inst27++; } } catch(e) {}
  assertEquals(expected, cons.replace(/[\u1234a-z]/g, ""));

  cons = "a0b1c2d3";
try { if (Inst28 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2130,2134,47>",(cons)); Inst28++; } } catch(e) {}
  for (var i = 0; i < 5; i++) {
try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2160,2161,48>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2167,2168,48>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<2174,2175,48>",(i)); Inst31++; } } catch(e) {}
try { if (Inst33 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2193,2197,49>",(cons)); Inst33++; } } catch(e) {}
    cons += cons;
try { if (Inst32 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2185,2189,49>",(cons)); Inst32++; } } catch(e) {}
  }
try { if (Inst34 <= 1000 && typeof (externalizeString) != "undefined") {_RecordType("<2205,2222,51>",(externalizeString)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2223,2227,51>",(cons)); Inst35++; } } catch(e) {}
  externalizeString(cons, true/* force two-byte */);
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2258,2270,52>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2271,2279,52>",(expected)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (cons.replace) != "undefined") {_RecordType("<2281,2293,52>",(cons.replace)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2281,2285,52>",(cons)); Inst39++; } } catch(e) {}
  assertEquals(expected, cons.replace(/[a-z]/g, ""));
  cons = "\u12340b1c2d3";
try { if (Inst40 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2312,2316,53>",(cons)); Inst40++; } } catch(e) {}
  for (var i = 0; i < 5; i++) {
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2347,2348,54>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2354,2355,54>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (i) != "undefined") {_RecordType("<2361,2362,54>",(i)); Inst43++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2380,2384,55>",(cons)); Inst45++; } } catch(e) {}
    cons += cons;
try { if (Inst44 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2372,2376,55>",(cons)); Inst44++; } } catch(e) {}
  }
try { if (Inst46 <= 1000 && typeof (externalizeString) != "undefined") {_RecordType("<2392,2409,57>",(externalizeString)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2410,2414,57>",(cons)); Inst47++; } } catch(e) {}
  externalizeString(cons);
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2419,2431,58>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (expected) != "undefined") {_RecordType("<2432,2440,58>",(expected)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (cons.replace) != "undefined") {_RecordType("<2442,2454,58>",(cons.replace)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (cons) != "undefined") {_RecordType("<2442,2446,58>",(cons)); Inst51++; } } catch(e) {}
  assertEquals(expected, cons.replace(/[\u1234a-z]/g, ""));
}

try { if (Inst52 <= 1000 && typeof (test) != "undefined") {_RecordType("<2480,2484,61>",(test)); Inst52++; } } catch(e) {}
test();

// Clear the regexp cache to allow the GC to work.
try { if (Inst53 <= 1000 && typeof ("foo".replace) != "undefined") {_RecordType("<2540,2553,64>",("foo".replace)); Inst53++; } } catch(e) {}
"foo".replace(/foo/g, "");

// GC in order to free up things on the C side so we don't get
// a memory leak.  This makes valgrind happy.
try { if (Inst54 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2677,2679,68>",(gc)); Inst54++; } } catch(e) {}
gc();
try { if (Inst55 <= 1000 && typeof (gc) != "undefined") {_RecordType("<2683,2685,69>",(gc)); Inst55++; } } catch(e) {}
gc();

