var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}

// Simple debug event handler which counts the number of breaks hit and steps.
var break_break_point_hit_count = 0;
try { if (Inst3 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<1806,1833,33>",(break_break_point_hit_count)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1848,1856,34>",(listener)); Inst4++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst5 <= 1000 && typeof (event) != "undefined") {_RecordType("<1857,1862,34>",(event)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1864,1874,34>",(exec_state)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1876,1886,34>",(event_data)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (data) != "undefined") {_RecordType("<1888,1892,34>",(data)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (event) != "undefined") {_RecordType("<1902,1907,35>",(event)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<1911,1933,35>",(Debug.DebugEvent.Break)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1911,1927,35>",(Debug.DebugEvent)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1911,1916,35>",(Debug)); Inst12++; } } catch(e) {}
  if (event == Debug.DebugEvent.Break) {
try { if (Inst13 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<1941,1968,36>",(break_break_point_hit_count)); Inst13++; } } catch(e) {}
    break_break_point_hit_count++;
    // Continue stepping until returned to bottom frame.
try { if (Inst14 <= 1000 && typeof (exec_state.frameCount) != "undefined") {_RecordType("<2037,2058,38>",(exec_state.frameCount)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2037,2047,38>",(exec_state)); Inst15++; } } catch(e) {}
    if (exec_state.frameCount() > 1) {
try { if (Inst16 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<2074,2096,39>",(exec_state.prepareStep)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2074,2084,39>",(exec_state)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<2097,2120,39>",(Debug.StepAction.StepIn)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<2097,2113,39>",(Debug.StepAction)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2097,2102,39>",(Debug)); Inst20++; } } catch(e) {}
      exec_state.prepareStep(Debug.StepAction.StepIn);
    }

    // Test that there is a script.
try { if (Inst21 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2170,2180,43>",(assertTrue)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (event_data.func().script) != "undefined") {_RecordType("<2188,2212,43>",(event_data.func().script)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (event_data.func) != "undefined") {_RecordType("<2188,2203,43>",(event_data.func)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2188,2198,43>",(event_data)); Inst24++; } } catch(e) {}
    assertTrue(typeof(event_data.func().script()) == 'object');
  }
};

// Add the debug event listener.
try { if (Inst25 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2271,2288,48>",(Debug.setListener)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2271,2276,48>",(Debug)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2289,2297,48>",(listener)); Inst27++; } } catch(e) {}
Debug.setListener(listener);

// Test step into constructor with simple constructor.
try { if (Inst28 <= 1000 && typeof (X) != "undefined") {_RecordType("<2365,2366,51>",(X)); Inst28++; } } catch(e) {}
function X() {
}

try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<2383,2384,54>",(f)); Inst29++; } } catch(e) {}
function f() {
  debugger;
try { if (Inst30 <= 1000 && typeof (X) != "undefined") {_RecordType("<2407,2408,56>",(X)); Inst30++; } } catch(e) {}
  new X();
};

break_break_point_hit_count = 0;
try { if (Inst31 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2416,2443,59>",(break_break_point_hit_count)); Inst31++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (f) != "undefined") {_RecordType("<2449,2450,60>",(f)); Inst32++; } } catch(e) {}
f();
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2454,2466,61>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2470,2497,61>",(break_break_point_hit_count)); Inst34++; } } catch(e) {}
assertEquals(5, break_break_point_hit_count);
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<2500,2501,62>",(f)); Inst35++; } } catch(e) {}
f();
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2505,2517,63>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2522,2549,63>",(break_break_point_hit_count)); Inst37++; } } catch(e) {}
assertEquals(10, break_break_point_hit_count);
try { if (Inst38 <= 1000 && typeof (f) != "undefined") {_RecordType("<2552,2553,64>",(f)); Inst38++; } } catch(e) {}
f();
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2557,2569,65>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2574,2601,65>",(break_break_point_hit_count)); Inst40++; } } catch(e) {}
assertEquals(15, break_break_point_hit_count);

// Test step into constructor with builtin constructor.
try { if (Inst41 <= 1000 && typeof (g) != "undefined") {_RecordType("<2670,2671,68>",(g)); Inst41++; } } catch(e) {}
function g() {
  debugger;
try { if (Inst42 <= 1000 && typeof (Date) != "undefined") {_RecordType("<2694,2698,70>",(Date)); Inst42++; } } catch(e) {}
  new Date();
};

break_break_point_hit_count = 0;
try { if (Inst43 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2706,2733,73>",(break_break_point_hit_count)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (g) != "undefined") {_RecordType("<2739,2740,74>",(g)); Inst44++; } } catch(e) {}
g();
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2744,2756,75>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2760,2787,75>",(break_break_point_hit_count)); Inst46++; } } catch(e) {}
assertEquals(4, break_break_point_hit_count);

// Get rid of the debug event listener.
try { if (Inst47 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2831,2848,78>",(Debug.setListener)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2831,2836,78>",(Debug)); Inst48++; } } catch(e) {}
Debug.setListener(null);

