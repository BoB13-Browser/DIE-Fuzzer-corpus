var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1607,1615,28>",(ToUInt32)); Inst0++; } } catch(e) {}
function ToUInt32(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1616,1617,28>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1630,1631,29>",(x)); Inst2++; } } catch(e) {}
  return x >>> 0;
}

try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1642,1654,32>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1658,1666,32>",(ToUInt32)); Inst4++; } } catch(e) {}
assertEquals(0, ToUInt32(0),         "0");
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1685,1697,33>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1701,1709,33>",(ToUInt32)); Inst6++; } } catch(e) {}
assertEquals(0, ToUInt32(-0),        "-0");
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1729,1741,34>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1745,1753,34>",(ToUInt32)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1754,1762,34>",(Infinity)); Inst9++; } } catch(e) {}
assertEquals(0, ToUInt32(Infinity),  "Infinity");
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1779,1791,35>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1795,1803,35>",(ToUInt32)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1805,1813,35>",(Infinity)); Inst12++; } } catch(e) {}
assertEquals(0, ToUInt32(-Infinity), "-Infinity");
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1830,1842,36>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1846,1854,36>",(ToUInt32)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1855,1858,36>",(NaN)); Inst15++; } } catch(e) {}
assertEquals(0, ToUInt32(NaN),       "NaN");

try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1876,1888,38>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1892,1900,38>",(ToUInt32)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<1901,1917,38>",(Number.MIN_VALUE)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1901,1907,38>",(Number)); Inst19++; } } catch(e) {}
assertEquals(0, ToUInt32(Number.MIN_VALUE),  "MIN");
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1929,1941,39>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1945,1953,39>",(ToUInt32)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Number.MIN_VALUE) != "undefined") {_RecordType("<1955,1971,39>",(Number.MIN_VALUE)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1955,1961,39>",(Number)); Inst23++; } } catch(e) {}
assertEquals(0, ToUInt32(-Number.MIN_VALUE), "-MIN");
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1983,1995,40>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<1999,2007,40>",(ToUInt32)); Inst25++; } } catch(e) {}
assertEquals(0, ToUInt32(0.1),               "0.1");
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2036,2048,41>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2052,2060,41>",(ToUInt32)); Inst27++; } } catch(e) {}
assertEquals(0, ToUInt32(-0.1),              "-0.1");
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2090,2102,42>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2106,2114,42>",(ToUInt32)); Inst29++; } } catch(e) {}
assertEquals(1, ToUInt32(1),                 "1");
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2141,2153,43>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2157,2165,43>",(ToUInt32)); Inst31++; } } catch(e) {}
assertEquals(1, ToUInt32(1.1),               "1.1");

try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2195,2207,45>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2220,2228,45>",(ToUInt32)); Inst33++; } } catch(e) {}
assertEquals(4294967295, ToUInt32(-1),   "-1");
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2243,2255,46>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2268,2276,46>",(ToUInt32)); Inst35++; } } catch(e) {}
assertEquals(4294967295, ToUInt32(-1.1), "-1.1");

try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2294,2306,48>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2319,2327,48>",(ToUInt32)); Inst37++; } } catch(e) {}
assertEquals(2147483647, ToUInt32(2147483647), "2147483647");
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2356,2368,49>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2381,2389,49>",(ToUInt32)); Inst39++; } } catch(e) {}
assertEquals(2147483648, ToUInt32(2147483648), "2147483648");
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2418,2430,50>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2443,2451,50>",(ToUInt32)); Inst41++; } } catch(e) {}
assertEquals(2147483649, ToUInt32(2147483649), "2147483649");

try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2481,2493,52>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2506,2514,52>",(ToUInt32)); Inst43++; } } catch(e) {}
assertEquals(4294967295, ToUInt32(4294967295), "4294967295");
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2543,2555,53>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2568,2576,53>",(ToUInt32)); Inst45++; } } catch(e) {}
assertEquals(0,          ToUInt32(4294967296), "4294967296");
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2605,2617,54>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2630,2638,54>",(ToUInt32)); Inst47++; } } catch(e) {}
assertEquals(1,          ToUInt32(4294967297), "4294967297");

try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2668,2680,56>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2693,2701,56>",(ToUInt32)); Inst49++; } } catch(e) {}
assertEquals(2147483649, ToUInt32(-2147483647), "-2147483647");
try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2732,2744,57>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2757,2765,57>",(ToUInt32)); Inst51++; } } catch(e) {}
assertEquals(2147483648, ToUInt32(-2147483648), "-2147483648");
try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2796,2808,58>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2821,2829,58>",(ToUInt32)); Inst53++; } } catch(e) {}
assertEquals(2147483647, ToUInt32(-2147483649), "-2147483649");

try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2861,2873,60>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2886,2894,60>",(ToUInt32)); Inst55++; } } catch(e) {}
assertEquals(1,          ToUInt32(-4294967295), "-4294967295");
try { if (Inst56 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2925,2937,61>",(assertEquals)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<2950,2958,61>",(ToUInt32)); Inst57++; } } catch(e) {}
assertEquals(0,          ToUInt32(-4294967296), "-4294967296");
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2989,3001,62>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<3014,3022,62>",(ToUInt32)); Inst59++; } } catch(e) {}
assertEquals(4294967295, ToUInt32(-4294967297), "-4294967297");

try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3054,3066,64>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<3079,3087,64>",(ToUInt32)); Inst61++; } } catch(e) {}
assertEquals(2147483647, ToUInt32('2147483647'), "'2147483647'");
try { if (Inst62 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3120,3132,65>",(assertEquals)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<3145,3153,65>",(ToUInt32)); Inst63++; } } catch(e) {}
assertEquals(2147483648, ToUInt32('2147483648'), "'2147483648'");
try { if (Inst64 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3186,3198,66>",(assertEquals)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<3211,3219,66>",(ToUInt32)); Inst65++; } } catch(e) {}
assertEquals(2147483649, ToUInt32('2147483649'), "'2147483649'");

try { if (Inst66 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3253,3265,68>",(assertEquals)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<3278,3286,68>",(ToUInt32)); Inst67++; } } catch(e) {}
assertEquals(4294967295, ToUInt32('4294967295'), "'4294967295'");
try { if (Inst68 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3319,3331,69>",(assertEquals)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<3344,3352,69>",(ToUInt32)); Inst69++; } } catch(e) {}
assertEquals(0,          ToUInt32('4294967296'), "'4294967296'");
try { if (Inst70 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3385,3397,70>",(assertEquals)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (ToUInt32) != "undefined") {_RecordType("<3410,3418,70>",(ToUInt32)); Inst71++; } } catch(e) {}
assertEquals(1,          ToUInt32('4294967297'), "'4294967297'");

