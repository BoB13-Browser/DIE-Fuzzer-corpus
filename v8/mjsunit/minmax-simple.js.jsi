var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-natives-as natives
// Test the MaxSimple and MinSimple internal methods in runtime.js

try { if (Inst1 <= 1000 && typeof (natives.ImportNow) != "undefined") {_RecordType("<290,307,8>",(natives.ImportNow)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (natives) != "undefined") {_RecordType("<290,297,8>",(natives)); Inst2++; } } catch(e) {}
var MaxSimple = natives.ImportNow("MaxSimple");
try { if (Inst0 <= 1000 && typeof (MaxSimple) != "undefined") {_RecordType("<278,287,8>",(MaxSimple)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (natives.ImportNow) != "undefined") {_RecordType("<338,355,9>",(natives.ImportNow)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (natives) != "undefined") {_RecordType("<338,345,9>",(natives)); Inst5++; } } catch(e) {}
var MinSimple = natives.ImportNow("MinSimple");
try { if (Inst3 <= 1000 && typeof (MinSimple) != "undefined") {_RecordType("<326,335,9>",(MinSimple)); Inst3++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (checkEvaluations) != "undefined") {_RecordType("<380,396,11>",(checkEvaluations)); Inst6++; } } catch(e) {}
function checkEvaluations(target) {
try { if (Inst7 <= 1000 && typeof (target) != "undefined") {_RecordType("<397,403,11>",(target)); Inst7++; } } catch(e) {}
  var evaluations = 0;
try { if (Inst8 <= 1000 && typeof (evaluations) != "undefined") {_RecordType("<413,424,12>",(evaluations)); Inst8++; } } catch(e) {}
  var observedNumber = {
    valueOf: function() {
try { if (Inst10 <= 1000 && typeof (evaluations) != "undefined") {_RecordType("<487,498,15>",(evaluations)); Inst10++; } } catch(e) {}
      evaluations++;
      return 0;
    }
  };
try { if (Inst9 <= 1000 && typeof (observedNumber) != "undefined") {_RecordType("<436,450,13>",(observedNumber)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (target) != "undefined") {_RecordType("<531,537,19>",(target)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (observedNumber) != "undefined") {_RecordType("<538,552,19>",(observedNumber)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (observedNumber) != "undefined") {_RecordType("<554,568,19>",(observedNumber)); Inst13++; } } catch(e) {}
  target(observedNumber, observedNumber);
try { if (Inst14 <= 1000 && typeof (evaluations) != "undefined") {_RecordType("<580,591,20>",(evaluations)); Inst14++; } } catch(e) {}
  return evaluations;
}

try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<596,608,23>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (MaxSimple) != "undefined") {_RecordType("<612,621,23>",(MaxSimple)); Inst16++; } } catch(e) {}
assertEquals(1, MaxSimple(-1, 1));
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<631,643,24>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (checkEvaluations) != "undefined") {_RecordType("<647,663,24>",(checkEvaluations)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (MaxSimple) != "undefined") {_RecordType("<664,673,24>",(MaxSimple)); Inst19++; } } catch(e) {}
assertEquals(2, checkEvaluations(MaxSimple));

try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<678,690,26>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (MinSimple) != "undefined") {_RecordType("<695,704,26>",(MinSimple)); Inst21++; } } catch(e) {}
assertEquals(-1, MinSimple(-1, 1));
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<714,726,27>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (checkEvaluations) != "undefined") {_RecordType("<730,746,27>",(checkEvaluations)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (MinSimple) != "undefined") {_RecordType("<747,756,27>",(MinSimple)); Inst24++; } } catch(e) {}
assertEquals(2, checkEvaluations(MinSimple));

