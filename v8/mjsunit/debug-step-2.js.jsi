var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug

// This test tests that full code compiled without debug break slots
// is recompiled with debug break slots when debugging is started.

// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1848,1859,34>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1848,1853,34>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1840,1845,34>",(Debug)); Inst0++; } } catch(e) {}

var bp;
try { if (Inst3 <= 1000 && typeof (bp) != "undefined") {_RecordType("<1865,1867,36>",(bp)); Inst3++; } } catch(e) {}
var done = false;
try { if (Inst4 <= 1000 && typeof (done) != "undefined") {_RecordType("<1873,1877,37>",(done)); Inst4++; } } catch(e) {}
var step_count = 0;
try { if (Inst5 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<1891,1901,38>",(step_count)); Inst5++; } } catch(e) {}

// Debug event listener which steps until the global variable done is true.
try { if (Inst6 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1993,2001,41>",(listener)); Inst6++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst7 <= 1000 && typeof (event) != "undefined") {_RecordType("<2002,2007,41>",(event)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2009,2019,41>",(exec_state)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2021,2031,41>",(event_data)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (data) != "undefined") {_RecordType("<2033,2037,41>",(data)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (event) != "undefined") {_RecordType("<2047,2052,42>",(event)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<2056,2078,42>",(Debug.DebugEvent.Break)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<2056,2072,42>",(Debug.DebugEvent)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2056,2061,42>",(Debug)); Inst14++; } } catch(e) {}
  if (event == Debug.DebugEvent.Break) {
try { if (Inst15 <= 1000 && typeof (done) != "undefined") {_RecordType("<2091,2095,43>",(done)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<2097,2119,43>",(exec_state.prepareStep)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2097,2107,43>",(exec_state)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Debug.StepAction.StepNext) != "undefined") {_RecordType("<2120,2145,43>",(Debug.StepAction.StepNext)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<2120,2136,43>",(Debug.StepAction)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2120,2125,43>",(Debug)); Inst20++; } } catch(e) {}
    if (!done) exec_state.prepareStep(Debug.StepAction.StepNext);
try { if (Inst21 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<2152,2162,44>",(step_count)); Inst21++; } } catch(e) {}
    step_count++;
  }
};

// Set the global variables state to prpare the stepping test.
try { if (Inst22 <= 1000 && typeof (prepare_step_test) != "undefined") {_RecordType("<2246,2263,49>",(prepare_step_test)); Inst22++; } } catch(e) {}
function prepare_step_test() {
  done = false;
try { if (Inst23 <= 1000 && typeof (done) != "undefined") {_RecordType("<2270,2274,50>",(done)); Inst23++; } } catch(e) {}
  step_count = 0;
try { if (Inst24 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<2286,2296,51>",(step_count)); Inst24++; } } catch(e) {}
}

// Test function to step through.
try { if (Inst25 <= 1000 && typeof (f) != "undefined") {_RecordType("<2348,2349,55>",(f)); Inst25++; } } catch(e) {}
function f() {
  var i = 1;
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2360,2361,56>",(i)); Inst26++; } } catch(e) {}
  var j = 2;
try { if (Inst27 <= 1000 && typeof (j) != "undefined") {_RecordType("<2373,2374,57>",(j)); Inst27++; } } catch(e) {}
  done = true;
try { if (Inst28 <= 1000 && typeof (done) != "undefined") {_RecordType("<2382,2386,58>",(done)); Inst28++; } } catch(e) {}
};

try { if (Inst29 <= 1000 && typeof (prepare_step_test) != "undefined") {_RecordType("<2399,2416,61>",(prepare_step_test)); Inst29++; } } catch(e) {}
prepare_step_test();
try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<2420,2421,62>",(f)); Inst30++; } } catch(e) {}
f();

// Add the debug event listener.
try { if (Inst31 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2459,2476,65>",(Debug.setListener)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2459,2464,65>",(Debug)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2477,2485,65>",(listener)); Inst33++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst35 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<2494,2513,67>",(Debug.setBreakPoint)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2494,2499,67>",(Debug)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<2514,2515,67>",(f)); Inst37++; } } catch(e) {}
bp = Debug.setBreakPoint(f, 1);
try { if (Inst34 <= 1000 && typeof (bp) != "undefined") {_RecordType("<2489,2491,67>",(bp)); Inst34++; } } catch(e) {}

try { if (Inst38 <= 1000 && typeof (prepare_step_test) != "undefined") {_RecordType("<2522,2539,69>",(prepare_step_test)); Inst38++; } } catch(e) {}
prepare_step_test();
try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<2543,2544,70>",(f)); Inst39++; } } catch(e) {}
f();
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2548,2560,71>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<2564,2574,71>",(step_count)); Inst41++; } } catch(e) {}
assertEquals(4, step_count);
try { if (Inst42 <= 1000 && typeof (Debug.clearBreakPoint) != "undefined") {_RecordType("<2577,2598,72>",(Debug.clearBreakPoint)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2577,2582,72>",(Debug)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (bp) != "undefined") {_RecordType("<2599,2601,72>",(bp)); Inst44++; } } catch(e) {}
Debug.clearBreakPoint(bp);

// Set a breakpoint on the first var statement (line 1).
try { if (Inst46 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<2667,2686,75>",(Debug.setBreakPoint)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2667,2672,75>",(Debug)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (f) != "undefined") {_RecordType("<2687,2688,75>",(f)); Inst48++; } } catch(e) {}
bp = Debug.setBreakPoint(f, 1);
try { if (Inst45 <= 1000 && typeof (bp) != "undefined") {_RecordType("<2662,2664,75>",(bp)); Inst45++; } } catch(e) {}

// Step through the function ensuring that the var statements are hit as well.
try { if (Inst49 <= 1000 && typeof (prepare_step_test) != "undefined") {_RecordType("<2774,2791,78>",(prepare_step_test)); Inst49++; } } catch(e) {}
prepare_step_test();
try { if (Inst50 <= 1000 && typeof (f) != "undefined") {_RecordType("<2795,2796,79>",(f)); Inst50++; } } catch(e) {}
f();
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2800,2812,80>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<2816,2826,80>",(step_count)); Inst52++; } } catch(e) {}
assertEquals(4, step_count);

// Clear the breakpoint and check that no stepping happens.
try { if (Inst53 <= 1000 && typeof (Debug.clearBreakPoint) != "undefined") {_RecordType("<2890,2911,83>",(Debug.clearBreakPoint)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2890,2895,83>",(Debug)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (bp) != "undefined") {_RecordType("<2912,2914,83>",(bp)); Inst55++; } } catch(e) {}
Debug.clearBreakPoint(bp);
try { if (Inst56 <= 1000 && typeof (prepare_step_test) != "undefined") {_RecordType("<2917,2934,84>",(prepare_step_test)); Inst56++; } } catch(e) {}
prepare_step_test();
try { if (Inst57 <= 1000 && typeof (f) != "undefined") {_RecordType("<2938,2939,85>",(f)); Inst57++; } } catch(e) {}
f();
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2943,2955,86>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<2959,2969,86>",(step_count)); Inst59++; } } catch(e) {}
assertEquals(0, step_count);

// Get rid of the debug event listener.
try { if (Inst60 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<3013,3030,89>",(Debug.setListener)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<3013,3018,89>",(Debug)); Inst61++; } } catch(e) {}
Debug.setListener(null);

