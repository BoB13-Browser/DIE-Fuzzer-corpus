var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}

// Simple debug event handler which first time hit will perform 1000 steps and
// second time hit will evaluate and store the value of "i". If requires that
// the global property "state" is initially zero.

var bp1, bp2;
try { if (Inst3 <= 1000 && typeof (bp1) != "undefined") {_RecordType("<1935,1938,36>",(bp1)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (bp2) != "undefined") {_RecordType("<1940,1943,36>",(bp2)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1955,1963,38>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<1964,1969,38>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1971,1981,38>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1983,1993,38>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1995,1999,38>",(data)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<2009,2014,39>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<2018,2040,39>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<2018,2034,39>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2018,2023,39>",(Debug)); Inst13++; } } catch(e) {}
  if (event == Debug.DebugEvent.Break) {
try { if (Inst14 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<2052,2062,40>",(step_count)); Inst14++; } } catch(e) {}
    if (step_count > 0) {
try { if (Inst15 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<2076,2098,41>",(exec_state.prepareStep)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2076,2086,41>",(exec_state)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<2099,2122,41>",(Debug.StepAction.StepIn)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<2099,2115,41>",(Debug.StepAction)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2099,2104,41>",(Debug)); Inst19++; } } catch(e) {}
      exec_state.prepareStep(Debug.StepAction.StepIn);
try { if (Inst20 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<2131,2141,42>",(step_count)); Inst20++; } } catch(e) {}
      step_count--;
    } else {
try { if (Inst22 <= 1000 && typeof (exec_state.frame().evaluate("i").value) != "undefined") {_RecordType("<2173,2211,44>",(exec_state.frame().evaluate("i").value)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (exec_state.frame().evaluate) != "undefined") {_RecordType("<2173,2200,44>",(exec_state.frame().evaluate)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<2173,2189,44>",(exec_state.frame)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2173,2183,44>",(exec_state)); Inst25++; } } catch(e) {}
      result = exec_state.frame().evaluate("i").value();
try { if (Inst21 <= 1000 && typeof (result) != "undefined") {_RecordType("<2164,2170,44>",(result)); Inst21++; } } catch(e) {}
      // Clear the break point on line 2 if set.
try { if (Inst26 <= 1000 && typeof (bp2) != "undefined") {_RecordType("<2274,2277,46>",(bp2)); Inst26++; } } catch(e) {}
      if (bp2) {
try { if (Inst27 <= 1000 && typeof (Debug.clearBreakPoint) != "undefined") {_RecordType("<2289,2310,47>",(Debug.clearBreakPoint)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2289,2294,47>",(Debug)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (bp2) != "undefined") {_RecordType("<2311,2314,47>",(bp2)); Inst29++; } } catch(e) {}
        Debug.clearBreakPoint(bp2);
      }
    }
  }
};

// Add the debug event listener.
try { if (Inst30 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2372,2389,54>",(Debug.setListener)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2372,2377,54>",(Debug)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2390,2398,54>",(listener)); Inst32++; } } catch(e) {}
Debug.setListener(listener);

// Test debug event for break point.
try { if (Inst33 <= 1000 && typeof (f) != "undefined") {_RecordType("<2448,2449,57>",(f)); Inst33++; } } catch(e) {}
function f() {
  var i;                        // Line 1.
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<2460,2461,58>",(i)); Inst34++; } } catch(e) {}
  for (i = 0; i < 1000; i++) {  // Line 2.
try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2504,2505,59>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<2511,2512,59>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<2521,2522,59>",(i)); Inst37++; } } catch(e) {}
    x = 1;                      // Line 3.
try { if (Inst38 <= 1000 && typeof (x) != "undefined") {_RecordType("<2544,2545,60>",(x)); Inst38++; } } catch(e) {}
  }
};

// Set a breakpoint on the for statement (line 1).
try { if (Inst40 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<2648,2667,65>",(Debug.setBreakPoint)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2648,2653,65>",(Debug)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (f) != "undefined") {_RecordType("<2668,2669,65>",(f)); Inst42++; } } catch(e) {}
bp1 = Debug.setBreakPoint(f, 1);
try { if (Inst39 <= 1000 && typeof (bp1) != "undefined") {_RecordType("<2642,2645,65>",(bp1)); Inst39++; } } catch(e) {}

// Check that performing 1000 steps will make i 333.
var step_count = 1000;
try { if (Inst43 <= 1000 && typeof (step_count) != "undefined") {_RecordType("<2733,2743,68>",(step_count)); Inst43++; } } catch(e) {}
result = -1;
try { if (Inst44 <= 1000 && typeof (result) != "undefined") {_RecordType("<2752,2758,69>",(result)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (f) != "undefined") {_RecordType("<2765,2766,70>",(f)); Inst45++; } } catch(e) {}
f();
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2770,2782,71>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (result) != "undefined") {_RecordType("<2788,2794,71>",(result)); Inst47++; } } catch(e) {}
assertEquals(333, result);
try { if (Inst48 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2797,2814,72>",(Debug.setListener)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2797,2802,72>",(Debug)); Inst49++; } } catch(e) {}
Debug.setListener(null);

