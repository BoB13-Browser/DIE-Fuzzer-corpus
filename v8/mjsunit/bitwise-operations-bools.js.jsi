var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test bitwise operations with booleans.

var t = 1;
try { if (Inst0 <= 1000 && typeof (t) != "undefined") {_RecordType("<1645,1646,30>",(t)); Inst0++; } } catch(e) {}

try { if (Inst1 <= 1000 && typeof (testFalseLeftHandSide) != "undefined") {_RecordType("<1662,1683,32>",(testFalseLeftHandSide)); Inst1++; } } catch(e) {}
function testFalseLeftHandSide() {
  var b;
try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1694,1695,33>",(b)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (t) != "undefined") {_RecordType("<1703,1704,34>",(t)); Inst3++; } } catch(e) {}
  if (t) b = false;
try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<1706,1707,34>",(b)); Inst4++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1719,1731,35>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<1732,1733,35>",(b)); Inst6++; } } catch(e) {}
  assertEquals(b | 1, 1);
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1745,1757,36>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<1758,1759,36>",(b)); Inst8++; } } catch(e) {}
  assertEquals(b & 1, 0);
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1771,1783,37>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<1784,1785,37>",(b)); Inst10++; } } catch(e) {}
  assertEquals(b ^ 1, 1);
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1797,1809,38>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<1810,1811,38>",(b)); Inst12++; } } catch(e) {}
  assertEquals(b << 1, 0);
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1824,1836,39>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<1837,1838,39>",(b)); Inst14++; } } catch(e) {}
  assertEquals(b >> 1, 0);
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1851,1863,40>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (b) != "undefined") {_RecordType("<1864,1865,40>",(b)); Inst16++; } } catch(e) {}
  assertEquals(b >>> 1, 0);
}

try { if (Inst17 <= 1000 && typeof (testFalseRightHandSide) != "undefined") {_RecordType("<1889,1911,43>",(testFalseRightHandSide)); Inst17++; } } catch(e) {}
function testFalseRightHandSide() {
try { if (Inst18 <= 1000 && typeof (t) != "undefined") {_RecordType("<1922,1923,44>",(t)); Inst18++; } } catch(e) {}
  if (t) b = false;
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<1925,1926,44>",(b)); Inst19++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1938,1950,45>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (b) != "undefined") {_RecordType("<1957,1958,45>",(b)); Inst21++; } } catch(e) {}
  assertEquals(1 |   b, 1);
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1966,1978,46>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<1985,1986,46>",(b)); Inst23++; } } catch(e) {}
  assertEquals(1 &   b, 0);
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1994,2006,47>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (b) != "undefined") {_RecordType("<2013,2014,47>",(b)); Inst25++; } } catch(e) {}
  assertEquals(1 ^   b, 1);
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2022,2034,48>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (b) != "undefined") {_RecordType("<2041,2042,48>",(b)); Inst27++; } } catch(e) {}
  assertEquals(1 <<  b, 1);
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2050,2062,49>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (b) != "undefined") {_RecordType("<2069,2070,49>",(b)); Inst29++; } } catch(e) {}
  assertEquals(1 >>  b, 1);
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2078,2090,50>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (b) != "undefined") {_RecordType("<2097,2098,50>",(b)); Inst31++; } } catch(e) {}
  assertEquals(1 >>> b, 1);
}

try { if (Inst32 <= 1000 && typeof (testTrueLeftHandSide) != "undefined") {_RecordType("<2116,2136,53>",(testTrueLeftHandSide)); Inst32++; } } catch(e) {}
function testTrueLeftHandSide() {
try { if (Inst33 <= 1000 && typeof (t) != "undefined") {_RecordType("<2147,2148,54>",(t)); Inst33++; } } catch(e) {}
  if (t) b = true;
try { if (Inst34 <= 1000 && typeof (b) != "undefined") {_RecordType("<2150,2151,54>",(b)); Inst34++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2162,2174,55>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (b) != "undefined") {_RecordType("<2175,2176,55>",(b)); Inst36++; } } catch(e) {}
  assertEquals(b | 1, 1);
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2188,2200,56>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (b) != "undefined") {_RecordType("<2201,2202,56>",(b)); Inst38++; } } catch(e) {}
  assertEquals(b & 1, 1);
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2214,2226,57>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (b) != "undefined") {_RecordType("<2227,2228,57>",(b)); Inst40++; } } catch(e) {}
  assertEquals(b ^ 1, 0);
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2240,2252,58>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (b) != "undefined") {_RecordType("<2253,2254,58>",(b)); Inst42++; } } catch(e) {}
  assertEquals(b << 1, 2);
try { if (Inst43 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2267,2279,59>",(assertEquals)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (b) != "undefined") {_RecordType("<2280,2281,59>",(b)); Inst44++; } } catch(e) {}
  assertEquals(b >> 1, 0);
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2294,2306,60>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (b) != "undefined") {_RecordType("<2307,2308,60>",(b)); Inst46++; } } catch(e) {}
  assertEquals(b >>> 1, 0);
}

try { if (Inst47 <= 1000 && typeof (testTrueRightHandSide) != "undefined") {_RecordType("<2332,2353,63>",(testTrueRightHandSide)); Inst47++; } } catch(e) {}
function testTrueRightHandSide() {
try { if (Inst48 <= 1000 && typeof (t) != "undefined") {_RecordType("<2364,2365,64>",(t)); Inst48++; } } catch(e) {}
  if (t) b = true;
try { if (Inst49 <= 1000 && typeof (b) != "undefined") {_RecordType("<2367,2368,64>",(b)); Inst49++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2379,2391,65>",(assertEquals)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (b) != "undefined") {_RecordType("<2398,2399,65>",(b)); Inst51++; } } catch(e) {}
  assertEquals(1 |   b, 1);
try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2407,2419,66>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (b) != "undefined") {_RecordType("<2426,2427,66>",(b)); Inst53++; } } catch(e) {}
  assertEquals(1 &   b, 1);
try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2435,2447,67>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (b) != "undefined") {_RecordType("<2454,2455,67>",(b)); Inst55++; } } catch(e) {}
  assertEquals(1 ^   b, 0);
try { if (Inst56 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2463,2475,68>",(assertEquals)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (b) != "undefined") {_RecordType("<2482,2483,68>",(b)); Inst57++; } } catch(e) {}
  assertEquals(1 <<  b, 2);
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2491,2503,69>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (b) != "undefined") {_RecordType("<2510,2511,69>",(b)); Inst59++; } } catch(e) {}
  assertEquals(1 >>  b, 0);
try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2519,2531,70>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (b) != "undefined") {_RecordType("<2538,2539,70>",(b)); Inst61++; } } catch(e) {}
  assertEquals(1 >>> b, 0);
}

try { if (Inst62 <= 1000 && typeof (testBothSides) != "undefined") {_RecordType("<2557,2570,73>",(testBothSides)); Inst62++; } } catch(e) {}
function testBothSides() {
try { if (Inst63 <= 1000 && typeof (t) != "undefined") {_RecordType("<2581,2582,74>",(t)); Inst63++; } } catch(e) {}
  if (t) a = true;
try { if (Inst64 <= 1000 && typeof (a) != "undefined") {_RecordType("<2584,2585,74>",(a)); Inst64++; } } catch(e) {}
try { if (Inst65 <= 1000 && typeof (t) != "undefined") {_RecordType("<2600,2601,75>",(t)); Inst65++; } } catch(e) {}
  if (t) b = false;
try { if (Inst66 <= 1000 && typeof (b) != "undefined") {_RecordType("<2603,2604,75>",(b)); Inst66++; } } catch(e) {}
try { if (Inst67 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2616,2628,76>",(assertEquals)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (a) != "undefined") {_RecordType("<2629,2630,76>",(a)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (b) != "undefined") {_RecordType("<2635,2636,76>",(b)); Inst69++; } } catch(e) {}
  assertEquals(a |   b, 1);
try { if (Inst70 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2644,2656,77>",(assertEquals)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (a) != "undefined") {_RecordType("<2657,2658,77>",(a)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (b) != "undefined") {_RecordType("<2663,2664,77>",(b)); Inst72++; } } catch(e) {}
  assertEquals(a &   b, 0);
try { if (Inst73 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2672,2684,78>",(assertEquals)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (a) != "undefined") {_RecordType("<2685,2686,78>",(a)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (b) != "undefined") {_RecordType("<2691,2692,78>",(b)); Inst75++; } } catch(e) {}
  assertEquals(a ^   b, 1);
try { if (Inst76 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2700,2712,79>",(assertEquals)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (a) != "undefined") {_RecordType("<2713,2714,79>",(a)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (b) != "undefined") {_RecordType("<2719,2720,79>",(b)); Inst78++; } } catch(e) {}
  assertEquals(a <<  b, 1);
try { if (Inst79 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2728,2740,80>",(assertEquals)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (a) != "undefined") {_RecordType("<2741,2742,80>",(a)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (b) != "undefined") {_RecordType("<2747,2748,80>",(b)); Inst81++; } } catch(e) {}
  assertEquals(a >>  b, 1);
try { if (Inst82 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2756,2768,81>",(assertEquals)); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (a) != "undefined") {_RecordType("<2769,2770,81>",(a)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (b) != "undefined") {_RecordType("<2775,2776,81>",(b)); Inst84++; } } catch(e) {}
  assertEquals(a >>> b, 1);
}


try { if (Inst85 <= 1000 && typeof (testFalseLeftHandSide) != "undefined") {_RecordType("<2786,2807,85>",(testFalseLeftHandSide)); Inst85++; } } catch(e) {}
testFalseLeftHandSide();
try { if (Inst86 <= 1000 && typeof (testFalseRightHandSide) != "undefined") {_RecordType("<2811,2833,86>",(testFalseRightHandSide)); Inst86++; } } catch(e) {}
testFalseRightHandSide();
try { if (Inst87 <= 1000 && typeof (testTrueLeftHandSide) != "undefined") {_RecordType("<2837,2857,87>",(testTrueLeftHandSide)); Inst87++; } } catch(e) {}
testTrueLeftHandSide();
try { if (Inst88 <= 1000 && typeof (testTrueRightHandSide) != "undefined") {_RecordType("<2861,2882,88>",(testTrueRightHandSide)); Inst88++; } } catch(e) {}
testTrueRightHandSide();
try { if (Inst89 <= 1000 && typeof (testFalseLeftHandSide) != "undefined") {_RecordType("<2886,2907,89>",(testFalseLeftHandSide)); Inst89++; } } catch(e) {}
testFalseLeftHandSide();
try { if (Inst90 <= 1000 && typeof (testFalseRightHandSide) != "undefined") {_RecordType("<2911,2933,90>",(testFalseRightHandSide)); Inst90++; } } catch(e) {}
testFalseRightHandSide();
try { if (Inst91 <= 1000 && typeof (testTrueLeftHandSide) != "undefined") {_RecordType("<2937,2957,91>",(testTrueLeftHandSide)); Inst91++; } } catch(e) {}
testTrueLeftHandSide();
try { if (Inst92 <= 1000 && typeof (testTrueRightHandSide) != "undefined") {_RecordType("<2961,2982,92>",(testTrueRightHandSide)); Inst92++; } } catch(e) {}
testTrueRightHandSide();
try { if (Inst93 <= 1000 && typeof (testBothSides) != "undefined") {_RecordType("<2986,2999,93>",(testBothSides)); Inst93++; } } catch(e) {}
testBothSides();
try { if (Inst94 <= 1000 && typeof (testBothSides) != "undefined") {_RecordType("<3003,3016,94>",(testBothSides)); Inst94++; } } catch(e) {}
testBothSides();

