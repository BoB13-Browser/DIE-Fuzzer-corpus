var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug --noalways-opt
// Get the Debug object exposed from the debug context global object.


try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1727,1738,32>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1727,1732,32>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1719,1724,32>",(Debug)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1740,1744,34>",(eval)); Inst3++; } } catch(e) {}
eval("function ChooseAnimal(p) {\n " +
     "  if (p == 7) {\n" + // Use p
     "    return;\n" +
     "  }\n" +
     "  return function Chooser() {\n" +
     "    return 'Cat';\n" +
     "  };\n" +
     "}\n");

try { if (Inst5 <= 1000 && typeof (ChooseAnimal) != "undefined") {_RecordType("<1971,1983,43>",(ChooseAnimal)); Inst5++; } } catch(e) {}
var old_closure = ChooseAnimal(19);
try { if (Inst4 <= 1000 && typeof (old_closure) != "undefined") {_RecordType("<1957,1968,43>",(old_closure)); Inst4++; } } catch(e) {}

try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1990,2002,45>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (old_closure) != "undefined") {_RecordType("<2010,2021,45>",(old_closure)); Inst7++; } } catch(e) {}
assertEquals("Cat", old_closure());

try { if (Inst9 <= 1000 && typeof (Debug.findScript) != "undefined") {_RecordType("<2040,2056,47>",(Debug.findScript)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2040,2045,47>",(Debug)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ChooseAnimal) != "undefined") {_RecordType("<2057,2069,47>",(ChooseAnimal)); Inst11++; } } catch(e) {}
var script = Debug.findScript(ChooseAnimal);
try { if (Inst8 <= 1000 && typeof (script) != "undefined") {_RecordType("<2031,2037,47>",(script)); Inst8++; } } catch(e) {}

var orig_animal = "'Cat'";
try { if (Inst12 <= 1000 && typeof (orig_animal) != "undefined") {_RecordType("<2077,2088,49>",(orig_animal)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (script.source.indexOf) != "undefined") {_RecordType("<2116,2137,50>",(script.source.indexOf)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (script.source) != "undefined") {_RecordType("<2116,2129,50>",(script.source)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (script) != "undefined") {_RecordType("<2116,2122,50>",(script)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (orig_animal) != "undefined") {_RecordType("<2138,2149,50>",(orig_animal)); Inst17++; } } catch(e) {}
var patch_pos = script.source.indexOf(orig_animal);
try { if (Inst13 <= 1000 && typeof (patch_pos) != "undefined") {_RecordType("<2104,2113,50>",(patch_pos)); Inst13++; } } catch(e) {}
var new_animal_patch = "'Capybara' + p";
try { if (Inst18 <= 1000 && typeof (new_animal_patch) != "undefined") {_RecordType("<2156,2172,51>",(new_animal_patch)); Inst18++; } } catch(e) {}

// We patch innermost function "Chooser".
// However, this does not actually patch existing "Chooser" instances,
// because old value of parameter "p" was not saved.
// Instead it patches ChooseAnimal.
try { if (Inst20 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2417,2422,57>",(Array)); Inst20++; } } catch(e) {}
var change_log = new Array();
try { if (Inst19 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2400,2410,57>",(change_log)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (Debug.LiveEdit.TestApi.ApplySingleChunkPatch) != "undefined") {_RecordType("<2426,2470,58>",(Debug.LiveEdit.TestApi.ApplySingleChunkPatch)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Debug.LiveEdit.TestApi) != "undefined") {_RecordType("<2426,2448,58>",(Debug.LiveEdit.TestApi)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (Debug.LiveEdit) != "undefined") {_RecordType("<2426,2440,58>",(Debug.LiveEdit)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2426,2431,58>",(Debug)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (script) != "undefined") {_RecordType("<2471,2477,58>",(script)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (patch_pos) != "undefined") {_RecordType("<2479,2488,58>",(patch_pos)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (orig_animal.length) != "undefined") {_RecordType("<2490,2508,58>",(orig_animal.length)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (orig_animal) != "undefined") {_RecordType("<2490,2501,58>",(orig_animal)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (new_animal_patch) != "undefined") {_RecordType("<2510,2526,58>",(new_animal_patch)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2528,2538,58>",(change_log)); Inst30++; } } catch(e) {}
Debug.LiveEdit.TestApi.ApplySingleChunkPatch(script, patch_pos, orig_animal.length, new_animal_patch, change_log);
try { if (Inst31 <= 1000 && typeof (print) != "undefined") {_RecordType("<2541,2546,59>",(print)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<2564,2578,59>",(JSON.stringify)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<2564,2568,59>",(JSON)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2579,2589,59>",(change_log)); Inst34++; } } catch(e) {}
print("Change log: " + JSON.stringify(change_log) + "\n");

try { if (Inst36 <= 1000 && typeof (ChooseAnimal) != "undefined") {_RecordType("<2619,2631,61>",(ChooseAnimal)); Inst36++; } } catch(e) {}
var new_closure = ChooseAnimal(19);
try { if (Inst35 <= 1000 && typeof (new_closure) != "undefined") {_RecordType("<2605,2616,61>",(new_closure)); Inst35++; } } catch(e) {}
// New instance of closure is patched.
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2676,2688,63>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (new_closure) != "undefined") {_RecordType("<2703,2714,63>",(new_closure)); Inst38++; } } catch(e) {}
assertEquals("Capybara19", new_closure());

// Old instance of closure is not patched.
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2763,2775,66>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (old_closure) != "undefined") {_RecordType("<2783,2794,66>",(old_closure)); Inst40++; } } catch(e) {}
assertEquals("Cat", old_closure());

