var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * @fileoverview Check that flattening deep trees of cons strings does not
 * cause stack overflows.
 */

try { if (Inst0 <= 1000 && typeof (newdeep) != "undefined") {_RecordType("<1717,1724,33>",(newdeep)); Inst0++; } } catch(e) {}
function newdeep(start, depth) {
try { if (Inst1 <= 1000 && typeof (start) != "undefined") {_RecordType("<1725,1730,33>",(start)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (depth) != "undefined") {_RecordType("<1732,1737,33>",(depth)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (start) != "undefined") {_RecordType("<1751,1756,34>",(start)); Inst4++; } } catch(e) {}
  var d = start;
try { if (Inst3 <= 1000 && typeof (d) != "undefined") {_RecordType("<1747,1748,34>",(d)); Inst3++; } } catch(e) {}
  for (var i = 0; i < depth; i++) {
try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1769,1770,35>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1776,1777,35>",(i)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (depth) != "undefined") {_RecordType("<1780,1785,35>",(depth)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1787,1788,35>",(i)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (d) != "undefined") {_RecordType("<1802,1803,36>",(d)); Inst10++; } } catch(e) {}
    d = d + "f";
try { if (Inst9 <= 1000 && typeof (d) != "undefined") {_RecordType("<1798,1799,36>",(d)); Inst9++; } } catch(e) {}
  }
try { if (Inst11 <= 1000 && typeof (d) != "undefined") {_RecordType("<1824,1825,38>",(d)); Inst11++; } } catch(e) {}
  return d;
}

var default_depth = 110000;
try { if (Inst12 <= 1000 && typeof (default_depth) != "undefined") {_RecordType("<1834,1847,41>",(default_depth)); Inst12++; } } catch(e) {}

try { if (Inst14 <= 1000 && typeof (newdeep) != "undefined") {_RecordType("<1870,1877,43>",(newdeep)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (default_depth) != "undefined") {_RecordType("<1885,1898,43>",(default_depth)); Inst15++; } } catch(e) {}
var deep = newdeep("foo", default_depth);
try { if (Inst13 <= 1000 && typeof (deep) != "undefined") {_RecordType("<1863,1867,43>",(deep)); Inst13++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1901,1913,44>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (deep[0]) != "undefined") {_RecordType("<1919,1926,44>",(deep[0])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (deep) != "undefined") {_RecordType("<1919,1923,44>",(deep)); Inst18++; } } catch(e) {}
assertEquals('f', deep[0]);

try { if (Inst20 <= 1000 && typeof (newdeep) != "undefined") {_RecordType("<1941,1948,46>",(newdeep)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (default_depth) != "undefined") {_RecordType("<1954,1967,46>",(default_depth)); Inst21++; } } catch(e) {}
var cmp1 = newdeep("a", default_depth);
try { if (Inst19 <= 1000 && typeof (cmp1) != "undefined") {_RecordType("<1934,1938,46>",(cmp1)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (newdeep) != "undefined") {_RecordType("<1981,1988,47>",(newdeep)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (default_depth) != "undefined") {_RecordType("<1994,2007,47>",(default_depth)); Inst24++; } } catch(e) {}
var cmp2 = newdeep("b", default_depth);
try { if (Inst22 <= 1000 && typeof (cmp2) != "undefined") {_RecordType("<1974,1978,47>",(cmp2)); Inst22++; } } catch(e) {}

try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2011,2023,49>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (cmp1.localeCompare) != "undefined") {_RecordType("<2028,2046,49>",(cmp1.localeCompare)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (cmp1) != "undefined") {_RecordType("<2028,2032,49>",(cmp1)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (cmp2) != "undefined") {_RecordType("<2047,2051,49>",(cmp2)); Inst28++; } } catch(e) {}
assertEquals(-1, cmp1.localeCompare(cmp2), "ab");

try { if (Inst30 <= 1000 && typeof (newdeep) != "undefined") {_RecordType("<2078,2085,51>",(newdeep)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (default_depth) != "undefined") {_RecordType("<2091,2104,51>",(default_depth)); Inst31++; } } catch(e) {}
var cmp2empty = newdeep("c", default_depth);
try { if (Inst29 <= 1000 && typeof (cmp2empty) != "undefined") {_RecordType("<2066,2075,51>",(cmp2empty)); Inst29++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2107,2117,52>",(assertTrue)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (cmp2empty.localeCompare) != "undefined") {_RecordType("<2118,2141,52>",(cmp2empty.localeCompare)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (cmp2empty) != "undefined") {_RecordType("<2118,2127,52>",(cmp2empty)); Inst34++; } } catch(e) {}
assertTrue(cmp2empty.localeCompare("") > 0, "c");

try { if (Inst36 <= 1000 && typeof (newdeep) != "undefined") {_RecordType("<2174,2181,54>",(newdeep)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (default_depth) != "undefined") {_RecordType("<2187,2200,54>",(default_depth)); Inst37++; } } catch(e) {}
var cmp3empty = newdeep("d", default_depth);
try { if (Inst35 <= 1000 && typeof (cmp3empty) != "undefined") {_RecordType("<2162,2171,54>",(cmp3empty)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2203,2213,55>",(assertTrue)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof ("".localeCompare) != "undefined") {_RecordType("<2214,2230,55>",("".localeCompare)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (cmp3empty) != "undefined") {_RecordType("<2231,2240,55>",(cmp3empty)); Inst40++; } } catch(e) {}
assertTrue("".localeCompare(cmp3empty) < 0), "d";

var slicer_depth = 1100;
try { if (Inst41 <= 1000 && typeof (slicer_depth) != "undefined") {_RecordType("<2258,2270,57>",(slicer_depth)); Inst41++; } } catch(e) {}

try { if (Inst43 <= 1000 && typeof (newdeep) != "undefined") {_RecordType("<2293,2300,59>",(newdeep)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (slicer_depth) != "undefined") {_RecordType("<2310,2322,59>",(slicer_depth)); Inst44++; } } catch(e) {}
var slicer = newdeep("slice", slicer_depth);
try { if (Inst42 <= 1000 && typeof (slicer) != "undefined") {_RecordType("<2284,2290,59>",(slicer)); Inst42++; } } catch(e) {}

for (i = 0; i < slicer_depth + 4; i += 2) {
try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2331,2332,61>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<2338,2339,61>",(i)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (slicer_depth) != "undefined") {_RecordType("<2342,2354,61>",(slicer_depth)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<2360,2361,61>",(i)); Inst48++; } } catch(e) {}
try { if (Inst50 <= 1000 && typeof (slicer.slice) != "undefined") {_RecordType("<2382,2394,62>",(slicer.slice)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (slicer) != "undefined") {_RecordType("<2382,2388,62>",(slicer)); Inst51++; } } catch(e) {}
  slicer =  slicer.slice(1, -1);
try { if (Inst49 <= 1000 && typeof (slicer) != "undefined") {_RecordType("<2372,2378,62>",(slicer)); Inst49++; } } catch(e) {}
}

try { if (Inst52 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2406,2418,65>",(assertEquals)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (slicer[0]) != "undefined") {_RecordType("<2424,2433,65>",(slicer[0])); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (slicer) != "undefined") {_RecordType("<2424,2430,65>",(slicer)); Inst54++; } } catch(e) {}
assertEquals("f", slicer[0]);
try { if (Inst55 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2436,2448,66>",(assertEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (slicer.length) != "undefined") {_RecordType("<2452,2465,66>",(slicer.length)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (slicer) != "undefined") {_RecordType("<2452,2458,66>",(slicer)); Inst57++; } } catch(e) {}
assertEquals(1, slicer.length);

