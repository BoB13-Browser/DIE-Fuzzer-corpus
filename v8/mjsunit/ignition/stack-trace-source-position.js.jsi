var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --ignition-filter=f
// Flags: --no-turbo

// TODO(yangguo): fix for turbofan

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<265,266,10>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<267,268,10>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<278,279,11>",(x)); Inst2++; } } catch(e) {}
  if (x == 0) {
try { if (Inst3 <= 1000 && typeof (new Error().stack) != "undefined") {_RecordType("<299,316,12>",(new Error().stack)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Error) != "undefined") {_RecordType("<303,308,12>",(Error)); Inst4++; } } catch(e) {}
    return new Error().stack;
  }
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<331,332,14>",(f)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<333,334,14>",(x)); Inst6++; } } catch(e) {}
  return f(x - 1);
}

try { if (Inst8 <= 1000 && typeof (f(2).split) != "undefined") {_RecordType("<362,372,17>",(f(2).split)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<362,363,17>",(f)); Inst9++; } } catch(e) {}
var stack_lines = f(2).split("\n");
try { if (Inst7 <= 1000 && typeof (stack_lines) != "undefined") {_RecordType("<348,359,17>",(stack_lines)); Inst7++; } } catch(e) {}

try { if (Inst10 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<381,391,19>",(assertTrue)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (/at f \(.*?:12:12\)/.test) != "undefined") {_RecordType("<392,417,19>",(/at f \(.*?:12:12\)/.test)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (stack_lines[1]) != "undefined") {_RecordType("<418,432,19>",(stack_lines[1])); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (stack_lines) != "undefined") {_RecordType("<418,429,19>",(stack_lines)); Inst13++; } } catch(e) {}
assertTrue(/at f \(.*?:12:12\)/.test(stack_lines[1]));
try { if (Inst14 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<436,446,20>",(assertTrue)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (/at f \(.*?:14:10\)/.test) != "undefined") {_RecordType("<447,472,20>",(/at f \(.*?:14:10\)/.test)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (stack_lines[2]) != "undefined") {_RecordType("<473,487,20>",(stack_lines[2])); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (stack_lines) != "undefined") {_RecordType("<473,484,20>",(stack_lines)); Inst17++; } } catch(e) {}
assertTrue(/at f \(.*?:14:10\)/.test(stack_lines[2]));
try { if (Inst18 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<491,501,21>",(assertTrue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (/at f \(.*?:14:10\)/.test) != "undefined") {_RecordType("<502,527,21>",(/at f \(.*?:14:10\)/.test)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (stack_lines[3]) != "undefined") {_RecordType("<528,542,21>",(stack_lines[3])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (stack_lines) != "undefined") {_RecordType("<528,539,21>",(stack_lines)); Inst21++; } } catch(e) {}
assertTrue(/at f \(.*?:14:10\)/.test(stack_lines[3]));

