var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<215,226,7>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<215,220,7>",(debug)); Inst2++; } } catch(e) {}
var Debug = debug.Debug;
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<207,212,7>",(Debug)); Inst0++; } } catch(e) {}

var break_count = 0;
try { if (Inst3 <= 1000 && typeof (break_count) != "undefined") {_RecordType("<233,244,9>",(break_count)); Inst3++; } } catch(e) {}
var exception = null;
try { if (Inst4 <= 1000 && typeof (exception) != "undefined") {_RecordType("<254,263,10>",(exception)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<282,290,12>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<291,296,12>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<298,308,12>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<310,320,12>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<322,326,12>",(data)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<336,341,13>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<345,367,13>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<345,361,13>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<345,350,13>",(Debug)); Inst13++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<521,522,18>",(e)); Inst23++; } } catch(e) {}
  try {
try { if (Inst14 <= 1000 && typeof (break_count) != "undefined") {_RecordType("<389,400,15>",(break_count)); Inst14++; } } catch(e) {}
    break_count++;
try { if (Inst16 <= 1000 && typeof (exec_state.frame(0).sourceLineText) != "undefined") {_RecordType("<419,453,16>",(exec_state.frame(0).sourceLineText)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<419,435,16>",(exec_state.frame)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<419,429,16>",(exec_state)); Inst18++; } } catch(e) {}
    var line = exec_state.frame(0).sourceLineText();
try { if (Inst15 <= 1000 && typeof (line) != "undefined") {_RecordType("<412,416,16>",(line)); Inst15++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<461,471,17>",(assertTrue)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (line.indexOf) != "undefined") {_RecordType("<472,484,17>",(line.indexOf)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (line) != "undefined") {_RecordType("<472,476,17>",(line)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (break_count) != "undefined") {_RecordType("<489,500,17>",(break_count)); Inst22++; } } catch(e) {}
    assertTrue(line.indexOf(`B${break_count}`) > 0);
  } catch (e) {
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<542,543,19>",(e)); Inst25++; } } catch(e) {}
    exception = e;
try { if (Inst24 <= 1000 && typeof (exception) != "undefined") {_RecordType("<530,539,19>",(exception)); Inst24++; } } catch(e) {}
  }
}

try { if (Inst26 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<552,569,23>",(Debug.setListener)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<552,557,23>",(Debug)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (listener) != "undefined") {_RecordType("<570,578,23>",(listener)); Inst28++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst29 <= 1000 && typeof (g) != "undefined") {_RecordType("<591,592,25>",(g)); Inst29++; } } catch(e) {}
function g() {
  throw 1;
}

try { if (Inst30 <= 1000 && typeof (f) != "undefined") {_RecordType("<620,621,29>",(f)); Inst30++; } } catch(e) {}
function f() {
try { if (Inst32 <= 1000 && typeof (e) != "undefined") {_RecordType("<684,685,32>",(e)); Inst32++; } } catch(e) {}
  try {
try { if (Inst31 <= 1000 && typeof (g) != "undefined") {_RecordType("<638,639,31>",(g)); Inst31++; } } catch(e) {}
    g();                         // B1
  } catch (e) {}
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<692,704,33>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (break_count) != "undefined") {_RecordType("<708,719,33>",(break_count)); Inst34++; } } catch(e) {}
  assertEquals(2, break_count);  // B2
  return 1;                      // B3
}

try { if (Inst35 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<771,790,37>",(Debug.setBreakPoint)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<771,776,37>",(Debug)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (f) != "undefined") {_RecordType("<791,792,37>",(f)); Inst37++; } } catch(e) {}
Debug.setBreakPoint(f, 2, 0);
try { if (Inst38 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<801,820,38>",(Debug.setBreakPoint)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<801,806,38>",(Debug)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (f) != "undefined") {_RecordType("<821,822,38>",(f)); Inst40++; } } catch(e) {}
Debug.setBreakPoint(f, 4, 1);
try { if (Inst41 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<831,850,39>",(Debug.setBreakPoint)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<831,836,39>",(Debug)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<851,852,39>",(f)); Inst43++; } } catch(e) {}
Debug.setBreakPoint(f, 5, 1);

try { if (Inst44 <= 1000 && typeof (f) != "undefined") {_RecordType("<862,863,41>",(f)); Inst44++; } } catch(e) {}
f();

try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<868,880,43>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (break_count) != "undefined") {_RecordType("<884,895,43>",(break_count)); Inst46++; } } catch(e) {}
assertEquals(3, break_count);
try { if (Inst47 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<898,908,44>",(assertNull)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (exception) != "undefined") {_RecordType("<909,918,44>",(exception)); Inst48++; } } catch(e) {}
assertNull(exception);

try { if (Inst49 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<922,939,46>",(Debug.setListener)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<922,927,46>",(Debug)); Inst50++; } } catch(e) {}
Debug.setListener(null);

