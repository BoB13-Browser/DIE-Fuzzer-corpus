var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Test the mirror object for null

// Create mirror and JSON representation.
try { if (Inst1 <= 1000 && typeof (debug.MakeMirror) != "undefined") {_RecordType("<1723,1739,32>",(debug.MakeMirror)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1723,1728,32>",(debug)); Inst2++; } } catch(e) {}
var mirror = debug.MakeMirror(null);
try { if (Inst0 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1714,1720,32>",(mirror)); Inst0++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (debug.MakeMirrorSerializer) != "undefined") {_RecordType("<1764,1790,33>",(debug.MakeMirrorSerializer)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1764,1769,33>",(debug)); Inst5++; } } catch(e) {}
var serializer = debug.MakeMirrorSerializer();
try { if (Inst3 <= 1000 && typeof (serializer) != "undefined") {_RecordType("<1751,1761,33>",(serializer)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1805,1819,34>",(JSON.stringify)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1805,1809,34>",(JSON)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (serializer.serializeValue) != "undefined") {_RecordType("<1820,1845,34>",(serializer.serializeValue)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (serializer) != "undefined") {_RecordType("<1820,1830,34>",(serializer)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1846,1852,34>",(mirror)); Inst11++; } } catch(e) {}
var json = JSON.stringify(serializer.serializeValue(mirror));
try { if (Inst6 <= 1000 && typeof (json) != "undefined") {_RecordType("<1798,1802,34>",(json)); Inst6++; } } catch(e) {}

// Check the mirror hierachy.
try { if (Inst12 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1887,1897,37>",(assertTrue)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1898,1904,37>",(mirror)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (debug.Mirror) != "undefined") {_RecordType("<1916,1928,37>",(debug.Mirror)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1916,1921,37>",(debug)); Inst15++; } } catch(e) {}
assertTrue(mirror instanceof debug.Mirror);
try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1931,1941,38>",(assertTrue)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1942,1948,38>",(mirror)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (debug.NullMirror) != "undefined") {_RecordType("<1960,1976,38>",(debug.NullMirror)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1960,1965,38>",(debug)); Inst19++; } } catch(e) {}
assertTrue(mirror instanceof debug.NullMirror);

// Check the mirror properties.
try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2012,2022,41>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (mirror.isNull) != "undefined") {_RecordType("<2023,2036,41>",(mirror.isNull)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2023,2029,41>",(mirror)); Inst22++; } } catch(e) {}
assertTrue(mirror.isNull());
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2041,2053,42>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (mirror.type) != "undefined") {_RecordType("<2062,2073,42>",(mirror.type)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2062,2068,42>",(mirror)); Inst25++; } } catch(e) {}
assertEquals('null', mirror.type());
try { if (Inst26 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2078,2088,43>",(assertTrue)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (mirror.isPrimitive) != "undefined") {_RecordType("<2089,2107,43>",(mirror.isPrimitive)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2089,2095,43>",(mirror)); Inst28++; } } catch(e) {}
assertTrue(mirror.isPrimitive());

// Test text representation
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2141,2153,46>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (mirror.toText) != "undefined") {_RecordType("<2162,2175,46>",(mirror.toText)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2162,2168,46>",(mirror)); Inst31++; } } catch(e) {}
assertEquals('null', mirror.toText());

// Parse JSON representation and check.
try { if (Inst33 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2236,2240,49>",(eval)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (json) != "undefined") {_RecordType("<2247,2251,49>",(json)); Inst34++; } } catch(e) {}
var fromJSON = eval('(' + json + ')');
try { if (Inst32 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2225,2233,49>",(fromJSON)); Inst32++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2260,2272,50>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (fromJSON.type) != "undefined") {_RecordType("<2281,2294,50>",(fromJSON.type)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2281,2289,50>",(fromJSON)); Inst37++; } } catch(e) {}
assertEquals('null', fromJSON.type);

