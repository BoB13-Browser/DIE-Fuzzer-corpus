var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test paths in the code generator where values in specific registers
// get moved around.
try { if (Inst0 <= 1000 && typeof (identity) != "undefined") {_RecordType("<1699,1707,30>",(identity)); Inst0++; } } catch(e) {}
function identity(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1708,1709,30>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1722,1723,31>",(x)); Inst2++; } } catch(e) {}
  return x;
}

try { if (Inst3 <= 1000 && typeof (lookup) != "undefined") {_RecordType("<1737,1743,34>",(lookup)); Inst3++; } } catch(e) {}
function lookup(w, a) {
try { if (Inst4 <= 1000 && typeof (w) != "undefined") {_RecordType("<1744,1745,34>",(w)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<1747,1748,34>",(a)); Inst5++; } } catch(e) {}
  // This function tests a code path in the generation of a keyed load IC
  // where the key and the value are both in the same register.
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1896,1897,37>",(a)); Inst7++; } } catch(e) {}
  a = a;
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1892,1893,37>",(a)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (a) != "undefined") {_RecordType("<1908,1909,38>",(a)); Inst10++; } } catch(e) {}
  w[a] = a;
try { if (Inst8 <= 1000 && typeof (w[a]) != "undefined") {_RecordType("<1901,1905,38>",(w[a])); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (w) != "undefined") {_RecordType("<1901,1902,38>",(w)); Inst9++; } } catch(e) {}
}

try { if (Inst11 <= 1000 && typeof (cover_codegen_paths) != "undefined") {_RecordType("<1923,1942,41>",(cover_codegen_paths)); Inst11++; } } catch(e) {}
function cover_codegen_paths() {
  var x = 1;
try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<1953,1954,42>",(x)); Inst12++; } } catch(e) {}

  // This test depends on the fixed order of register allocation.  We try to
  // get values in specific registers (ia32, x64):
  var a;   // Register eax, rax.
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<2095,2096,46>",(a)); Inst13++; } } catch(e) {}
  var b;   // Register ebx, rbx.
try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<2128,2129,47>",(b)); Inst14++; } } catch(e) {}
  var c;   // Register ecx, rcx.
try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<2161,2162,48>",(c)); Inst15++; } } catch(e) {}
  var d;   // Register edx, rdx.
try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<2194,2195,49>",(d)); Inst16++; } } catch(e) {}
  var di;  // Register edi, rdi.
try { if (Inst17 <= 1000 && typeof (di) != "undefined") {_RecordType("<2227,2229,50>",(di)); Inst17++; } } catch(e) {}

try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<2264,2265,52>",(x)); Inst18++; } } catch(e) {}
  while (x == 1) {
    // The call will spill registers and leave x in {eax,rax}.
try { if (Inst20 <= 1000 && typeof (identity) != "undefined") {_RecordType("<2345,2353,54>",(identity)); Inst20++; } } catch(e) {}
    x = identity(1);
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<2341,2342,54>",(x)); Inst19++; } } catch(e) {}
    // The add will spill x and reuse {eax,rax} for the result.
try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<2430,2431,56>",(x)); Inst22++; } } catch(e) {}
    a = x + 1;
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<2426,2427,56>",(a)); Inst21++; } } catch(e) {}
    // A fresh register {ebx,rbx} will be allocated for x, then reused for
    // the result.
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<2539,2540,59>",(x)); Inst24++; } } catch(e) {}
    b = x + 1;
try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<2535,2536,59>",(b)); Inst23++; } } catch(e) {}
    // Et cetera.
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2572,2573,61>",(x)); Inst26++; } } catch(e) {}
    c = x + 1;
try { if (Inst25 <= 1000 && typeof (c) != "undefined") {_RecordType("<2568,2569,61>",(c)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<2587,2588,62>",(x)); Inst28++; } } catch(e) {}
    d = x + 1;
try { if (Inst27 <= 1000 && typeof (d) != "undefined") {_RecordType("<2583,2584,62>",(d)); Inst27++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<2603,2604,63>",(x)); Inst30++; } } catch(e) {}
    di = x + 1;
try { if (Inst29 <= 1000 && typeof (di) != "undefined") {_RecordType("<2598,2600,63>",(di)); Inst29++; } } catch(e) {}
    // Locals are in the corresponding registers here.
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2669,2681,65>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (c) != "undefined") {_RecordType("<2685,2686,65>",(c)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<2690,2691,65>",(a)); Inst33++; } } catch(e) {}
    assertEquals(8, c << a);

try { if (Inst35 <= 1000 && typeof (identity) != "undefined") {_RecordType("<2703,2711,67>",(identity)); Inst35++; } } catch(e) {}
    x = identity(1);
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<2699,2700,67>",(x)); Inst34++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (x) != "undefined") {_RecordType("<2724,2725,68>",(x)); Inst37++; } } catch(e) {}
    a = x + 1;
try { if (Inst36 <= 1000 && typeof (a) != "undefined") {_RecordType("<2720,2721,68>",(a)); Inst36++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (x) != "undefined") {_RecordType("<2739,2740,69>",(x)); Inst39++; } } catch(e) {}
    b = x + 1;
try { if (Inst38 <= 1000 && typeof (b) != "undefined") {_RecordType("<2735,2736,69>",(b)); Inst38++; } } catch(e) {}
try { if (Inst41 <= 1000 && typeof (x) != "undefined") {_RecordType("<2754,2755,70>",(x)); Inst41++; } } catch(e) {}
    c = x + 1;
try { if (Inst40 <= 1000 && typeof (c) != "undefined") {_RecordType("<2750,2751,70>",(c)); Inst40++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (x) != "undefined") {_RecordType("<2769,2770,71>",(x)); Inst43++; } } catch(e) {}
    d = x + 1;
try { if (Inst42 <= 1000 && typeof (d) != "undefined") {_RecordType("<2765,2766,71>",(d)); Inst42++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (x) != "undefined") {_RecordType("<2785,2786,72>",(x)); Inst45++; } } catch(e) {}
    di = x + 1;
try { if (Inst44 <= 1000 && typeof (di) != "undefined") {_RecordType("<2780,2782,72>",(di)); Inst44++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2796,2808,73>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (a) != "undefined") {_RecordType("<2812,2813,73>",(a)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (c) != "undefined") {_RecordType("<2817,2818,73>",(c)); Inst48++; } } catch(e) {}
    assertEquals(8, a << c);

try { if (Inst50 <= 1000 && typeof (identity) != "undefined") {_RecordType("<2830,2838,75>",(identity)); Inst50++; } } catch(e) {}
    x = identity(1);
try { if (Inst49 <= 1000 && typeof (x) != "undefined") {_RecordType("<2826,2827,75>",(x)); Inst49++; } } catch(e) {}
try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<2851,2852,76>",(x)); Inst52++; } } catch(e) {}
    a = x + 1;
try { if (Inst51 <= 1000 && typeof (a) != "undefined") {_RecordType("<2847,2848,76>",(a)); Inst51++; } } catch(e) {}
try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<2866,2867,77>",(x)); Inst54++; } } catch(e) {}
    b = x + 1;
try { if (Inst53 <= 1000 && typeof (b) != "undefined") {_RecordType("<2862,2863,77>",(b)); Inst53++; } } catch(e) {}
try { if (Inst56 <= 1000 && typeof (x) != "undefined") {_RecordType("<2881,2882,78>",(x)); Inst56++; } } catch(e) {}
    c = x + 1;
try { if (Inst55 <= 1000 && typeof (c) != "undefined") {_RecordType("<2877,2878,78>",(c)); Inst55++; } } catch(e) {}
try { if (Inst58 <= 1000 && typeof (x) != "undefined") {_RecordType("<2896,2897,79>",(x)); Inst58++; } } catch(e) {}
    d = x + 1;
try { if (Inst57 <= 1000 && typeof (d) != "undefined") {_RecordType("<2892,2893,79>",(d)); Inst57++; } } catch(e) {}
try { if (Inst60 <= 1000 && typeof (x) != "undefined") {_RecordType("<2912,2913,80>",(x)); Inst60++; } } catch(e) {}
    di = x + 1;
try { if (Inst59 <= 1000 && typeof (di) != "undefined") {_RecordType("<2907,2909,80>",(di)); Inst59++; } } catch(e) {}
    c = 0; // Free register ecx.
try { if (Inst61 <= 1000 && typeof (c) != "undefined") {_RecordType("<2923,2924,81>",(c)); Inst61++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2956,2968,82>",(assertEquals)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (a) != "undefined") {_RecordType("<2972,2973,82>",(a)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (d) != "undefined") {_RecordType("<2977,2978,82>",(d)); Inst64++; } } catch(e) {}
    assertEquals(8, a << d);

try { if (Inst66 <= 1000 && typeof (identity) != "undefined") {_RecordType("<2990,2998,84>",(identity)); Inst66++; } } catch(e) {}
    x = identity(1);
try { if (Inst65 <= 1000 && typeof (x) != "undefined") {_RecordType("<2986,2987,84>",(x)); Inst65++; } } catch(e) {}
try { if (Inst68 <= 1000 && typeof (x) != "undefined") {_RecordType("<3011,3012,85>",(x)); Inst68++; } } catch(e) {}
    a = x + 1;
try { if (Inst67 <= 1000 && typeof (a) != "undefined") {_RecordType("<3007,3008,85>",(a)); Inst67++; } } catch(e) {}
try { if (Inst70 <= 1000 && typeof (x) != "undefined") {_RecordType("<3026,3027,86>",(x)); Inst70++; } } catch(e) {}
    b = x + 1;
try { if (Inst69 <= 1000 && typeof (b) != "undefined") {_RecordType("<3022,3023,86>",(b)); Inst69++; } } catch(e) {}
try { if (Inst72 <= 1000 && typeof (x) != "undefined") {_RecordType("<3041,3042,87>",(x)); Inst72++; } } catch(e) {}
    c = x + 1;
try { if (Inst71 <= 1000 && typeof (c) != "undefined") {_RecordType("<3037,3038,87>",(c)); Inst71++; } } catch(e) {}
try { if (Inst74 <= 1000 && typeof (x) != "undefined") {_RecordType("<3056,3057,88>",(x)); Inst74++; } } catch(e) {}
    d = x + 1;
try { if (Inst73 <= 1000 && typeof (d) != "undefined") {_RecordType("<3052,3053,88>",(d)); Inst73++; } } catch(e) {}
try { if (Inst76 <= 1000 && typeof (x) != "undefined") {_RecordType("<3072,3073,89>",(x)); Inst76++; } } catch(e) {}
    di = x + 1;
try { if (Inst75 <= 1000 && typeof (di) != "undefined") {_RecordType("<3067,3069,89>",(di)); Inst75++; } } catch(e) {}
    b = 0; // Free register ebx.
try { if (Inst77 <= 1000 && typeof (b) != "undefined") {_RecordType("<3083,3084,90>",(b)); Inst77++; } } catch(e) {}
try { if (Inst78 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3116,3128,91>",(assertEquals)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (a) != "undefined") {_RecordType("<3132,3133,91>",(a)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (d) != "undefined") {_RecordType("<3137,3138,91>",(d)); Inst80++; } } catch(e) {}
    assertEquals(8, a << d);

    // Test the non-commutative subtraction operation with a smi on the
    // left, all available registers on the right, and a non-smi result.
try { if (Inst82 <= 1000 && typeof (identity) != "undefined") {_RecordType("<3295,3303,95>",(identity)); Inst82++; } } catch(e) {}
    x = identity(-1073741824);  // Least (31-bit) smi.
try { if (Inst81 <= 1000 && typeof (x) != "undefined") {_RecordType("<3291,3292,95>",(x)); Inst81++; } } catch(e) {}
try { if (Inst84 <= 1000 && typeof (x) != "undefined") {_RecordType("<3350,3351,96>",(x)); Inst84++; } } catch(e) {}
    a = x + 1;  // Still a smi, the greatest smi negated.
try { if (Inst83 <= 1000 && typeof (a) != "undefined") {_RecordType("<3346,3347,96>",(a)); Inst83++; } } catch(e) {}
try { if (Inst86 <= 1000 && typeof (x) != "undefined") {_RecordType("<3408,3409,97>",(x)); Inst86++; } } catch(e) {}
    b = x + 1;
try { if (Inst85 <= 1000 && typeof (b) != "undefined") {_RecordType("<3404,3405,97>",(b)); Inst85++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (x) != "undefined") {_RecordType("<3423,3424,98>",(x)); Inst88++; } } catch(e) {}
    c = x + 1;
try { if (Inst87 <= 1000 && typeof (c) != "undefined") {_RecordType("<3419,3420,98>",(c)); Inst87++; } } catch(e) {}
try { if (Inst90 <= 1000 && typeof (x) != "undefined") {_RecordType("<3438,3439,99>",(x)); Inst90++; } } catch(e) {}
    d = x + 1;
try { if (Inst89 <= 1000 && typeof (d) != "undefined") {_RecordType("<3434,3435,99>",(d)); Inst89++; } } catch(e) {}
try { if (Inst92 <= 1000 && typeof (x) != "undefined") {_RecordType("<3454,3455,100>",(x)); Inst92++; } } catch(e) {}
    di = x + 1;
try { if (Inst91 <= 1000 && typeof (di) != "undefined") {_RecordType("<3449,3451,100>",(di)); Inst91++; } } catch(e) {}
    // Subtraction should overflow the 31-bit smi range.  The result
    // (1073741824) is outside the 31-bit smi range so it doesn't hit the
    // "unsafe smi" code that spills a register.
try { if (Inst93 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3657,3669,104>",(assertEquals)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (a) != "undefined") {_RecordType("<3686,3687,104>",(a)); Inst94++; } } catch(e) {}
    assertEquals(1073741824, 1 - a);

try { if (Inst96 <= 1000 && typeof (identity) != "undefined") {_RecordType("<3699,3707,106>",(identity)); Inst96++; } } catch(e) {}
    x = identity(-1073741824);
try { if (Inst95 <= 1000 && typeof (x) != "undefined") {_RecordType("<3695,3696,106>",(x)); Inst95++; } } catch(e) {}
try { if (Inst98 <= 1000 && typeof (x) != "undefined") {_RecordType("<3730,3731,107>",(x)); Inst98++; } } catch(e) {}
    a = x + 1;
try { if (Inst97 <= 1000 && typeof (a) != "undefined") {_RecordType("<3726,3727,107>",(a)); Inst97++; } } catch(e) {}
try { if (Inst100 <= 1000 && typeof (x) != "undefined") {_RecordType("<3745,3746,108>",(x)); Inst100++; } } catch(e) {}
    b = x + 1;
try { if (Inst99 <= 1000 && typeof (b) != "undefined") {_RecordType("<3741,3742,108>",(b)); Inst99++; } } catch(e) {}
try { if (Inst102 <= 1000 && typeof (x) != "undefined") {_RecordType("<3760,3761,109>",(x)); Inst102++; } } catch(e) {}
    c = x + 1;
try { if (Inst101 <= 1000 && typeof (c) != "undefined") {_RecordType("<3756,3757,109>",(c)); Inst101++; } } catch(e) {}
try { if (Inst104 <= 1000 && typeof (x) != "undefined") {_RecordType("<3775,3776,110>",(x)); Inst104++; } } catch(e) {}
    d = x + 1;
try { if (Inst103 <= 1000 && typeof (d) != "undefined") {_RecordType("<3771,3772,110>",(d)); Inst103++; } } catch(e) {}
try { if (Inst106 <= 1000 && typeof (x) != "undefined") {_RecordType("<3791,3792,111>",(x)); Inst106++; } } catch(e) {}
    di = x + 1;
try { if (Inst105 <= 1000 && typeof (di) != "undefined") {_RecordType("<3786,3788,111>",(di)); Inst105++; } } catch(e) {}
try { if (Inst107 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3802,3814,112>",(assertEquals)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (b) != "undefined") {_RecordType("<3831,3832,112>",(b)); Inst108++; } } catch(e) {}
    assertEquals(1073741824, 1 - b);

try { if (Inst110 <= 1000 && typeof (identity) != "undefined") {_RecordType("<3844,3852,114>",(identity)); Inst110++; } } catch(e) {}
    x = identity(-1073741824);
try { if (Inst109 <= 1000 && typeof (x) != "undefined") {_RecordType("<3840,3841,114>",(x)); Inst109++; } } catch(e) {}
try { if (Inst112 <= 1000 && typeof (x) != "undefined") {_RecordType("<3875,3876,115>",(x)); Inst112++; } } catch(e) {}
    a = x + 1;
try { if (Inst111 <= 1000 && typeof (a) != "undefined") {_RecordType("<3871,3872,115>",(a)); Inst111++; } } catch(e) {}
try { if (Inst114 <= 1000 && typeof (x) != "undefined") {_RecordType("<3890,3891,116>",(x)); Inst114++; } } catch(e) {}
    b = x + 1;
try { if (Inst113 <= 1000 && typeof (b) != "undefined") {_RecordType("<3886,3887,116>",(b)); Inst113++; } } catch(e) {}
try { if (Inst116 <= 1000 && typeof (x) != "undefined") {_RecordType("<3905,3906,117>",(x)); Inst116++; } } catch(e) {}
    c = x + 1;
try { if (Inst115 <= 1000 && typeof (c) != "undefined") {_RecordType("<3901,3902,117>",(c)); Inst115++; } } catch(e) {}
try { if (Inst118 <= 1000 && typeof (x) != "undefined") {_RecordType("<3920,3921,118>",(x)); Inst118++; } } catch(e) {}
    d = x + 1;
try { if (Inst117 <= 1000 && typeof (d) != "undefined") {_RecordType("<3916,3917,118>",(d)); Inst117++; } } catch(e) {}
try { if (Inst120 <= 1000 && typeof (x) != "undefined") {_RecordType("<3936,3937,119>",(x)); Inst120++; } } catch(e) {}
    di = x + 1;
try { if (Inst119 <= 1000 && typeof (di) != "undefined") {_RecordType("<3931,3933,119>",(di)); Inst119++; } } catch(e) {}
try { if (Inst121 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3947,3959,120>",(assertEquals)); Inst121++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (c) != "undefined") {_RecordType("<3976,3977,120>",(c)); Inst122++; } } catch(e) {}
    assertEquals(1073741824, 1 - c);

try { if (Inst124 <= 1000 && typeof (identity) != "undefined") {_RecordType("<3989,3997,122>",(identity)); Inst124++; } } catch(e) {}
    x = identity(-1073741824);
try { if (Inst123 <= 1000 && typeof (x) != "undefined") {_RecordType("<3985,3986,122>",(x)); Inst123++; } } catch(e) {}
try { if (Inst126 <= 1000 && typeof (x) != "undefined") {_RecordType("<4020,4021,123>",(x)); Inst126++; } } catch(e) {}
    a = x + 1;
try { if (Inst125 <= 1000 && typeof (a) != "undefined") {_RecordType("<4016,4017,123>",(a)); Inst125++; } } catch(e) {}
try { if (Inst128 <= 1000 && typeof (x) != "undefined") {_RecordType("<4035,4036,124>",(x)); Inst128++; } } catch(e) {}
    b = x + 1;
try { if (Inst127 <= 1000 && typeof (b) != "undefined") {_RecordType("<4031,4032,124>",(b)); Inst127++; } } catch(e) {}
try { if (Inst130 <= 1000 && typeof (x) != "undefined") {_RecordType("<4050,4051,125>",(x)); Inst130++; } } catch(e) {}
    c = x + 1;
try { if (Inst129 <= 1000 && typeof (c) != "undefined") {_RecordType("<4046,4047,125>",(c)); Inst129++; } } catch(e) {}
try { if (Inst132 <= 1000 && typeof (x) != "undefined") {_RecordType("<4065,4066,126>",(x)); Inst132++; } } catch(e) {}
    d = x + 1;
try { if (Inst131 <= 1000 && typeof (d) != "undefined") {_RecordType("<4061,4062,126>",(d)); Inst131++; } } catch(e) {}
try { if (Inst134 <= 1000 && typeof (x) != "undefined") {_RecordType("<4081,4082,127>",(x)); Inst134++; } } catch(e) {}
    di = x + 1;
try { if (Inst133 <= 1000 && typeof (di) != "undefined") {_RecordType("<4076,4078,127>",(di)); Inst133++; } } catch(e) {}
try { if (Inst135 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4092,4104,128>",(assertEquals)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (d) != "undefined") {_RecordType("<4121,4122,128>",(d)); Inst136++; } } catch(e) {}
    assertEquals(1073741824, 1 - d);

try { if (Inst138 <= 1000 && typeof (identity) != "undefined") {_RecordType("<4134,4142,130>",(identity)); Inst138++; } } catch(e) {}
    x = identity(-1073741824);
try { if (Inst137 <= 1000 && typeof (x) != "undefined") {_RecordType("<4130,4131,130>",(x)); Inst137++; } } catch(e) {}
try { if (Inst140 <= 1000 && typeof (x) != "undefined") {_RecordType("<4165,4166,131>",(x)); Inst140++; } } catch(e) {}
    a = x + 1;
try { if (Inst139 <= 1000 && typeof (a) != "undefined") {_RecordType("<4161,4162,131>",(a)); Inst139++; } } catch(e) {}
try { if (Inst142 <= 1000 && typeof (x) != "undefined") {_RecordType("<4180,4181,132>",(x)); Inst142++; } } catch(e) {}
    b = x + 1;
try { if (Inst141 <= 1000 && typeof (b) != "undefined") {_RecordType("<4176,4177,132>",(b)); Inst141++; } } catch(e) {}
try { if (Inst144 <= 1000 && typeof (x) != "undefined") {_RecordType("<4195,4196,133>",(x)); Inst144++; } } catch(e) {}
    c = x + 1;
try { if (Inst143 <= 1000 && typeof (c) != "undefined") {_RecordType("<4191,4192,133>",(c)); Inst143++; } } catch(e) {}
try { if (Inst146 <= 1000 && typeof (x) != "undefined") {_RecordType("<4210,4211,134>",(x)); Inst146++; } } catch(e) {}
    d = x + 1;
try { if (Inst145 <= 1000 && typeof (d) != "undefined") {_RecordType("<4206,4207,134>",(d)); Inst145++; } } catch(e) {}
try { if (Inst148 <= 1000 && typeof (x) != "undefined") {_RecordType("<4226,4227,135>",(x)); Inst148++; } } catch(e) {}
    di = x + 1;
try { if (Inst147 <= 1000 && typeof (di) != "undefined") {_RecordType("<4221,4223,135>",(di)); Inst147++; } } catch(e) {}
try { if (Inst149 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4237,4249,136>",(assertEquals)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (di) != "undefined") {_RecordType("<4266,4268,136>",(di)); Inst150++; } } catch(e) {}
    assertEquals(1073741824, 1 - di);

    x = 3;
try { if (Inst151 <= 1000 && typeof (x) != "undefined") {_RecordType("<4276,4277,138>",(x)); Inst151++; } } catch(e) {}
    var w = { };
try { if (Inst152 <= 1000 && typeof (w) != "undefined") {_RecordType("<4291,4292,139>",(w)); Inst152++; } } catch(e) {}
try { if (Inst153 <= 1000 && typeof (lookup) != "undefined") {_RecordType("<4304,4310,140>",(lookup)); Inst153++; } } catch(e) {}try { if (Inst154 <= 1000 && typeof (w) != "undefined") {_RecordType("<4311,4312,140>",(w)); Inst154++; } } catch(e) {}try { if (Inst155 <= 1000 && typeof (x) != "undefined") {_RecordType("<4314,4315,140>",(x)); Inst155++; } } catch(e) {}
    lookup(w, x);
try { if (Inst156 <= 1000 && typeof (lookup) != "undefined") {_RecordType("<4322,4328,141>",(lookup)); Inst156++; } } catch(e) {}try { if (Inst157 <= 1000 && typeof (w) != "undefined") {_RecordType("<4329,4330,141>",(w)); Inst157++; } } catch(e) {}try { if (Inst158 <= 1000 && typeof (x) != "undefined") {_RecordType("<4332,4333,141>",(x)); Inst158++; } } catch(e) {}
    lookup(w, x);
try { if (Inst159 <= 1000 && typeof (lookup) != "undefined") {_RecordType("<4340,4346,142>",(lookup)); Inst159++; } } catch(e) {}try { if (Inst160 <= 1000 && typeof (w) != "undefined") {_RecordType("<4347,4348,142>",(w)); Inst160++; } } catch(e) {}try { if (Inst161 <= 1000 && typeof (x) != "undefined") {_RecordType("<4350,4351,142>",(x)); Inst161++; } } catch(e) {}
    lookup(w, x);

    x = 3;  // Terminate while loop.
try { if (Inst162 <= 1000 && typeof (x) != "undefined") {_RecordType("<4359,4360,144>",(x)); Inst162++; } } catch(e) {}
  }
}

try { if (Inst163 <= 1000 && typeof (cover_codegen_paths) != "undefined") {_RecordType("<4399,4418,148>",(cover_codegen_paths)); Inst163++; } } catch(e) {}
cover_codegen_paths();

