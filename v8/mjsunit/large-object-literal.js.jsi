var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that we can create object literals of various sizes.
try { if (Inst0 <= 1000 && typeof (testLiteral) != "undefined") {_RecordType("<1668,1679,29>",(testLiteral)); Inst0++; } } catch(e) {}
function testLiteral(size) {
try { if (Inst1 <= 1000 && typeof (size) != "undefined") {_RecordType("<1680,1684,29>",(size)); Inst1++; } } catch(e) {}

  // Build object-literal string.
  var literal = "var o = { ";
try { if (Inst2 <= 1000 && typeof (literal) != "undefined") {_RecordType("<1729,1736,32>",(literal)); Inst2++; } } catch(e) {}

  for (var i = 0; i < size; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1765,1766,34>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1772,1773,34>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (size) != "undefined") {_RecordType("<1776,1780,34>",(size)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1782,1783,34>",(i)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (i) != "undefined") {_RecordType("<1797,1798,35>",(i)); Inst7++; } } catch(e) {}
    if (i > 0) literal += ",";
try { if (Inst8 <= 1000 && typeof (literal) != "undefined") {_RecordType("<1804,1811,35>",(literal)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1842,1843,36>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<1852,1853,36>",(i)); Inst11++; } } catch(e) {}
    literal += ("a" + i + ":" + i);
try { if (Inst9 <= 1000 && typeof (literal) != "undefined") {_RecordType("<1824,1831,36>",(literal)); Inst9++; } } catch(e) {}
  }
  literal += "}";
try { if (Inst12 <= 1000 && typeof (literal) != "undefined") {_RecordType("<1862,1869,38>",(literal)); Inst12++; } } catch(e) {}

  // Create the object literal.
try { if (Inst13 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1913,1917,41>",(eval)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (literal) != "undefined") {_RecordType("<1918,1925,41>",(literal)); Inst14++; } } catch(e) {}
  eval(literal);

  // Check that the properties have the expected values.
  for (var i = 0; i < size; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1997,1998,44>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<2004,2005,44>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (size) != "undefined") {_RecordType("<2008,2012,44>",(size)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2014,2015,44>",(i)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2025,2037,45>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<2038,2039,45>",(i)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (o["a"+i]) != "undefined") {_RecordType("<2041,2049,45>",(o["a"+i])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o) != "undefined") {_RecordType("<2041,2042,45>",(o)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2047,2048,45>",(i)); Inst23++; } } catch(e) {}
    assertEquals(i, o["a"+i]);
  }
}

// The sizes to test.
var sizes = [0, 1, 2, 100, 200, 400, 1000];
try { if (Inst24 <= 1000 && typeof (sizes) != "undefined") {_RecordType("<2085,2090,50>",(sizes)); Inst24++; } } catch(e) {}

// Run the test.
for (var i = 0; i < sizes.length; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2152,2153,53>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2159,2160,53>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (sizes.length) != "undefined") {_RecordType("<2163,2175,53>",(sizes.length)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (sizes) != "undefined") {_RecordType("<2163,2168,53>",(sizes)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2177,2178,53>",(i)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (testLiteral) != "undefined") {_RecordType("<2186,2197,54>",(testLiteral)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (sizes[i]) != "undefined") {_RecordType("<2198,2206,54>",(sizes[i])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (sizes) != "undefined") {_RecordType("<2198,2203,54>",(sizes)); Inst32++; } } catch(e) {}
  testLiteral(sizes[i]);
}

