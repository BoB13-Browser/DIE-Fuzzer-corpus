var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


// Two fp numbers that have the same hash value (see TranscendentalCache
// in heap.h).
var x = 0x123456789ABCD / 0x2000000000000;
try { if (Inst0 <= 1000 && typeof (x) != "undefined") {_RecordType("<1691,1692,31>",(x)); Inst0++; } } catch(e) {}
var y = 0x1134567899BCD / 0x2000000000000;
try { if (Inst1 <= 1000 && typeof (y) != "undefined") {_RecordType("<1734,1735,32>",(y)); Inst1++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1774,1784,34>",(assertTrue)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1785,1793,34>",(Math.sin)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1785,1789,34>",(Math)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<1794,1795,34>",(x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<1800,1808,34>",(Math.sin)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1800,1804,34>",(Math)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (y) != "undefined") {_RecordType("<1809,1810,34>",(y)); Inst8++; } } catch(e) {}
assertTrue(Math.sin(x) != Math.sin(y));

try { if (Inst9 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1815,1825,36>",(assertTrue)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Math.cos) != "undefined") {_RecordType("<1826,1834,36>",(Math.cos)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1826,1830,36>",(Math)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (x) != "undefined") {_RecordType("<1835,1836,36>",(x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Math.cos) != "undefined") {_RecordType("<1841,1849,36>",(Math.cos)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1841,1845,36>",(Math)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (y) != "undefined") {_RecordType("<1850,1851,36>",(y)); Inst15++; } } catch(e) {}
assertTrue(Math.cos(x) != Math.cos(y));

try { if (Inst16 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1856,1866,38>",(assertTrue)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1867,1875,38>",(Math.tan)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1867,1871,38>",(Math)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<1876,1877,38>",(x)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (Math.tan) != "undefined") {_RecordType("<1882,1890,38>",(Math.tan)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1882,1886,38>",(Math)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<1891,1892,38>",(y)); Inst22++; } } catch(e) {}
assertTrue(Math.tan(x) != Math.tan(y));

try { if (Inst23 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1897,1907,40>",(assertTrue)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Math.log) != "undefined") {_RecordType("<1908,1916,40>",(Math.log)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1908,1912,40>",(Math)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1917,1918,40>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Math.log) != "undefined") {_RecordType("<1923,1931,40>",(Math.log)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1923,1927,40>",(Math)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (y) != "undefined") {_RecordType("<1932,1933,40>",(y)); Inst29++; } } catch(e) {}
assertTrue(Math.log(x) != Math.log(y));

try { if (Inst30 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1938,1948,42>",(assertTrue)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<1949,1958,42>",(Math.asin)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1949,1953,42>",(Math)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (x) != "undefined") {_RecordType("<1959,1960,42>",(x)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Math.asin) != "undefined") {_RecordType("<1965,1974,42>",(Math.asin)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1965,1969,42>",(Math)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (y) != "undefined") {_RecordType("<1975,1976,42>",(y)); Inst36++; } } catch(e) {}
assertTrue(Math.asin(x) != Math.asin(y));

try { if (Inst37 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1981,1991,44>",(assertTrue)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (Math.acos) != "undefined") {_RecordType("<1992,2001,44>",(Math.acos)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1992,1996,44>",(Math)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2002,2003,44>",(x)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Math.acos) != "undefined") {_RecordType("<2008,2017,44>",(Math.acos)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2008,2012,44>",(Math)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (y) != "undefined") {_RecordType("<2018,2019,44>",(y)); Inst43++; } } catch(e) {}
assertTrue(Math.acos(x) != Math.acos(y));

try { if (Inst44 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2024,2034,46>",(assertTrue)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (Math.atan) != "undefined") {_RecordType("<2035,2044,46>",(Math.atan)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2035,2039,46>",(Math)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (x) != "undefined") {_RecordType("<2045,2046,46>",(x)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (Math.atan) != "undefined") {_RecordType("<2051,2060,46>",(Math.atan)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2051,2055,46>",(Math)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (y) != "undefined") {_RecordType("<2061,2062,46>",(y)); Inst50++; } } catch(e) {}
assertTrue(Math.atan(x) != Math.atan(y));

try { if (Inst51 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2067,2077,48>",(assertTrue)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Math.exp) != "undefined") {_RecordType("<2078,2086,48>",(Math.exp)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2078,2082,48>",(Math)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<2087,2088,48>",(x)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (Math.exp) != "undefined") {_RecordType("<2093,2101,48>",(Math.exp)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (Math) != "undefined") {_RecordType("<2093,2097,48>",(Math)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (y) != "undefined") {_RecordType("<2102,2103,48>",(y)); Inst57++; } } catch(e) {}
assertTrue(Math.exp(x) != Math.exp(y));

