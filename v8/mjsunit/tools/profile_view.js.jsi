var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Load source code files from <project root>/tools.
// Files: tools/codemap.js tools/consarray.js tools/profile.js
// Files: tools/profile_view.js


try { if (Inst0 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<1757,1767,33>",(createNode)); Inst0++; } } catch(e) {}
function createNode(name, time, opt_parent) {
try { if (Inst1 <= 1000 && typeof (name) != "undefined") {_RecordType("<1768,1772,33>",(name)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (time) != "undefined") {_RecordType("<1774,1778,33>",(time)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (opt_parent) != "undefined") {_RecordType("<1780,1790,33>",(opt_parent)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (ProfileView.Node) != "undefined") {_RecordType("<1811,1827,34>",(ProfileView.Node)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (ProfileView) != "undefined") {_RecordType("<1811,1822,34>",(ProfileView)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (name) != "undefined") {_RecordType("<1828,1832,34>",(name)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (time) != "undefined") {_RecordType("<1834,1838,34>",(time)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (time) != "undefined") {_RecordType("<1840,1844,34>",(time)); Inst9++; } } catch(e) {}
  var node = new ProfileView.Node(name, time, time, null);
try { if (Inst4 <= 1000 && typeof (node) != "undefined") {_RecordType("<1800,1804,34>",(node)); Inst4++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (opt_parent) != "undefined") {_RecordType("<1859,1869,35>",(opt_parent)); Inst10++; } } catch(e) {}
  if (opt_parent) {
try { if (Inst11 <= 1000 && typeof (opt_parent.addChild) != "undefined") {_RecordType("<1877,1896,36>",(opt_parent.addChild)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (opt_parent) != "undefined") {_RecordType("<1877,1887,36>",(opt_parent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (node) != "undefined") {_RecordType("<1897,1901,36>",(node)); Inst13++; } } catch(e) {}
    opt_parent.addChild(node);
  }
try { if (Inst14 <= 1000 && typeof (node) != "undefined") {_RecordType("<1917,1921,38>",(node)); Inst14++; } } catch(e) {}
  return node;
}


try { if (Inst15 <= 1000 && typeof (testSorting) != "undefined") {_RecordType("<1937,1948,42>",(testSorting)); Inst15++; } } catch(e) {}
(function testSorting() {
   //
   // Build a tree:
   //   root             +--c/5
   //    |               |
   //    +--a/2  +--b/3--+--d/4
   //    |       |       |
   //    +--a/1--+--c/1  +--d/2
   //    |       |
   //    +--c/1  +--b/2
   //
   // So we can sort it using 2 fields: name and time.
try { if (Inst17 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2247,2257,54>",(createNode)); Inst17++; } } catch(e) {}
   var root = createNode('root', 0);
try { if (Inst16 <= 1000 && typeof (root) != "undefined") {_RecordType("<2240,2244,54>",(root)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2273,2283,55>",(createNode)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (root) != "undefined") {_RecordType("<2292,2296,55>",(root)); Inst19++; } } catch(e) {}
   createNode('a', 2, root);
try { if (Inst21 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2311,2321,56>",(createNode)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (root) != "undefined") {_RecordType("<2330,2334,56>",(root)); Inst22++; } } catch(e) {}
   var a1 = createNode('a', 1, root);
try { if (Inst20 <= 1000 && typeof (a1) != "undefined") {_RecordType("<2306,2308,56>",(a1)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2340,2350,57>",(createNode)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (root) != "undefined") {_RecordType("<2359,2363,57>",(root)); Inst24++; } } catch(e) {}
   createNode('c', 1, root);
try { if (Inst26 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2378,2388,58>",(createNode)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a1) != "undefined") {_RecordType("<2397,2399,58>",(a1)); Inst27++; } } catch(e) {}
   var b3 = createNode('b', 3, a1);
try { if (Inst25 <= 1000 && typeof (b3) != "undefined") {_RecordType("<2373,2375,58>",(b3)); Inst25++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2405,2415,59>",(createNode)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a1) != "undefined") {_RecordType("<2424,2426,59>",(a1)); Inst29++; } } catch(e) {}
   createNode('c', 1, a1);
try { if (Inst30 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2432,2442,60>",(createNode)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (a1) != "undefined") {_RecordType("<2451,2453,60>",(a1)); Inst31++; } } catch(e) {}
   createNode('b', 2, a1);
try { if (Inst32 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2459,2469,61>",(createNode)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (b3) != "undefined") {_RecordType("<2478,2480,61>",(b3)); Inst33++; } } catch(e) {}
   createNode('c', 5, b3);
try { if (Inst34 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2486,2496,62>",(createNode)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (b3) != "undefined") {_RecordType("<2505,2507,62>",(b3)); Inst35++; } } catch(e) {}
   createNode('d', 4, b3);
try { if (Inst36 <= 1000 && typeof (createNode) != "undefined") {_RecordType("<2513,2523,63>",(createNode)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (b3) != "undefined") {_RecordType("<2532,2534,63>",(b3)); Inst37++; } } catch(e) {}
   createNode('d', 2, b3);

try { if (Inst39 <= 1000 && typeof (ProfileView) != "undefined") {_RecordType("<2556,2567,65>",(ProfileView)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (root) != "undefined") {_RecordType("<2568,2572,65>",(root)); Inst40++; } } catch(e) {}
   var view = new ProfileView(root);
try { if (Inst38 <= 1000 && typeof (view) != "undefined") {_RecordType("<2545,2549,65>",(view)); Inst38++; } } catch(e) {}
   var flatTree = [];
try { if (Inst41 <= 1000 && typeof (flatTree) != "undefined") {_RecordType("<2582,2590,66>",(flatTree)); Inst41++; } } catch(e) {}

try { if (Inst42 <= 1000 && typeof (fillFlatTree) != "undefined") {_RecordType("<2610,2622,68>",(fillFlatTree)); Inst42++; } } catch(e) {}
   function fillFlatTree(node) {
try { if (Inst43 <= 1000 && typeof (node) != "undefined") {_RecordType("<2623,2627,68>",(node)); Inst43++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (flatTree.push) != "undefined") {_RecordType("<2636,2649,69>",(flatTree.push)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (flatTree) != "undefined") {_RecordType("<2636,2644,69>",(flatTree)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (node.internalFuncName) != "undefined") {_RecordType("<2650,2671,69>",(node.internalFuncName)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (node) != "undefined") {_RecordType("<2650,2654,69>",(node)); Inst47++; } } catch(e) {}
     flatTree.push(node.internalFuncName);
try { if (Inst48 <= 1000 && typeof (flatTree.push) != "undefined") {_RecordType("<2679,2692,70>",(flatTree.push)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (flatTree) != "undefined") {_RecordType("<2679,2687,70>",(flatTree)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (node.selfTime) != "undefined") {_RecordType("<2693,2706,70>",(node.selfTime)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (node) != "undefined") {_RecordType("<2693,2697,70>",(node)); Inst51++; } } catch(e) {}
     flatTree.push(node.selfTime);
   }

try { if (Inst52 <= 1000 && typeof (view.traverse) != "undefined") {_RecordType("<2718,2731,73>",(view.traverse)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (view) != "undefined") {_RecordType("<2718,2722,73>",(view)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (fillFlatTree) != "undefined") {_RecordType("<2732,2744,73>",(fillFlatTree)); Inst54++; } } catch(e) {}
   view.traverse(fillFlatTree);
try { if (Inst55 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2750,2762,74>",(assertEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (flatTree) != "undefined") {_RecordType("<2872,2880,78>",(flatTree)); Inst56++; } } catch(e) {}
   assertEquals(
     ['root', 0,
      'a', 2, 'a', 1, 'c', 1,
      'b', 3, 'c', 1, 'b', 2,
      'c', 5, 'd', 4, 'd', 2], flatTree);

try { if (Inst57 <= 1000 && typeof (cmpStrs) != "undefined") {_RecordType("<2896,2903,80>",(cmpStrs)); Inst57++; } } catch(e) {}
   function cmpStrs(s1, s2) {
try { if (Inst58 <= 1000 && typeof (s1) != "undefined") {_RecordType("<2904,2906,80>",(s1)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (s2) != "undefined") {_RecordType("<2908,2910,80>",(s2)); Inst59++; } } catch(e) {}
try { if (Inst60 <= 1000 && typeof (s1) != "undefined") {_RecordType("<2926,2928,81>",(s1)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (s2) != "undefined") {_RecordType("<2932,2934,81>",(s2)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (s1) != "undefined") {_RecordType("<2942,2944,81>",(s1)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (s2) != "undefined") {_RecordType("<2947,2949,81>",(s2)); Inst63++; } } catch(e) {}
     return s1 == s2 ? 0 : (s1 < s2 ? -1 : 1);
   }

try { if (Inst64 <= 1000 && typeof (view.sort) != "undefined") {_RecordType("<2970,2979,84>",(view.sort)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (view) != "undefined") {_RecordType("<2970,2974,84>",(view)); Inst65++; } } catch(e) {}
   view.sort(function(n1, n2) {
try { if (Inst66 <= 1000 && typeof (n1) != "undefined") {_RecordType("<2989,2991,84>",(n1)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (n2) != "undefined") {_RecordType("<2993,2995,84>",(n2)); Inst67++; } } catch(e) {}
try { if (Inst68 <= 1000 && typeof (cmpStrs) != "undefined") {_RecordType("<3011,3018,85>",(cmpStrs)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (n1.internalFuncName) != "undefined") {_RecordType("<3019,3038,85>",(n1.internalFuncName)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (n1) != "undefined") {_RecordType("<3019,3021,85>",(n1)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (n2.internalFuncName) != "undefined") {_RecordType("<3040,3059,85>",(n2.internalFuncName)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (n2) != "undefined") {_RecordType("<3040,3042,85>",(n2)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (n1.selfTime) != "undefined") {_RecordType("<3074,3085,86>",(n1.selfTime)); Inst73++; } } catch(e) {}try { if (Inst74 <= 1000 && typeof (n1) != "undefined") {_RecordType("<3074,3076,86>",(n1)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (n2.selfTime) != "undefined") {_RecordType("<3088,3099,86>",(n2.selfTime)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (n2) != "undefined") {_RecordType("<3088,3090,86>",(n2)); Inst76++; } } catch(e) {}
     return cmpStrs(n1.internalFuncName, n2.internalFuncName) ||
         (n1.selfTime - n2.selfTime);
   });

   flatTree = [];
try { if (Inst77 <= 1000 && typeof (flatTree) != "undefined") {_RecordType("<3113,3121,89>",(flatTree)); Inst77++; } } catch(e) {}
try { if (Inst78 <= 1000 && typeof (view.traverse) != "undefined") {_RecordType("<3131,3144,90>",(view.traverse)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (view) != "undefined") {_RecordType("<3131,3135,90>",(view)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (fillFlatTree) != "undefined") {_RecordType("<3145,3157,90>",(fillFlatTree)); Inst80++; } } catch(e) {}
   view.traverse(fillFlatTree);
try { if (Inst81 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3163,3175,91>",(assertEquals)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (flatTree) != "undefined") {_RecordType("<3285,3293,95>",(flatTree)); Inst82++; } } catch(e) {}
   assertEquals(
     ['root', 0,
      'a', 1, 'a', 2, 'c', 1,
      'b', 2, 'b', 3, 'c', 1,
      'c', 5, 'd', 2, 'd', 4], flatTree);
})();

