var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Load CSV parser implementation from <project root>/tools.
// Files: tools/csvparser.js

try { if (Inst1 <= 1000 && typeof (CsvParser) != "undefined") {_RecordType("<1706,1715,31>",(CsvParser)); Inst1++; } } catch(e) {}
var parser = new CsvParser();
try { if (Inst0 <= 1000 && typeof (parser) != "undefined") {_RecordType("<1693,1699,31>",(parser)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1720,1732,33>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<1746,1762,35>",(parser.parseLine)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (parser) != "undefined") {_RecordType("<1746,1752,35>",(parser)); Inst4++; } } catch(e) {}
assertEquals(
    [],
    parser.parseLine(''));

try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1770,1782,37>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<1802,1818,39>",(parser.parseLine)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (parser) != "undefined") {_RecordType("<1802,1808,39>",(parser)); Inst7++; } } catch(e) {}
assertEquals(
    ['', ''],
    parser.parseLine(','));

try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1827,1839,41>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<1873,1889,43>",(parser.parseLine)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (parser) != "undefined") {_RecordType("<1873,1879,43>",(parser)); Inst10++; } } catch(e) {}
assertEquals(
    ['1997','Ford','E350'],
    parser.parseLine('1997,Ford,E350'));

try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1911,1923,45>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<1957,1973,47>",(parser.parseLine)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (parser) != "undefined") {_RecordType("<1957,1963,47>",(parser)); Inst13++; } } catch(e) {}
assertEquals(
    ['1997','Ford','E350'],
    parser.parseLine('"1997","Ford","E350"'));

try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2001,2013,49>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<2072,2088,51>",(parser.parseLine)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (parser) != "undefined") {_RecordType("<2072,2078,51>",(parser)); Inst16++; } } catch(e) {}
assertEquals(
    ['1997','Ford','E350','Super, luxurious truck'],
    parser.parseLine('1997,Ford,E350,"Super, luxurious truck"'));

try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2135,2147,53>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<2207,2223,55>",(parser.parseLine)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (parser) != "undefined") {_RecordType("<2207,2213,55>",(parser)); Inst19++; } } catch(e) {}
assertEquals(
    ['1997','Ford','E350','Super "luxurious" truck'],
    parser.parseLine('1997,Ford,E350,"Super ""luxurious"" truck"'));

try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2273,2285,57>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<2347,2363,59>",(parser.parseLine)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (parser) != "undefined") {_RecordType("<2347,2353,59>",(parser)); Inst22++; } } catch(e) {}
assertEquals(
    ['1997','Ford','E350','Super "luxurious" "truck"'],
    parser.parseLine('1997,Ford,E350,"Super ""luxurious"" ""truck"""'));

try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2417,2429,61>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<2490,2506,63>",(parser.parseLine)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (parser) != "undefined") {_RecordType("<2490,2496,63>",(parser)); Inst25++; } } catch(e) {}
assertEquals(
    ['1997','Ford','E350','Super "luxurious""truck"'],
    parser.parseLine('1997,Ford,E350,"Super ""luxurious""""truck"""'));

try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2559,2571,65>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<2646,2662,67>",(parser.parseLine)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (parser) != "undefined") {_RecordType("<2646,2652,67>",(parser)); Inst28++; } } catch(e) {}
assertEquals(
    ['shared-library','/lib/ld-2.3.6.so','0x489a2000','0x489b7000'],
    parser.parseLine('shared-library,"/lib/ld-2.3.6.so",0x489a2000,0x489b7000'));

try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2725,2737,69>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<2838,2854,71>",(parser.parseLine)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (parser) != "undefined") {_RecordType("<2838,2844,71>",(parser)); Inst31++; } } catch(e) {}
assertEquals(
    ['code-creation','LazyCompile','0xf6fe2d20','1201','APPLY_PREPARE native runtime.js:165'],
    parser.parseLine('code-creation,LazyCompile,0xf6fe2d20,1201,"APPLY_PREPARE native runtime.js:165"'));

try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2941,2953,73>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<3041,3057,75>",(parser.parseLine)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (parser) != "undefined") {_RecordType("<3041,3047,75>",(parser)); Inst34++; } } catch(e) {}
assertEquals(
    ['code-creation','LazyCompile','0xf6fe4bc0','282',' native v8natives.js:69'],
    parser.parseLine('code-creation,LazyCompile,0xf6fe4bc0,282," native v8natives.js:69"'));

try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3131,3143,77>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<3224,3240,79>",(parser.parseLine)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (parser) != "undefined") {_RecordType("<3224,3230,79>",(parser)); Inst37++; } } catch(e) {}
assertEquals(
    ['code-creation','RegExp','0xf6c21c00','826','NccyrJroXvg\\/([^,]*)'],
    parser.parseLine('code-creation,RegExp,0xf6c21c00,826,"NccyrJroXvg\\/([^,]*)"'));

try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3307,3319,81>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (parser.parseLine) != "undefined") {_RecordType("<3379,3395,83>",(parser.parseLine)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (parser) != "undefined") {_RecordType("<3379,3385,83>",(parser)); Inst40++; } } catch(e) {}
assertEquals(
    ['code-creation','Function','0x42f0a0','163',''],
    parser.parseLine('code-creation,Function,0x42f0a0,163,""'));

