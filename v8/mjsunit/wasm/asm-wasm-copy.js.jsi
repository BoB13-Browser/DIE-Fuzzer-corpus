var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-wasm

try { if (Inst0 <= 1000 && typeof (TestCopyBug) != "undefined") {_RecordType("<203,214,7>",(TestCopyBug)); Inst0++; } } catch(e) {}
(function TestCopyBug() {
  // This was tickling a register allocation issue with
  // idiv in embenchen/copy.
try { if (Inst1 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<315,324,10>",(asmModule)); Inst1++; } } catch(e) {}
  function asmModule(){
    'use asm';
try { if (Inst2 <= 1000 && typeof (func) != "undefined") {_RecordType("<356,360,12>",(func)); Inst2++; } } catch(e) {}
    function func() {
      var ret = 0;
try { if (Inst3 <= 1000 && typeof (ret) != "undefined") {_RecordType("<375,378,13>",(ret)); Inst3++; } } catch(e) {}
      var x = 1, y = 0, z = 0;
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<394,395,14>",(x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (y) != "undefined") {_RecordType("<401,402,14>",(y)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (z) != "undefined") {_RecordType("<408,409,14>",(z)); Inst6++; } } catch(e) {}
      var a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0;
try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<425,426,15>",(a)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<432,433,15>",(b)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (c) != "undefined") {_RecordType("<439,440,15>",(c)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (d) != "undefined") {_RecordType("<446,447,15>",(d)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (e) != "undefined") {_RecordType("<453,454,15>",(e)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<460,461,15>",(f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (g) != "undefined") {_RecordType("<467,468,15>",(g)); Inst13++; } } catch(e) {}
      do {
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<498,499,17>",(x)); Inst15++; } } catch(e) {}
        y = (x + 0) | 0;
try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<493,494,17>",(y)); Inst14++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<523,524,18>",(y)); Inst17++; } } catch(e) {}
        z = (y | 0) % 2 | 0;
try { if (Inst16 <= 1000 && typeof (z) != "undefined") {_RecordType("<518,519,18>",(z)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<554,555,19>",(y)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (z) != "undefined") {_RecordType("<558,559,19>",(z)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<562,563,19>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<566,567,19>",(b)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (c) != "undefined") {_RecordType("<570,571,19>",(c)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (d) != "undefined") {_RecordType("<574,575,19>",(d)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<578,579,19>",(e)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<582,583,19>",(f)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (g) != "undefined") {_RecordType("<586,587,19>",(g)); Inst27++; } } catch(e) {}
        ret = (y + z + a + b + c + d + e + f + g) | 0;
try { if (Inst18 <= 1000 && typeof (ret) != "undefined") {_RecordType("<547,550,19>",(ret)); Inst18++; } } catch(e) {}
      } while(0);
try { if (Inst28 <= 1000 && typeof (ret) != "undefined") {_RecordType("<625,628,21>",(ret)); Inst28++; } } catch(e) {}
      return ret | 0;
    }
try { if (Inst29 <= 1000 && typeof (func) != "undefined") {_RecordType("<659,663,23>",(func)); Inst29++; } } catch(e) {}
    return { func: func };
  }
try { if (Inst31 <= 1000 && typeof (Wasm.instantiateModuleFromAsm) != "undefined") {_RecordType("<684,713,25>",(Wasm.instantiateModuleFromAsm)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<684,688,25>",(Wasm)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (asmModule.toString) != "undefined") {_RecordType("<714,732,25>",(asmModule.toString)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<714,723,25>",(asmModule)); Inst34++; } } catch(e) {}
  var wasm = Wasm.instantiateModuleFromAsm(asmModule.toString());
try { if (Inst30 <= 1000 && typeof (wasm) != "undefined") {_RecordType("<677,681,25>",(wasm)); Inst30++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<739,751,26>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (asmModule().func) != "undefined") {_RecordType("<752,768,26>",(asmModule().func)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (asmModule) != "undefined") {_RecordType("<752,761,26>",(asmModule)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (wasm.func) != "undefined") {_RecordType("<772,781,26>",(wasm.func)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (wasm) != "undefined") {_RecordType("<772,776,26>",(wasm)); Inst39++; } } catch(e) {}
  assertEquals(asmModule().func(), wasm.func());
})();

