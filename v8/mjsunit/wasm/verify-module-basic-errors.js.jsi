var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-wasm

try { if (Inst0 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<202,205,7>",(Foo)); Inst0++; } } catch(e) {}
function Foo() { }

try { if (Inst1 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<213,225,9>",(assertThrows)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<239,256,9>",(Wasm.verifyModule)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<239,243,9>",(Wasm)); Inst3++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(); })
try { if (Inst4 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<263,275,10>",(assertThrows)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<289,306,10>",(Wasm.verifyModule)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<289,293,10>",(Wasm)); Inst6++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(0); })
try { if (Inst7 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<314,326,11>",(assertThrows)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<340,357,11>",(Wasm.verifyModule)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<340,344,11>",(Wasm)); Inst9++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule("s"); })
try { if (Inst10 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<367,379,12>",(assertThrows)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<393,410,12>",(Wasm.verifyModule)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<393,397,12>",(Wasm)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<411,420,12>",(undefined)); Inst13++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(undefined); })
try { if (Inst14 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<426,438,13>",(assertThrows)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<452,469,13>",(Wasm.verifyModule)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<452,456,13>",(Wasm)); Inst16++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(1.1); })
try { if (Inst17 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<479,491,14>",(assertThrows)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<505,522,14>",(Wasm.verifyModule)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<505,509,14>",(Wasm)); Inst19++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(1/0); })
try { if (Inst20 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<532,544,15>",(assertThrows)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<558,575,15>",(Wasm.verifyModule)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<558,562,15>",(Wasm)); Inst22++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(null); })
try { if (Inst23 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<586,598,16>",(assertThrows)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<612,629,16>",(Wasm.verifyModule)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<612,616,16>",(Wasm)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<634,637,16>",(Foo)); Inst26++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(new Foo()); })
try { if (Inst27 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<645,657,17>",(assertThrows)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<671,688,17>",(Wasm.verifyModule)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<671,675,17>",(Wasm)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<693,704,17>",(ArrayBuffer)); Inst30++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(new ArrayBuffer(0)); })
try { if (Inst31 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<713,725,18>",(assertThrows)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Wasm.verifyModule) != "undefined") {_RecordType("<739,756,18>",(Wasm.verifyModule)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Wasm) != "undefined") {_RecordType("<739,743,18>",(Wasm)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<761,772,18>",(ArrayBuffer)); Inst34++; } } catch(e) {}
assertThrows(function() { Wasm.verifyModule(new ArrayBuffer(7)); })

