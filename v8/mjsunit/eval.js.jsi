var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1598,1610,28>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1619,1623,28>",(eval)); Inst1++; } } catch(e) {}
assertEquals(void 0, eval());
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1628,1640,29>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1644,1648,29>",(eval)); Inst3++; } } catch(e) {}
assertEquals(4, eval(4));

try { if (Inst4 <= 1000 && typeof (f) != "undefined") {_RecordType("<1664,1665,31>",(f)); Inst4++; } } catch(e) {}
function f() { return 'The f function'; };
try { if (Inst5 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1698,1708,32>",(assertTrue)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (f) != "undefined") {_RecordType("<1709,1710,32>",(f)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1715,1719,32>",(eval)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f) != "undefined") {_RecordType("<1720,1721,32>",(f)); Inst8++; } } catch(e) {}
assertTrue(f === eval(f));

try { if (Inst9 <= 1000 && typeof (g) != "undefined") {_RecordType("<1735,1736,34>",(g)); Inst9++; } } catch(e) {}
function g(x, y) { return 4; };
try { if (Inst10 <= 1000 && typeof (x) != "undefined") {_RecordType("<1737,1738,34>",(x)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<1740,1741,34>",(y)); Inst11++; } } catch(e) {}

count = 0;
try { if (Inst12 <= 1000 && typeof (count) != "undefined") {_RecordType("<1759,1764,36>",(count)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1770,1782,37>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1786,1790,37>",(eval)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (count) != "undefined") {_RecordType("<1800,1805,37>",(count)); Inst15++; } } catch(e) {}
assertEquals(4, eval('2 + 2', count++));
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1811,1823,38>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (count) != "undefined") {_RecordType("<1827,1832,38>",(count)); Inst17++; } } catch(e) {}
assertEquals(1, count);

try { if (Inst20 <= 1000 && typeof (e) != "undefined") {_RecordType("<1931,1932,43>",(e)); Inst20++; } } catch(e) {}
try {
try { if (Inst18 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1844,1848,41>",(eval)); Inst18++; } } catch(e) {}
  eval('hest 7 &*^*&^');
try { if (Inst19 <= 1000 && typeof (assertUnreachable) != "undefined") {_RecordType("<1869,1886,42>",(assertUnreachable)); Inst19++; } } catch(e) {}
  assertUnreachable('Did not throw on syntax error.');
} catch (e) {
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1938,1950,44>",(assertEquals)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (e.name) != "undefined") {_RecordType("<1966,1972,44>",(e.name)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<1966,1967,44>",(e)); Inst23++; } } catch(e) {}
  assertEquals('SyntaxError', e.name);
}


// eval has special evaluation order for consistency with other browsers.
try { if (Inst25 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2067,2071,49>",(eval)); Inst25++; } } catch(e) {}
global_eval = eval;
try { if (Inst24 <= 1000 && typeof (global_eval) != "undefined") {_RecordType("<2053,2064,49>",(global_eval)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2073,2085,50>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2094,2098,50>",(eval)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2099,2103,50>",(eval)); Inst28++; } } catch(e) {}
assertEquals(void 0, eval(eval("var eval = function f(x) { return 'hest';}")))
try { if (Inst30 <= 1000 && typeof (global_eval) != "undefined") {_RecordType("<2159,2170,51>",(global_eval)); Inst30++; } } catch(e) {}
eval = global_eval;
try { if (Inst29 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2152,2156,51>",(eval)); Inst29++; } } catch(e) {}

// Test eval with different number of parameters.
try { if (Inst32 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2237,2241,54>",(eval)); Inst32++; } } catch(e) {}
global_eval = eval;
try { if (Inst31 <= 1000 && typeof (global_eval) != "undefined") {_RecordType("<2223,2234,54>",(global_eval)); Inst31++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2274,2275,55>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (y) != "undefined") {_RecordType("<2278,2279,55>",(y)); Inst37++; } } catch(e) {}
eval = function(x, y) { return x + y; };
try { if (Inst33 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2243,2247,55>",(eval)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<2259,2260,55>",(x)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (y) != "undefined") {_RecordType("<2262,2263,55>",(y)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2284,2296,56>",(assertEquals)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2300,2304,56>",(eval)); Inst39++; } } catch(e) {}
assertEquals(4, eval(2, 2));
try { if (Inst41 <= 1000 && typeof (global_eval) != "undefined") {_RecordType("<2320,2331,57>",(global_eval)); Inst41++; } } catch(e) {}
eval = global_eval;
try { if (Inst40 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2313,2317,57>",(eval)); Inst40++; } } catch(e) {}

// Test that un-aliased eval reads from local context.
foo = 0;
try { if (Inst42 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2389,2392,60>",(foo)); Inst42++; } } catch(e) {}
result =
  (function() {
    var foo = 2;
try { if (Inst44 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2431,2434,63>",(foo)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2451,2455,64>",(eval)); Inst45++; } } catch(e) {}
    return eval('foo');
  })();
try { if (Inst43 <= 1000 && typeof (result) != "undefined") {_RecordType("<2398,2404,61>",(result)); Inst43++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2472,2484,66>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (result) != "undefined") {_RecordType("<2488,2494,66>",(result)); Inst47++; } } catch(e) {}
assertEquals(2, result);

// Test that un-aliased eval writes to local context.
foo = 0;
try { if (Inst48 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2552,2555,69>",(foo)); Inst48++; } } catch(e) {}
result =
  (function() {
    var foo = 1;
try { if (Inst50 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2594,2597,72>",(foo)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2607,2611,73>",(eval)); Inst51++; } } catch(e) {}
    eval('foo = 2');
try { if (Inst52 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2635,2638,74>",(foo)); Inst52++; } } catch(e) {}
    return foo;
  })();
try { if (Inst49 <= 1000 && typeof (result) != "undefined") {_RecordType("<2561,2567,70>",(result)); Inst49++; } } catch(e) {}
try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2648,2660,76>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (result) != "undefined") {_RecordType("<2664,2670,76>",(result)); Inst54++; } } catch(e) {}
assertEquals(2, result);
try { if (Inst55 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2673,2685,77>",(assertEquals)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2689,2692,77>",(foo)); Inst56++; } } catch(e) {}
assertEquals(0, foo);

// Test that un-aliased eval has right receiver.
try { if (Inst57 <= 1000 && typeof (MyObject) != "undefined") {_RecordType("<2754,2762,80>",(MyObject)); Inst57++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2779,2783,80>",(eval)); Inst59++; } } catch(e) {}
function MyObject() { this.self = eval('this'); }
try { if (Inst58 <= 1000 && typeof (this.self) != "undefined") {_RecordType("<2767,2776,80>",(this.self)); Inst58++; } } catch(e) {}
try { if (Inst61 <= 1000 && typeof (MyObject) != "undefined") {_RecordType("<2807,2815,81>",(MyObject)); Inst61++; } } catch(e) {}
var o = new MyObject();
try { if (Inst60 <= 1000 && typeof (o) != "undefined") {_RecordType("<2799,2800,81>",(o)); Inst60++; } } catch(e) {}
try { if (Inst62 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2819,2829,82>",(assertTrue)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (o) != "undefined") {_RecordType("<2830,2831,82>",(o)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (o.self) != "undefined") {_RecordType("<2836,2842,82>",(o.self)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (o) != "undefined") {_RecordType("<2836,2837,82>",(o)); Inst65++; } } catch(e) {}
assertTrue(o === o.self);

// Test that aliased eval reads from global context.
try { if (Inst67 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2907,2911,85>",(eval)); Inst67++; } } catch(e) {}
var e = eval;
try { if (Inst66 <= 1000 && typeof (e) != "undefined") {_RecordType("<2903,2904,85>",(e)); Inst66++; } } catch(e) {}
foo = 0;
try { if (Inst68 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2913,2916,86>",(foo)); Inst68++; } } catch(e) {}
result =
  (function() {
    var foo = 2;
try { if (Inst70 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2955,2958,89>",(foo)); Inst70++; } } catch(e) {}
try { if (Inst71 <= 1000 && typeof (e) != "undefined") {_RecordType("<2975,2976,90>",(e)); Inst71++; } } catch(e) {}
    return e('foo');
  })();
try { if (Inst69 <= 1000 && typeof (result) != "undefined") {_RecordType("<2922,2928,87>",(result)); Inst69++; } } catch(e) {}
try { if (Inst72 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2993,3005,92>",(assertEquals)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (result) != "undefined") {_RecordType("<3009,3015,92>",(result)); Inst73++; } } catch(e) {}
assertEquals(0, result);

// Test that aliased eval writes to global context.
try { if (Inst75 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3079,3083,95>",(eval)); Inst75++; } } catch(e) {}
var e = eval;
try { if (Inst74 <= 1000 && typeof (e) != "undefined") {_RecordType("<3075,3076,95>",(e)); Inst74++; } } catch(e) {}
foo = 0;
try { if (Inst76 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3085,3088,96>",(foo)); Inst76++; } } catch(e) {}
try { if (Inst77 <= 1000 && typeof (e) != "undefined") {_RecordType("<3108,3109,97>",(e)); Inst77++; } } catch(e) {}
(function() { e('var foo = 2;'); })();
try { if (Inst78 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3133,3145,98>",(assertEquals)); Inst78++; } } catch(e) {}try { if (Inst79 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3149,3152,98>",(foo)); Inst79++; } } catch(e) {}
assertEquals(2, foo);

// Test that aliased eval has right receiver.
try { if (Inst80 <= 1000 && typeof (MyOtherObject) != "undefined") {_RecordType("<3211,3224,101>",(MyOtherObject)); Inst80++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (e) != "undefined") {_RecordType("<3241,3242,101>",(e)); Inst82++; } } catch(e) {}
function MyOtherObject() { this.self = e('this'); }
try { if (Inst81 <= 1000 && typeof (this.self) != "undefined") {_RecordType("<3229,3238,101>",(this.self)); Inst81++; } } catch(e) {}
try { if (Inst84 <= 1000 && typeof (MyOtherObject) != "undefined") {_RecordType("<3266,3279,102>",(MyOtherObject)); Inst84++; } } catch(e) {}
var o = new MyOtherObject();
try { if (Inst83 <= 1000 && typeof (o) != "undefined") {_RecordType("<3258,3259,102>",(o)); Inst83++; } } catch(e) {}
try { if (Inst85 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<3283,3293,103>",(assertTrue)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (o.self) != "undefined") {_RecordType("<3303,3309,103>",(o.self)); Inst86++; } } catch(e) {}try { if (Inst87 <= 1000 && typeof (o) != "undefined") {_RecordType("<3303,3304,103>",(o)); Inst87++; } } catch(e) {}
assertTrue(this === o.self);

// Try to cheat the 'aliased eval' detection.
var x = this;
try { if (Inst88 <= 1000 && typeof (x) != "undefined") {_RecordType("<3363,3364,106>",(x)); Inst88++; } } catch(e) {}
foo = 0;
try { if (Inst89 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3373,3376,107>",(foo)); Inst89++; } } catch(e) {}
result =
  (function() {
    var foo = 2;
try { if (Inst91 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3415,3418,110>",(foo)); Inst91++; } } catch(e) {}
    // Should be non-direct call.
try { if (Inst92 <= 1000 && typeof (x.eval) != "undefined") {_RecordType("<3469,3475,112>",(x.eval)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (x) != "undefined") {_RecordType("<3469,3470,112>",(x)); Inst93++; } } catch(e) {}
    return x.eval('foo');
  })();
try { if (Inst90 <= 1000 && typeof (result) != "undefined") {_RecordType("<3382,3388,108>",(result)); Inst90++; } } catch(e) {}
try { if (Inst94 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3492,3504,114>",(assertEquals)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (result) != "undefined") {_RecordType("<3508,3514,114>",(result)); Inst95++; } } catch(e) {}
assertEquals(0, result);

foo = 0;
try { if (Inst96 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3518,3521,116>",(foo)); Inst96++; } } catch(e) {}
result =
  (function() {
    var foo = 2;
try { if (Inst98 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3560,3563,119>",(foo)); Inst98++; } } catch(e) {}
    // Should be non-direct call.
try { if (Inst99 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3617,3621,121>",(eval)); Inst99++; } } catch(e) {}
    return (1,eval)('foo');
  })();
try { if (Inst97 <= 1000 && typeof (result) != "undefined") {_RecordType("<3527,3533,117>",(result)); Inst97++; } } catch(e) {}
try { if (Inst100 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3639,3651,123>",(assertEquals)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (result) != "undefined") {_RecordType("<3655,3661,123>",(result)); Inst101++; } } catch(e) {}
assertEquals(0, result);

foo = 0;
try { if (Inst102 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3665,3668,125>",(foo)); Inst102++; } } catch(e) {}
result =
  (function() {
try { if (Inst106 <= 1000 && typeof (x) != "undefined") {_RecordType("<3735,3736,128>",(x)); Inst106++; } } catch(e) {}
    var eval = function(x) { return x; };
try { if (Inst104 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3707,3711,128>",(eval)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (x) != "undefined") {_RecordType("<3723,3724,128>",(x)); Inst105++; } } catch(e) {}
try { if (Inst108 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3755,3759,129>",(eval)); Inst108++; } } catch(e) {}
    var foo = eval(2);
try { if (Inst107 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3749,3752,129>",(foo)); Inst107++; } } catch(e) {}
    // Should be non-direct call.
try { if (Inst109 <= 1000 && typeof (e) != "undefined") {_RecordType("<3809,3810,131>",(e)); Inst109++; } } catch(e) {}
    return e('foo');
  })();
try { if (Inst103 <= 1000 && typeof (result) != "undefined") {_RecordType("<3674,3680,126>",(result)); Inst103++; } } catch(e) {}
try { if (Inst110 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3827,3839,133>",(assertEquals)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (result) != "undefined") {_RecordType("<3843,3849,133>",(result)); Inst111++; } } catch(e) {}
assertEquals(0, result);

foo = 0;
try { if (Inst112 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3853,3856,135>",(foo)); Inst112++; } } catch(e) {}
result =
  (function() {
    var foo = 2;
try { if (Inst114 <= 1000 && typeof (foo) != "undefined") {_RecordType("<3895,3898,138>",(foo)); Inst114++; } } catch(e) {}
    // Should be direct call.
try { if (Inst115 <= 1000 && typeof (e) != "undefined") {_RecordType("<3953,3954,140>",(e)); Inst115++; } } catch(e) {}
    with ({ eval : e }) {
try { if (Inst116 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3973,3977,141>",(eval)); Inst116++; } } catch(e) {}
      return eval('foo');
    }
  })();
try { if (Inst113 <= 1000 && typeof (result) != "undefined") {_RecordType("<3862,3868,136>",(result)); Inst113++; } } catch(e) {}
try { if (Inst117 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4000,4012,144>",(assertEquals)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (result) != "undefined") {_RecordType("<4016,4022,144>",(result)); Inst118++; } } catch(e) {}
assertEquals(2, result);

result =
  (function() {
try { if (Inst122 <= 1000 && typeof (x) != "undefined") {_RecordType("<4091,4092,148>",(x)); Inst122++; } } catch(e) {}
    var eval = function(x) { return 2 * x; };
try { if (Inst120 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4059,4063,148>",(eval)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (x) != "undefined") {_RecordType("<4075,4076,148>",(x)); Inst121++; } } catch(e) {}
try { if (Inst123 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4129,4133,149>",(eval)); Inst123++; } } catch(e) {}
    return (function() { return eval(2); })();
  })();
try { if (Inst119 <= 1000 && typeof (result) != "undefined") {_RecordType("<4026,4032,146>",(result)); Inst119++; } } catch(e) {}
try { if (Inst124 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4152,4164,151>",(assertEquals)); Inst124++; } } catch(e) {}try { if (Inst125 <= 1000 && typeof (result) != "undefined") {_RecordType("<4168,4174,151>",(result)); Inst125++; } } catch(e) {}
assertEquals(4, result);

result =
  (function() {
try { if (Inst127 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4207,4211,155>",(eval)); Inst127++; } } catch(e) {}
    eval("var eval = function(s) { return this; }");
try { if (Inst128 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4267,4271,156>",(eval)); Inst128++; } } catch(e) {}
    return eval("42");  // Should return the global object
  })();
try { if (Inst126 <= 1000 && typeof (result) != "undefined") {_RecordType("<4178,4184,153>",(result)); Inst126++; } } catch(e) {}
try { if (Inst129 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4323,4335,158>",(assertEquals)); Inst129++; } } catch(e) {}try { if (Inst130 <= 1000 && typeof (result) != "undefined") {_RecordType("<4342,4348,158>",(result)); Inst130++; } } catch(e) {}
assertEquals(this, result);

(function() {
try { if (Inst133 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4407,4411,161>",(eval)); Inst133++; } } catch(e) {}
  var obj = { f: function(eval) { return eval("this"); } };
try { if (Inst131 <= 1000 && typeof (obj) != "undefined") {_RecordType("<4372,4375,161>",(obj)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4392,4396,161>",(eval)); Inst132++; } } catch(e) {}
try { if (Inst135 <= 1000 && typeof (obj.f) != "undefined") {_RecordType("<4437,4442,162>",(obj.f)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (obj) != "undefined") {_RecordType("<4437,4440,162>",(obj)); Inst136++; } } catch(e) {}try { if (Inst137 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4443,4447,162>",(eval)); Inst137++; } } catch(e) {}
  result = obj.f(eval);
try { if (Inst134 <= 1000 && typeof (result) != "undefined") {_RecordType("<4428,4434,162>",(result)); Inst134++; } } catch(e) {}
try { if (Inst138 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4452,4464,163>",(assertEquals)); Inst138++; } } catch(e) {}try { if (Inst139 <= 1000 && typeof (obj) != "undefined") {_RecordType("<4465,4468,163>",(obj)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (result) != "undefined") {_RecordType("<4470,4476,163>",(result)); Inst140++; } } catch(e) {}
  assertEquals(obj, result);
})();

(function() {
try { if (Inst143 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<4534,4543,167>",(arguments)); Inst143++; } } catch(e) {}try { if (Inst144 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4552,4556,167>",(eval)); Inst144++; } } catch(e) {}
  var obj = { f: function(eval) { arguments; return eval("this"); } };
try { if (Inst141 <= 1000 && typeof (obj) != "undefined") {_RecordType("<4506,4509,167>",(obj)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4526,4530,167>",(eval)); Inst142++; } } catch(e) {}
try { if (Inst146 <= 1000 && typeof (obj.f) != "undefined") {_RecordType("<4582,4587,168>",(obj.f)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (obj) != "undefined") {_RecordType("<4582,4585,168>",(obj)); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4588,4592,168>",(eval)); Inst148++; } } catch(e) {}
  result = obj.f(eval);
try { if (Inst145 <= 1000 && typeof (result) != "undefined") {_RecordType("<4573,4579,168>",(result)); Inst145++; } } catch(e) {}
try { if (Inst149 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4597,4609,169>",(assertEquals)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (obj) != "undefined") {_RecordType("<4610,4613,169>",(obj)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (result) != "undefined") {_RecordType("<4615,4621,169>",(result)); Inst151++; } } catch(e) {}
  assertEquals(obj, result);
})();

try { if (Inst154 <= 1000 && typeof (x) != "undefined") {_RecordType("<4663,4664,172>",(x)); Inst154++; } } catch(e) {}
eval = function(x) { return 2 * x; };
try { if (Inst152 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4631,4635,172>",(eval)); Inst152++; } } catch(e) {}try { if (Inst153 <= 1000 && typeof (x) != "undefined") {_RecordType("<4647,4648,172>",(x)); Inst153++; } } catch(e) {}
result =
  (function() {
try { if (Inst156 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4726,4730,175>",(eval)); Inst156++; } } catch(e) {}
    return (function() { return eval(2); })();
  })();
try { if (Inst155 <= 1000 && typeof (result) != "undefined") {_RecordType("<4669,4675,173>",(result)); Inst155++; } } catch(e) {}
try { if (Inst157 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<4749,4761,177>",(assertEquals)); Inst157++; } } catch(e) {}try { if (Inst158 <= 1000 && typeof (result) != "undefined") {_RecordType("<4765,4771,177>",(result)); Inst158++; } } catch(e) {}
assertEquals(4, result);




// Regression test: calling a function named eval found in a context that is
// not the global context should get the global object as receiver.
result =
    (function () {
      var eval = function (x) { return this; };
try { if (Inst160 <= 1000 && typeof (eval) != "undefined") {_RecordType("<4961,4965,186>",(eval)); Inst160++; } } catch(e) {}try { if (Inst161 <= 1000 && typeof (x) != "undefined") {_RecordType("<4978,4979,186>",(x)); Inst161++; } } catch(e) {}
try { if (Inst162 <= 1000 && typeof (eval) != "undefined") {_RecordType("<5024,5028,187>",(eval)); Inst162++; } } catch(e) {}
      with ({}) { return eval('ignore'); }
    })();
try { if (Inst159 <= 1000 && typeof (result) != "undefined") {_RecordType("<4923,4929,184>",(result)); Inst159++; } } catch(e) {}
try { if (Inst163 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<5052,5064,189>",(assertEquals)); Inst163++; } } catch(e) {}try { if (Inst164 <= 1000 && typeof (result) != "undefined") {_RecordType("<5071,5077,189>",(result)); Inst164++; } } catch(e) {}
assertEquals(this, result);

