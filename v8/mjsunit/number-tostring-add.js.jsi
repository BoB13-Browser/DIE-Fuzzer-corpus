var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (add) != "undefined") {_RecordType("<1607,1610,28>",(add)); Inst0++; } } catch(e) {}
function add(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1611,1612,28>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1614,1615,28>",(b)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1628,1629,29>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<1632,1633,29>",(b)); Inst4++; } } catch(e) {}
  return a + b;
}

try { if (Inst5 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<1647,1659,32>",(testToString)); Inst5++; } } catch(e) {}
function testToString(a, b) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1660,1661,32>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<1663,1664,32>",(b)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1670,1682,33>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1683,1684,33>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b.toString) != "undefined") {_RecordType("<1686,1696,33>",(b.toString)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<1686,1687,33>",(b)); Inst11++; } } catch(e) {}
  assertEquals(a, b.toString());
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1703,1715,34>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1716,1717,34>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<1724,1725,34>",(b)); Inst14++; } } catch(e) {}
  assertEquals(a, "" + b);
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1730,1742,35>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1743,1744,35>",(a)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (add) != "undefined") {_RecordType("<1746,1749,35>",(add)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1754,1755,35>",(b)); Inst18++; } } catch(e) {}
  assertEquals(a, add("", b));
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1761,1773,36>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<1782,1783,36>",(a)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (add) != "undefined") {_RecordType("<1785,1788,36>",(add)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (b) != "undefined") {_RecordType("<1796,1797,36>",(b)); Inst22++; } } catch(e) {}
  assertEquals("yes" + a, add("yes", b));
}

try { if (Inst23 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<1804,1816,39>",(testToString)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1825,1828,39>",(NaN)); Inst24++; } } catch(e) {}
testToString("NaN", (NaN));
try { if (Inst25 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<1832,1844,40>",(testToString)); Inst25++; } } catch(e) {}
testToString("Infinity", (1/0));
try { if (Inst26 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<1865,1877,41>",(testToString)); Inst26++; } } catch(e) {}
testToString("-Infinity", (-1/0));
try { if (Inst27 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<1900,1912,42>",(testToString)); Inst27++; } } catch(e) {}
testToString("0", (0));
try { if (Inst28 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<1924,1936,43>",(testToString)); Inst28++; } } catch(e) {}
testToString("9", (9));
try { if (Inst29 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<1948,1960,44>",(testToString)); Inst29++; } } catch(e) {}
testToString("90", (90));
try { if (Inst30 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<1974,1986,45>",(testToString)); Inst30++; } } catch(e) {}
testToString("90.12", (90.12));
try { if (Inst31 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2006,2018,46>",(testToString)); Inst31++; } } catch(e) {}
testToString("0.1", (0.1));
try { if (Inst32 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2034,2046,47>",(testToString)); Inst32++; } } catch(e) {}
testToString("0.01", (0.01));
try { if (Inst33 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2064,2076,48>",(testToString)); Inst33++; } } catch(e) {}
testToString("0.0123", (0.0123));
try { if (Inst34 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2098,2110,49>",(testToString)); Inst34++; } } catch(e) {}
testToString("111111111111111110000", (111111111111111111111));
try { if (Inst35 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2162,2174,50>",(testToString)); Inst35++; } } catch(e) {}
testToString("1.1111111111111111e+21", (1111111111111111111111));
try { if (Inst36 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2228,2240,51>",(testToString)); Inst36++; } } catch(e) {}
testToString("1.1111111111111111e+22", (11111111111111111111111));
try { if (Inst37 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2295,2307,52>",(testToString)); Inst37++; } } catch(e) {}
testToString("0.00001", (0.00001));
try { if (Inst38 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2331,2343,53>",(testToString)); Inst38++; } } catch(e) {}
testToString("0.000001", (0.000001));
try { if (Inst39 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2369,2381,54>",(testToString)); Inst39++; } } catch(e) {}
testToString("1e-7", (0.0000001));
try { if (Inst40 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2404,2416,55>",(testToString)); Inst40++; } } catch(e) {}
testToString("1.2e-7", (0.00000012));
try { if (Inst41 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2442,2454,56>",(testToString)); Inst41++; } } catch(e) {}
testToString("1.23e-7", (0.000000123));
try { if (Inst42 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2482,2494,57>",(testToString)); Inst42++; } } catch(e) {}
testToString("1e-8", (0.00000001));
try { if (Inst43 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2518,2530,58>",(testToString)); Inst43++; } } catch(e) {}
testToString("1.2e-8", (0.000000012));
try { if (Inst44 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2557,2569,59>",(testToString)); Inst44++; } } catch(e) {}
testToString("1.23e-8", (0.0000000123));

try { if (Inst45 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2599,2611,61>",(testToString)); Inst45++; } } catch(e) {}
testToString("0", (-0));
try { if (Inst46 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2624,2636,62>",(testToString)); Inst46++; } } catch(e) {}
testToString("-9", (-9));
try { if (Inst47 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2650,2662,63>",(testToString)); Inst47++; } } catch(e) {}
testToString("-90", (-90));
try { if (Inst48 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2678,2690,64>",(testToString)); Inst48++; } } catch(e) {}
testToString("-90.12", (-90.12));
try { if (Inst49 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2712,2724,65>",(testToString)); Inst49++; } } catch(e) {}
testToString("-0.1", (-0.1));
try { if (Inst50 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2742,2754,66>",(testToString)); Inst50++; } } catch(e) {}
testToString("-0.01", (-0.01));
try { if (Inst51 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2774,2786,67>",(testToString)); Inst51++; } } catch(e) {}
testToString("-0.0123", (-0.0123));
try { if (Inst52 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2810,2822,68>",(testToString)); Inst52++; } } catch(e) {}
testToString("-111111111111111110000", (-111111111111111111111));
try { if (Inst53 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2876,2888,69>",(testToString)); Inst53++; } } catch(e) {}
testToString("-1.1111111111111111e+21", (-1111111111111111111111));
try { if (Inst54 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<2944,2956,70>",(testToString)); Inst54++; } } catch(e) {}
testToString("-1.1111111111111111e+22", (-11111111111111111111111));
try { if (Inst55 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3013,3025,71>",(testToString)); Inst55++; } } catch(e) {}
testToString("-0.00001", (-0.00001));
try { if (Inst56 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3051,3063,72>",(testToString)); Inst56++; } } catch(e) {}
testToString("-0.000001", (-0.000001));
try { if (Inst57 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3091,3103,73>",(testToString)); Inst57++; } } catch(e) {}
testToString("-1e-7", (-0.0000001));
try { if (Inst58 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3128,3140,74>",(testToString)); Inst58++; } } catch(e) {}
testToString("-1.2e-7", (-0.00000012));
try { if (Inst59 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3168,3180,75>",(testToString)); Inst59++; } } catch(e) {}
testToString("-1.23e-7", (-0.000000123));
try { if (Inst60 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3210,3222,76>",(testToString)); Inst60++; } } catch(e) {}
testToString("-1e-8", (-0.00000001));
try { if (Inst61 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3248,3260,77>",(testToString)); Inst61++; } } catch(e) {}
testToString("-1.2e-8", (-0.000000012));
try { if (Inst62 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3289,3301,78>",(testToString)); Inst62++; } } catch(e) {}
testToString("-1.23e-8", (-0.0000000123));

try { if (Inst63 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3333,3345,80>",(testToString)); Inst63++; } } catch(e) {}
testToString("1000", (1000));
try { if (Inst64 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3363,3375,81>",(testToString)); Inst64++; } } catch(e) {}
testToString("0.00001", (0.00001));
try { if (Inst65 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3399,3411,82>",(testToString)); Inst65++; } } catch(e) {}
testToString("1000000000000000100", (1000000000000000128));
try { if (Inst66 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3459,3471,83>",(testToString)); Inst66++; } } catch(e) {}
testToString("1e+21", (1000000000000000012800));
try { if (Inst67 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3508,3520,84>",(testToString)); Inst67++; } } catch(e) {}
testToString("-1e+21", (-1000000000000000012800));
try { if (Inst68 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3559,3571,85>",(testToString)); Inst68++; } } catch(e) {}
testToString("1e-7", (0.0000001));
try { if (Inst69 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3594,3606,86>",(testToString)); Inst69++; } } catch(e) {}
testToString("-1e-7", (-0.0000001));
try { if (Inst70 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3631,3643,87>",(testToString)); Inst70++; } } catch(e) {}
testToString("1.0000000000000001e+21", (1000000000000000128000));
try { if (Inst71 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3697,3709,88>",(testToString)); Inst71++; } } catch(e) {}
testToString("0.000001", (0.000001));
try { if (Inst72 <= 1000 && typeof (testToString) != "undefined") {_RecordType("<3735,3747,89>",(testToString)); Inst72++; } } catch(e) {}
testToString("1e-7", (0.0000001));

