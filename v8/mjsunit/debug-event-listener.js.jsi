var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}

// Simple function which stores the last debug event.
try { if (Inst4 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1798,1804,33>",(Object)); Inst4++; } } catch(e) {}
lastDebugEvent = new Object();
try { if (Inst3 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<1777,1791,33>",(lastDebugEvent)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1817,1825,34>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<1826,1831,34>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1833,1843,34>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1845,1855,34>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1857,1861,34>",(data)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<1871,1876,35>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<1880,1902,35>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1880,1896,35>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1880,1885,35>",(Debug)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (event) != "undefined") {_RecordType("<1912,1917,36>",(event)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Debug.DebugEvent.Exception) != "undefined") {_RecordType("<1921,1947,36>",(Debug.DebugEvent.Exception)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1921,1937,36>",(Debug.DebugEvent)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1921,1926,36>",(Debug)); Inst17++; } } catch(e) {}
  if (event == Debug.DebugEvent.Break ||
      event == Debug.DebugEvent.Exception)
  {
try { if (Inst20 <= 1000 && typeof (event) != "undefined") {_RecordType("<1980,1985,38>",(event)); Inst20++; } } catch(e) {}
    lastDebugEvent.event = event;
try { if (Inst18 <= 1000 && typeof (lastDebugEvent.event) != "undefined") {_RecordType("<1957,1977,38>",(lastDebugEvent.event)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<1957,1971,38>",(lastDebugEvent)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (exec_state.frame().func().name) != "undefined") {_RecordType("<2022,2052,39>",(exec_state.frame().func().name)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (exec_state.frame().func) != "undefined") {_RecordType("<2022,2045,39>",(exec_state.frame().func)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<2022,2038,39>",(exec_state.frame)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2022,2032,39>",(exec_state)); Inst26++; } } catch(e) {}
    lastDebugEvent.frameFuncName = exec_state.frame().func().name();
try { if (Inst21 <= 1000 && typeof (lastDebugEvent.frameFuncName) != "undefined") {_RecordType("<1991,2019,39>",(lastDebugEvent.frameFuncName)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<1991,2005,39>",(lastDebugEvent)); Inst22++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2088,2098,40>",(event_data)); Inst29++; } } catch(e) {}
    lastDebugEvent.event_data = event_data;
try { if (Inst27 <= 1000 && typeof (lastDebugEvent.event_data) != "undefined") {_RecordType("<2060,2085,40>",(lastDebugEvent.event_data)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<2060,2074,40>",(lastDebugEvent)); Inst28++; } } catch(e) {}
  }
};

// Add the debug event listener.
try { if (Inst30 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2141,2158,45>",(Debug.setListener)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2141,2146,45>",(Debug)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2159,2167,45>",(listener)); Inst32++; } } catch(e) {}
Debug.setListener(listener);
// Get events from handled exceptions.
try { if (Inst33 <= 1000 && typeof (Debug.setBreakOnException) != "undefined") {_RecordType("<2209,2234,47>",(Debug.setBreakOnException)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2209,2214,47>",(Debug)); Inst34++; } } catch(e) {}
Debug.setBreakOnException();

// Test debug event for handled exception.
try { if (Inst35 <= 1000 && typeof (f) != "undefined") {_RecordType("<2292,2293,50>",(f)); Inst35++; } } catch(e) {}
(function f(){
try { if (Inst37 <= 1000 && typeof (e) != "undefined") {_RecordType("<2324,2325,53>",(e)); Inst37++; } } catch(e) {}
  try {
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2309,2310,52>",(x)); Inst36++; } } catch(e) {}
    x();
  } catch(e) {
    // Do nothing. Ignore exception.
  }
})();
try { if (Inst38 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2376,2386,57>",(assertTrue)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (lastDebugEvent.event) != "undefined") {_RecordType("<2387,2407,57>",(lastDebugEvent.event)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<2387,2401,57>",(lastDebugEvent)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Debug.DebugEvent.Exception) != "undefined") {_RecordType("<2411,2437,57>",(Debug.DebugEvent.Exception)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<2411,2427,57>",(Debug.DebugEvent)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2411,2416,57>",(Debug)); Inst43++; } } catch(e) {}
assertTrue(lastDebugEvent.event == Debug.DebugEvent.Exception);
try { if (Inst44 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2440,2452,58>",(assertEquals)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (lastDebugEvent.frameFuncName) != "undefined") {_RecordType("<2453,2481,58>",(lastDebugEvent.frameFuncName)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<2453,2467,58>",(lastDebugEvent)); Inst46++; } } catch(e) {}
assertEquals(lastDebugEvent.frameFuncName, "f");
try { if (Inst47 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2489,2500,59>",(assertFalse)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (lastDebugEvent.event_data.uncaught) != "undefined") {_RecordType("<2501,2535,59>",(lastDebugEvent.event_data.uncaught)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (lastDebugEvent.event_data) != "undefined") {_RecordType("<2501,2526,59>",(lastDebugEvent.event_data)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<2501,2515,59>",(lastDebugEvent)); Inst50++; } } catch(e) {}
assertFalse(lastDebugEvent.event_data.uncaught());
try { if (Inst51 <= 1000 && typeof (Debug.clearBreakOnException) != "undefined") {_RecordType("<2540,2567,60>",(Debug.clearBreakOnException)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2540,2545,60>",(Debug)); Inst52++; } } catch(e) {}
Debug.clearBreakOnException();

// Test debug event for break point.
try { if (Inst53 <= 1000 && typeof (a) != "undefined") {_RecordType("<2618,2619,63>",(a)); Inst53++; } } catch(e) {}
function a() {
  x = 1;
try { if (Inst54 <= 1000 && typeof (x) != "undefined") {_RecordType("<2626,2627,64>",(x)); Inst54++; } } catch(e) {}
  y = 2;
try { if (Inst55 <= 1000 && typeof (y) != "undefined") {_RecordType("<2635,2636,65>",(y)); Inst55++; } } catch(e) {}
  z = 3;
try { if (Inst56 <= 1000 && typeof (z) != "undefined") {_RecordType("<2644,2645,66>",(z)); Inst56++; } } catch(e) {}
};
try { if (Inst57 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<2654,2673,68>",(Debug.setBreakPoint)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2654,2659,68>",(Debug)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (a) != "undefined") {_RecordType("<2674,2675,68>",(a)); Inst59++; } } catch(e) {}
Debug.setBreakPoint(a, 1);
try { if (Inst60 <= 1000 && typeof (a) != "undefined") {_RecordType("<2681,2682,69>",(a)); Inst60++; } } catch(e) {}
a();
try { if (Inst61 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2686,2696,70>",(assertTrue)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (lastDebugEvent.event) != "undefined") {_RecordType("<2697,2717,70>",(lastDebugEvent.event)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<2697,2711,70>",(lastDebugEvent)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<2721,2743,70>",(Debug.DebugEvent.Break)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<2721,2737,70>",(Debug.DebugEvent)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2721,2726,70>",(Debug)); Inst66++; } } catch(e) {}
assertTrue(lastDebugEvent.event == Debug.DebugEvent.Break);
try { if (Inst67 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2746,2758,71>",(assertEquals)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (lastDebugEvent.frameFuncName) != "undefined") {_RecordType("<2759,2787,71>",(lastDebugEvent.frameFuncName)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (lastDebugEvent) != "undefined") {_RecordType("<2759,2773,71>",(lastDebugEvent)); Inst69++; } } catch(e) {}
assertEquals(lastDebugEvent.frameFuncName, "a");

try { if (Inst70 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2796,2813,73>",(Debug.setListener)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2796,2801,73>",(Debug)); Inst71++; } } catch(e) {}
Debug.setListener(null);

