var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Long string to trigger caching.
var string =
"Friends, Romans, countrymen, lend me your ears!  \
 I come to bury Caesar, not to praise him.        \
 The evil that men do lives after them,           \
 The good is oft interred with their bones;       \
 So let it be with Caesar. The noble Brutus       \
 Hath told you Caesar was ambitious;              \
 If it were so, it was a grievous fault,          \
 And grievously hath Caesar answer'd it.          \
 Here, under leave of Brutus and the rest-        \
 For Brutus is an honorable man;                  \
 So are they all, all honorable men-              \
 Come I to speak in Caesar's funeral.             \
 He was my friend, faithful and just to me;       \
 But Brutus says he was ambitious,                \
 And Brutus is an honorable man.                  \
 He hath brought many captives home to Rome,      \
 Whose ransoms did the general coffers fill.      \
 Did this in Caesar seem ambitious?               \
 When that the poor have cried, Caesar hath wept; \
 Ambition should be made of sterner stuff:        \
 Yet Brutus says he was ambitious,                \
 And Brutus is an honorable man.                  \
 You all did see that on the Lupercal             \
 I thrice presented him a kingly crown,           \
 Which he did thrice refuse. Was this ambition?   \
 Yet Brutus says he was ambitious,                \
 And sure he is an honorable man.                 \
 I speak not to disprove what Brutus spoke,       \
 But here I am to speak what I do know.           \
 You all did love him once, not without cause;    \
 What cause withholds you then to mourn for him?  \
 O judgement, thou art fled to brutish beasts,    \
 And men have lost their reason. Bear with me;    \
 My heart is in the coffin there with Caesar,     \
 And I must pause till it come back to me.";
try { if (Inst0 <= 1000 && typeof (string) != "undefined") {_RecordType("<1637,1643,29>",(string)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (string.replace) != "undefined") {_RecordType("<3475,3489,66>",(string.replace)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (string) != "undefined") {_RecordType("<3475,3481,66>",(string)); Inst3++; } } catch(e) {}
var replaced = string.replace(/\b\w+\b/g, function() { return "foo"; });
try { if (Inst1 <= 1000 && typeof (replaced) != "undefined") {_RecordType("<3464,3472,66>",(replaced)); Inst1++; } } catch(e) {}
for (var i = 0; i < 3; i++) {
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<3542,3543,67>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<3549,3550,67>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<3556,3557,67>",(i)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3565,3577,68>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (replaced) != "undefined") {_RecordType("<3578,3586,68>",(replaced)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (string.replace) != "undefined") {_RecordType("<3603,3617,69>",(string.replace)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (string) != "undefined") {_RecordType("<3603,3609,69>",(string)); Inst10++; } } catch(e) {}
  assertEquals(replaced,
               string.replace(/\b\w+\b/g, function() { return "foo"; }));
}

// Check that the result is in a COW array.
try { if (Inst12 <= 1000 && typeof (string.split) != "undefined") {_RecordType("<3721,3733,73>",(string.split)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (string) != "undefined") {_RecordType("<3721,3727,73>",(string)); Inst13++; } } catch(e) {}
var words = string.split(" ");
try { if (Inst11 <= 1000 && typeof (words) != "undefined") {_RecordType("<3713,3718,73>",(words)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3740,3752,74>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (words[0]) != "undefined") {_RecordType("<3765,3773,74>",(words[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (words) != "undefined") {_RecordType("<3765,3770,74>",(words)); Inst16++; } } catch(e) {}
assertEquals("Friends,", words[0]);
words[0] = "Enemies,";
try { if (Inst17 <= 1000 && typeof (words[0]) != "undefined") {_RecordType("<3776,3784,75>",(words[0])); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (words) != "undefined") {_RecordType("<3776,3781,75>",(words)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (string.split) != "undefined") {_RecordType("<3807,3819,76>",(string.split)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (string) != "undefined") {_RecordType("<3807,3813,76>",(string)); Inst21++; } } catch(e) {}
words = string.split(" ");
try { if (Inst19 <= 1000 && typeof (words) != "undefined") {_RecordType("<3799,3804,76>",(words)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3826,3838,77>",(assertEquals)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (words[0]) != "undefined") {_RecordType("<3851,3859,77>",(words[0])); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (words) != "undefined") {_RecordType("<3851,3856,77>",(words)); Inst24++; } } catch(e) {}
assertEquals("Friends,", words[0]);

