var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<1607,1617,28>",(testBitNot)); Inst0++; } } catch(e) {}
function testBitNot(x, name) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1618,1619,28>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (name) != "undefined") {_RecordType("<1621,1625,28>",(name)); Inst2++; } } catch(e) {}
  // The VM constant folds so we use that to check the result.
try { if (Inst4 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1709,1713,30>",(eval)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (x) != "undefined") {_RecordType("<1721,1722,30>",(x)); Inst5++; } } catch(e) {}
  var expected = eval("~(" + x + ")");
try { if (Inst3 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1698,1706,30>",(expected)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (x) != "undefined") {_RecordType("<1747,1748,31>",(x)); Inst7++; } } catch(e) {}
  var actual = ~x;
try { if (Inst6 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1737,1743,31>",(actual)); Inst6++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1752,1764,32>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1765,1773,32>",(expected)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1775,1781,32>",(actual)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (name) != "undefined") {_RecordType("<1791,1795,32>",(name)); Inst11++; } } catch(e) {}
  assertEquals(expected, actual, "x: " + name);

  // Test the path where we can overwrite the result. Use -
  // to avoid concatenating strings.
try { if (Inst13 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1909,1913,36>",(eval)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (x) != "undefined") {_RecordType("<1921,1922,36>",(x)); Inst14++; } } catch(e) {}
  expected = eval("~(" + x + " - 0.01)");
try { if (Inst12 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1898,1906,36>",(expected)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1951,1952,37>",(x)); Inst16++; } } catch(e) {}
  actual = ~(x - 0.01);
try { if (Inst15 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1940,1946,37>",(actual)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1964,1976,38>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1977,1985,38>",(expected)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (actual) != "undefined") {_RecordType("<1987,1993,38>",(actual)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (name) != "undefined") {_RecordType("<2010,2014,38>",(name)); Inst20++; } } catch(e) {}
  assertEquals(expected, actual, "x - 0.01: " + name);
}


try { if (Inst21 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2021,2031,42>",(testBitNot)); Inst21++; } } catch(e) {}
testBitNot(0, 0);
try { if (Inst22 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2039,2049,43>",(testBitNot)); Inst22++; } } catch(e) {}
testBitNot(1, 1);
try { if (Inst23 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2057,2067,44>",(testBitNot)); Inst23++; } } catch(e) {}
testBitNot(-1, 1);
try { if (Inst24 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2076,2086,45>",(testBitNot)); Inst24++; } } catch(e) {}
testBitNot(100, 100);
try { if (Inst25 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2098,2108,46>",(testBitNot)); Inst25++; } } catch(e) {}
testBitNot(0x40000000, "0x40000000");
try { if (Inst26 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2136,2146,47>",(testBitNot)); Inst26++; } } catch(e) {}
testBitNot(0x7fffffff, "0x7fffffff");
try { if (Inst27 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2174,2184,48>",(testBitNot)); Inst27++; } } catch(e) {}
testBitNot(0x80000000, "0x80000000");

try { if (Inst28 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2213,2223,50>",(testBitNot)); Inst28++; } } catch(e) {}
testBitNot(2.2, 2.2);
try { if (Inst29 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2235,2245,51>",(testBitNot)); Inst29++; } } catch(e) {}
testBitNot(-2.3, -2.3);
try { if (Inst30 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2259,2269,52>",(testBitNot)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2270,2278,52>",(Infinity)); Inst31++; } } catch(e) {}
testBitNot(Infinity, "Infinity");
try { if (Inst32 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2293,2303,53>",(testBitNot)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2304,2307,53>",(NaN)); Inst33++; } } catch(e) {}
testBitNot(NaN, "NaN");
try { if (Inst34 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2317,2327,54>",(testBitNot)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2329,2337,54>",(Infinity)); Inst35++; } } catch(e) {}
testBitNot(-Infinity, "-Infinity");
try { if (Inst36 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2353,2363,55>",(testBitNot)); Inst36++; } } catch(e) {}
testBitNot(0x40000000 + 0.12345, "float1");
try { if (Inst37 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2397,2407,56>",(testBitNot)); Inst37++; } } catch(e) {}
testBitNot(0x40000000 - 0.12345, "float2");
try { if (Inst38 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2441,2451,57>",(testBitNot)); Inst38++; } } catch(e) {}
testBitNot(0x7fffffff + 0.12345, "float3");
try { if (Inst39 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2485,2495,58>",(testBitNot)); Inst39++; } } catch(e) {}
testBitNot(0x7fffffff - 0.12345, "float4");
try { if (Inst40 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2529,2539,59>",(testBitNot)); Inst40++; } } catch(e) {}
testBitNot(0x80000000 + 0.12345, "float5");
try { if (Inst41 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2573,2583,60>",(testBitNot)); Inst41++; } } catch(e) {}
testBitNot(0x80000000 - 0.12345, "float6");

try { if (Inst42 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2618,2628,62>",(testBitNot)); Inst42++; } } catch(e) {}
testBitNot("0", "string0");
try { if (Inst43 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2646,2656,63>",(testBitNot)); Inst43++; } } catch(e) {}
testBitNot("2.3", "string2.3");
try { if (Inst44 <= 1000 && typeof (testBitNot) != "undefined") {_RecordType("<2678,2688,64>",(testBitNot)); Inst44++; } } catch(e) {}
testBitNot("-9.4", "string-9.4");


// Try to test that we can deal with allocation failures in
// the fast path and just use the slow path instead.
try { if (Inst45 <= 1000 && typeof (TryToGC) != "undefined") {_RecordType("<2836,2843,69>",(TryToGC)); Inst45++; } } catch(e) {}
function TryToGC() {
  var x = 0x40000000;
try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<2854,2855,70>",(x)); Inst46++; } } catch(e) {}
  // Put in an eval to foil Crankshaft.
try { if (Inst47 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2912,2916,72>",(eval)); Inst47++; } } catch(e) {}
  eval("");
  for (var i = 0; i < 1000000; i++) {
try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<2933,2934,73>",(i)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (i) != "undefined") {_RecordType("<2940,2941,73>",(i)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (i) != "undefined") {_RecordType("<2953,2954,73>",(i)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2964,2976,74>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (x) != "undefined") {_RecordType("<2991,2992,74>",(x)); Inst52++; } } catch(e) {}
    assertEquals(~0x40000000, ~x);
  }
}
try { if (Inst53 <= 1000 && typeof (TryToGC) != "undefined") {_RecordType("<3001,3008,77>",(TryToGC)); Inst53++; } } catch(e) {}
TryToGC();

