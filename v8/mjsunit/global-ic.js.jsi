var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1607,1608,28>",(f)); Inst0++; } } catch(e) {}
function f() {
  return 87;
}

try { if (Inst1 <= 1000 && typeof (LoadFromGlobal) != "undefined") {_RecordType("<1638,1652,32>",(LoadFromGlobal)); Inst1++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (global.x) != "undefined") {_RecordType("<1670,1678,32>",(global.x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (global) != "undefined") {_RecordType("<1670,1676,32>",(global)); Inst4++; } } catch(e) {}
function LoadFromGlobal(global) { return global.x; }
try { if (Inst2 <= 1000 && typeof (global) != "undefined") {_RecordType("<1653,1659,32>",(global)); Inst2++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (StoreToGlobal) != "undefined") {_RecordType("<1691,1704,33>",(StoreToGlobal)); Inst5++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<1733,1738,33>",(value)); Inst10++; } } catch(e) {}
function StoreToGlobal(global, value) { global.x = value; }
try { if (Inst6 <= 1000 && typeof (global) != "undefined") {_RecordType("<1705,1711,33>",(global)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (value) != "undefined") {_RecordType("<1713,1718,33>",(value)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (global.x) != "undefined") {_RecordType("<1722,1730,33>",(global.x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (global) != "undefined") {_RecordType("<1722,1728,33>",(global)); Inst9++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (CallOnGlobal) != "undefined") {_RecordType("<1751,1763,34>",(CallOnGlobal)); Inst11++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (global.f) != "undefined") {_RecordType("<1781,1789,34>",(global.f)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (global) != "undefined") {_RecordType("<1781,1787,34>",(global)); Inst14++; } } catch(e) {}
function CallOnGlobal(global) { return global.f(); }
try { if (Inst12 <= 1000 && typeof (global) != "undefined") {_RecordType("<1764,1770,34>",(global)); Inst12++; } } catch(e) {}

// Initialize the ICs in the functions.
for (var i = 0; i < 3; i++) {
try { if (Inst15 <= 1000 && typeof (i) != "undefined") {_RecordType("<1845,1846,37>",(i)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1852,1853,37>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1859,1860,37>",(i)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (StoreToGlobal) != "undefined") {_RecordType("<1868,1881,38>",(StoreToGlobal)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1893,1894,38>",(i)); Inst19++; } } catch(e) {}
  StoreToGlobal(this, 42 + i);
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1899,1911,39>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<1917,1918,39>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (LoadFromGlobal) != "undefined") {_RecordType("<1920,1934,39>",(LoadFromGlobal)); Inst22++; } } catch(e) {}
  assertEquals(42 + i, LoadFromGlobal(this));
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1945,1957,40>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (CallOnGlobal) != "undefined") {_RecordType("<1962,1974,40>",(CallOnGlobal)); Inst24++; } } catch(e) {}
  assertEquals(87, CallOnGlobal(this));
}

// Try the ICs with a smi. This should not crash.
for (var i = 0; i < 3; i++) {
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2045,2046,44>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2052,2053,44>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<2059,2060,44>",(i)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (StoreToGlobal) != "undefined") {_RecordType("<2068,2081,45>",(StoreToGlobal)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<2082,2083,45>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<2090,2091,45>",(i)); Inst30++; } } catch(e) {}
  StoreToGlobal(i, 42 + i);
try { if (Inst31 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2096,2106,46>",(assertTrue)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (LoadFromGlobal) != "undefined") {_RecordType("<2114,2128,46>",(LoadFromGlobal)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<2129,2130,46>",(i)); Inst33++; } } catch(e) {}
  assertTrue(typeof LoadFromGlobal(i) == "undefined");
try { if (Inst34 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2151,2163,47>",(assertThrows)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<2182,2183,47>",(i)); Inst35++; } } catch(e) {}
  assertThrows("CallOnGlobal(" + i + ")");
}

