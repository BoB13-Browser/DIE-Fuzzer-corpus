var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test both the Harmony egal operator and it's function equivalent.

try { if (Inst0 <= 1000 && typeof (TestEgal) != "undefined") {_RecordType("<1677,1685,30>",(TestEgal)); Inst0++; } } catch(e) {}
function TestEgal(expected, x, y) {
try { if (Inst1 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1686,1694,30>",(expected)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1696,1697,30>",(x)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (y) != "undefined") {_RecordType("<1699,1700,30>",(y)); Inst3++; } } catch(e) {}
  // TODO(mstarzinger): Once we have the egal operator, we can test it here.
try { if (Inst4 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<1783,1793,32>",(assertSame)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1794,1802,32>",(expected)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Object.is) != "undefined") {_RecordType("<1804,1813,32>",(Object.is)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Object) != "undefined") {_RecordType("<1804,1810,32>",(Object)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1814,1815,32>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<1817,1818,32>",(y)); Inst9++; } } catch(e) {}
  assertSame(expected, Object.is(x, y));
}

try { if (Inst11 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1850,1858,35>",(Infinity)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1861,1869,35>",(Infinity)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1900,1909,36>",(undefined)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (Symbol) != "undefined") {_RecordType("<1924,1930,36>",(Symbol)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1939,1942,36>",(NaN)); Inst15++; } } catch(e) {}
var test_set = [ {}, [], Infinity, -Infinity, "s", "ã‚¢", 0, 0/-1, null,
    undefined, true, false, Symbol("foo"), NaN ];
try { if (Inst10 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<1829,1837,35>",(test_set)); Inst10++; } } catch(e) {}
for (var i = 0; i < test_set.length; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1955,1956,37>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1962,1963,37>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (test_set.length) != "undefined") {_RecordType("<1966,1981,37>",(test_set.length)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<1966,1974,37>",(test_set)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1983,1984,37>",(i)); Inst20++; } } catch(e) {}
  for (var j = 0; j < test_set.length; j++) {
try { if (Inst21 <= 1000 && typeof (j) != "undefined") {_RecordType("<2001,2002,38>",(j)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (j) != "undefined") {_RecordType("<2008,2009,38>",(j)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (test_set.length) != "undefined") {_RecordType("<2012,2027,38>",(test_set.length)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2012,2020,38>",(test_set)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (j) != "undefined") {_RecordType("<2029,2030,38>",(j)); Inst25++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<2044,2045,39>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (j) != "undefined") {_RecordType("<2049,2050,39>",(j)); Inst27++; } } catch(e) {}
    if (i == j) {
try { if (Inst28 <= 1000 && typeof (assertSame) != "undefined") {_RecordType("<2060,2070,40>",(assertSame)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (test_set[i]) != "undefined") {_RecordType("<2071,2082,40>",(test_set[i])); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2071,2079,40>",(test_set)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (test_set[j]) != "undefined") {_RecordType("<2084,2095,40>",(test_set[j])); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2084,2092,40>",(test_set)); Inst32++; } } catch(e) {}
      assertSame(test_set[i], test_set[j]);
try { if (Inst33 <= 1000 && typeof (TestEgal) != "undefined") {_RecordType("<2104,2112,41>",(TestEgal)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (test_set[i]) != "undefined") {_RecordType("<2119,2130,41>",(test_set[i])); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2119,2127,41>",(test_set)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (test_set[j]) != "undefined") {_RecordType("<2132,2143,41>",(test_set[j])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2132,2140,41>",(test_set)); Inst37++; } } catch(e) {}
      TestEgal(true, test_set[i], test_set[j]);
    } else {
try { if (Inst38 <= 1000 && typeof (TestEgal) != "undefined") {_RecordType("<2165,2173,43>",(TestEgal)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (test_set[i]) != "undefined") {_RecordType("<2181,2192,43>",(test_set[i])); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2181,2189,43>",(test_set)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (test_set[j]) != "undefined") {_RecordType("<2194,2205,43>",(test_set[j])); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2194,2202,43>",(test_set)); Inst42++; } } catch(e) {}
      TestEgal(false, test_set[i], test_set[j]);
try { if (Inst43 <= 1000 && typeof (TestEgal) != "undefined") {_RecordType("<2214,2222,44>",(TestEgal)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (test_set[j]) != "undefined") {_RecordType("<2230,2241,44>",(test_set[j])); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2230,2238,44>",(test_set)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (test_set[i]) != "undefined") {_RecordType("<2243,2254,44>",(test_set[i])); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (test_set) != "undefined") {_RecordType("<2243,2251,44>",(test_set)); Inst47++; } } catch(e) {}
      TestEgal(false, test_set[j], test_set[i]);
    }
  }
}

