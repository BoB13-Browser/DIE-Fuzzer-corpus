var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// According to ECMA-262, sections 8.6.2.2 and 8.6.2.3 you're not
// allowed to override read-only properties, not even if the read-only
// property is in the prototype chain.
//
// However, for compatibility with WebKit/JSC, we allow the overriding
// of read-only properties in prototype chains.

try { if (Inst0 <= 1000 && typeof (F) != "undefined") {_RecordType("<1906,1907,35>",(F)); Inst0++; } } catch(e) {}
function F() {};
try { if (Inst3 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1928,1934,36>",(Number)); Inst3++; } } catch(e) {}
F.prototype = Number;
try { if (Inst1 <= 1000 && typeof (F.prototype) != "undefined") {_RecordType("<1914,1925,36>",(F.prototype)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (F) != "undefined") {_RecordType("<1914,1915,36>",(F)); Inst2++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<1963,1979,38>",(Number.MAX_VALUE)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Number) != "undefined") {_RecordType("<1963,1969,38>",(Number)); Inst6++; } } catch(e) {}
var original_number_max = Number.MAX_VALUE;
try { if (Inst4 <= 1000 && typeof (original_number_max) != "undefined") {_RecordType("<1941,1960,38>",(original_number_max)); Inst4++; } } catch(e) {}

// Assignment to a property which does not exist on the object itself,
// but is read-only in a prototype does not take effect.
try { if (Inst8 <= 1000 && typeof (F) != "undefined") {_RecordType("<2122,2123,42>",(F)); Inst8++; } } catch(e) {}
var f = new F();
try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<2114,2115,42>",(f)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2127,2139,43>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (original_number_max) != "undefined") {_RecordType("<2140,2159,43>",(original_number_max)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (f.MAX_VALUE) != "undefined") {_RecordType("<2161,2172,43>",(f.MAX_VALUE)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<2161,2162,43>",(f)); Inst12++; } } catch(e) {}
assertEquals(original_number_max, f.MAX_VALUE);
f.MAX_VALUE = 42;
try { if (Inst13 <= 1000 && typeof (f.MAX_VALUE) != "undefined") {_RecordType("<2175,2186,44>",(f.MAX_VALUE)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<2175,2176,44>",(f)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2193,2205,45>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (original_number_max) != "undefined") {_RecordType("<2206,2225,45>",(original_number_max)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f.MAX_VALUE) != "undefined") {_RecordType("<2227,2238,45>",(f.MAX_VALUE)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<2227,2228,45>",(f)); Inst18++; } } catch(e) {}
assertEquals(original_number_max, f.MAX_VALUE);

// Assignment to a property which does not exist on the object itself,
// but is read-only in a prototype does not take effect.
try { if (Inst20 <= 1000 && typeof (F) != "undefined") {_RecordType("<2378,2379,49>",(F)); Inst20++; } } catch(e) {}
f = new F();
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<2370,2371,49>",(f)); Inst19++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<2389,2390,50>",(f)); Inst21++; } } catch(e) {}
with (f) {
  MAX_VALUE = 42;
try { if (Inst22 <= 1000 && typeof (MAX_VALUE) != "undefined") {_RecordType("<2396,2405,51>",(MAX_VALUE)); Inst22++; } } catch(e) {}
}
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2414,2426,53>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (original_number_max) != "undefined") {_RecordType("<2427,2446,53>",(original_number_max)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (f.MAX_VALUE) != "undefined") {_RecordType("<2448,2459,53>",(f.MAX_VALUE)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f) != "undefined") {_RecordType("<2448,2449,53>",(f)); Inst26++; } } catch(e) {}
assertEquals(original_number_max, f.MAX_VALUE);

// Assignment to read-only property on the object itself is ignored.
Number.MAX_VALUE = 42;
try { if (Inst27 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<2532,2548,56>",(Number.MAX_VALUE)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2532,2538,56>",(Number)); Inst28++; } } catch(e) {}
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2555,2567,57>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (original_number_max) != "undefined") {_RecordType("<2568,2587,57>",(original_number_max)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Number.MAX_VALUE) != "undefined") {_RecordType("<2589,2605,57>",(Number.MAX_VALUE)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Number) != "undefined") {_RecordType("<2589,2595,57>",(Number)); Inst32++; } } catch(e) {}
assertEquals(original_number_max, Number.MAX_VALUE);

// G should be read-only on the global object and the assignment is
// ignored.
try { if (Inst33 <= 1000 && typeof (G) != "undefined") {_RecordType("<2699,2700,61>",(G)); Inst33++; } } catch(e) {}
(function G() {
try { if (Inst34 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2707,2711,62>",(eval)); Inst34++; } } catch(e) {}
  eval("G = 42;");
try { if (Inst35 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2726,2736,63>",(assertTrue)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (G) != "undefined") {_RecordType("<2744,2745,63>",(G)); Inst36++; } } catch(e) {}
  assertTrue(typeof G === 'function');
})();

