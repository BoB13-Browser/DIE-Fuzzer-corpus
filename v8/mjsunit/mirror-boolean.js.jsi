var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Test the mirror object for boolean values

try { if (Inst0 <= 1000 && typeof (testBooleanMirror) != "undefined") {_RecordType("<1687,1704,31>",(testBooleanMirror)); Inst0++; } } catch(e) {}
function testBooleanMirror(b) {
try { if (Inst1 <= 1000 && typeof (b) != "undefined") {_RecordType("<1705,1706,31>",(b)); Inst1++; } } catch(e) {}
  // Create mirror and JSON representation.
try { if (Inst3 <= 1000 && typeof (debug.MakeMirror) != "undefined") {_RecordType("<1769,1785,33>",(debug.MakeMirror)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1769,1774,33>",(debug)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (b) != "undefined") {_RecordType("<1786,1787,33>",(b)); Inst5++; } } catch(e) {}
  var mirror = debug.MakeMirror(b);
try { if (Inst2 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1760,1766,33>",(mirror)); Inst2++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (debug.MakeMirrorSerializer) != "undefined") {_RecordType("<1809,1835,34>",(debug.MakeMirrorSerializer)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1809,1814,34>",(debug)); Inst8++; } } catch(e) {}
  var serializer = debug.MakeMirrorSerializer();
try { if (Inst6 <= 1000 && typeof (serializer) != "undefined") {_RecordType("<1796,1806,34>",(serializer)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (JSON.stringify) != "undefined") {_RecordType("<1852,1866,35>",(JSON.stringify)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (JSON) != "undefined") {_RecordType("<1852,1856,35>",(JSON)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (serializer.serializeValue) != "undefined") {_RecordType("<1867,1892,35>",(serializer.serializeValue)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (serializer) != "undefined") {_RecordType("<1867,1877,35>",(serializer)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1893,1899,35>",(mirror)); Inst14++; } } catch(e) {}
  var json = JSON.stringify(serializer.serializeValue(mirror));
try { if (Inst9 <= 1000 && typeof (json) != "undefined") {_RecordType("<1845,1849,35>",(json)); Inst9++; } } catch(e) {}

  // Check the mirror hierachy.
try { if (Inst15 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1938,1948,38>",(assertTrue)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1949,1955,38>",(mirror)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (debug.Mirror) != "undefined") {_RecordType("<1967,1979,38>",(debug.Mirror)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1967,1972,38>",(debug)); Inst18++; } } catch(e) {}
  assertTrue(mirror instanceof debug.Mirror);
try { if (Inst19 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1984,1994,39>",(assertTrue)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<1995,2001,39>",(mirror)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (debug.ValueMirror) != "undefined") {_RecordType("<2013,2030,39>",(debug.ValueMirror)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2013,2018,39>",(debug)); Inst22++; } } catch(e) {}
  assertTrue(mirror instanceof debug.ValueMirror);
try { if (Inst23 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2035,2045,40>",(assertTrue)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2046,2052,40>",(mirror)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (debug.BooleanMirror) != "undefined") {_RecordType("<2064,2083,40>",(debug.BooleanMirror)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (debug) != "undefined") {_RecordType("<2064,2069,40>",(debug)); Inst26++; } } catch(e) {}
  assertTrue(mirror instanceof debug.BooleanMirror);

  // Check the mirror properties.
try { if (Inst27 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2123,2133,43>",(assertTrue)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (mirror.isBoolean) != "undefined") {_RecordType("<2134,2150,43>",(mirror.isBoolean)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2134,2140,43>",(mirror)); Inst29++; } } catch(e) {}
  assertTrue(mirror.isBoolean());
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2157,2169,44>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (mirror.type) != "undefined") {_RecordType("<2181,2192,44>",(mirror.type)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2181,2187,44>",(mirror)); Inst32++; } } catch(e) {}
  assertEquals('boolean', mirror.type());
try { if (Inst33 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2199,2209,45>",(assertTrue)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (mirror.isPrimitive) != "undefined") {_RecordType("<2210,2228,45>",(mirror.isPrimitive)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2210,2216,45>",(mirror)); Inst35++; } } catch(e) {}
  assertTrue(mirror.isPrimitive());

  // Test text representation
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2266,2278,48>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (b) != "undefined") {_RecordType("<2279,2280,48>",(b)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (mirror.toText) != "undefined") {_RecordType("<2301,2314,48>",(mirror.toText)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (mirror) != "undefined") {_RecordType("<2301,2307,48>",(mirror)); Inst39++; } } catch(e) {}
  assertEquals(b ? 'true' : 'false', mirror.toText());

  // Parse JSON representation and check.
try { if (Inst41 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2379,2383,51>",(eval)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (json) != "undefined") {_RecordType("<2390,2394,51>",(json)); Inst42++; } } catch(e) {}
  var fromJSON = eval('(' + json + ')');
try { if (Inst40 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2368,2376,51>",(fromJSON)); Inst40++; } } catch(e) {}
try { if (Inst43 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2405,2417,52>",(assertEquals)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (fromJSON.type) != "undefined") {_RecordType("<2429,2442,52>",(fromJSON.type)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2429,2437,52>",(fromJSON)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (json) != "undefined") {_RecordType("<2444,2448,52>",(json)); Inst46++; } } catch(e) {}
  assertEquals('boolean', fromJSON.type, json);
try { if (Inst47 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2453,2465,53>",(assertEquals)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (b) != "undefined") {_RecordType("<2466,2467,53>",(b)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (fromJSON.value) != "undefined") {_RecordType("<2469,2483,53>",(fromJSON.value)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (fromJSON) != "undefined") {_RecordType("<2469,2477,53>",(fromJSON)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (json) != "undefined") {_RecordType("<2485,2489,53>",(json)); Inst51++; } } catch(e) {}
  assertEquals(b, fromJSON.value, json);
}


// Test all boolean values.
try { if (Inst52 <= 1000 && typeof (testBooleanMirror) != "undefined") {_RecordType("<2524,2541,58>",(testBooleanMirror)); Inst52++; } } catch(e) {}
testBooleanMirror(true);
try { if (Inst53 <= 1000 && typeof (testBooleanMirror) != "undefined") {_RecordType("<2549,2566,59>",(testBooleanMirror)); Inst53++; } } catch(e) {}
testBooleanMirror(false);

