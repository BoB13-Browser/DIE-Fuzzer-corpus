var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that exceptions are not thrown when setting properties on object
// that have only a getter in a prototype object, except when we are in strict
// mode where exceptsions should be thrown.

var o = {};
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<1799,1800,32>",(o)); Inst0++; } } catch(e) {}
var p = {};
try { if (Inst1 <= 1000 && typeof (p) != "undefined") {_RecordType("<1811,1812,33>",(p)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (p.__defineGetter__) != "undefined") {_RecordType("<1819,1837,34>",(p.__defineGetter__)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (p) != "undefined") {_RecordType("<1819,1820,34>",(p)); Inst3++; } } catch(e) {}
p.__defineGetter__('x', function(){});
try { if (Inst4 <= 1000 && typeof (p.__defineGetter__) != "undefined") {_RecordType("<1858,1876,35>",(p.__defineGetter__)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<1858,1859,35>",(p)); Inst5++; } } catch(e) {}
p.__defineGetter__(0, function(){});
try { if (Inst8 <= 1000 && typeof (p) != "undefined") {_RecordType("<1909,1910,36>",(p)); Inst8++; } } catch(e) {}
o.__proto__ = p;
try { if (Inst6 <= 1000 && typeof (o.__proto__) != "undefined") {_RecordType("<1895,1906,36>",(o.__proto__)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o) != "undefined") {_RecordType("<1895,1896,36>",(o)); Inst7++; } } catch(e) {}

try { if (Inst9 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<1913,1931,38>",(assertDoesNotThrow)); Inst9++; } } catch(e) {}
assertDoesNotThrow("o.x = 42");
try { if (Inst10 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<1945,1963,39>",(assertDoesNotThrow)); Inst10++; } } catch(e) {}
assertDoesNotThrow("o[0] = 42");

try { if (Inst11 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<1979,1991,41>",(assertThrows)); Inst11++; } } catch(e) {}
assertThrows(function() { 'use strict'; o.x = 42; });
try { if (Inst12 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2019,2022,41>",(o.x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<2019,2020,41>",(o)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2033,2045,42>",(assertThrows)); Inst14++; } } catch(e) {}
assertThrows(function() { 'use strict'; o[0] = 42; });
try { if (Inst15 <= 1000 && typeof (o[0]) != "undefined") {_RecordType("<2073,2077,42>",(o[0])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (o) != "undefined") {_RecordType("<2073,2074,42>",(o)); Inst16++; } } catch(e) {}

try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<2098,2099,44>",(f)); Inst17++; } } catch(e) {}
function f() {
try { if (Inst18 <= 1000 && typeof (o) != "undefined") {_RecordType("<2111,2112,45>",(o)); Inst18++; } } catch(e) {}
  with(o) {
    x = 42;
try { if (Inst19 <= 1000 && typeof (x) != "undefined") {_RecordType("<2120,2121,46>",(x)); Inst19++; } } catch(e) {}
  }
}

try { if (Inst20 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2135,2153,50>",(assertDoesNotThrow)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f) != "undefined") {_RecordType("<2154,2155,50>",(f)); Inst21++; } } catch(e) {}
assertDoesNotThrow(f);

try { if (Inst23 <= 1000 && typeof (p) != "undefined") {_RecordType("<2171,2172,52>",(p)); Inst23++; } } catch(e) {}
__proto__ = p;
try { if (Inst22 <= 1000 && typeof (__proto__) != "undefined") {_RecordType("<2159,2168,52>",(__proto__)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (g) != "undefined") {_RecordType("<2183,2184,53>",(g)); Inst24++; } } catch(e) {}
function g() {
try { if (Inst25 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2191,2195,54>",(eval)); Inst25++; } } catch(e) {}
  eval('1');
  x = 42;
try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<2204,2205,55>",(x)); Inst26++; } } catch(e) {}
}

try { if (Inst27 <= 1000 && typeof (g_strict) != "undefined") {_RecordType("<2224,2232,58>",(g_strict)); Inst27++; } } catch(e) {}
function g_strict() {
  'use strict';
try { if (Inst28 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2255,2259,60>",(eval)); Inst28++; } } catch(e) {}
  eval('1');
  x = 42;
try { if (Inst29 <= 1000 && typeof (x) != "undefined") {_RecordType("<2268,2269,61>",(x)); Inst29++; } } catch(e) {}
}

try { if (Inst30 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2279,2297,64>",(assertDoesNotThrow)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (g) != "undefined") {_RecordType("<2298,2299,64>",(g)); Inst31++; } } catch(e) {}
assertDoesNotThrow(g);
try { if (Inst32 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2302,2314,65>",(assertThrows)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (g_strict) != "undefined") {_RecordType("<2315,2323,65>",(g_strict)); Inst33++; } } catch(e) {}
assertThrows(g_strict);

try { if (Inst35 <= 1000 && typeof (p) != "undefined") {_RecordType("<2339,2340,67>",(p)); Inst35++; } } catch(e) {}
__proto__ = p;
try { if (Inst34 <= 1000 && typeof (__proto__) != "undefined") {_RecordType("<2327,2336,67>",(__proto__)); Inst34++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (g2) != "undefined") {_RecordType("<2351,2353,68>",(g2)); Inst36++; } } catch(e) {}
function g2() {
  this[0] = 42;
try { if (Inst37 <= 1000 && typeof (this[0]) != "undefined") {_RecordType("<2360,2367,69>",(this[0])); Inst37++; } } catch(e) {}
}

try { if (Inst38 <= 1000 && typeof (g2_strict) != "undefined") {_RecordType("<2386,2395,72>",(g2_strict)); Inst38++; } } catch(e) {}
function g2_strict() {
  'use strict';
  this[0] = 42;
try { if (Inst39 <= 1000 && typeof (this[0]) != "undefined") {_RecordType("<2418,2425,74>",(this[0])); Inst39++; } } catch(e) {}
}

try { if (Inst40 <= 1000 && typeof (assertDoesNotThrow) != "undefined") {_RecordType("<2435,2453,77>",(assertDoesNotThrow)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (g2) != "undefined") {_RecordType("<2454,2456,77>",(g2)); Inst41++; } } catch(e) {}
assertDoesNotThrow(g2);
try { if (Inst42 <= 1000 && typeof (assertThrows) != "undefined") {_RecordType("<2459,2471,78>",(assertThrows)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (g2_strict) != "undefined") {_RecordType("<2472,2481,78>",(g2_strict)); Inst43++; } } catch(e) {}
assertThrows(g2_strict);

