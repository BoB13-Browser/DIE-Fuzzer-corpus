var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1711,1722,31>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1711,1716,31>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1703,1708,31>",(Debug)); Inst0++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1733,1737,33>",(Test)); Inst3++; } } catch(e) {}
function Test(old_expression, new_expression) {
try { if (Inst4 <= 1000 && typeof (old_expression) != "undefined") {_RecordType("<1738,1752,33>",(old_expression)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (new_expression) != "undefined") {_RecordType("<1754,1768,33>",(new_expression)); Inst5++; } } catch(e) {}
    // Generate several instances of function to test that we correctly fix
    // all functions in memory.
    var function_instance_number = 11;
try { if (Inst6 <= 1000 && typeof (function_instance_number) != "undefined") {_RecordType("<1888,1912,36>",(function_instance_number)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1923,1927,37>",(eval)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (old_expression) != "undefined") {_RecordType("<2177,2191,42>",(old_expression)); Inst8++; } } catch(e) {}
    eval("var t1 =1;\n" +
         "ChooseAnimalArray = [];\n" +
         "for (var i = 0; i < function_instance_number; i++) {\n" +
         "    ChooseAnimalArray.push(\n" +
         "        function ChooseAnimal() {\n" +
         "            return " + old_expression + ";\n" +
         "        });\n" +
         "}\n" +
         "var t2 =1;\n");

    for (var i = 0; i < ChooseAnimalArray.length; i++) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<2286,2287,47>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<2293,2294,47>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (ChooseAnimalArray.length) != "undefined") {_RecordType("<2297,2321,47>",(ChooseAnimalArray.length)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (ChooseAnimalArray) != "undefined") {_RecordType("<2297,2314,47>",(ChooseAnimalArray)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<2323,2324,47>",(i)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2338,2350,48>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (ChooseAnimalArray[i]) != "undefined") {_RecordType("<2358,2378,48>",(ChooseAnimalArray[i])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (ChooseAnimalArray) != "undefined") {_RecordType("<2358,2375,48>",(ChooseAnimalArray)); Inst16++; } } catch(e) {}
        assertEquals("Cat", ChooseAnimalArray[i]());
    }

try { if (Inst18 <= 1000 && typeof (Debug.findScript) != "undefined") {_RecordType("<2407,2423,51>",(Debug.findScript)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2407,2412,51>",(Debug)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ChooseAnimalArray[0]) != "undefined") {_RecordType("<2424,2444,51>",(ChooseAnimalArray[0])); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (ChooseAnimalArray) != "undefined") {_RecordType("<2424,2441,51>",(ChooseAnimalArray)); Inst21++; } } catch(e) {}
    var script = Debug.findScript(ChooseAnimalArray[0]);
try { if (Inst17 <= 1000 && typeof (script) != "undefined") {_RecordType("<2398,2404,51>",(script)); Inst17++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (script.source.indexOf) != "undefined") {_RecordType("<2468,2489,53>",(script.source.indexOf)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (script.source) != "undefined") {_RecordType("<2468,2481,53>",(script.source)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (script) != "undefined") {_RecordType("<2468,2474,53>",(script)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (old_expression) != "undefined") {_RecordType("<2490,2504,53>",(old_expression)); Inst26++; } } catch(e) {}
    var patch_pos = script.source.indexOf(old_expression);
try { if (Inst22 <= 1000 && typeof (patch_pos) != "undefined") {_RecordType("<2456,2465,53>",(patch_pos)); Inst22++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (new_expression) != "undefined") {_RecordType("<2534,2548,54>",(new_expression)); Inst28++; } } catch(e) {}
    var new_animal_patch = new_expression;
try { if (Inst27 <= 1000 && typeof (new_animal_patch) != "undefined") {_RecordType("<2515,2531,54>",(new_animal_patch)); Inst27++; } } catch(e) {}

try { if (Inst30 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2576,2581,56>",(Array)); Inst30++; } } catch(e) {}
    var change_log = new Array();
try { if (Inst29 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2559,2569,56>",(change_log)); Inst29++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (Debug.LiveEdit.TestApi.ApplySingleChunkPatch) != "undefined") {_RecordType("<2589,2633,57>",(Debug.LiveEdit.TestApi.ApplySingleChunkPatch)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (Debug.LiveEdit.TestApi) != "undefined") {_RecordType("<2589,2611,57>",(Debug.LiveEdit.TestApi)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Debug.LiveEdit) != "undefined") {_RecordType("<2589,2603,57>",(Debug.LiveEdit)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2589,2594,57>",(Debug)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (script) != "undefined") {_RecordType("<2634,2640,57>",(script)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (patch_pos) != "undefined") {_RecordType("<2642,2651,57>",(patch_pos)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (old_expression.length) != "undefined") {_RecordType("<2661,2682,58>",(old_expression.length)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (old_expression) != "undefined") {_RecordType("<2661,2675,58>",(old_expression)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (new_expression) != "undefined") {_RecordType("<2684,2698,58>",(new_expression)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (change_log) != "undefined") {_RecordType("<2700,2710,58>",(change_log)); Inst40++; } } catch(e) {}
    Debug.LiveEdit.TestApi.ApplySingleChunkPatch(script, patch_pos,
        old_expression.length, new_expression, change_log);

    for (var i = 0; i < ChooseAnimalArray.length; i++) {
try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<2727,2728,60>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<2734,2735,60>",(i)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (ChooseAnimalArray.length) != "undefined") {_RecordType("<2738,2762,60>",(ChooseAnimalArray.length)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (ChooseAnimalArray) != "undefined") {_RecordType("<2738,2755,60>",(ChooseAnimalArray)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<2764,2765,60>",(i)); Inst45++; } } catch(e) {}
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2779,2791,61>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (ChooseAnimalArray[i]) != "undefined") {_RecordType("<2804,2824,61>",(ChooseAnimalArray[i])); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (ChooseAnimalArray) != "undefined") {_RecordType("<2804,2821,61>",(ChooseAnimalArray)); Inst48++; } } catch(e) {}
        assertEquals("Capybara", ChooseAnimalArray[i]());
    }
}

// Check that old literal boilerplate was reset.
try { if (Inst49 <= 1000 && typeof (Test) != "undefined") {_RecordType("<2887,2891,66>",(Test)); Inst49++; } } catch(e) {}
Test("['Cat'][0]", "['Capybara'][0]");
try { if (Inst50 <= 1000 && typeof (Test) != "undefined") {_RecordType("<2926,2930,67>",(Test)); Inst50++; } } catch(e) {}
Test("['Cat'][0]", "{a:'Capybara'}.a");

// No literals -> 1 literal.
try { if (Inst51 <= 1000 && typeof (Test) != "undefined") {_RecordType("<2996,3000,70>",(Test)); Inst51++; } } catch(e) {}
Test("'Cat'", "['Capybara'][0]");

// No literals -> 2 literals.
try { if (Inst52 <= 1000 && typeof (Test) != "undefined") {_RecordType("<3061,3065,73>",(Test)); Inst52++; } } catch(e) {}
Test("'Cat'", "['Capy'][0] + {a:'bara'}.a");

// 1 literal -> no literals.
try { if (Inst53 <= 1000 && typeof (Test) != "undefined") {_RecordType("<3136,3140,76>",(Test)); Inst53++; } } catch(e) {}
Test("['Cat'][0]", "'Capybara'");

// 2 literals -> no literals.
try { if (Inst54 <= 1000 && typeof (Test) != "undefined") {_RecordType("<3201,3205,79>",(Test)); Inst54++; } } catch(e) {}
Test("['Ca'][0] + {a:'t'}.a", "'Capybara'");

// No literals -> regexp.
try { if (Inst55 <= 1000 && typeof (Test) != "undefined") {_RecordType("<3273,3277,82>",(Test)); Inst55++; } } catch(e) {}
Test("'Cat'", "(/.A.Y.A.A/i).exec('Capybara')[0]");

// Array literal -> regexp.
try { if (Inst56 <= 1000 && typeof (Test) != "undefined") {_RecordType("<3354,3358,85>",(Test)); Inst56++; } } catch(e) {}
Test("['Cat'][0]", "(/.A.Y.A.A/i).exec('Capybara')[0]");

// Regexp -> object literal.
try { if (Inst57 <= 1000 && typeof (Test) != "undefined") {_RecordType("<3441,3445,88>",(Test)); Inst57++; } } catch(e) {}
Test("(/.A./i).exec('Cat')[0]", "{c:'Capybara'}.c");

// No literals -> regexp.
try { if (Inst58 <= 1000 && typeof (Test) != "undefined") {_RecordType("<3521,3525,91>",(Test)); Inst58++; } } catch(e) {}
Test("'Cat'", "(/.A.Y.A.A/i).exec('Capybara')[0]");

// Regexp -> no literals.
try { if (Inst59 <= 1000 && typeof (Test) != "undefined") {_RecordType("<3600,3604,94>",(Test)); Inst59++; } } catch(e) {}
Test("(/.A./i).exec('Cat')[0]", "'Capybara'");

