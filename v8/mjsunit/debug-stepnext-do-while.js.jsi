var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --expose-debug-as debug
// Get the Debug object exposed from the debug context global object.
try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<1710,1721,30>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<1710,1715,30>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1702,1707,30>",(Debug)); Inst0++; } } catch(e) {}

var exception = null;
try { if (Inst3 <= 1000 && typeof (exception) != "undefined") {_RecordType("<1727,1736,32>",(exception)); Inst3++; } } catch(e) {}
var break_break_point_hit_count = 0;
try { if (Inst4 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<1749,1776,33>",(break_break_point_hit_count)); Inst4++; } } catch(e) {}

try { if (Inst5 <= 1000 && typeof (listener) != "undefined") {_RecordType("<1792,1800,35>",(listener)); Inst5++; } } catch(e) {}
function listener(event, exec_state, event_data, data) {
try { if (Inst6 <= 1000 && typeof (event) != "undefined") {_RecordType("<1801,1806,35>",(event)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<1808,1818,35>",(exec_state)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1820,1830,35>",(event_data)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (data) != "undefined") {_RecordType("<1832,1836,35>",(data)); Inst9++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (e) != "undefined") {_RecordType("<2532,2533,55>",(e)); Inst38++; } } catch(e) {}
  try {
try { if (Inst10 <= 1000 && typeof (event) != "undefined") {_RecordType("<1856,1861,37>",(event)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<1865,1887,37>",(Debug.DebugEvent.Break)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<1865,1881,37>",(Debug.DebugEvent)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1865,1870,37>",(Debug)); Inst13++; } } catch(e) {}
    if (event == Debug.DebugEvent.Break) {
try { if (Inst14 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<1901,1928,38>",(break_break_point_hit_count)); Inst14++; } } catch(e) {}
      if (break_break_point_hit_count == 0) {
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1945,1957,39>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (event_data.sourceLineText) != "undefined") {_RecordType("<1996,2021,40>",(event_data.sourceLineText)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<1996,2006,40>",(event_data)); Inst17++; } } catch(e) {}
        assertEquals('    debugger;',
                     event_data.sourceLineText());
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2034,2046,41>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (event_data.func().name) != "undefined") {_RecordType("<2061,2083,41>",(event_data.func().name)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (event_data.func) != "undefined") {_RecordType("<2061,2076,41>",(event_data.func)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2061,2071,41>",(event_data)); Inst21++; } } catch(e) {}
        assertEquals('runDoWhile', event_data.func().name());
try { if (Inst22 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2105,2132,42>",(break_break_point_hit_count)); Inst22++; } } catch(e) {}
      } else if (break_break_point_hit_count == 1) {
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2149,2161,43>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (event_data.sourceLineText) != "undefined") {_RecordType("<2210,2235,44>",(event_data.sourceLineText)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2210,2220,44>",(event_data)); Inst25++; } } catch(e) {}
        assertEquals('  } while(condition());',
                     event_data.sourceLineText());
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2248,2260,45>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (event_data.func().name) != "undefined") {_RecordType("<2275,2297,45>",(event_data.func().name)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (event_data.func) != "undefined") {_RecordType("<2275,2290,45>",(event_data.func)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<2275,2285,45>",(event_data)); Inst29++; } } catch(e) {}
        assertEquals('runDoWhile', event_data.func().name());
      }

try { if (Inst30 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2317,2344,48>",(break_break_point_hit_count)); Inst30++; } } catch(e) {}
      break_break_point_hit_count++;
      // Continue stepping until returned to bottom frame.
try { if (Inst31 <= 1000 && typeof (exec_state.frameCount) != "undefined") {_RecordType("<2417,2438,50>",(exec_state.frameCount)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2417,2427,50>",(exec_state)); Inst32++; } } catch(e) {}
      if (exec_state.frameCount() > 1) {
try { if (Inst33 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<2456,2478,51>",(exec_state.prepareStep)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<2456,2466,51>",(exec_state)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Debug.StepAction.StepNext) != "undefined") {_RecordType("<2479,2504,51>",(Debug.StepAction.StepNext)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<2479,2495,51>",(Debug.StepAction)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2479,2484,51>",(Debug)); Inst37++; } } catch(e) {}
        exec_state.prepareStep(Debug.StepAction.StepNext);
      }

    }
  } catch(e) {
try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<2553,2554,56>",(e)); Inst40++; } } catch(e) {}
    exception = e;
try { if (Inst39 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2541,2550,56>",(exception)); Inst39++; } } catch(e) {}
  }
};

// Add the debug event listener.
try { if (Inst41 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2597,2614,61>",(Debug.setListener)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2597,2602,61>",(Debug)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (listener) != "undefined") {_RecordType("<2615,2623,61>",(listener)); Inst43++; } } catch(e) {}
Debug.setListener(listener);

try { if (Inst44 <= 1000 && typeof (condition) != "undefined") {_RecordType("<2636,2645,63>",(condition)); Inst44++; } } catch(e) {}
function condition() {
  return false;
}

try { if (Inst45 <= 1000 && typeof (runDoWhile) != "undefined") {_RecordType("<2678,2688,67>",(runDoWhile)); Inst45++; } } catch(e) {}
function runDoWhile() {
try { if (Inst46 <= 1000 && typeof (condition) != "undefined") {_RecordType("<2724,2733,70>",(condition)); Inst46++; } } catch(e) {}
  do {
    debugger;
  } while(condition());
};

break_break_point_hit_count = 0;
try { if (Inst47 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2742,2769,73>",(break_break_point_hit_count)); Inst47++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (runDoWhile) != "undefined") {_RecordType("<2775,2785,74>",(runDoWhile)); Inst48++; } } catch(e) {}
runDoWhile();
try { if (Inst49 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<2789,2799,75>",(assertNull)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (exception) != "undefined") {_RecordType("<2800,2809,75>",(exception)); Inst50++; } } catch(e) {}
assertNull(exception);
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2812,2824,76>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (break_break_point_hit_count) != "undefined") {_RecordType("<2828,2855,76>",(break_break_point_hit_count)); Inst52++; } } catch(e) {}
assertEquals(4, break_break_point_hit_count);

// Get rid of the debug event listener.
try { if (Inst53 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<2899,2916,79>",(Debug.setListener)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<2899,2904,79>",(Debug)); Inst54++; } } catch(e) {}
Debug.setListener(null);

