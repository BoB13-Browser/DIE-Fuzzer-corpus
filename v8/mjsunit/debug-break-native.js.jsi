var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --expose-debug-as debug

try { if (Inst1 <= 1000 && typeof (debug.Debug) != "undefined") {_RecordType("<211,222,7>",(debug.Debug)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (debug) != "undefined") {_RecordType("<211,216,7>",(debug)); Inst2++; } } catch(e) {}
Debug = debug.Debug
try { if (Inst0 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<203,208,7>",(Debug)); Inst0++; } } catch(e) {}
var exception = null;
try { if (Inst3 <= 1000 && typeof (exception) != "undefined") {_RecordType("<227,236,8>",(exception)); Inst3++; } } catch(e) {}

try { if (Inst4 <= 1000 && typeof (breakListener) != "undefined") {_RecordType("<255,268,10>",(breakListener)); Inst4++; } } catch(e) {}
function breakListener(event, exec_state, event_data, data) {
try { if (Inst5 <= 1000 && typeof (event) != "undefined") {_RecordType("<269,274,10>",(event)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<276,286,10>",(exec_state)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (event_data) != "undefined") {_RecordType("<288,298,10>",(event_data)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (data) != "undefined") {_RecordType("<300,304,10>",(data)); Inst8++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (event) != "undefined") {_RecordType("<314,319,11>",(event)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Debug.DebugEvent.Break) != "undefined") {_RecordType("<323,345,11>",(Debug.DebugEvent.Break)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Debug.DebugEvent) != "undefined") {_RecordType("<323,339,11>",(Debug.DebugEvent)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<323,328,11>",(Debug)); Inst12++; } } catch(e) {}
  if (event != Debug.DebugEvent.Break) return;
try { if (Inst23 <= 1000 && typeof (e) != "undefined") {_RecordType("<567,568,16>",(e)); Inst23++; } } catch(e) {}
  try {
try { if (Inst13 <= 1000 && typeof (exec_state.prepareStep) != "undefined") {_RecordType("<367,389,13>",(exec_state.prepareStep)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<367,377,13>",(exec_state)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Debug.StepAction.StepIn) != "undefined") {_RecordType("<390,413,13>",(Debug.StepAction.StepIn)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Debug.StepAction) != "undefined") {_RecordType("<390,406,13>",(Debug.StepAction)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<390,395,13>",(Debug)); Inst17++; } } catch(e) {}
    exec_state.prepareStep(Debug.StepAction.StepIn);
    // Assert that the break happens at an intended location.
try { if (Inst18 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<482,492,15>",(assertTrue)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (exec_state.frame(0).sourceLineText().indexOf) != "undefined") {_RecordType("<493,537,15>",(exec_state.frame(0).sourceLineText().indexOf)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (exec_state.frame(0).sourceLineText) != "undefined") {_RecordType("<493,527,15>",(exec_state.frame(0).sourceLineText)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (exec_state.frame) != "undefined") {_RecordType("<493,509,15>",(exec_state.frame)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (exec_state) != "undefined") {_RecordType("<493,503,15>",(exec_state)); Inst22++; } } catch(e) {}
    assertTrue(exec_state.frame(0).sourceLineText().indexOf("// break") > 0);
  } catch (e) {
try { if (Inst25 <= 1000 && typeof (e) != "undefined") {_RecordType("<588,589,17>",(e)); Inst25++; } } catch(e) {}
    exception = e;
try { if (Inst24 <= 1000 && typeof (exception) != "undefined") {_RecordType("<576,585,17>",(exception)); Inst24++; } } catch(e) {}
  }
}

try { if (Inst26 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<598,615,21>",(Debug.setListener)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<598,603,21>",(Debug)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (breakListener) != "undefined") {_RecordType("<616,629,21>",(breakListener)); Inst28++; } } catch(e) {}
Debug.setListener(breakListener);

debugger;                          // break

try { if (Inst29 <= 1000 && typeof (f) != "undefined") {_RecordType("<687,688,25>",(f)); Inst29++; } } catch(e) {}
function f(x) {
try { if (Inst30 <= 1000 && typeof (x) != "undefined") {_RecordType("<689,690,25>",(x)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (x) != "undefined") {_RecordType("<703,704,26>",(x)); Inst31++; } } catch(e) {}
  return x;                        // break
}                                  // break

try { if (Inst32 <= 1000 && typeof (Debug.setBreakPoint) != "undefined") {_RecordType("<783,802,29>",(Debug.setBreakPoint)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<783,788,29>",(Debug)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (f) != "undefined") {_RecordType("<803,804,29>",(f)); Inst34++; } } catch(e) {}
Debug.setBreakPoint(f, 0, 0);      // break
try { if (Inst35 <= 1000 && typeof (Debug.scripts) != "undefined") {_RecordType("<827,840,30>",(Debug.scripts)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<827,832,30>",(Debug)); Inst36++; } } catch(e) {}
Debug.scripts();                   // break
try { if (Inst37 <= 1000 && typeof (debug.MakeMirror) != "undefined") {_RecordType("<871,887,31>",(debug.MakeMirror)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (debug) != "undefined") {_RecordType("<871,876,31>",(debug)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<888,889,31>",(f)); Inst39++; } } catch(e) {}
debug.MakeMirror(f);               // break

try { if (Inst40 <= 1000 && typeof (new Error("123").stack) != "undefined") {_RecordType("<916,938,33>",(new Error("123").stack)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (Error) != "undefined") {_RecordType("<920,925,33>",(Error)); Inst41++; } } catch(e) {}
new Error("123").stack;            // break
try { if (Inst42 <= 1000 && typeof (Math.sin) != "undefined") {_RecordType("<960,968,34>",(Math.sin)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (Math) != "undefined") {_RecordType("<960,964,34>",(Math)); Inst43++; } } catch(e) {}
Math.sin(0);                       // break

try { if (Inst44 <= 1000 && typeof (f) != "undefined") {_RecordType("<1005,1006,36>",(f)); Inst44++; } } catch(e) {}
f("this should break");            // break

try { if (Inst45 <= 1000 && typeof (Debug.setListener) != "undefined") {_RecordType("<1050,1067,38>",(Debug.setListener)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (Debug) != "undefined") {_RecordType("<1050,1055,38>",(Debug)); Inst46++; } } catch(e) {}
Debug.setListener(null);           // break

try { if (Inst47 <= 1000 && typeof (f) != "undefined") {_RecordType("<1095,1096,40>",(f)); Inst47++; } } catch(e) {}
f("this should not break");

try { if (Inst48 <= 1000 && typeof (assertNull) != "undefined") {_RecordType("<1124,1134,42>",(assertNull)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (exception) != "undefined") {_RecordType("<1135,1144,42>",(exception)); Inst49++; } } catch(e) {}
assertNull(exception);

