var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Tests the special cases specified by ES 15.8.2.17

try { if (Inst0 <= 1000 && typeof (test) != "undefined") {_RecordType("<1661,1665,30>",(test)); Inst0++; } } catch(e) {}
function test(expected_sqrt, value) {
try { if (Inst1 <= 1000 && typeof (expected_sqrt) != "undefined") {_RecordType("<1666,1679,30>",(expected_sqrt)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<1681,1686,30>",(value)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1692,1704,31>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (expected_sqrt) != "undefined") {_RecordType("<1705,1718,31>",(expected_sqrt)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (Math.sqrt) != "undefined") {_RecordType("<1720,1729,31>",(Math.sqrt)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1720,1724,31>",(Math)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (value) != "undefined") {_RecordType("<1730,1735,31>",(value)); Inst7++; } } catch(e) {}
  assertEquals(expected_sqrt, Math.sqrt(value));
try { if (Inst8 <= 1000 && typeof (isFinite) != "undefined") {_RecordType("<1745,1753,32>",(isFinite)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (value) != "undefined") {_RecordType("<1754,1759,32>",(value)); Inst9++; } } catch(e) {}
  if (isFinite(value)) {
try { if (Inst10 <= 1000 && typeof (value) != "undefined") {_RecordType("<1772,1777,33>",(value)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (value) != "undefined") {_RecordType("<1792,1797,33>",(value)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<1803,1811,33>",(Infinity)); Inst12++; } } catch(e) {}
    if (value === 0 && (1 / value) == -Infinity) {
      // Math.pow(-0, 0.5) must be zero, but Math.sqrt(-0) is -0.
      expected_sqrt = 0;
try { if (Inst13 <= 1000 && typeof (expected_sqrt) != "undefined") {_RecordType("<1887,1900,35>",(expected_sqrt)); Inst13++; } } catch(e) {}
    }
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1916,1928,37>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (expected_sqrt) != "undefined") {_RecordType("<1929,1942,37>",(expected_sqrt)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math.pow) != "undefined") {_RecordType("<1944,1952,37>",(Math.pow)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math) != "undefined") {_RecordType("<1944,1948,37>",(Math)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (value) != "undefined") {_RecordType("<1953,1958,37>",(value)); Inst18++; } } catch(e) {}
    assertEquals(expected_sqrt, Math.pow(value, 0.5));
  }
}

// Simple sanity check
try { if (Inst19 <= 1000 && typeof (test) != "undefined") {_RecordType("<1997,2001,42>",(test)); Inst19++; } } catch(e) {}
test(2, 4);
try { if (Inst20 <= 1000 && typeof (test) != "undefined") {_RecordType("<2009,2013,43>",(test)); Inst20++; } } catch(e) {}
test(0.1, 0.01);

// Spec tests
try { if (Inst21 <= 1000 && typeof (test) != "undefined") {_RecordType("<2041,2045,46>",(test)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2046,2049,46>",(NaN)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2051,2054,46>",(NaN)); Inst23++; } } catch(e) {}
test(NaN, NaN);
try { if (Inst24 <= 1000 && typeof (test) != "undefined") {_RecordType("<2057,2061,47>",(test)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2062,2065,47>",(NaN)); Inst25++; } } catch(e) {}
test(NaN, -1);
try { if (Inst26 <= 1000 && typeof (test) != "undefined") {_RecordType("<2072,2076,48>",(test)); Inst26++; } } catch(e) {}
test(+0, +0);
try { if (Inst27 <= 1000 && typeof (test) != "undefined") {_RecordType("<2086,2090,49>",(test)); Inst27++; } } catch(e) {}
test(-0, -0);
try { if (Inst28 <= 1000 && typeof (test) != "undefined") {_RecordType("<2100,2104,50>",(test)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2105,2113,50>",(Infinity)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2115,2123,50>",(Infinity)); Inst30++; } } catch(e) {}
test(Infinity, Infinity);
// -Infinity is smaller than 0 so it should return NaN
try { if (Inst31 <= 1000 && typeof (test) != "undefined") {_RecordType("<2181,2185,52>",(test)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2186,2189,52>",(NaN)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (Infinity) != "undefined") {_RecordType("<2192,2200,52>",(Infinity)); Inst33++; } } catch(e) {}
test(NaN, -Infinity);

