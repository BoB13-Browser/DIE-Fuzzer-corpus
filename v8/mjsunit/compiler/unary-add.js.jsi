var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test unary addition in various contexts.

// Test value context.
try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1666,1678,31>",(assertEquals)); Inst0++; } } catch(e) {}
assertEquals(1, +'1');
try { if (Inst1 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1689,1701,32>",(assertEquals)); Inst1++; } } catch(e) {}
assertEquals(1, +1);
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1710,1722,33>",(assertEquals)); Inst2++; } } catch(e) {}
assertEquals(1.12, +1.12);
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1737,1749,34>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1750,1753,34>",(NaN)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<1756,1765,34>",(undefined)); Inst5++; } } catch(e) {}
assertEquals(NaN, +undefined);
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1768,1780,35>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<1781,1784,35>",(NaN)); Inst7++; } } catch(e) {}
assertEquals(NaN, +{});

// Test effect context.
try { if (Inst8 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1817,1829,38>",(assertEquals)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1833,1837,38>",(eval)); Inst9++; } } catch(e) {}
assertEquals(1, eval("+'1'; 1"));
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1851,1863,39>",(assertEquals)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1867,1871,39>",(eval)); Inst11++; } } catch(e) {}
assertEquals(1, eval("+1; 1"));
try { if (Inst12 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1883,1895,40>",(assertEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1899,1903,40>",(eval)); Inst13++; } } catch(e) {}
assertEquals(1, eval("+1.12; 1"));
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1918,1930,41>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1934,1938,41>",(eval)); Inst15++; } } catch(e) {}
assertEquals(1, eval("+undefined; 1"));
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1958,1970,42>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1974,1978,42>",(eval)); Inst17++; } } catch(e) {}
assertEquals(1, eval("+{}; 1"));

// Test test context.
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2014,2026,45>",(assertEquals)); Inst18++; } } catch(e) {}
assertEquals(1, (+'1') ? 1 : 2);
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2047,2059,46>",(assertEquals)); Inst19++; } } catch(e) {}
assertEquals(1, (+1) ? 1 : 2);
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2078,2090,47>",(assertEquals)); Inst20++; } } catch(e) {}
assertEquals(1, (+'0') ? 2 : 1);
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2111,2123,48>",(assertEquals)); Inst21++; } } catch(e) {}
assertEquals(1, (+0) ? 2 : 1);
try { if (Inst22 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2142,2154,49>",(assertEquals)); Inst22++; } } catch(e) {}
assertEquals(1, (+1.12) ? 1 : 2);
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2176,2188,50>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2194,2203,50>",(undefined)); Inst24++; } } catch(e) {}
assertEquals(1, (+undefined) ? 2 : 1);
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2215,2227,51>",(assertEquals)); Inst25++; } } catch(e) {}
assertEquals(1, (+{}) ? 2 : 1);

// Test value/test context.
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2276,2288,54>",(assertEquals)); Inst26++; } } catch(e) {}
assertEquals(1, +'1' || 2);
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2304,2316,55>",(assertEquals)); Inst27++; } } catch(e) {}
assertEquals(1, +1 || 2);
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2330,2342,56>",(assertEquals)); Inst28++; } } catch(e) {}
assertEquals(1.12, +1.12 || 2);
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2362,2374,57>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2379,2388,57>",(undefined)); Inst30++; } } catch(e) {}
assertEquals(2, +undefined || 2);
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2396,2408,58>",(assertEquals)); Inst31++; } } catch(e) {}
assertEquals(2, +{} || 2);

// Test test/value context.
try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2452,2464,61>",(assertEquals)); Inst32++; } } catch(e) {}
assertEquals(2, +'1' && 2);
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2480,2492,62>",(assertEquals)); Inst33++; } } catch(e) {}
assertEquals(2, +1 && 2);
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2506,2518,63>",(assertEquals)); Inst34++; } } catch(e) {}
assertEquals(0, +'0' && 2);
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2534,2546,64>",(assertEquals)); Inst35++; } } catch(e) {}
assertEquals(0, +0 && 2);
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2560,2572,65>",(assertEquals)); Inst36++; } } catch(e) {}
assertEquals(2, +1.12 && 2);
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2589,2601,66>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2602,2605,66>",(NaN)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<2608,2617,66>",(undefined)); Inst39++; } } catch(e) {}
assertEquals(NaN, +undefined && 2);
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2625,2637,67>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<2638,2641,67>",(NaN)); Inst41++; } } catch(e) {}
assertEquals(NaN, +{} && 2);

