var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<177,178,5>",(f)); Inst0++; } } catch(e) {}
function f() {
  var x = 0;
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<189,190,6>",(x)); Inst1++; } } catch(e) {}
  var y = 0;
try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<202,203,7>",(y)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<216,225,8>",(undefined)); Inst4++; } } catch(e) {}
  x ^= undefined;
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<211,212,8>",(x)); Inst3++; } } catch(e) {}
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<229,241,9>",(assertEquals)); Inst5++; } } catch(e) {}
  assertEquals(x /= 1);
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<242,243,9>",(x)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<253,265,10>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<266,269,10>",(NaN)); Inst8++; } } catch(e) {}
  assertEquals(NaN, y %= 1);
try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<271,272,10>",(y)); Inst9++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<282,294,11>",(assertEquals)); Inst10++; } } catch(e) {}
  assertEquals(y = 1);
try { if (Inst11 <= 1000 && typeof (y) != "undefined") {_RecordType("<295,296,11>",(y)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<305,306,12>",(f)); Inst12++; } } catch(e) {}
  f();
  y = -2;
try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<312,313,13>",(y)); Inst13++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<322,334,14>",(assertEquals)); Inst14++; } } catch(e) {}
  assertEquals(x >>= 1);
try { if (Inst15 <= 1000 && typeof (x) != "undefined") {_RecordType("<335,336,14>",(x)); Inst15++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<347,359,15>",(assertEquals)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<365,366,15>",(y)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (y) != "undefined") {_RecordType("<368,369,15>",(y)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<371,372,15>",(y)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (y) != "undefined") {_RecordType("<375,376,15>",(y)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<378,379,15>",(x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<384,385,15>",(y)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (y) != "undefined") {_RecordType("<390,391,15>",(y)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (y) != "undefined") {_RecordType("<392,393,15>",(y)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (y) != "undefined") {_RecordType("<397,398,15>",(y)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (y) != "undefined") {_RecordType("<400,401,15>",(y)); Inst26++; } } catch(e) {}
  assertEquals(0, ((y+(y+(y+((y^(x%5))+y)))+(y+y))>>y)+y);
}
try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<412,413,17>",(f)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (e) != "undefined") {_RecordType("<426,427,17>",(e)); Inst28++; } } catch(e) {}
try { f(); } catch (e) {}

