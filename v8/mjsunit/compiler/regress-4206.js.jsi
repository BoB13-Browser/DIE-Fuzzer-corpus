var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (Module) != "undefined") {_RecordType("<177,183,5>",(Module)); Inst0++; } } catch(e) {}
function Module(stdlib) {
try { if (Inst1 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<184,190,5>",(stdlib)); Inst1++; } } catch(e) {}
  "use asm";
try { if (Inst2 <= 1000 && typeof (TernaryMin) != "undefined") {_RecordType("<218,228,7>",(TernaryMin)); Inst2++; } } catch(e) {}
  function TernaryMin(a, b) {
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<229,230,7>",(a)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (b) != "undefined") {_RecordType("<232,233,7>",(b)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<245,246,8>",(a)); Inst6++; } } catch(e) {}
    a=+(a);
try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<241,242,8>",(a)); Inst5++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<257,258,9>",(b)); Inst8++; } } catch(e) {}
    b=+(b);
try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<253,254,9>",(b)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<276,277,10>",(a)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (b) != "undefined") {_RecordType("<280,281,10>",(b)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<285,286,10>",(a)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (b) != "undefined") {_RecordType("<289,290,10>",(b)); Inst12++; } } catch(e) {}
    return (+((a < b) ? a : b));
  }
try { if (Inst13 <= 1000 && typeof (TernaryMax) != "undefined") {_RecordType("<309,319,12>",(TernaryMax)); Inst13++; } } catch(e) {}
  function TernaryMax(a, b) {
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<320,321,12>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<323,324,12>",(b)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<336,337,13>",(a)); Inst17++; } } catch(e) {}
    a=+(a);
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<332,333,13>",(a)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<348,349,14>",(b)); Inst19++; } } catch(e) {}
    b=+(b);
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<344,345,14>",(b)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (b) != "undefined") {_RecordType("<367,368,15>",(b)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<371,372,15>",(a)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<376,377,15>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<380,381,15>",(b)); Inst23++; } } catch(e) {}
    return (+((b < a) ? a : b));
  }
try { if (Inst24 <= 1000 && typeof (TernaryMin) != "undefined") {_RecordType("<412,422,17>",(TernaryMin)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (TernaryMax) != "undefined") {_RecordType("<447,457,18>",(TernaryMax)); Inst25++; } } catch(e) {}
  return { TernaryMin: TernaryMin,
           TernaryMax: TernaryMax };
}
try { if (Inst27 <= 1000 && typeof (Module(this).TernaryMin) != "undefined") {_RecordType("<473,496,20>",(Module(this).TernaryMin)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Module) != "undefined") {_RecordType("<473,479,20>",(Module)); Inst28++; } } catch(e) {}
var min = Module(this).TernaryMin;
try { if (Inst26 <= 1000 && typeof (min) != "undefined") {_RecordType("<467,470,20>",(min)); Inst26++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (Module(this).TernaryMax) != "undefined") {_RecordType("<508,531,21>",(Module(this).TernaryMax)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (Module) != "undefined") {_RecordType("<508,514,21>",(Module)); Inst31++; } } catch(e) {}
var max = Module(this).TernaryMax;
try { if (Inst29 <= 1000 && typeof (max) != "undefined") {_RecordType("<502,505,21>",(max)); Inst29++; } } catch(e) {}

try { if (Inst32 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<534,546,23>",(assertEquals)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (min) != "undefined") {_RecordType("<552,555,23>",(min)); Inst33++; } } catch(e) {}
assertEquals(0.0, min(-0.0, 0.0));
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<569,581,24>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (min) != "undefined") {_RecordType("<587,590,24>",(min)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<591,594,24>",(NaN)); Inst36++; } } catch(e) {}
assertEquals(0.0, min(NaN, 0.0));
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<603,615,25>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (min) != "undefined") {_RecordType("<622,625,25>",(min)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<626,629,25>",(NaN)); Inst39++; } } catch(e) {}
assertEquals(-0.0, min(NaN, -0.0));
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<639,651,26>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (max) != "undefined") {_RecordType("<658,661,26>",(max)); Inst41++; } } catch(e) {}
assertEquals(-0.0, max(0.0, -0.0));
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<675,687,27>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (max) != "undefined") {_RecordType("<693,696,27>",(max)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<697,700,27>",(NaN)); Inst44++; } } catch(e) {}
assertEquals(0.0, max(NaN, 0.0));
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<709,721,28>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (max) != "undefined") {_RecordType("<728,731,28>",(max)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (NaN) != "undefined") {_RecordType("<732,735,28>",(NaN)); Inst47++; } } catch(e) {}
assertEquals(-0.0, max(NaN, -0.0));

