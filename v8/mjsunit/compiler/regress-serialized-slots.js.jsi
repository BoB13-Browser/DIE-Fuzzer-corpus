var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// The test verifies that parameters of the outer function are correctly
// accessible from the inner closure.

try { if (Inst0 <= 1000 && typeof (runner) != "undefined") {_RecordType("<1719,1725,31>",(runner)); Inst0++; } } catch(e) {}
function runner(f, expected) {
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<1726,1727,31>",(f)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1729,1737,31>",(expected)); Inst2++; } } catch(e) {}
  for (var i = 0; i < 10000; i++) {  // Loop to trigger optimization.
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1752,1753,32>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<1759,1760,32>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<1770,1771,32>",(i)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1815,1827,33>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (expected) != "undefined") {_RecordType("<1828,1836,33>",(expected)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (f.call) != "undefined") {_RecordType("<1838,1844,33>",(f.call)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<1838,1839,33>",(f)); Inst9++; } } catch(e) {}
    assertEquals(expected, f.call(this, 10));
  }
}

Function.prototype.bind = function(thisObject)
{
try { if (Inst13 <= 1000 && typeof (thisObject) != "undefined") {_RecordType("<1899,1909,37>",(thisObject)); Inst13++; } } catch(e) {}
    var func = this;
try { if (Inst14 <= 1000 && typeof (func) != "undefined") {_RecordType("<1921,1925,39>",(func)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<1949,1975,40>",(Array.prototype.slice.call)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<1949,1970,40>",(Array.prototype.slice)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<1949,1964,40>",(Array.prototype)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (Array) != "undefined") {_RecordType("<1949,1954,40>",(Array)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<1976,1985,40>",(arguments)); Inst20++; } } catch(e) {}
    var args = Array.prototype.slice.call(arguments, 1);
try { if (Inst15 <= 1000 && typeof (args) != "undefined") {_RecordType("<1942,1946,40>",(args)); Inst15++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (bound) != "undefined") {_RecordType("<2004,2009,41>",(bound)); Inst21++; } } catch(e) {}
    function bound()
    {
      // Note outer function parameter access (|thisObject|).
try { if (Inst22 <= 1000 && typeof (func.apply) != "undefined") {_RecordType("<2093,2103,44>",(func.apply)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (func) != "undefined") {_RecordType("<2093,2097,44>",(func)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (thisObject) != "undefined") {_RecordType("<2115,2125,45>",(thisObject)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (args.concat) != "undefined") {_RecordType("<2137,2148,46>",(args.concat)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (args) != "undefined") {_RecordType("<2137,2141,46>",(args)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (Array.prototype.slice.call) != "undefined") {_RecordType("<2149,2175,46>",(Array.prototype.slice.call)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (Array.prototype.slice) != "undefined") {_RecordType("<2149,2170,46>",(Array.prototype.slice)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Array.prototype) != "undefined") {_RecordType("<2149,2164,46>",(Array.prototype)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (Array) != "undefined") {_RecordType("<2149,2154,46>",(Array)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (arguments) != "undefined") {_RecordType("<2176,2185,46>",(arguments)); Inst31++; } } catch(e) {}
      return func.apply(
          thisObject,
          args.concat(Array.prototype.slice.call(arguments, 0)));
    }
try { if (Inst32 <= 1000 && typeof (bound) != "undefined") {_RecordType("<2210,2215,48>",(bound)); Inst32++; } } catch(e) {}
    return bound;
}
try { if (Inst10 <= 1000 && typeof (Function.prototype.bind) != "undefined") {_RecordType("<1864,1887,37>",(Function.prototype.bind)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Function.prototype) != "undefined") {_RecordType("<1864,1882,37>",(Function.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Function) != "undefined") {_RecordType("<1864,1872,37>",(Function)); Inst12++; } } catch(e) {}

try { if (Inst33 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2229,2232,51>",(sum)); Inst33++; } } catch(e) {}
function sum(x, y) {
try { if (Inst34 <= 1000 && typeof (x) != "undefined") {_RecordType("<2233,2234,51>",(x)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (y) != "undefined") {_RecordType("<2236,2237,51>",(y)); Inst35++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (x) != "undefined") {_RecordType("<2250,2251,52>",(x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (y) != "undefined") {_RecordType("<2254,2255,52>",(y)); Inst37++; } } catch(e) {}
  return x + y;
}

try { if (Inst38 <= 1000 && typeof (test) != "undefined") {_RecordType("<2269,2273,55>",(test)); Inst38++; } } catch(e) {}
function test(n) {
try { if (Inst39 <= 1000 && typeof (n) != "undefined") {_RecordType("<2274,2275,55>",(n)); Inst39++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (runner) != "undefined") {_RecordType("<2281,2287,56>",(runner)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (sum.bind) != "undefined") {_RecordType("<2288,2296,56>",(sum.bind)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (sum) != "undefined") {_RecordType("<2288,2291,56>",(sum)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (n) != "undefined") {_RecordType("<2303,2304,56>",(n)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (n) != "undefined") {_RecordType("<2307,2308,56>",(n)); Inst44++; } } catch(e) {}
  runner(sum.bind(this, n), n + 10);
}

try { if (Inst45 <= 1000 && typeof (test) != "undefined") {_RecordType("<2319,2323,59>",(test)); Inst45++; } } catch(e) {}
test(1);
try { if (Inst46 <= 1000 && typeof (test) != "undefined") {_RecordType("<2328,2332,60>",(test)); Inst46++; } } catch(e) {}
test(42);
try { if (Inst47 <= 1000 && typeof (test) != "undefined") {_RecordType("<2338,2342,61>",(test)); Inst47++; } } catch(e) {}
test(239);

