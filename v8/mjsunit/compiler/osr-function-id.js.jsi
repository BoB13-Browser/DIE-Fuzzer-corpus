var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --use-osr

try { if (Inst0 <= 1000 && typeof (id) != "undefined") {_RecordType("<198,200,7>",(id)); Inst0++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (f) != "undefined") {_RecordType("<213,214,7>",(f)); Inst2++; } } catch(e) {}
function id(f) { return f; }
try { if (Inst1 <= 1000 && typeof (f) != "undefined") {_RecordType("<201,202,7>",(f)); Inst1++; } } catch(e) {}

try { if (Inst3 <= 1000 && typeof (foo) != "undefined") {_RecordType("<228,231,9>",(foo)); Inst3++; } } catch(e) {}
function foo() {
  var sum = 0;
try { if (Inst4 <= 1000 && typeof (sum) != "undefined") {_RecordType("<242,245,10>",(sum)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (id) != "undefined") {_RecordType("<261,263,11>",(id)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (foo) != "undefined") {_RecordType("<264,267,11>",(foo)); Inst7++; } } catch(e) {}
  var r = id(foo);
try { if (Inst5 <= 1000 && typeof (r) != "undefined") {_RecordType("<257,258,11>",(r)); Inst5++; } } catch(e) {}
  for (var i = 0; i < 100000; i++) {
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<281,282,12>",(i)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<288,289,12>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<300,301,12>",(i)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<318,319,13>",(i)); Inst12++; } } catch(e) {}
    sum += i;
try { if (Inst11 <= 1000 && typeof (sum) != "undefined") {_RecordType("<311,314,13>",(sum)); Inst11++; } } catch(e) {}
  }
try { if (Inst13 <= 1000 && typeof (foo) != "undefined") {_RecordType("<334,337,15>",(foo)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (r) != "undefined") {_RecordType("<341,342,15>",(r)); Inst14++; } } catch(e) {}
  return foo == r;
}

try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<347,359,18>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (foo) != "undefined") {_RecordType("<366,369,18>",(foo)); Inst16++; } } catch(e) {}
assertEquals(true, foo());
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<374,386,19>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (foo) != "undefined") {_RecordType("<393,396,19>",(foo)); Inst18++; } } catch(e) {}
assertEquals(true, foo());
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<401,413,20>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (foo) != "undefined") {_RecordType("<420,423,20>",(foo)); Inst20++; } } catch(e) {}
assertEquals(true, foo());


try { if (Inst21 <= 1000 && typeof (bar) != "undefined") {_RecordType("<439,442,23>",(bar)); Inst21++; } } catch(e) {}
function bar() {
  var sum = 0;
try { if (Inst22 <= 1000 && typeof (sum) != "undefined") {_RecordType("<453,456,24>",(sum)); Inst22++; } } catch(e) {}
  for (var i = 0; i < 90000; i++) {
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<473,474,25>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<480,481,25>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<491,492,25>",(i)); Inst25++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<509,510,26>",(i)); Inst27++; } } catch(e) {}
    sum += i;
try { if (Inst26 <= 1000 && typeof (sum) != "undefined") {_RecordType("<502,505,26>",(sum)); Inst26++; } } catch(e) {}
  }
try { if (Inst28 <= 1000 && typeof (id) != "undefined") {_RecordType("<525,527,28>",(id)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (bar) != "undefined") {_RecordType("<528,531,28>",(bar)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (sum) != "undefined") {_RecordType("<532,535,28>",(sum)); Inst30++; } } catch(e) {}
  return id(bar,sum);
}

try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<541,553,31>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (bar) != "undefined") {_RecordType("<554,557,31>",(bar)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (bar) != "undefined") {_RecordType("<559,562,31>",(bar)); Inst33++; } } catch(e) {}
assertEquals(bar, bar());
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<567,579,32>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (bar) != "undefined") {_RecordType("<580,583,32>",(bar)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (bar) != "undefined") {_RecordType("<585,588,32>",(bar)); Inst36++; } } catch(e) {}
assertEquals(bar, bar());
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<593,605,33>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (bar) != "undefined") {_RecordType("<606,609,33>",(bar)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (bar) != "undefined") {_RecordType("<611,614,33>",(bar)); Inst39++; } } catch(e) {}
assertEquals(bar, bar());

