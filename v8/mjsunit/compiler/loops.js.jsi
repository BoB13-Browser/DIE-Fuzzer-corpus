var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test compilation of loops.

var n = 1;
try { if (Inst0 <= 1000 && typeof (n) != "undefined") {_RecordType("<1633,1634,30>",(n)); Inst0++; } } catch(e) {}
for (var i = 1; (6 - i); i++) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1649,1650,31>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (i) != "undefined") {_RecordType("<1661,1662,31>",(i)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1665,1666,31>",(i)); Inst3++; } } catch(e) {}
  // Factorial!
try { if (Inst5 <= 1000 && typeof (n) != "undefined") {_RecordType("<1694,1695,33>",(n)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<1698,1699,33>",(i)); Inst6++; } } catch(e) {}
  n = n * i;
try { if (Inst4 <= 1000 && typeof (n) != "undefined") {_RecordType("<1690,1691,33>",(n)); Inst4++; } } catch(e) {}
}
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1703,1715,35>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (n) != "undefined") {_RecordType("<1721,1722,35>",(n)); Inst8++; } } catch(e) {}
assertEquals(120, n);

// Test assignments in the loop condition.
try { if (Inst9 <= 1000 && typeof (f) != "undefined") {_RecordType("<1778,1779,38>",(f)); Inst9++; } } catch(e) {}
function f(i, n) {
try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<1780,1781,38>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (n) != "undefined") {_RecordType("<1783,1784,38>",(n)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (n) != "undefined") {_RecordType("<1801,1802,39>",(n)); Inst13++; } } catch(e) {}
  while((n = n - 1) >= 0) {
try { if (Inst15 <= 1000 && typeof (n) != "undefined") {_RecordType("<1824,1825,40>",(n)); Inst15++; } } catch(e) {}
    i = n + 1;
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<1820,1821,40>",(i)); Inst14++; } } catch(e) {}
  }
try { if (Inst12 <= 1000 && typeof (n) != "undefined") {_RecordType("<1797,1798,39>",(n)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<1844,1845,42>",(i)); Inst16++; } } catch(e) {}
  return i;
}
try { if (Inst17 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1849,1861,44>",(assertEquals)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<1865,1866,44>",(f)); Inst18++; } } catch(e) {}
assertEquals(1, f(0, 42));


// Test do-while loop and continue.
try { if (Inst19 <= 1000 && typeof (g) != "undefined") {_RecordType("<1923,1924,48>",(g)); Inst19++; } } catch(e) {}
function g(a) {
try { if (Inst20 <= 1000 && typeof (a) != "undefined") {_RecordType("<1925,1926,48>",(a)); Inst20++; } } catch(e) {}
  var x = 0, c = 0;
try { if (Inst21 <= 1000 && typeof (x) != "undefined") {_RecordType("<1936,1937,49>",(x)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (c) != "undefined") {_RecordType("<1943,1944,49>",(c)); Inst22++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<2022,2023,54>",(x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2026,2027,54>",(a)); Inst29++; } } catch(e) {}
  do {
try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<1965,1966,51>",(x)); Inst24++; } } catch(e) {}
    x = x + 1;
try { if (Inst23 <= 1000 && typeof (x) != "undefined") {_RecordType("<1961,1962,51>",(x)); Inst23++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (x) != "undefined") {_RecordType("<1980,1981,52>",(x)); Inst25++; } } catch(e) {}
    if (x < 5) continue;
try { if (Inst27 <= 1000 && typeof (c) != "undefined") {_RecordType("<2005,2006,53>",(c)); Inst27++; } } catch(e) {}
    c = c + 1;
try { if (Inst26 <= 1000 && typeof (c) != "undefined") {_RecordType("<2001,2002,53>",(c)); Inst26++; } } catch(e) {}
  } while(x < a);
try { if (Inst30 <= 1000 && typeof (c) != "undefined") {_RecordType("<2039,2040,55>",(c)); Inst30++; } } catch(e) {}
  return c;
}

try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2045,2057,58>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (g) != "undefined") {_RecordType("<2061,2062,58>",(g)); Inst32++; } } catch(e) {}
assertEquals(6, g(10));

// Test deoptimization in the loop condition.
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2116,2128,61>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (g) != "undefined") {_RecordType("<2132,2133,61>",(g)); Inst34++; } } catch(e) {}
assertEquals(0, g("foo"));

