var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test of function calls.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1635,1636,30>",(f)); Inst0++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1649,1650,30>",(x)); Inst2++; } } catch(e) {}
function f(x) { return x; }
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1637,1638,30>",(x)); Inst1++; } } catch(e) {}

var a;
try { if (Inst3 <= 1000 && typeof (a) != "undefined") {_RecordType("<1659,1660,32>",(a)); Inst3++; } } catch(e) {}

// Call on global object.
try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<1693,1694,35>",(f)); Inst5++; } } catch(e) {}
a = f(8);
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1689,1690,35>",(a)); Inst4++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1699,1711,36>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (a) != "undefined") {_RecordType("<1715,1716,36>",(a)); Inst7++; } } catch(e) {}
assertEquals(8, a);

// Call on a named property.
var b;
try { if (Inst8 <= 1000 && typeof (b) != "undefined") {_RecordType("<1753,1754,39>",(b)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (f) != "undefined") {_RecordType("<1763,1764,40>",(f)); Inst10++; } } catch(e) {}
b = {x:f};
try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<1756,1757,40>",(b)); Inst9++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (b.x) != "undefined") {_RecordType("<1771,1774,41>",(b.x)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (b) != "undefined") {_RecordType("<1771,1772,41>",(b)); Inst13++; } } catch(e) {}
a = b.x(9);
try { if (Inst11 <= 1000 && typeof (a) != "undefined") {_RecordType("<1767,1768,41>",(a)); Inst11++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1779,1791,42>",(assertEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (a) != "undefined") {_RecordType("<1795,1796,42>",(a)); Inst15++; } } catch(e) {}
assertEquals(9, a);

// Call on a keyed property.
c = "x";
try { if (Inst16 <= 1000 && typeof (c) != "undefined") {_RecordType("<1829,1830,45>",(c)); Inst16++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (b[c]) != "undefined") {_RecordType("<1842,1846,46>",(b[c])); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<1842,1843,46>",(b)); Inst19++; } } catch(e) {}
a = b[c](10);
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1838,1839,46>",(a)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1852,1864,47>",(assertEquals)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1869,1870,47>",(a)); Inst21++; } } catch(e) {}
assertEquals(10, a);

// Call on a function expression
try { if (Inst22 <= 1000 && typeof (g) != "undefined") {_RecordType("<1916,1917,50>",(g)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (f) != "undefined") {_RecordType("<1929,1930,50>",(f)); Inst23++; } } catch(e) {}
function g() { return f; }
try { if (Inst25 <= 1000 && typeof (g) != "undefined") {_RecordType("<1938,1939,51>",(g)); Inst25++; } } catch(e) {}
a = g()(8);
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1934,1935,51>",(a)); Inst24++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1946,1958,52>",(assertEquals)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a) != "undefined") {_RecordType("<1962,1963,52>",(a)); Inst27++; } } catch(e) {}
assertEquals(8, a);

