var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test object literals with getter, setter and prototype properties.

try { if (Inst1 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1690,1693,30>",(bar)); Inst1++; } } catch(e) {}
var o = { x: 41, get bar() { return {x:42} } };
try { if (Inst0 <= 1000 && typeof (o) != "undefined") {_RecordType("<1673,1674,30>",(o)); Inst0++; } } catch(e) {}

try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1718,1730,32>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1735,1738,32>",(o.x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (o) != "undefined") {_RecordType("<1735,1736,32>",(o)); Inst4++; } } catch(e) {}
assertEquals(41, o.x);
try { if (Inst5 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1741,1753,33>",(assertEquals)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o.bar.x) != "undefined") {_RecordType("<1758,1765,33>",(o.bar.x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (o.bar) != "undefined") {_RecordType("<1758,1763,33>",(o.bar)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (o) != "undefined") {_RecordType("<1758,1759,33>",(o)); Inst8++; } } catch(e) {}
assertEquals(42, o.bar.x);

try { if (Inst10 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1814,1817,36>",(bar)); Inst10++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (bar) != "undefined") {_RecordType("<1860,1863,38>",(bar)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (t) != "undefined") {_RecordType("<1864,1865,38>",(t)); Inst13++; } } catch(e) {}
o = { f: function() { return 41 },
try { if (Inst11 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1829,1835,36>",(this.x)); Inst11++; } } catch(e) {}
      get bar() { return this.x },
      x:0,
try { if (Inst15 <= 1000 && typeof (t) != "undefined") {_RecordType("<1878,1879,38>",(t)); Inst15++; } } catch(e) {}
      set bar(t) { this.x = t },
try { if (Inst14 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1869,1875,38>",(this.x)); Inst14++; } } catch(e) {}
      g: function() { return 43 }
};
try { if (Inst9 <= 1000 && typeof (o) != "undefined") {_RecordType("<1769,1770,35>",(o)); Inst9++; } } catch(e) {}
o.bar = 7;
try { if (Inst16 <= 1000 && typeof (o.bar) != "undefined") {_RecordType("<1920,1925,41>",(o.bar)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<1920,1921,41>",(o)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1931,1943,42>",(assertEquals)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (o.bar) != "undefined") {_RecordType("<1947,1952,42>",(o.bar)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (o) != "undefined") {_RecordType("<1947,1948,42>",(o)); Inst20++; } } catch(e) {}
assertEquals(7, o.bar);
try { if (Inst21 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1955,1967,43>",(assertEquals)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1971,1974,43>",(o.x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (o) != "undefined") {_RecordType("<1971,1972,43>",(o)); Inst23++; } } catch(e) {}
assertEquals(7, o.x);
try { if (Inst24 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1977,1989,44>",(assertEquals)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1994,1997,44>",(o.f)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<1994,1995,44>",(o)); Inst26++; } } catch(e) {}
assertEquals(41, o.f());
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2002,2014,45>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o.g) != "undefined") {_RecordType("<2019,2022,45>",(o.g)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o) != "undefined") {_RecordType("<2019,2020,45>",(o)); Inst29++; } } catch(e) {}
assertEquals(43, o.g());

p = {x:42};
try { if (Inst30 <= 1000 && typeof (p) != "undefined") {_RecordType("<2028,2029,47>",(p)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (foo) != "undefined") {_RecordType("<2049,2052,48>",(foo)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<2064,2070,48>",(this.x)); Inst33++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (bar) != "undefined") {_RecordType("<2128,2131,50>",(bar)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (t) != "undefined") {_RecordType("<2132,2133,50>",(t)); Inst36++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (p) != "undefined") {_RecordType("<2168,2169,51>",(p)); Inst39++; } } catch(e) {}
o = {get foo() { return this.x; },
try { if (Inst34 <= 1000 && typeof (this.foo) != "undefined") {_RecordType("<2103,2111,49>",(this.foo)); Inst34++; } } catch(e) {}
     f: function() { return this.foo + 1 },
try { if (Inst38 <= 1000 && typeof (t) != "undefined") {_RecordType("<2146,2147,50>",(t)); Inst38++; } } catch(e) {}
     set bar(t) { this.x = t; },
try { if (Inst37 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<2137,2143,50>",(this.x)); Inst37++; } } catch(e) {}
     __proto__: p,
};
try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<2040,2041,48>",(o)); Inst31++; } } catch(e) {}
try { if (Inst40 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2174,2186,53>",(assertEquals)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2191,2194,53>",(o.x)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o) != "undefined") {_RecordType("<2191,2192,53>",(o)); Inst42++; } } catch(e) {}
assertEquals(42, o.x);
try { if (Inst43 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2197,2209,54>",(assertEquals)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (o.foo) != "undefined") {_RecordType("<2214,2219,54>",(o.foo)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (o) != "undefined") {_RecordType("<2214,2215,54>",(o)); Inst45++; } } catch(e) {}
assertEquals(42, o.foo);
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2222,2234,55>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<2239,2242,55>",(o.f)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (o) != "undefined") {_RecordType("<2239,2240,55>",(o)); Inst48++; } } catch(e) {}
assertEquals(43, o.f());
o.bar = 44;
try { if (Inst49 <= 1000 && typeof (o.bar) != "undefined") {_RecordType("<2247,2252,56>",(o.bar)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (o) != "undefined") {_RecordType("<2247,2248,56>",(o)); Inst50++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2259,2271,57>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (o.foo) != "undefined") {_RecordType("<2276,2281,57>",(o.foo)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (o) != "undefined") {_RecordType("<2276,2277,57>",(o)); Inst53++; } } catch(e) {}
assertEquals(44, o.foo);

