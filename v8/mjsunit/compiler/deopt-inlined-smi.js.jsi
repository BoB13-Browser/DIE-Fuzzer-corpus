var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --always-opt --always-inline-smi-code

// Test deoptimization into inlined smi code.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1703,1704,32>",(f)); Inst0++; } } catch(e) {}
function f(x) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1705,1706,32>",(x)); Inst1++; } } catch(e) {}
try { if (Inst2 <= 1000 && typeof (x) != "undefined") {_RecordType("<1720,1721,33>",(x)); Inst2++; } } catch(e) {}
  return ~x;
}

try { if (Inst3 <= 1000 && typeof (f) != "undefined") {_RecordType("<1726,1727,36>",(f)); Inst3++; } } catch(e) {}
f(42);
try { if (Inst4 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1733,1745,37>",(assertEquals)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (f) != "undefined") {_RecordType("<1751,1752,37>",(f)); Inst5++; } } catch(e) {}
assertEquals(~12, f(12.45));
try { if (Inst6 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1762,1774,38>",(assertEquals)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<1780,1781,38>",(f)); Inst7++; } } catch(e) {}
assertEquals(~42, f(42.87));


var a = 1, b = 2, c = 4, d = 8;
try { if (Inst8 <= 1000 && typeof (a) != "undefined") {_RecordType("<1797,1798,41>",(a)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (b) != "undefined") {_RecordType("<1804,1805,41>",(b)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (c) != "undefined") {_RecordType("<1811,1812,41>",(c)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (d) != "undefined") {_RecordType("<1818,1819,41>",(d)); Inst11++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (g) != "undefined") {_RecordType("<1834,1835,42>",(g)); Inst12++; } } catch(e) {}
function g() {
try { if (Inst13 <= 1000 && typeof (a) != "undefined") {_RecordType("<1849,1850,43>",(a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (b) != "undefined") {_RecordType("<1854,1855,43>",(b)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (c) != "undefined") {_RecordType("<1859,1860,43>",(c)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (d) != "undefined") {_RecordType("<1863,1864,43>",(d)); Inst16++; } } catch(e) {}
  return a | (b | (c | d));
}

try { if (Inst17 <= 1000 && typeof (g) != "undefined") {_RecordType("<1871,1872,46>",(g)); Inst17++; } } catch(e) {}
g();
c = "16";
try { if (Inst18 <= 1000 && typeof (c) != "undefined") {_RecordType("<1876,1877,47>",(c)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1886,1898,48>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (g) != "undefined") {_RecordType("<1915,1916,48>",(g)); Inst20++; } } catch(e) {}
assertEquals(1 | 2 | 16 | 8, g());


try { if (Inst21 <= 1000 && typeof (h) != "undefined") {_RecordType("<1932,1933,51>",(h)); Inst21++; } } catch(e) {}
function h() {
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<1951,1952,52>",(a)); Inst22++; } } catch(e) {}
  return 1 | a;
}
a = "2";
try { if (Inst23 <= 1000 && typeof (a) != "undefined") {_RecordType("<1956,1957,54>",(a)); Inst23++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (h) != "undefined") {_RecordType("<1965,1966,55>",(h)); Inst24++; } } catch(e) {}
h();
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1970,1982,56>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (h) != "undefined") {_RecordType("<1986,1987,56>",(h)); Inst26++; } } catch(e) {}
assertEquals(3, h());


try { if (Inst27 <= 1000 && typeof (k) != "undefined") {_RecordType("<2003,2004,59>",(k)); Inst27++; } } catch(e) {}
function k() {
try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<2018,2019,60>",(a)); Inst28++; } } catch(e) {}
  return a | 1;
}
a = "4";
try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2027,2028,62>",(a)); Inst29++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (k) != "undefined") {_RecordType("<2036,2037,63>",(k)); Inst30++; } } catch(e) {}
k();
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2041,2053,64>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (k) != "undefined") {_RecordType("<2057,2058,64>",(k)); Inst32++; } } catch(e) {}
assertEquals(5, k());

