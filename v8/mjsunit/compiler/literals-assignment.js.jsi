var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Tests for simple assignments and literals inside an anonymous function

// Test simple return statement.
try { if (Inst0 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1706,1718,31>",(assertEquals)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1722,1726,31>",(eval)); Inst1++; } } catch(e) {}
assertEquals(8, eval("(function() { return 8; })()"));

// Test simple assignment
var code = "(function() {\
               var a;\
               a = 8;\
               return a;\
             })()";
try { if (Inst2 <= 1000 && typeof (code) != "undefined") {_RecordType("<1792,1796,34>",(code)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1907,1919,39>",(assertEquals)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1923,1927,39>",(eval)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (code) != "undefined") {_RecordType("<1928,1932,39>",(code)); Inst5++; } } catch(e) {}
assertEquals(8, eval(code));

code = "(function() {\
           var x;\
           x = 'abc';\
           return x;\
         })()";
try { if (Inst6 <= 1000 && typeof (code) != "undefined") {_RecordType("<1937,1941,41>",(code)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2040,2052,46>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2060,2064,46>",(eval)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (code) != "undefined") {_RecordType("<2065,2069,46>",(code)); Inst9++; } } catch(e) {}
assertEquals("abc", eval(code));

// Test assignment as an RHS expression

code = "(function() {\
           var x, y;\
           x = y = 8;\
           return x;\
         })()";
try { if (Inst10 <= 1000 && typeof (code) != "undefined") {_RecordType("<2115,2119,50>",(code)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2221,2233,55>",(assertEquals)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2237,2241,55>",(eval)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (code) != "undefined") {_RecordType("<2242,2246,55>",(code)); Inst13++; } } catch(e) {}
assertEquals(8, eval(code));


code = "(function() {\
           var x, y;\
           x = y = 8;\
           return y;\
         })()";
try { if (Inst14 <= 1000 && typeof (code) != "undefined") {_RecordType("<2252,2256,58>",(code)); Inst14++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2358,2370,63>",(assertEquals)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2374,2378,63>",(eval)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (code) != "undefined") {_RecordType("<2379,2383,63>",(code)); Inst17++; } } catch(e) {}
assertEquals(8, eval(code));


code = "(function() {\
           var x,y,z;\
           return x = y = z = 8;\
         })()";
try { if (Inst18 <= 1000 && typeof (code) != "undefined") {_RecordType("<2389,2393,66>",(code)); Inst18++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2485,2497,70>",(assertEquals)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2501,2505,70>",(eval)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (code) != "undefined") {_RecordType("<2506,2510,70>",(code)); Inst21++; } } catch(e) {}
assertEquals(8, eval(code));

// Test object literals.
var a, b;
try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<2544,2545,73>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<2547,2548,73>",(b)); Inst23++; } } catch(e) {}
code = "a = {x:8}";
try { if (Inst24 <= 1000 && typeof (code) != "undefined") {_RecordType("<2550,2554,74>",(code)); Inst24++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2570,2574,75>",(eval)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (code) != "undefined") {_RecordType("<2575,2579,75>",(code)); Inst26++; } } catch(e) {}
eval(code);
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2582,2594,76>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a.x) != "undefined") {_RecordType("<2598,2601,76>",(a.x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (a) != "undefined") {_RecordType("<2598,2599,76>",(a)); Inst29++; } } catch(e) {}
assertEquals(8, a.x);

code = "b = {x:a, y:'abc'}";
try { if (Inst30 <= 1000 && typeof (code) != "undefined") {_RecordType("<2605,2609,78>",(code)); Inst30++; } } catch(e) {}
try { if (Inst31 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2634,2638,79>",(eval)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (code) != "undefined") {_RecordType("<2639,2643,79>",(code)); Inst32++; } } catch(e) {}
eval(code);
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2646,2658,80>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (a) != "undefined") {_RecordType("<2659,2660,80>",(a)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (b.x) != "undefined") {_RecordType("<2662,2665,80>",(b.x)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (b) != "undefined") {_RecordType("<2662,2663,80>",(b)); Inst36++; } } catch(e) {}
assertEquals(a, b.x);
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2668,2680,81>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (b.x.x) != "undefined") {_RecordType("<2684,2689,81>",(b.x.x)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (b.x) != "undefined") {_RecordType("<2684,2687,81>",(b.x)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (b) != "undefined") {_RecordType("<2684,2685,81>",(b)); Inst40++; } } catch(e) {}
assertEquals(8, b.x.x);
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2692,2704,82>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (b.y) != "undefined") {_RecordType("<2712,2715,82>",(b.y)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (b) != "undefined") {_RecordType("<2712,2713,82>",(b)); Inst43++; } } catch(e) {}
assertEquals("abc", b.y);

code = "({x:8, y:9}); 10";
try { if (Inst44 <= 1000 && typeof (code) != "undefined") {_RecordType("<2719,2723,84>",(code)); Inst44++; } } catch(e) {}
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2746,2758,85>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2763,2767,85>",(eval)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (code) != "undefined") {_RecordType("<2768,2772,85>",(code)); Inst47++; } } catch(e) {}
assertEquals(10, eval(code));

code = "({x:8, y:9})";
try { if (Inst48 <= 1000 && typeof (code) != "undefined") {_RecordType("<2777,2781,87>",(code)); Inst48++; } } catch(e) {}
try { if (Inst49 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2800,2804,88>",(eval)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (code) != "undefined") {_RecordType("<2805,2809,88>",(code)); Inst50++; } } catch(e) {}
eval(code);
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2812,2824,89>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2828,2832,89>",(eval)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (code) != "undefined") {_RecordType("<2833,2837,89>",(code)); Inst53++; } } catch(e) {}
assertEquals(9, eval(code+".y"));

code = "a = {2:8, x:9}";
try { if (Inst54 <= 1000 && typeof (code) != "undefined") {_RecordType("<2847,2851,91>",(code)); Inst54++; } } catch(e) {}
try { if (Inst55 <= 1000 && typeof (eval) != "undefined") {_RecordType("<2872,2876,92>",(eval)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (code) != "undefined") {_RecordType("<2877,2881,92>",(code)); Inst56++; } } catch(e) {}
eval(code);
try { if (Inst57 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2884,2896,93>",(assertEquals)); Inst57++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (a[2]) != "undefined") {_RecordType("<2900,2904,93>",(a[2])); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (a) != "undefined") {_RecordType("<2900,2901,93>",(a)); Inst59++; } } catch(e) {}
assertEquals(8, a[2]);
try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2907,2919,94>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (a["2"]) != "undefined") {_RecordType("<2923,2929,94>",(a["2"])); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (a) != "undefined") {_RecordType("<2923,2924,94>",(a)); Inst62++; } } catch(e) {}
assertEquals(8, a["2"]);
try { if (Inst63 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2932,2944,95>",(assertEquals)); Inst63++; } } catch(e) {}try { if (Inst64 <= 1000 && typeof (a["x"]) != "undefined") {_RecordType("<2948,2954,95>",(a["x"])); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (a) != "undefined") {_RecordType("<2948,2949,95>",(a)); Inst65++; } } catch(e) {}
assertEquals(9, a["x"]);

// Test regexp literals.

a = /abc/;
try { if (Inst66 <= 1000 && typeof (a) != "undefined") {_RecordType("<2984,2985,99>",(a)); Inst66++; } } catch(e) {}

try { if (Inst67 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2996,3008,101>",(assertEquals)); Inst67++; } } catch(e) {}try { if (Inst68 <= 1000 && typeof (a) != "undefined") {_RecordType("<3016,3017,101>",(a)); Inst68++; } } catch(e) {}
assertEquals(/abc/, a);

code = "/abc/; 8";
try { if (Inst69 <= 1000 && typeof (code) != "undefined") {_RecordType("<3021,3025,103>",(code)); Inst69++; } } catch(e) {}
try { if (Inst70 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3040,3052,104>",(assertEquals)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3056,3060,104>",(eval)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (code) != "undefined") {_RecordType("<3061,3065,104>",(code)); Inst72++; } } catch(e) {}
assertEquals(8, eval(code));

