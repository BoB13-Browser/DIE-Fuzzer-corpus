var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test references to properties of this.
try { if (Inst0 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1649,1653,29>",(Test)); Inst0++; } } catch(e) {}
function Test() {
  this.a = 0;
try { if (Inst1 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<1660,1666,30>",(this.a)); Inst1++; } } catch(e) {}
  this.b = 1;
try { if (Inst2 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1674,1680,31>",(this.b)); Inst2++; } } catch(e) {}
  this.c = 2;
try { if (Inst3 <= 1000 && typeof (this.c) != "undefined") {_RecordType("<1688,1694,32>",(this.c)); Inst3++; } } catch(e) {}
  this.d = 3;
try { if (Inst4 <= 1000 && typeof (this.d) != "undefined") {_RecordType("<1702,1708,33>",(this.d)); Inst4++; } } catch(e) {}
}

Test.prototype.test0 = function () {
try { if (Inst9 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1765,1771,37>",(this.b)); Inst9++; } } catch(e) {}
  this.a = this.b;
try { if (Inst8 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<1756,1762,37>",(this.a)); Inst8++; } } catch(e) {}
};
try { if (Inst5 <= 1000 && typeof (Test.prototype.test0) != "undefined") {_RecordType("<1717,1737,36>",(Test.prototype.test0)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (Test.prototype) != "undefined") {_RecordType("<1717,1731,36>",(Test.prototype)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1717,1721,36>",(Test)); Inst7++; } } catch(e) {}

Test.prototype.test1 = function() {
try { if (Inst15 <= 1000 && typeof (this.c) != "undefined") {_RecordType("<1833,1839,41>",(this.c)); Inst15++; } } catch(e) {}
  this.a = this.b = this.c;
try { if (Inst13 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<1815,1821,41>",(this.a)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1824,1830,41>",(this.b)); Inst14++; } } catch(e) {}
};
try { if (Inst10 <= 1000 && typeof (Test.prototype.test1) != "undefined") {_RecordType("<1777,1797,40>",(Test.prototype.test1)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (Test.prototype) != "undefined") {_RecordType("<1777,1791,40>",(Test.prototype)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1777,1781,40>",(Test)); Inst12++; } } catch(e) {}

Test.prototype.test2 = function() {
try { if (Inst20 <= 1000 && typeof (this.d) != "undefined") {_RecordType("<1892,1898,45>",(this.d)); Inst20++; } } catch(e) {}
  this.c = this.d;
try { if (Inst19 <= 1000 && typeof (this.c) != "undefined") {_RecordType("<1883,1889,45>",(this.c)); Inst19++; } } catch(e) {}
try { if (Inst22 <= 1000 && typeof (this.c) != "undefined") {_RecordType("<1911,1917,46>",(this.c)); Inst22++; } } catch(e) {}
  this.b = this.c;
try { if (Inst21 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1902,1908,46>",(this.b)); Inst21++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<1930,1936,47>",(this.b)); Inst24++; } } catch(e) {}
  this.a = this.b;
try { if (Inst23 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<1921,1927,47>",(this.a)); Inst23++; } } catch(e) {}
};
try { if (Inst16 <= 1000 && typeof (Test.prototype.test2) != "undefined") {_RecordType("<1845,1865,44>",(Test.prototype.test2)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Test.prototype) != "undefined") {_RecordType("<1845,1859,44>",(Test.prototype)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1845,1849,44>",(Test)); Inst18++; } } catch(e) {}

try { if (Inst26 <= 1000 && typeof (Test) != "undefined") {_RecordType("<1954,1958,50>",(Test)); Inst26++; } } catch(e) {}
var t = new Test();
try { if (Inst25 <= 1000 && typeof (t) != "undefined") {_RecordType("<1946,1947,50>",(t)); Inst25++; } } catch(e) {}

try { if (Inst27 <= 1000 && typeof (t.test0) != "undefined") {_RecordType("<1963,1970,52>",(t.test0)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (t) != "undefined") {_RecordType("<1963,1964,52>",(t)); Inst28++; } } catch(e) {}
t.test0();
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1974,1986,53>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (t.a) != "undefined") {_RecordType("<1990,1993,53>",(t.a)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (t) != "undefined") {_RecordType("<1990,1991,53>",(t)); Inst31++; } } catch(e) {}
assertEquals(1, t.a);

try { if (Inst32 <= 1000 && typeof (t.test1) != "undefined") {_RecordType("<1997,2004,55>",(t.test1)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (t) != "undefined") {_RecordType("<1997,1998,55>",(t)); Inst33++; } } catch(e) {}
t.test1();
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2008,2020,56>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (t.a) != "undefined") {_RecordType("<2024,2027,56>",(t.a)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (t) != "undefined") {_RecordType("<2024,2025,56>",(t)); Inst36++; } } catch(e) {}
assertEquals(2, t.a);
try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2030,2042,57>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (t.b) != "undefined") {_RecordType("<2046,2049,57>",(t.b)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (t) != "undefined") {_RecordType("<2046,2047,57>",(t)); Inst39++; } } catch(e) {}
assertEquals(2, t.b);

try { if (Inst40 <= 1000 && typeof (t.test2) != "undefined") {_RecordType("<2053,2060,59>",(t.test2)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (t) != "undefined") {_RecordType("<2053,2054,59>",(t)); Inst41++; } } catch(e) {}
t.test2();
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2064,2076,60>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (t.a) != "undefined") {_RecordType("<2080,2083,60>",(t.a)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (t) != "undefined") {_RecordType("<2080,2081,60>",(t)); Inst44++; } } catch(e) {}
assertEquals(3, t.a);
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2086,2098,61>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (t.b) != "undefined") {_RecordType("<2102,2105,61>",(t.b)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (t) != "undefined") {_RecordType("<2102,2103,61>",(t)); Inst47++; } } catch(e) {}
assertEquals(3, t.b);
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2108,2120,62>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (t.c) != "undefined") {_RecordType("<2124,2127,62>",(t.c)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (t) != "undefined") {_RecordType("<2124,2125,62>",(t)); Inst50++; } } catch(e) {}
assertEquals(3, t.c);

