var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


// Test variants of for loops.
try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1639,1640,30>",(f)); Inst0++; } } catch(e) {}
function f(i, p) {
try { if (Inst1 <= 1000 && typeof (i) != "undefined") {_RecordType("<1641,1642,30>",(i)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (p) != "undefined") {_RecordType("<1644,1645,30>",(p)); Inst2++; } } catch(e) {}
  for(; i < 10; ) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<1657,1658,31>",(i)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (p.x) != "undefined") {_RecordType("<1679,1682,32>",(p.x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (p) != "undefined") {_RecordType("<1679,1680,32>",(p)); Inst7++; } } catch(e) {}
    p.x = p.x + 1;
try { if (Inst4 <= 1000 && typeof (p.x) != "undefined") {_RecordType("<1673,1676,32>",(p.x)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (p) != "undefined") {_RecordType("<1673,1674,32>",(p)); Inst5++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<1696,1697,33>",(i)); Inst9++; } } catch(e) {}
    i = i+1;
try { if (Inst8 <= 1000 && typeof (i) != "undefined") {_RecordType("<1692,1693,33>",(i)); Inst8++; } } catch(e) {}
  }
}
var o = {x:42};
try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<1711,1712,36>",(o)); Inst10++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (f) != "undefined") {_RecordType("<1723,1724,37>",(f)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (o) != "undefined") {_RecordType("<1728,1729,37>",(o)); Inst12++; } } catch(e) {}
f(1, o);
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1732,1744,38>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1749,1752,38>",(o.x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<1749,1750,38>",(o)); Inst15++; } } catch(e) {}
assertEquals(51, o.x);


try { if (Inst16 <= 1000 && typeof (g) != "undefined") {_RecordType("<1766,1767,41>",(g)); Inst16++; } } catch(e) {}
function g(i, p) {
try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<1768,1769,41>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (p) != "undefined") {_RecordType("<1771,1772,41>",(p)); Inst18++; } } catch(e) {}
  for(; ; ) {
try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<1798,1799,43>",(i)); Inst19++; } } catch(e) {}
    if (i == 10) return;
try { if (Inst22 <= 1000 && typeof (p.x) != "undefined") {_RecordType("<1825,1828,44>",(p.x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (p) != "undefined") {_RecordType("<1825,1826,44>",(p)); Inst23++; } } catch(e) {}
    p.x = p.x + 1;
try { if (Inst20 <= 1000 && typeof (p.x) != "undefined") {_RecordType("<1819,1822,44>",(p.x)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (p) != "undefined") {_RecordType("<1819,1820,44>",(p)); Inst21++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<1842,1843,45>",(i)); Inst25++; } } catch(e) {}
    i = i+1;
try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<1838,1839,45>",(i)); Inst24++; } } catch(e) {}
  }
}
o = {x:42};
try { if (Inst26 <= 1000 && typeof (o) != "undefined") {_RecordType("<1853,1854,48>",(o)); Inst26++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (g) != "undefined") {_RecordType("<1865,1866,49>",(g)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<1870,1871,49>",(o)); Inst28++; } } catch(e) {}
g(1, o);
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1874,1886,50>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1891,1894,50>",(o.x)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (o) != "undefined") {_RecordType("<1891,1892,50>",(o)); Inst31++; } } catch(e) {}
assertEquals(51, o.x);


try { if (Inst32 <= 1000 && typeof (h) != "undefined") {_RecordType("<1908,1909,53>",(h)); Inst32++; } } catch(e) {}
function h(p) {
try { if (Inst33 <= 1000 && typeof (p) != "undefined") {_RecordType("<1910,1911,53>",(p)); Inst33++; } } catch(e) {}
  for(; p.x < 10; p.x++) {}
try { if (Inst34 <= 1000 && typeof (p.x) != "undefined") {_RecordType("<1923,1926,54>",(p.x)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (p) != "undefined") {_RecordType("<1923,1924,54>",(p)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (p.x) != "undefined") {_RecordType("<1933,1936,54>",(p.x)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (p) != "undefined") {_RecordType("<1933,1934,54>",(p)); Inst37++; } } catch(e) {}
}

var o = {x:0};
try { if (Inst38 <= 1000 && typeof (o) != "undefined") {_RecordType("<1950,1951,57>",(o)); Inst38++; } } catch(e) {}
try { if (Inst39 <= 1000 && typeof (h) != "undefined") {_RecordType("<1961,1962,58>",(h)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (o) != "undefined") {_RecordType("<1963,1964,58>",(o)); Inst40++; } } catch(e) {}
h(o);
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1967,1979,59>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1984,1987,59>",(o.x)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (o) != "undefined") {_RecordType("<1984,1985,59>",(o)); Inst43++; } } catch(e) {}
assertEquals(10, o.x);

