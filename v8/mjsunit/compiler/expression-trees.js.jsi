var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --always-opt --nocompilation-cache

// Given a binary operation string and an ordered array of leaf
// strings, return an array of all binary tree strings with the leaves
// (in order) as the fringe.
try { if (Inst0 <= 1000 && typeof (makeTrees) != "undefined") {_RecordType("<1817,1826,33>",(makeTrees)); Inst0++; } } catch(e) {}
function makeTrees(op, leaves) {
try { if (Inst1 <= 1000 && typeof (op) != "undefined") {_RecordType("<1827,1829,33>",(op)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (leaves) != "undefined") {_RecordType("<1831,1837,33>",(leaves)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (leaves.length) != "undefined") {_RecordType("<1853,1866,34>",(leaves.length)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (leaves) != "undefined") {_RecordType("<1853,1859,34>",(leaves)); Inst5++; } } catch(e) {}
  var len = leaves.length;
try { if (Inst3 <= 1000 && typeof (len) != "undefined") {_RecordType("<1847,1850,34>",(len)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (len) != "undefined") {_RecordType("<1874,1877,35>",(len)); Inst6++; } } catch(e) {}
  if (len == 1) {
    // One leaf is a leaf.
try { if (Inst7 <= 1000 && typeof (leaves) != "undefined") {_RecordType("<1924,1930,37>",(leaves)); Inst7++; } } catch(e) {}
    return leaves;
  } else {
    // More than one leaf requires an interior node.
    var result = [];
try { if (Inst8 <= 1000 && typeof (result) != "undefined") {_RecordType("<2004,2010,40>",(result)); Inst8++; } } catch(e) {}
    // Split the leaves into left and right subtrees in all possible
    // ways.  For each split recursively compute all possible subtrees.
    for (var i = 1; i < len; ++i) {
try { if (Inst9 <= 1000 && typeof (i) != "undefined") {_RecordType("<2171,2172,43>",(i)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (i) != "undefined") {_RecordType("<2178,2179,43>",(i)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (len) != "undefined") {_RecordType("<2182,2185,43>",(len)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<2189,2190,43>",(i)); Inst12++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (makeTrees) != "undefined") {_RecordType("<2216,2225,44>",(makeTrees)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (op) != "undefined") {_RecordType("<2226,2228,44>",(op)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (leaves.slice) != "undefined") {_RecordType("<2230,2242,44>",(leaves.slice)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (leaves) != "undefined") {_RecordType("<2230,2236,44>",(leaves)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<2246,2247,44>",(i)); Inst18++; } } catch(e) {}
      var leftTrees = makeTrees(op, leaves.slice(0, i));
try { if (Inst13 <= 1000 && typeof (leftTrees) != "undefined") {_RecordType("<2204,2213,44>",(leftTrees)); Inst13++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (makeTrees) != "undefined") {_RecordType("<2274,2283,45>",(makeTrees)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (op) != "undefined") {_RecordType("<2284,2286,45>",(op)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (leaves.slice) != "undefined") {_RecordType("<2288,2300,45>",(leaves.slice)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (leaves) != "undefined") {_RecordType("<2288,2294,45>",(leaves)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2301,2302,45>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (len) != "undefined") {_RecordType("<2304,2307,45>",(len)); Inst25++; } } catch(e) {}
      var rightTrees = makeTrees(op, leaves.slice(i, len));
try { if (Inst19 <= 1000 && typeof (rightTrees) != "undefined") {_RecordType("<2261,2271,45>",(rightTrees)); Inst19++; } } catch(e) {}
      // Adjoin every possible left and right subtree.
      for (var j = 0; j < leftTrees.length; ++j) {
try { if (Inst26 <= 1000 && typeof (j) != "undefined") {_RecordType("<2381,2382,47>",(j)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (j) != "undefined") {_RecordType("<2388,2389,47>",(j)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (leftTrees.length) != "undefined") {_RecordType("<2392,2408,47>",(leftTrees.length)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (leftTrees) != "undefined") {_RecordType("<2392,2401,47>",(leftTrees)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (j) != "undefined") {_RecordType("<2412,2413,47>",(j)); Inst30++; } } catch(e) {}
        for (var k = 0; k < rightTrees.length; ++k) {
try { if (Inst31 <= 1000 && typeof (k) != "undefined") {_RecordType("<2434,2435,48>",(k)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (k) != "undefined") {_RecordType("<2441,2442,48>",(k)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (rightTrees.length) != "undefined") {_RecordType("<2445,2462,48>",(rightTrees.length)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (rightTrees) != "undefined") {_RecordType("<2445,2455,48>",(rightTrees)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (k) != "undefined") {_RecordType("<2466,2467,48>",(k)); Inst35++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (leftTrees[j]) != "undefined") {_RecordType("<2500,2512,49>",(leftTrees[j])); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (leftTrees) != "undefined") {_RecordType("<2500,2509,49>",(leftTrees)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (op) != "undefined") {_RecordType("<2515,2517,49>",(op)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (rightTrees[k]) != "undefined") {_RecordType("<2520,2533,49>",(rightTrees[k])); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (rightTrees) != "undefined") {_RecordType("<2520,2530,49>",(rightTrees)); Inst41++; } } catch(e) {}
          var string = "(" + leftTrees[j] + op + rightTrees[k] + ")";
try { if (Inst36 <= 1000 && typeof (string) != "undefined") {_RecordType("<2485,2491,49>",(string)); Inst36++; } } catch(e) {}
try { if (Inst42 <= 1000 && typeof (result.push) != "undefined") {_RecordType("<2551,2562,50>",(result.push)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (result) != "undefined") {_RecordType("<2551,2557,50>",(result)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (string) != "undefined") {_RecordType("<2563,2569,50>",(string)); Inst44++; } } catch(e) {}
          result.push(string);
        }
      }
    }
try { if (Inst45 <= 1000 && typeof (result) != "undefined") {_RecordType("<2607,2613,54>",(result)); Inst45++; } } catch(e) {}
    return result;
  }
}

// All possible bitwise OR trees with six leaves, i.e. CatalanNumber[5] = 42,
// see http://mathworld.wolfram.com/CatalanNumber.html.
var identifiers = ['a','b','c','d','e','f'];
try { if (Inst46 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<2760,2771,60>",(identifiers)); Inst46++; } } catch(e) {}
try { if (Inst48 <= 1000 && typeof (makeTrees) != "undefined") {_RecordType("<2816,2825,61>",(makeTrees)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<2831,2842,61>",(identifiers)); Inst49++; } } catch(e) {}
var or_trees = makeTrees("|", identifiers);
try { if (Inst47 <= 1000 && typeof (or_trees) != "undefined") {_RecordType("<2805,2813,61>",(or_trees)); Inst47++; } } catch(e) {}
try { if (Inst51 <= 1000 && typeof (makeTrees) != "undefined") {_RecordType("<2861,2870,62>",(makeTrees)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<2876,2887,62>",(identifiers)); Inst52++; } } catch(e) {}
var and_trees = makeTrees("&", identifiers);
try { if (Inst50 <= 1000 && typeof (and_trees) != "undefined") {_RecordType("<2849,2858,62>",(and_trees)); Inst50++; } } catch(e) {}

// Set up leaf masks to set 6 least-significant bits.
var a = 1 << 0;
try { if (Inst53 <= 1000 && typeof (a) != "undefined") {_RecordType("<2949,2950,65>",(a)); Inst53++; } } catch(e) {}
var b = 1 << 1;
try { if (Inst54 <= 1000 && typeof (b) != "undefined") {_RecordType("<2965,2966,66>",(b)); Inst54++; } } catch(e) {}
var c = 1 << 2;
try { if (Inst55 <= 1000 && typeof (c) != "undefined") {_RecordType("<2981,2982,67>",(c)); Inst55++; } } catch(e) {}
var d = 1 << 3;
try { if (Inst56 <= 1000 && typeof (d) != "undefined") {_RecordType("<2997,2998,68>",(d)); Inst56++; } } catch(e) {}
var e = 1 << 4;
try { if (Inst57 <= 1000 && typeof (e) != "undefined") {_RecordType("<3013,3014,69>",(e)); Inst57++; } } catch(e) {}
var f = 1 << 5;
try { if (Inst58 <= 1000 && typeof (f) != "undefined") {_RecordType("<3029,3030,70>",(f)); Inst58++; } } catch(e) {}

for (var i = 0; i < or_trees.length; ++i) {
try { if (Inst59 <= 1000 && typeof (i) != "undefined") {_RecordType("<3051,3052,72>",(i)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (i) != "undefined") {_RecordType("<3058,3059,72>",(i)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (or_trees.length) != "undefined") {_RecordType("<3062,3077,72>",(or_trees.length)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (or_trees) != "undefined") {_RecordType("<3062,3070,72>",(or_trees)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (i) != "undefined") {_RecordType("<3081,3082,72>",(i)); Inst63++; } } catch(e) {}
  for (var j = 0; j < 6; ++j) {
try { if (Inst64 <= 1000 && typeof (j) != "undefined") {_RecordType("<3097,3098,73>",(j)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (j) != "undefined") {_RecordType("<3104,3105,73>",(j)); Inst65++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (j) != "undefined") {_RecordType("<3113,3114,73>",(j)); Inst66++; } } catch(e) {}
try { if (Inst68 <= 1000 && typeof (Function) != "undefined") {_RecordType("<3139,3147,74>",(Function)); Inst68++; } } catch(e) {}try { if (Inst69 <= 1000 && typeof (or_trees[i]) != "undefined") {_RecordType("<3160,3171,74>",(or_trees[i])); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (or_trees) != "undefined") {_RecordType("<3160,3168,74>",(or_trees)); Inst70++; } } catch(e) {}
    var or_fun = new Function("return " + or_trees[i]);
try { if (Inst67 <= 1000 && typeof (or_fun) != "undefined") {_RecordType("<3126,3132,74>",(or_fun)); Inst67++; } } catch(e) {}
try { if (Inst71 <= 1000 && typeof (j) != "undefined") {_RecordType("<3182,3183,75>",(j)); Inst71++; } } catch(e) {}try { if (Inst72 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3190,3202,75>",(assertEquals)); Inst72++; } } catch(e) {}try { if (Inst73 <= 1000 && typeof (or_fun) != "undefined") {_RecordType("<3207,3213,75>",(or_fun)); Inst73++; } } catch(e) {}
    if (j == 0) assertEquals(63, or_fun());

    // Set the j'th variable to a string to force a bailout.
try { if (Inst74 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3284,3288,78>",(eval)); Inst74++; } } catch(e) {}try { if (Inst75 <= 1000 && typeof (identifiers[j]) != "undefined") {_RecordType("<3289,3303,78>",(identifiers[j])); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<3289,3300,78>",(identifiers)); Inst76++; } } catch(e) {}
    eval(identifiers[j] + "+= ''");
try { if (Inst77 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3320,3332,79>",(assertEquals)); Inst77++; } } catch(e) {}try { if (Inst78 <= 1000 && typeof (or_fun) != "undefined") {_RecordType("<3337,3343,79>",(or_fun)); Inst78++; } } catch(e) {}
    assertEquals(63, or_fun());
    // Set it back to a number for the next iteration.
try { if (Inst79 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3407,3411,81>",(eval)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (identifiers[j]) != "undefined") {_RecordType("<3412,3426,81>",(identifiers[j])); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<3412,3423,81>",(identifiers)); Inst81++; } } catch(e) {}try { if (Inst82 <= 1000 && typeof (identifiers[j]) != "undefined") {_RecordType("<3437,3451,81>",(identifiers[j])); Inst82++; } } catch(e) {}try { if (Inst83 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<3437,3448,81>",(identifiers)); Inst83++; } } catch(e) {}
    eval(identifiers[j] + "= +" + identifiers[j]);
  }
}

// Set up leaf masks to clear 6 least-significant bits.
a ^= 63;
try { if (Inst84 <= 1000 && typeof (a) != "undefined") {_RecordType("<3517,3518,86>",(a)); Inst84++; } } catch(e) {}
b ^= 63;
try { if (Inst85 <= 1000 && typeof (b) != "undefined") {_RecordType("<3526,3527,87>",(b)); Inst85++; } } catch(e) {}
c ^= 63;
try { if (Inst86 <= 1000 && typeof (c) != "undefined") {_RecordType("<3535,3536,88>",(c)); Inst86++; } } catch(e) {}
d ^= 63;
try { if (Inst87 <= 1000 && typeof (d) != "undefined") {_RecordType("<3544,3545,89>",(d)); Inst87++; } } catch(e) {}
e ^= 63;
try { if (Inst88 <= 1000 && typeof (e) != "undefined") {_RecordType("<3553,3554,90>",(e)); Inst88++; } } catch(e) {}
f ^= 63;
try { if (Inst89 <= 1000 && typeof (f) != "undefined") {_RecordType("<3562,3563,91>",(f)); Inst89++; } } catch(e) {}

for (i = 0; i < and_trees.length; ++i) {
try { if (Inst90 <= 1000 && typeof (i) != "undefined") {_RecordType("<3577,3578,93>",(i)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (i) != "undefined") {_RecordType("<3584,3585,93>",(i)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (and_trees.length) != "undefined") {_RecordType("<3588,3604,93>",(and_trees.length)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (and_trees) != "undefined") {_RecordType("<3588,3597,93>",(and_trees)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (i) != "undefined") {_RecordType("<3608,3609,93>",(i)); Inst94++; } } catch(e) {}
  for (var j = 0; j < 6; ++j) {
try { if (Inst95 <= 1000 && typeof (j) != "undefined") {_RecordType("<3624,3625,94>",(j)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (j) != "undefined") {_RecordType("<3631,3632,94>",(j)); Inst96++; } } catch(e) {}try { if (Inst97 <= 1000 && typeof (j) != "undefined") {_RecordType("<3640,3641,94>",(j)); Inst97++; } } catch(e) {}
try { if (Inst99 <= 1000 && typeof (Function) != "undefined") {_RecordType("<3667,3675,95>",(Function)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (and_trees[i]) != "undefined") {_RecordType("<3688,3700,95>",(and_trees[i])); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (and_trees) != "undefined") {_RecordType("<3688,3697,95>",(and_trees)); Inst101++; } } catch(e) {}
    var and_fun = new Function("return " + and_trees[i]);
try { if (Inst98 <= 1000 && typeof (and_fun) != "undefined") {_RecordType("<3653,3660,95>",(and_fun)); Inst98++; } } catch(e) {}
try { if (Inst102 <= 1000 && typeof (j) != "undefined") {_RecordType("<3711,3712,96>",(j)); Inst102++; } } catch(e) {}try { if (Inst103 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3719,3731,96>",(assertEquals)); Inst103++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (and_fun) != "undefined") {_RecordType("<3735,3742,96>",(and_fun)); Inst104++; } } catch(e) {}
    if (j == 0) assertEquals(0, and_fun());

    // Set the j'th variable to a string to force a bailout.
try { if (Inst105 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3813,3817,99>",(eval)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (identifiers[j]) != "undefined") {_RecordType("<3818,3832,99>",(identifiers[j])); Inst106++; } } catch(e) {}try { if (Inst107 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<3818,3829,99>",(identifiers)); Inst107++; } } catch(e) {}
    eval(identifiers[j] + "+= ''");
try { if (Inst108 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<3849,3861,100>",(assertEquals)); Inst108++; } } catch(e) {}try { if (Inst109 <= 1000 && typeof (and_fun) != "undefined") {_RecordType("<3865,3872,100>",(and_fun)); Inst109++; } } catch(e) {}
    assertEquals(0, and_fun());
    // Set it back to a number for the next iteration.
try { if (Inst110 <= 1000 && typeof (eval) != "undefined") {_RecordType("<3936,3940,102>",(eval)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (identifiers[j]) != "undefined") {_RecordType("<3941,3955,102>",(identifiers[j])); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<3941,3952,102>",(identifiers)); Inst112++; } } catch(e) {}try { if (Inst113 <= 1000 && typeof (identifiers[j]) != "undefined") {_RecordType("<3966,3980,102>",(identifiers[j])); Inst113++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (identifiers) != "undefined") {_RecordType("<3966,3977,102>",(identifiers)); Inst114++; } } catch(e) {}
    eval(identifiers[j] + "= +" + identifiers[j]);
  }
}

