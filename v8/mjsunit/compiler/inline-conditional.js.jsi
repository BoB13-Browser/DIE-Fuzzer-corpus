var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test that we can inline a function that returns the result of
// a conditional operation.
try { if (Inst0 <= 1000 && typeof (TestInlineConditional) != "undefined") {_RecordType("<1700,1721,30>",(TestInlineConditional)); Inst0++; } } catch(e) {}
function TestInlineConditional(o) {
try { if (Inst1 <= 1000 && typeof (o) != "undefined") {_RecordType("<1722,1723,30>",(o)); Inst1++; } } catch(e) {}
  // Effect context.
try { if (Inst2 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1750,1753,32>",(o.f)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (o) != "undefined") {_RecordType("<1750,1751,32>",(o)); Inst3++; } } catch(e) {}
  o.f();
  // Value context.
try { if (Inst5 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1787,1790,34>",(o.f)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (o) != "undefined") {_RecordType("<1787,1788,34>",(o)); Inst6++; } } catch(e) {}
  var x = o.f();
try { if (Inst4 <= 1000 && typeof (x) != "undefined") {_RecordType("<1783,1784,34>",(x)); Inst4++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1796,1808,35>",(assertEquals)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1813,1814,35>",(x)); Inst8++; } } catch(e) {}
  assertEquals(87, x);
try { if (Inst9 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1819,1831,36>",(assertEquals)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1836,1839,36>",(o.f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (o) != "undefined") {_RecordType("<1836,1837,36>",(o)); Inst11++; } } catch(e) {}
  assertEquals(87, o.f());
  // Test context.
try { if (Inst12 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1870,1873,38>",(o.f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (o) != "undefined") {_RecordType("<1870,1871,38>",(o)); Inst13++; } } catch(e) {}
  if (!o.f()) {
try { if (Inst14 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1883,1893,39>",(assertTrue)); Inst14++; } } catch(e) {}
    assertTrue(false);  // Should not happen.
  }
}

var o = {x:false,y:42,z:87};
try { if (Inst15 <= 1000 && typeof (o) != "undefined") {_RecordType("<1936,1937,43>",(o)); Inst15++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1987,1993,44>",(this.x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<1996,2002,44>",(this.y)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (this.z) != "undefined") {_RecordType("<2005,2011,44>",(this.z)); Inst20++; } } catch(e) {}
o.f = function() { return this.x ? this.y : this.z; };
try { if (Inst16 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<1961,1964,44>",(o.f)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (o) != "undefined") {_RecordType("<1961,1962,44>",(o)); Inst17++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (TestInlineConditional) != "undefined") {_RecordType("<2048,2069,45>",(TestInlineConditional)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (o) != "undefined") {_RecordType("<2070,2071,45>",(o)); Inst25++; } } catch(e) {}
for (var i = 0; i < 10000; i++) TestInlineConditional(o);
try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<2025,2026,45>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<2032,2033,45>",(i)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2043,2044,45>",(i)); Inst23++; } } catch(e) {}
try { if (Inst26 <= 1000 && typeof (TestInlineConditional) != "undefined") {_RecordType("<2074,2095,46>",(TestInlineConditional)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o.f) != "undefined") {_RecordType("<2117,2120,46>",(o.f)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (o) != "undefined") {_RecordType("<2117,2118,46>",(o)); Inst28++; } } catch(e) {}
TestInlineConditional({x:true,y:87,z:42,f: o.f});

