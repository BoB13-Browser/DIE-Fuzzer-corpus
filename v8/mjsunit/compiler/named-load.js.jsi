var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst0 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<177,180,5>",(Foo)); Inst0++; } } catch(e) {}
function Foo(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<181,182,5>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<184,185,5>",(b)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<200,201,6>",(a)); Inst4++; } } catch(e) {}
  this.a = a;
try { if (Inst3 <= 1000 && typeof (this.a) != "undefined") {_RecordType("<191,197,6>",(this.a)); Inst3++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<214,215,7>",(b)); Inst6++; } } catch(e) {}
  this.b = b;
try { if (Inst5 <= 1000 && typeof (this.b) != "undefined") {_RecordType("<205,211,7>",(this.b)); Inst5++; } } catch(e) {}
  var bname = "b";
try { if (Inst7 <= 1000 && typeof (bname) != "undefined") {_RecordType("<223,228,8>",(bname)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (this["a"]) != "undefined") {_RecordType("<247,256,9>",(this["a"])); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (this[bname]) != "undefined") {_RecordType("<259,270,9>",(this[bname])); Inst10++; } } catch(e) {}
  this.x = this["a"] + this[bname];
try { if (Inst8 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<238,244,9>",(this.x)); Inst8++; } } catch(e) {}
}

try { if (Inst12 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<288,291,12>",(Foo)); Inst12++; } } catch(e) {}
var f1 = new Foo(3, 4);
try { if (Inst11 <= 1000 && typeof (f1) != "undefined") {_RecordType("<279,281,12>",(f1)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<299,311,13>",(assertEquals)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (f1.x) != "undefined") {_RecordType("<315,319,13>",(f1.x)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (f1) != "undefined") {_RecordType("<315,317,13>",(f1)); Inst15++; } } catch(e) {}
assertEquals(7, f1.x);

// SMIs
for (var i = 0; i < 6; i++) {
try { if (Inst16 <= 1000 && typeof (i) != "undefined") {_RecordType("<340,341,16>",(i)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<347,348,16>",(i)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<354,355,16>",(i)); Inst18++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<375,378,17>",(Foo)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (i) != "undefined") {_RecordType("<379,380,17>",(i)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (i) != "undefined") {_RecordType("<382,383,17>",(i)); Inst22++; } } catch(e) {}
  var f = new Foo(i, i + 2);
try { if (Inst19 <= 1000 && typeof (f) != "undefined") {_RecordType("<367,368,17>",(f)); Inst19++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<392,404,18>",(assertEquals)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<405,406,18>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<409,410,18>",(i)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (f.x) != "undefined") {_RecordType("<416,419,18>",(f.x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (f) != "undefined") {_RecordType("<416,417,18>",(f)); Inst27++; } } catch(e) {}
  assertEquals(i + i + 2, f.x);
}

// derbles
for (var i = 0.25; i < 6.25; i++) {
try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<445,446,22>",(i)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<455,456,22>",(i)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<465,466,22>",(i)); Inst30++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<486,489,23>",(Foo)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (i) != "undefined") {_RecordType("<490,491,23>",(i)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<493,494,23>",(i)); Inst34++; } } catch(e) {}
  var f = new Foo(i, i + 2);
try { if (Inst31 <= 1000 && typeof (f) != "undefined") {_RecordType("<478,479,23>",(f)); Inst31++; } } catch(e) {}
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<503,515,24>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<516,517,24>",(i)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (i) != "undefined") {_RecordType("<520,521,24>",(i)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (f.x) != "undefined") {_RecordType("<527,530,24>",(f.x)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (f) != "undefined") {_RecordType("<527,528,24>",(f)); Inst39++; } } catch(e) {}
  assertEquals(i + i + 2, f.x);
}

// stirngs
for (var i = 0; i < 6; i++) {
try { if (Inst40 <= 1000 && typeof (i) != "undefined") {_RecordType("<556,557,28>",(i)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (i) != "undefined") {_RecordType("<563,564,28>",(i)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (i) != "undefined") {_RecordType("<570,571,28>",(i)); Inst42++; } } catch(e) {}
try { if (Inst44 <= 1000 && typeof (Foo) != "undefined") {_RecordType("<591,594,29>",(Foo)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (i) != "undefined") {_RecordType("<595,596,29>",(i)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (i) != "undefined") {_RecordType("<604,605,29>",(i)); Inst46++; } } catch(e) {}
  var f = new Foo(i + "", (i + 2) + "");
try { if (Inst43 <= 1000 && typeof (f) != "undefined") {_RecordType("<583,584,29>",(f)); Inst43++; } } catch(e) {}
try { if (Inst47 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<620,632,30>",(assertEquals)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (i) != "undefined") {_RecordType("<634,635,30>",(i)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (i) != "undefined") {_RecordType("<646,647,30>",(i)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (f.x) != "undefined") {_RecordType("<660,663,30>",(f.x)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (f) != "undefined") {_RecordType("<660,661,30>",(f)); Inst51++; } } catch(e) {}
  assertEquals((i + "") + ((i + 2) + ""), f.x);
}

