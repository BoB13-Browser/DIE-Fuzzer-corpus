var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1607,1612,28>",(AndBB)); Inst0++; } } catch(e) {}
function AndBB(x,y) {
try { if (Inst1 <= 1000 && typeof (x) != "undefined") {_RecordType("<1613,1614,28>",(x)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (y) != "undefined") {_RecordType("<1615,1616,28>",(y)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1630,1631,29>",(x)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (y) != "undefined") {_RecordType("<1642,1643,29>",(y)); Inst4++; } } catch(e) {}
  return (x == 0) && (y == 0);
}

try { if (Inst5 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1663,1668,32>",(AndBN)); Inst5++; } } catch(e) {}
function AndBN(x,y) {
try { if (Inst6 <= 1000 && typeof (x) != "undefined") {_RecordType("<1669,1670,32>",(x)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (y) != "undefined") {_RecordType("<1671,1672,32>",(y)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1686,1687,33>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<1697,1698,33>",(y)); Inst9++; } } catch(e) {}
  return (x == 0) && y;
}

try { if (Inst10 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<1712,1717,36>",(AndNB)); Inst10++; } } catch(e) {}
function AndNB(x,y) {
try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1718,1719,36>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y) != "undefined") {_RecordType("<1720,1721,36>",(y)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (x) != "undefined") {_RecordType("<1734,1735,37>",(x)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (y) != "undefined") {_RecordType("<1740,1741,37>",(y)); Inst14++; } } catch(e) {}
  return x && (y == 0);
}

try { if (Inst15 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<1761,1766,40>",(AndNN)); Inst15++; } } catch(e) {}
function AndNN(x,y) {
try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1767,1768,40>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (y) != "undefined") {_RecordType("<1769,1770,40>",(y)); Inst17++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (x) != "undefined") {_RecordType("<1783,1784,41>",(x)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<1788,1789,41>",(y)); Inst19++; } } catch(e) {}
  return x && y;
}

try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1794,1804,44>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1805,1810,44>",(AndBB)); Inst21++; } } catch(e) {}
assertTrue(AndBB(0, 0));
try { if (Inst22 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1819,1830,45>",(assertFalse)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1831,1836,45>",(AndBB)); Inst23++; } } catch(e) {}
assertFalse(AndBB(1, 0));
try { if (Inst24 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1845,1856,46>",(assertFalse)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1857,1862,46>",(AndBB)); Inst25++; } } catch(e) {}
assertFalse(AndBB(0, 1));
try { if (Inst26 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1871,1882,47>",(assertFalse)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (AndBB) != "undefined") {_RecordType("<1883,1888,47>",(AndBB)); Inst27++; } } catch(e) {}
assertFalse(AndBB(1, 1));

try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1898,1910,49>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1914,1919,49>",(AndBN)); Inst29++; } } catch(e) {}
assertEquals(0, AndBN(0, 0));
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1928,1940,50>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1944,1949,50>",(AndBN)); Inst31++; } } catch(e) {}
assertEquals(1, AndBN(0, 1));
try { if (Inst32 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1958,1969,51>",(assertFalse)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<1970,1975,51>",(AndBN)); Inst33++; } } catch(e) {}
assertFalse(AndBN(1, 0));
try { if (Inst34 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1984,1996,52>",(assertEquals)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<2000,2005,52>",(AndBN)); Inst35++; } } catch(e) {}
assertEquals(1, AndBN(0, 1));
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2014,2026,53>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<2030,2035,53>",(AndBN)); Inst37++; } } catch(e) {}
assertEquals(2, AndBN(0, 2));
try { if (Inst38 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2044,2055,54>",(assertFalse)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<2056,2061,54>",(AndBN)); Inst39++; } } catch(e) {}
assertFalse(AndBN(1, 1));
try { if (Inst40 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2070,2081,55>",(assertFalse)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (AndBN) != "undefined") {_RecordType("<2082,2087,55>",(AndBN)); Inst41++; } } catch(e) {}
assertFalse(AndBN(1, 2));

try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2097,2109,57>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<2113,2118,57>",(AndNB)); Inst43++; } } catch(e) {}
assertEquals(0, AndNB(0, 0));
try { if (Inst44 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2127,2137,58>",(assertTrue)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<2138,2143,58>",(AndNB)); Inst45++; } } catch(e) {}
assertTrue(AndNB(1, 0));
try { if (Inst46 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2152,2164,59>",(assertEquals)); Inst46++; } } catch(e) {}try { if (Inst47 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<2168,2173,59>",(AndNB)); Inst47++; } } catch(e) {}
assertEquals(0, AndNB(0, 1));
try { if (Inst48 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2182,2194,60>",(assertEquals)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<2199,2204,60>",(AndNB)); Inst49++; } } catch(e) {}
assertEquals("", AndNB("", 1));
try { if (Inst50 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2214,2225,61>",(assertFalse)); Inst50++; } } catch(e) {}try { if (Inst51 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<2226,2231,61>",(AndNB)); Inst51++; } } catch(e) {}
assertFalse(AndNB(1, 1));
try { if (Inst52 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2240,2250,62>",(assertTrue)); Inst52++; } } catch(e) {}try { if (Inst53 <= 1000 && typeof (AndNB) != "undefined") {_RecordType("<2251,2256,62>",(AndNB)); Inst53++; } } catch(e) {}
assertTrue(AndNB(2, 0));

try { if (Inst54 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2266,2278,64>",(assertEquals)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2282,2287,64>",(AndNN)); Inst55++; } } catch(e) {}
assertEquals(0, AndNN(0, 0));
try { if (Inst56 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2296,2308,65>",(assertEquals)); Inst56++; } } catch(e) {}try { if (Inst57 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2312,2317,65>",(AndNN)); Inst57++; } } catch(e) {}
assertEquals(0, AndNN(1, 0));
try { if (Inst58 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2326,2338,66>",(assertEquals)); Inst58++; } } catch(e) {}try { if (Inst59 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2342,2347,66>",(AndNN)); Inst59++; } } catch(e) {}
assertEquals(0, AndNN(2, 0));
try { if (Inst60 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2356,2368,67>",(assertEquals)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2372,2377,67>",(AndNN)); Inst61++; } } catch(e) {}
assertEquals(0, AndNN(0, 1));
try { if (Inst62 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2386,2398,68>",(assertEquals)); Inst62++; } } catch(e) {}try { if (Inst63 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2402,2407,68>",(AndNN)); Inst63++; } } catch(e) {}
assertEquals(0, AndNN(0, 2));
try { if (Inst64 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2416,2428,69>",(assertEquals)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2432,2437,69>",(AndNN)); Inst65++; } } catch(e) {}
assertEquals(1, AndNN(1, 1));
try { if (Inst66 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2446,2458,70>",(assertEquals)); Inst66++; } } catch(e) {}try { if (Inst67 <= 1000 && typeof (AndNN) != "undefined") {_RecordType("<2462,2467,70>",(AndNN)); Inst67++; } } catch(e) {}
assertEquals(2, AndNN(3, 2));

