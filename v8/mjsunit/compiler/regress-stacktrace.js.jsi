var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test correctness of stack traces with global functions.
try { if (Inst0 <= 1000 && typeof (eval) != "undefined") {_RecordType("<1657,1661,29>",(eval)); Inst0++; } } catch(e) {}
eval("function two() { /* xxxxxxx */ three(); }");

try { if (Inst1 <= 1000 && typeof (one) != "undefined") {_RecordType("<1718,1721,31>",(one)); Inst1++; } } catch(e) {}
function one() {
try { if (Inst2 <= 1000 && typeof (two) != "undefined") {_RecordType("<1728,1731,32>",(two)); Inst2++; } } catch(e) {}
  two();
}

try { if (Inst3 <= 1000 && typeof (three) != "undefined") {_RecordType("<1747,1752,35>",(three)); Inst3++; } } catch(e) {}
function three() {
try { if (Inst4 <= 1000 && typeof (Error) != "undefined") {_RecordType("<1769,1774,36>",(Error)); Inst4++; } } catch(e) {}
  throw new Error("urg");
}

try { if (Inst6 <= 1000 && typeof (e) != "undefined") {_RecordType("<1809,1810,41>",(e)); Inst6++; } } catch(e) {}
try {
try { if (Inst5 <= 1000 && typeof (one) != "undefined") {_RecordType("<1793,1796,40>",(one)); Inst5++; } } catch(e) {}
 one();
} catch (e) {
try { if (Inst8 <= 1000 && typeof (e.stack.toString) != "undefined") {_RecordType("<1828,1844,42>",(e.stack.toString)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (e.stack) != "undefined") {_RecordType("<1828,1835,42>",(e.stack)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (e) != "undefined") {_RecordType("<1828,1829,42>",(e)); Inst10++; } } catch(e) {}
  var stack = e.stack.toString();
try { if (Inst7 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1820,1825,42>",(stack)); Inst7++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (stack.indexOf) != "undefined") {_RecordType("<1859,1872,43>",(stack.indexOf)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1859,1864,43>",(stack)); Inst13++; } } catch(e) {}
  var p3 = stack.indexOf("at three");
try { if (Inst11 <= 1000 && typeof (p3) != "undefined") {_RecordType("<1854,1856,43>",(p3)); Inst11++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (stack.indexOf) != "undefined") {_RecordType("<1897,1910,44>",(stack.indexOf)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1897,1902,44>",(stack)); Inst16++; } } catch(e) {}
  var p2 = stack.indexOf("at two");
try { if (Inst14 <= 1000 && typeof (p2) != "undefined") {_RecordType("<1892,1894,44>",(p2)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (stack.indexOf) != "undefined") {_RecordType("<1933,1946,45>",(stack.indexOf)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (stack) != "undefined") {_RecordType("<1933,1938,45>",(stack)); Inst19++; } } catch(e) {}
  var p1 = stack.indexOf("at one");
try { if (Inst17 <= 1000 && typeof (p1) != "undefined") {_RecordType("<1928,1930,45>",(p1)); Inst17++; } } catch(e) {}
try { if (Inst20 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1960,1970,46>",(assertTrue)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (p3) != "undefined") {_RecordType("<1971,1973,46>",(p3)); Inst21++; } } catch(e) {}
  assertTrue(p3 != -1);
try { if (Inst22 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1984,1994,47>",(assertTrue)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (p2) != "undefined") {_RecordType("<1995,1997,47>",(p2)); Inst23++; } } catch(e) {}
  assertTrue(p2 != -1);
try { if (Inst24 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2008,2018,48>",(assertTrue)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (p1) != "undefined") {_RecordType("<2019,2021,48>",(p1)); Inst25++; } } catch(e) {}
  assertTrue(p1 != -1);
try { if (Inst26 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2032,2042,49>",(assertTrue)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (p3) != "undefined") {_RecordType("<2043,2045,49>",(p3)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (p2) != "undefined") {_RecordType("<2048,2050,49>",(p2)); Inst28++; } } catch(e) {}
  assertTrue(p3 < p2);
try { if (Inst29 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2055,2065,50>",(assertTrue)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (p2) != "undefined") {_RecordType("<2066,2068,50>",(p2)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (p1) != "undefined") {_RecordType("<2071,2073,50>",(p1)); Inst31++; } } catch(e) {}
  assertTrue(p2 < p1);
}

