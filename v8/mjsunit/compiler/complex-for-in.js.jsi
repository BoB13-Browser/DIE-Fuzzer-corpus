var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (TestNamed) != "undefined") {_RecordType("<1607,1616,28>",(TestNamed)); Inst0++; } } catch(e) {}
function TestNamed(m) {
try { if (Inst1 <= 1000 && typeof (m) != "undefined") {_RecordType("<1617,1618,28>",(m)); Inst1++; } } catch(e) {}
  var o = {};
try { if (Inst2 <= 1000 && typeof (o) != "undefined") {_RecordType("<1628,1629,29>",(o)); Inst2++; } } catch(e) {}
  var result = [];
try { if (Inst3 <= 1000 && typeof (result) != "undefined") {_RecordType("<1642,1648,30>",(result)); Inst3++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (result.push) != "undefined") {_RecordType("<1672,1683,31>",(result.push)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (result) != "undefined") {_RecordType("<1672,1678,31>",(result)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<1684,1687,31>",(o.p)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (o) != "undefined") {_RecordType("<1684,1685,31>",(o)); Inst10++; } } catch(e) {}
  for (o.p in m) result.push(o.p);
try { if (Inst4 <= 1000 && typeof (o.p) != "undefined") {_RecordType("<1662,1665,31>",(o.p)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (o) != "undefined") {_RecordType("<1662,1663,31>",(o)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (m) != "undefined") {_RecordType("<1669,1670,31>",(m)); Inst6++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (result) != "undefined") {_RecordType("<1699,1705,32>",(result)); Inst11++; } } catch(e) {}
  return result;
}

try { if (Inst12 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1710,1727,35>",(assertArrayEquals)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (TestNamed) != "undefined") {_RecordType("<1739,1748,35>",(TestNamed)); Inst13++; } } catch(e) {}
assertArrayEquals(['x','y'], TestNamed({x:0, y:1}));
try { if (Inst14 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1763,1780,36>",(assertArrayEquals)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (TestNamed) != "undefined") {_RecordType("<1792,1801,36>",(TestNamed)); Inst15++; } } catch(e) {}
assertArrayEquals(['0','1'], TestNamed([1,2]));


try { if (Inst16 <= 1000 && typeof (TestKeyed) != "undefined") {_RecordType("<1822,1831,39>",(TestKeyed)); Inst16++; } } catch(e) {}
function TestKeyed(m) {
try { if (Inst17 <= 1000 && typeof (m) != "undefined") {_RecordType("<1832,1833,39>",(m)); Inst17++; } } catch(e) {}
  var a = [];
try { if (Inst18 <= 1000 && typeof (a) != "undefined") {_RecordType("<1843,1844,40>",(a)); Inst18++; } } catch(e) {}
  var result = [];
try { if (Inst19 <= 1000 && typeof (result) != "undefined") {_RecordType("<1857,1863,41>",(result)); Inst19++; } } catch(e) {}
  var i = 0;
try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<1876,1877,42>",(i)); Inst20++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (result.push) != "undefined") {_RecordType("<1903,1914,43>",(result.push)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (result) != "undefined") {_RecordType("<1903,1909,43>",(result)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (a[i - 1]) != "undefined") {_RecordType("<1915,1923,43>",(a[i - 1])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (a) != "undefined") {_RecordType("<1915,1916,43>",(a)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (i) != "undefined") {_RecordType("<1917,1918,43>",(i)); Inst29++; } } catch(e) {}
  for (a[i++] in m) result.push(a[i - 1]);
try { if (Inst21 <= 1000 && typeof (a[i++]) != "undefined") {_RecordType("<1890,1896,43>",(a[i++])); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (a) != "undefined") {_RecordType("<1890,1891,43>",(a)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<1892,1893,43>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (m) != "undefined") {_RecordType("<1900,1901,43>",(m)); Inst24++; } } catch(e) {}
try { if (Inst30 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1928,1940,44>",(assertEquals)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<1941,1942,44>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (a.length) != "undefined") {_RecordType("<1944,1952,44>",(a.length)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (a) != "undefined") {_RecordType("<1944,1945,44>",(a)); Inst33++; } } catch(e) {}
  assertEquals(i, a.length);
try { if (Inst34 <= 1000 && typeof (result) != "undefined") {_RecordType("<1964,1970,45>",(result)); Inst34++; } } catch(e) {}
  return result;
}


try { if (Inst35 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<1976,1993,49>",(assertArrayEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (TestKeyed) != "undefined") {_RecordType("<2005,2014,49>",(TestKeyed)); Inst36++; } } catch(e) {}
assertArrayEquals(['x','y'], TestKeyed({x:0, y:1}));
try { if (Inst37 <= 1000 && typeof (assertArrayEquals) != "undefined") {_RecordType("<2029,2046,50>",(assertArrayEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (TestKeyed) != "undefined") {_RecordType("<2058,2067,50>",(TestKeyed)); Inst38++; } } catch(e) {}
assertArrayEquals(['0','1'], TestKeyed([1,2]));

