var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2013 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<1607,1612,28>",(dead1)); Inst0++; } } catch(e) {}
function dead1(a, b) {
try { if (Inst1 <= 1000 && typeof (a) != "undefined") {_RecordType("<1613,1614,28>",(a)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (b) != "undefined") {_RecordType("<1616,1617,28>",(b)); Inst2++; } } catch(e) {}
    var x = "a" + "b";
try { if (Inst3 <= 1000 && typeof (x) != "undefined") {_RecordType("<1629,1630,29>",(x)); Inst3++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (a) != "undefined") {_RecordType("<1655,1656,30>",(a)); Inst4++; } } catch(e) {}
    return a; // x, "a", and "b" are dead code
}

try { if (Inst5 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<1703,1708,33>",(dead2)); Inst5++; } } catch(e) {}
function dead2(a, b) {
try { if (Inst6 <= 1000 && typeof (a) != "undefined") {_RecordType("<1709,1710,33>",(a)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (b) != "undefined") {_RecordType("<1712,1713,33>",(b)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (a) != "undefined") {_RecordType("<1729,1730,34>",(a)); Inst9++; } } catch(e) {}
    var x = a + "0";
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1725,1726,34>",(x)); Inst8++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (b) != "undefined") {_RecordType("<1750,1751,35>",(b)); Inst11++; } } catch(e) {}
    var y = b + "0";
try { if (Inst10 <= 1000 && typeof (y) != "undefined") {_RecordType("<1746,1747,35>",(y)); Inst10++; } } catch(e) {}
try { if (Inst12 <= 1000 && typeof (a) != "undefined") {_RecordType("<1770,1771,36>",(a)); Inst12++; } } catch(e) {}
    return a; // x and y are both dead
}

try { if (Inst13 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<1810,1815,39>",(dead3)); Inst13++; } } catch(e) {}
function dead3(a, b) {
try { if (Inst14 <= 1000 && typeof (a) != "undefined") {_RecordType("<1816,1817,39>",(a)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (b) != "undefined") {_RecordType("<1819,1820,39>",(b)); Inst15++; } } catch(e) {}
try { if (Inst17 <= 1000 && typeof (a) != "undefined") {_RecordType("<1832,1833,40>",(a)); Inst17++; } } catch(e) {}
    a = a ? "1" : "0";
try { if (Inst16 <= 1000 && typeof (a) != "undefined") {_RecordType("<1828,1829,40>",(a)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (b) != "undefined") {_RecordType("<1855,1856,41>",(b)); Inst19++; } } catch(e) {}
    b = b ? "1" : "0";
try { if (Inst18 <= 1000 && typeof (b) != "undefined") {_RecordType("<1851,1852,41>",(b)); Inst18++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (a) != "undefined") {_RecordType("<1882,1883,42>",(a)); Inst21++; } } catch(e) {}
    var x = a + "0";
try { if (Inst20 <= 1000 && typeof (x) != "undefined") {_RecordType("<1878,1879,42>",(x)); Inst20++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (b) != "undefined") {_RecordType("<1903,1904,43>",(b)); Inst23++; } } catch(e) {}
    var y = b + "0";
try { if (Inst22 <= 1000 && typeof (y) != "undefined") {_RecordType("<1899,1900,43>",(y)); Inst22++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (a) != "undefined") {_RecordType("<1923,1924,44>",(a)); Inst24++; } } catch(e) {}
    return a; // x and y are both dead
}

try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1954,1966,47>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<1971,1976,47>",(dead1)); Inst26++; } } catch(e) {}
assertEquals(33, dead1(33, 32));
try { if (Inst27 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1987,1999,48>",(assertEquals)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2004,2009,48>",(dead2)); Inst28++; } } catch(e) {}
assertEquals(33, dead2(33, 32));
try { if (Inst29 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2020,2032,49>",(assertEquals)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2038,2043,49>",(dead3)); Inst30++; } } catch(e) {}
assertEquals("1", dead3(33, 32));

try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2055,2067,51>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2072,2077,51>",(dead1)); Inst32++; } } catch(e) {}
assertEquals(31, dead1(31, 30));
try { if (Inst33 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2088,2100,52>",(assertEquals)); Inst33++; } } catch(e) {}try { if (Inst34 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2105,2110,52>",(dead2)); Inst34++; } } catch(e) {}
assertEquals(31, dead2(31, 30));
try { if (Inst35 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2121,2133,53>",(assertEquals)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2139,2144,53>",(dead3)); Inst36++; } } catch(e) {}
assertEquals("1", dead3(31, 32));

try { if (Inst37 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2156,2168,55>",(assertEquals)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2172,2177,55>",(dead1)); Inst38++; } } catch(e) {}
assertEquals(0, dead1(0, 30));
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2187,2199,56>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2203,2208,56>",(dead2)); Inst40++; } } catch(e) {}
assertEquals(0, dead2(0, 30));
try { if (Inst41 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2218,2230,57>",(assertEquals)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2236,2241,57>",(dead3)); Inst42++; } } catch(e) {}
assertEquals("0", dead3(0, 32));

try { if (Inst43 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2252,2264,59>",(assertEquals)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2271,2276,59>",(dead1)); Inst44++; } } catch(e) {}
assertEquals(true, dead1(true, 0));
try { if (Inst45 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2288,2300,60>",(assertEquals)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2307,2312,60>",(dead2)); Inst46++; } } catch(e) {}
assertEquals(true, dead2(true, 0));
try { if (Inst47 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2324,2336,61>",(assertEquals)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2342,2347,61>",(dead3)); Inst48++; } } catch(e) {}
assertEquals("1", dead3(true, 0));

try { if (Inst49 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2360,2372,63>",(assertEquals)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (dead1) != "undefined") {_RecordType("<2381,2386,63>",(dead1)); Inst50++; } } catch(e) {}
assertEquals("true", dead1("true", 0));
try { if (Inst51 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2400,2412,64>",(assertEquals)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (dead2) != "undefined") {_RecordType("<2421,2426,64>",(dead2)); Inst52++; } } catch(e) {}
assertEquals("true", dead2("true", 0));
try { if (Inst53 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2440,2452,65>",(assertEquals)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (dead3) != "undefined") {_RecordType("<2458,2463,65>",(dead3)); Inst54++; } } catch(e) {}
assertEquals("1", dead3("true", 0));

