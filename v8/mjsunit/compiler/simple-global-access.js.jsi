var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Test global variable loads.
var g1 = 42;
try { if (Inst0 <= 1000 && typeof (g1) != "undefined") {_RecordType("<1633,1635,29>",(g1)); Inst0++; } } catch(e) {}
var g2 = 43;
try { if (Inst1 <= 1000 && typeof (g2) != "undefined") {_RecordType("<1646,1648,30>",(g2)); Inst1++; } } catch(e) {}
var g3 = 44;
try { if (Inst2 <= 1000 && typeof (g3) != "undefined") {_RecordType("<1659,1661,31>",(g3)); Inst2++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (this.__defineGetter__) != "undefined") {_RecordType("<1668,1689,32>",(this.__defineGetter__)); Inst3++; } } catch(e) {}
this.__defineGetter__("g4", function () { return 45; });

try { if (Inst4 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1735,1737,34>",(f1)); Inst4++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (g1) != "undefined") {_RecordType("<1769,1771,34>",(g1)); Inst8++; } } catch(e) {}
function f1() { this.x = this.y = this.z = g1; }
try { if (Inst5 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1742,1748,34>",(this.x)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<1751,1757,34>",(this.y)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (this.z) != "undefined") {_RecordType("<1760,1766,34>",(this.z)); Inst7++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1784,1786,35>",(f2)); Inst9++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (g1) != "undefined") {_RecordType("<1800,1802,35>",(g1)); Inst11++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (g2) != "undefined") {_RecordType("<1813,1815,35>",(g2)); Inst13++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (g3) != "undefined") {_RecordType("<1826,1828,35>",(g3)); Inst15++; } } catch(e) {}
function f2() { this.x = g1; this.y = g2; this.z = g3; }
try { if (Inst10 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1791,1797,35>",(this.x)); Inst10++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (this.y) != "undefined") {_RecordType("<1804,1810,35>",(this.y)); Inst12++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (this.z) != "undefined") {_RecordType("<1817,1823,35>",(this.z)); Inst14++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1841,1843,36>",(f3)); Inst16++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (g4) != "undefined") {_RecordType("<1857,1859,36>",(g4)); Inst18++; } } catch(e) {}
function f3() { this.x = g4; }
try { if (Inst17 <= 1000 && typeof (this.x) != "undefined") {_RecordType("<1848,1854,36>",(this.x)); Inst17++; } } catch(e) {}

try { if (Inst20 <= 1000 && typeof (f1) != "undefined") {_RecordType("<1895,1897,38>",(f1)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (f2) != "undefined") {_RecordType("<1905,1907,38>",(f2)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (f3) != "undefined") {_RecordType("<1915,1917,38>",(f3)); Inst22++; } } catch(e) {}
var o = { x:0, y:0, z:0, test1:f1, test2:f2, test3:f3 }
try { if (Inst19 <= 1000 && typeof (o) != "undefined") {_RecordType("<1868,1869,38>",(o)); Inst19++; } } catch(e) {}

try { if (Inst23 <= 1000 && typeof (o.test1) != "undefined") {_RecordType("<1921,1928,40>",(o.test1)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (o) != "undefined") {_RecordType("<1921,1922,40>",(o)); Inst24++; } } catch(e) {}
o.test1();
try { if (Inst25 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1932,1944,41>",(assertEquals)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<1949,1952,41>",(o.x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (o) != "undefined") {_RecordType("<1949,1950,41>",(o)); Inst27++; } } catch(e) {}
assertEquals(42, o.x);
try { if (Inst28 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1955,1967,42>",(assertEquals)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (o.y) != "undefined") {_RecordType("<1972,1975,42>",(o.y)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (o) != "undefined") {_RecordType("<1972,1973,42>",(o)); Inst30++; } } catch(e) {}
assertEquals(42, o.y);
try { if (Inst31 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1978,1990,43>",(assertEquals)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (o.z) != "undefined") {_RecordType("<1995,1998,43>",(o.z)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (o) != "undefined") {_RecordType("<1995,1996,43>",(o)); Inst33++; } } catch(e) {}
assertEquals(42, o.z);

try { if (Inst34 <= 1000 && typeof (o.test2) != "undefined") {_RecordType("<2002,2009,45>",(o.test2)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (o) != "undefined") {_RecordType("<2002,2003,45>",(o)); Inst35++; } } catch(e) {}
o.test2();
try { if (Inst36 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2013,2025,46>",(assertEquals)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2030,2033,46>",(o.x)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (o) != "undefined") {_RecordType("<2030,2031,46>",(o)); Inst38++; } } catch(e) {}
assertEquals(42, o.x);
try { if (Inst39 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2036,2048,47>",(assertEquals)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (o.y) != "undefined") {_RecordType("<2053,2056,47>",(o.y)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (o) != "undefined") {_RecordType("<2053,2054,47>",(o)); Inst41++; } } catch(e) {}
assertEquals(43, o.y);
try { if (Inst42 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2059,2071,48>",(assertEquals)); Inst42++; } } catch(e) {}try { if (Inst43 <= 1000 && typeof (o.z) != "undefined") {_RecordType("<2076,2079,48>",(o.z)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (o) != "undefined") {_RecordType("<2076,2077,48>",(o)); Inst44++; } } catch(e) {}
assertEquals(44, o.z);

try { if (Inst45 <= 1000 && typeof (o.test3) != "undefined") {_RecordType("<2083,2090,50>",(o.test3)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (o) != "undefined") {_RecordType("<2083,2084,50>",(o)); Inst46++; } } catch(e) {}
o.test3();
try { if (Inst47 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<2094,2106,51>",(assertEquals)); Inst47++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (o.x) != "undefined") {_RecordType("<2111,2114,51>",(o.x)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (o) != "undefined") {_RecordType("<2111,2112,51>",(o)); Inst49++; } } catch(e) {}
assertEquals(45, o.x);

