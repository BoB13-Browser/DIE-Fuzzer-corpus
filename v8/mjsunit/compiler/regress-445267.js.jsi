var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

try { if (Inst1 <= 1000 && typeof ((function Module(stdlib, foreign, heap) {
  "use asm";
  var MEM16 = new stdlib.Int16Array(heap);
  function foo(i) {
    i = i|0;
    i = MEM16[i + 2147483650 >> 1]|0;
    return i;
  }
  return { foo: foo };
})(this, {}, new ArrayBuffer(64 * 1024)).foo) != "undefined") {_RecordType("<178,432,5>",((function Module(stdlib, foreign, heap) {
  "use asm";
  var MEM16 = new stdlib.Int16Array(heap);
  function foo(i) {
    i = i|0;
    i = MEM16[i + 2147483650 >> 1]|0;
    return i;
  }
  return { foo: foo };
})(this, {}, new ArrayBuffer(64 * 1024)).foo)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (Module) != "undefined") {_RecordType("<188,194,5>",(Module)); Inst2++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (ArrayBuffer) != "undefined") {_RecordType("<405,416,14>",(ArrayBuffer)); Inst20++; } } catch(e) {}
var foo = (function Module(stdlib, foreign, heap) {
try { if (Inst3 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<195,201,5>",(stdlib)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (foreign) != "undefined") {_RecordType("<203,210,5>",(foreign)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (heap) != "undefined") {_RecordType("<212,216,5>",(heap)); Inst5++; } } catch(e) {}
  "use asm";
try { if (Inst7 <= 1000 && typeof (stdlib.Int16Array) != "undefined") {_RecordType("<251,268,7>",(stdlib.Int16Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (stdlib) != "undefined") {_RecordType("<251,257,7>",(stdlib)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (heap) != "undefined") {_RecordType("<269,273,7>",(heap)); Inst9++; } } catch(e) {}
  var MEM16 = new stdlib.Int16Array(heap);
try { if (Inst6 <= 1000 && typeof (MEM16) != "undefined") {_RecordType("<239,244,7>",(MEM16)); Inst6++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (foo) != "undefined") {_RecordType("<287,290,8>",(foo)); Inst10++; } } catch(e) {}
  function foo(i) {
try { if (Inst11 <= 1000 && typeof (i) != "undefined") {_RecordType("<291,292,8>",(i)); Inst11++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (i) != "undefined") {_RecordType("<304,305,9>",(i)); Inst13++; } } catch(e) {}
    i = i|0;
try { if (Inst12 <= 1000 && typeof (i) != "undefined") {_RecordType("<300,301,9>",(i)); Inst12++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (MEM16[i + 2147483650 >> 1]) != "undefined") {_RecordType("<317,343,10>",(MEM16[i + 2147483650 >> 1])); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (MEM16) != "undefined") {_RecordType("<317,322,10>",(MEM16)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (i) != "undefined") {_RecordType("<323,324,10>",(i)); Inst17++; } } catch(e) {}
    i = MEM16[i + 2147483650 >> 1]|0;
try { if (Inst14 <= 1000 && typeof (i) != "undefined") {_RecordType("<313,314,10>",(i)); Inst14++; } } catch(e) {}
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<358,359,11>",(i)); Inst18++; } } catch(e) {}
    return i;
  }
try { if (Inst19 <= 1000 && typeof (foo) != "undefined") {_RecordType("<381,384,13>",(foo)); Inst19++; } } catch(e) {}
  return { foo: foo };
})(this, {}, new ArrayBuffer(64 * 1024)).foo;
try { if (Inst0 <= 1000 && typeof (foo) != "undefined") {_RecordType("<172,175,5>",(foo)); Inst0++; } } catch(e) {}

try { if (Inst21 <= 1000 && typeof (foo) != "undefined") {_RecordType("<435,438,16>",(foo)); Inst21++; } } catch(e) {}
foo(0);

