var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
// Copyright 2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

try { if (Inst0 <= 1000 && typeof (f) != "undefined") {_RecordType("<1607,1608,28>",(f)); Inst0++; } } catch(e) {}
function f() { return this; }

try { if (Inst1 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1629,1640,30>",(assertFalse)); Inst1++; } } catch(e) {}
assertFalse(this == null);  // the global object shouldn't be null or undefined
try { if (Inst2 <= 1000 && typeof (assertEquals) != "undefined") {_RecordType("<1709,1721,31>",(assertEquals)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (String) != "undefined") {_RecordType("<1741,1747,31>",(String)); Inst3++; } } catch(e) {}
assertEquals('[object global]', String(this));

try { if (Inst4 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1757,1767,33>",(assertTrue)); Inst4++; } } catch(e) {}
assertTrue(this === this);
try { if (Inst5 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1784,1794,34>",(assertTrue)); Inst5++; } } catch(e) {}
assertTrue(this === (function() { return this; })());
try { if (Inst6 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1838,1848,35>",(assertTrue)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (f) != "undefined") {_RecordType("<1858,1859,35>",(f)); Inst7++; } } catch(e) {}
assertTrue(this === f());

var x = {}, y = {};
try { if (Inst8 <= 1000 && typeof (x) != "undefined") {_RecordType("<1869,1870,37>",(x)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (y) != "undefined") {_RecordType("<1877,1878,37>",(y)); Inst9++; } } catch(e) {}
try { if (Inst14 <= 1000 && typeof (f) != "undefined") {_RecordType("<1897,1898,38>",(f)); Inst14++; } } catch(e) {}
x.f = y.f = f;
try { if (Inst10 <= 1000 && typeof (x.f) != "undefined") {_RecordType("<1885,1888,38>",(x.f)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (x) != "undefined") {_RecordType("<1885,1886,38>",(x)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (y.f) != "undefined") {_RecordType("<1891,1894,38>",(y.f)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (y) != "undefined") {_RecordType("<1891,1892,38>",(y)); Inst13++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1900,1911,39>",(assertFalse)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (x) != "undefined") {_RecordType("<1912,1913,39>",(x)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (f) != "undefined") {_RecordType("<1918,1919,39>",(f)); Inst17++; } } catch(e) {}
assertFalse(x === f());
try { if (Inst18 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<1924,1935,40>",(assertFalse)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (y) != "undefined") {_RecordType("<1936,1937,40>",(y)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (f) != "undefined") {_RecordType("<1942,1943,40>",(f)); Inst20++; } } catch(e) {}
assertFalse(y === f());
try { if (Inst21 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1948,1958,41>",(assertTrue)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (x) != "undefined") {_RecordType("<1959,1960,41>",(x)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (x.f) != "undefined") {_RecordType("<1965,1968,41>",(x.f)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (x) != "undefined") {_RecordType("<1965,1966,41>",(x)); Inst24++; } } catch(e) {}
assertTrue(x === x.f());
try { if (Inst25 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<1973,1983,42>",(assertTrue)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (x) != "undefined") {_RecordType("<1984,1985,42>",(x)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (x[new String('f')]) != "undefined") {_RecordType("<1990,2008,42>",(x[new String('f')])); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (x) != "undefined") {_RecordType("<1990,1991,42>",(x)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (String) != "undefined") {_RecordType("<1996,2002,42>",(String)); Inst29++; } } catch(e) {}
assertTrue(x === x[new String('f')]());
try { if (Inst30 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2013,2023,43>",(assertTrue)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (y) != "undefined") {_RecordType("<2024,2025,43>",(y)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (y.f) != "undefined") {_RecordType("<2030,2033,43>",(y.f)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (y) != "undefined") {_RecordType("<2030,2031,43>",(y)); Inst33++; } } catch(e) {}
assertTrue(y === y.f(), "y.f()");
try { if (Inst34 <= 1000 && typeof (assertTrue) != "undefined") {_RecordType("<2047,2057,44>",(assertTrue)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (y) != "undefined") {_RecordType("<2058,2059,44>",(y)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (y[new String('f')]) != "undefined") {_RecordType("<2064,2082,44>",(y[new String('f')])); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (y) != "undefined") {_RecordType("<2064,2065,44>",(y)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (String) != "undefined") {_RecordType("<2070,2076,44>",(String)); Inst38++; } } catch(e) {}
assertTrue(y === y[new String('f')]());
try { if (Inst39 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2087,2098,45>",(assertFalse)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (x) != "undefined") {_RecordType("<2099,2100,45>",(x)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (y.f) != "undefined") {_RecordType("<2105,2108,45>",(y.f)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (y) != "undefined") {_RecordType("<2105,2106,45>",(y)); Inst42++; } } catch(e) {}
assertFalse(x === y.f());
try { if (Inst43 <= 1000 && typeof (assertFalse) != "undefined") {_RecordType("<2113,2124,46>",(assertFalse)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (y) != "undefined") {_RecordType("<2125,2126,46>",(y)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (x.f) != "undefined") {_RecordType("<2131,2134,46>",(x.f)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (x) != "undefined") {_RecordType("<2131,2132,46>",(x)); Inst46++; } } catch(e) {}
assertFalse(y === x.f());

