var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (d8.test.enableJSPI) != "undefined") {_RecordType("<0,18,1>",(d8.test.enableJSPI)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (d8.test) != "undefined") {_RecordType("<0,7,1>",(d8.test)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (d8) != "undefined") {_RecordType("<0,2,1>",(d8)); Inst2++; } } catch(e) {}
d8.test.enableJSPI();
const wasmArray = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 0, 1, 125, 96, 0, 1, 125, 2, 8, 1, 1, 109, 2, 106, 115, 0, 0, 7, 8, 1, 4, 109, 97, 105, 110, 0, 0, 0, 19, 4, 110, 97, 109, 101, 1, 7, 1, 0, 4, 109, 97, 105, 110, 2, 3, 1, 0, 0]);
try { if (Inst4 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<46,56,3>",(Uint8Array)); Inst4++; } } catch(e) {}
let module = new WebAssembly.Module(wasmArray);
try { if (Inst3 <= 1000 && typeof (wasmArray) != "undefined") {_RecordType("<30,39,3>",(wasmArray)); Inst3++; } } catch(e) {}
let v2 = new WebAssembly.Instance(module, { m: { js: ()=>{} }});
try { if (Inst6 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<298,316,5>",(WebAssembly.Module)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<298,309,5>",(WebAssembly)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (wasmArray) != "undefined") {_RecordType("<317,326,5>",(wasmArray)); Inst8++; } } catch(e) {}
let v3 = WebAssembly.promising(v2.exports.main);
try { if (Inst5 <= 1000 && typeof (module) != "undefined") {_RecordType("<285,291,5>",(module)); Inst5++; } } catch(e) {}
v3();
