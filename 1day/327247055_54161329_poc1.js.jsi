var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}

try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<26,36,2>",(Uint8Array)); Inst1++; } } catch(e) {}
    var wasm_code = new Uint8Array([
  0,97,115,109,1,0,0,0,1,139,129,128,128,0,21,78,1,94,120,1,78,1,94,119,1,78,1,80,0,95,0,78,1,80,0,94,127,1,78,1,80,0,94,127,1,78,1,96,3,127,127,127,1,127,78,1,96,0,0,78,1,96,0,0,78,1,96,0,0,96,1,111,1,100,111,96,1,111,1,127,96,1,127,1,100,111,96,2,111,127,1,127,96,2,111,111,1,100,111,96,3,111,127,127,1,100,111,96,2,111,111,1,127,96,3,99,1,127,127,1,100,111,96,3,111,99,1,127,1,127,96,3,111,99,0,127,1,127,96,1,111,1,100,0,96,3,99,0,127,127,1,100,111,2,149,132,128,128,0,17,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,4,99,97,115,116,0,9,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,4,116,101,115,116,0,10,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,12,102,114,111,109,67,104,97,114,67,111,100,101,0,11,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,13,102,114,111,109,67,111,100,101,80,111,105,110,116,0,11,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,10,99,104,97,114,67,111,100,101,65,116,0,12,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,11,99,111,100,101,80,111,105,110,116,65,116,0,12,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,108,101,110,103,116,104,0,10,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,99,111,110,99,97,116,0,13,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,9,115,117,98,115,116,114,105,110,103,0,14,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,101,113,117,97,108,115,0,15,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,7,99,111,109,112,97,114,101,0,15,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,17,102,114,111,109,67,104,97,114,67,111,100,101,65,114,114,97,121,0,16,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,17,105,110,116,111,67,104,97,114,67,111,100,101,65,114,114,97,121,0,17,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,19,109,101,97,115,117,114,101,83,116,114,105,110,103,65,115,85,84,70,56,0,10,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,25,101,110,99,111,100,101,83,116,114,105,110,103,73,110,116,111,85,84,70,56,65,114,114,97,121,0,18,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,23,101,110,99,111,100,101,83,116,114,105,110,103,84,111,85,84,70,56,65,114,114,97,121,0,19,17,119,97,115,109,58,116,101,120,116,45,100,101,99,111,100,101,114,25,100,101,99,111,100,101,83,116,114,105,110,103,70,114,111,109,85,84,70,56,65,114,114,97,121,0,20,3,133,128,128,128,0,4,5,6,7,8,4,133,128,128,128,0,1,112,1,4,4,5,132,128,128,128,0,1,1,16,32,13,131,128,128,128,0,1,0,6,7,136,128,128,128,0,1,4,109,97,105,110,0,17,9,148,128,128,128,0,1,6,0,65,0,11,112,4,210,17,11,210,18,11,210,19,11,210,20,11,12,1,1,10,188,140,128,128,0,4,114,14,1,123,1,100,5,1,100,4,1,100,108,1,100,3,1,99,1,2,124,1,100,3,1,109,1,107,1,100,6,1,99,7,1,100,111,7,127,210,17,33,4,65,192,239,0,65,140,4,65,20,111,251,6,4,33,5,65,237,225,10,251,28,33,6,65,244,197,6,65,219,222,147,16,65,20,111,251,6,3,33,7,65,192,134,3,65,251,181,239,178,121,65,20,111,251,6,3,33,11,210,18,33,14,208,110,251,27,212,33,16,65,34,11,240,5,24,1,100,2,1,99,8,1,100,112,1,115,1,123,1,127,1,126,1,100,6,1,126,1,114,1,99,6,1,100,0,1,127,1,100,5,1,100,107,1,99,7,1,125,1,127,1,100,110,3,127,1,100,7,1,100,1,1,99,8,1,123,65,199,41,65,0,65,202,0,254,75,1,234,176,1,65,150,140,211,5,208,111,16,6,254,61,1,138,169,1,104,254,39,0,246,165,2,208,111,65,221,0,65,4,16,8,208,111,16,7,251,26,251,23,106,251,23,110,251,23,1,212,251,23,0,251,27,16,15,251,23,107,209,254,30,2,152,95,65,240,134,254,191,122,119,251,28,251,23,110,251,23,106,251,23,110,251,23,108,251,22,2,33,0,210,19,33,2,210,18,33,7,65,167,157,134,187,3,65,191,253,27,50,1,18,254,59,3,147,43,66,158,208,128,188,1,89,65,2,19,7,0,68,15,60,190,149,79,71,89,165,68,157,127,211,89,90,207,34,50,164,182,252,1,16,2,65,176,246,224,219,7,65,0,253,15,253,164,1,254,39,0,239,169,1,16,5,208,111,16,13,254,60,0,178,187,3,120,208,110,251,23,108,251,23,108,208,112,251,23,8,21,8,251,28,211,66,223,148,198,165,204,129,203,128,73,2,126,2,126,66,189,243,135,140,245,157,153,137,61,65,134,173,13,14,1,0,0,11,11,138,254,62,0,206,73,254,27,0,202,149,2,208,110,213,0,26,65,156,222,128,3,65,161,213,6,65,20,111,251,6,0,65,23,65,166,248,61,251,14,0,208,110,213,0,26,65,155,176,6,65,170,15,65,20,111,251,6,0,65,202,161,31,65,240,235,173,2,251,14,0,208,110,213,0,26,65,59,251,1,2,212,251,23,107,251,23,110,251,23,3,65,5,65,3,254,23,2,207,126,66,190,137,173,133,249,169,181,225,7,32,17,178,252,4,90,4,64,65,150,58,65,0,253,15,65,0,253,15,65,0,253,15,253,44,253,144,2,253,88,0,164,204,1,11,5,11,65,221,208,242,1,65,60,254,23,2,0,65,229,232,255,233,0,66,145,164,175,163,132,177,150,243,125,61,1,0,8,0,65,192,213,238,210,3,47,0,128,200,1,65,3,17,8,0,2,124,2,124,2,124,66,183,178,146,129,243,218,195,128,199,0,65,247,19,66,134,134,193,218,156,173,169,212,151,127,66,251,161,131,160,140,148,139,186,122,254,73,3,124,84,65,8,66,195,159,217,216,202,187,200,152,153,127,254,71,2,133,81,65,217,134,159,234,123,104,65,0,253,15,253,99,65,233,232,148,24,65,150,223,0,65,141,208,18,118,70,109,115,65,144,248,196,193,1,68,67,189,96,113,107,138,95,197,68,251,184,252,248,193,71,49,105,99,65,174,218,8,65,241,20,254,32,0,166,41,63,0,104,105,116,254,37,2,232,249,2,110,254,32,0,166,41,41,3,177,249,1,137,254,48,0,237,254,2,191,65,0,253,15,253,99,65,179,243,251,151,5,65,207,1,254,19,1,209,1,106,109,14,1,0,0,11,11,11,158,252,3,251,14,3,65,245,239,242,30,13,0,65,60,251,9,0,0,33,11,210,17,33,13,251,0,2,33,14,251,0,2,33,18,210,19,33,22,65,194,149,1,65,157,139,39,65,20,111,251,6,1,33,23,11,189,1,15,1,100,2,1,109,1,107,1,99,4,1,100,1,1,99,2,2,127,1,99,5,1,115,1,100,109,1,127,1,100,106,1,111,1,100,109,1,99,5,208,110,251,23,110,251,23,2,251,23,3,251,23,2,212,33,0,66,192,198,165,185,235,149,154,175,181,127,65,140,210,20,66,167,206,138,253,145,167,206,218,216,0,65,243,13,66,216,180,182,211,241,216,153,143,54,254,38,3,180,1,128,254,69,0,227,239,1,81,254,16,2,154,175,3,65,193,192,204,2,65,132,184,208,1,65,249,168,176,8,65,6,65,2,65,152,228,0,65,216,132,192,201,2,65,3,65,10,65,250,223,147,9,65,3,65,184,7,65,22,65,189,146,15,251,8,1,15,33,4,208,111,16,15,33,10,208,111,16,15,33,12,208,111,16,15,33,14,11,149,4,11,1,100,107,1,100,7,1,100,107,1,99,7,1,125,1,100,4,1,127,1,107,1,100,8,1,100,110,1,127,68,48,212,223,16,164,28,117,105,18,18,154,65,1,17,6,0,97,251,28,251,23,107,251,23,108,212,251,23,106,251,23,1,212,65,211,169,153,1,65,209,138,190,196,125,254,39,0,197,192,3,4,127,65,223,139,196,192,0,5,65,198,7,11,65,0,253,15,65,0,253,15,65,0,253,15,253,61,253,132,2,65,0,253,15,65,0,253,15,253,14,253,104,65,0,253,15,253,114,253,181,1,65,0,253,15,65,27,65,186,229,141,63,254,54,1,235,174,3,253,108,68,7,242,62,139,119,90,185,97,171,253,93,0,199,242,2,253,147,1,253,31,0,253,32,2,3,64,65,246,255,3,66,173,193,246,142,239,223,203,192,59,66,216,211,210,236,192,136,139,181,251,0,65,129,185,246,206,0,28,1,126,254,27,0,204,132,3,65,169,1,13,0,11,12,0,65,238,137,3,13,0,67,27,251,207,254,67,229,124,89,169,147,169,67,196,222,71,124,67,61,208,10,158,91,65,0,253,15,253,131,1,27,253,109,253,56,253,236,1,253,25,3,115,65,1,65,159,157,180,10,65,191,213,187,20,117,4,127,65,163,8,5,65,246,180,201,200,0,11,118,65,163,174,1,65,2,65,252,206,28,208,5,20,5,172,254,57,2,178,183,1,65,0,253,15,65,227,178,246,255,4,66,234,236,206,147,151,239,202,169,63,66,178,152,156,134,246,193,128,220,70,132,254,57,2,178,183,1,65,1,4,126,66,172,187,193,185,241,179,179,182,30,5,66,240,152,245,178,221,211,206,171,69,11,83,179,252,1,253,108,65,0,253,15,253,242,1,253,132,1,66,197,205,128,163,184,155,152,150,79,254,52,3,182,236,2,83,179,252,1,254,58,2,174,149,2,65,197,1,16,11,208,110,251,27,16,7,16,15,65,199,237,45,65,231,171,199,0,65,164,170,1,251,16,0,8,0,65,254,215,191,196,3,13,0,65,135,148,242,215,0,16,2,208,111,16,7,251,26,251,23,107,251,23,0,251,23,110,251,23,110,251,23,3,251,23,107,212,212,33,0,210,19,33,1,251,0,2,33,2,65,0,65,3,65,20,111,251,6,4,33,5,210,20,33,8,251,0,2,33,9,11,11,136,128,128,128,0,1,1,5,35,230,3,53,85,0,132,130,128,128,0,4,110,97,109,101,1,249,129,128,128,0,17,0,4,99,97,115,116,1,4,116,101,115,116,2,12,102,114,111,109,67,104,97,114,67,111,100,101,3,13,102,114,111,109,67,111,100,101,80,111,105,110,116,4,10,99,104,97,114,67,111,100,101,65,116,5,11,99,111,100,101,80,111,105,110,116,65,116,6,6,108,101,110,103,116,104,7,6,99,111,110,99,97,116,8,9,115,117,98,115,116,114,105,110,103,9,6,101,113,117,97,108,115,10,7,99,111,109,112,97,114,101,11,17,102,114,111,109,67,104,97,114,67,111,100,101,65,114,114,97,121,12,17,105,110,116,111,67,104,97,114,67,111,100,101,65,114,114,97,121,13,19,109,101,97,115,117,114,101,83,116,114,105,110,103,65,115,85,84,70,56,14,25,101,110,99,111,100,101,83,116,114,105,110,103,73,110,116,111,85,84,70,56,65,114,114,97,121,15,23,101,110,99,111,100,101,83,116,114,105,110,103,84,111,85,84,70,56,65,114,114,97,121,16,25,100,101,99,111,100,101,83,116,114,105,110,103,70,114,111,109,85,84,70,56,65,114,114,97,121
  ]);
try { if (Inst0 <= 1000 && typeof (wasm_code) != "undefined") {_RecordType("<10,19,2>",(wasm_code)); Inst0++; } } catch(e) {}
    let kBuiltins = { builtins: ["js-string", "text-decoder", "text-encoder"] };
try { if (Inst2 <= 1000 && typeof (kBuiltins) != "undefined") {_RecordType("<8886,8895,5>",(kBuiltins)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<8986,9004,6>",(WebAssembly.Module)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<8986,8997,6>",(WebAssembly)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (wasm_code) != "undefined") {_RecordType("<9005,9014,6>",(wasm_code)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (kBuiltins) != "undefined") {_RecordType("<9016,9025,6>",(kBuiltins)); Inst7++; } } catch(e) {}
    var wasm_module = new WebAssembly.Module(wasm_code, kBuiltins);
try { if (Inst3 <= 1000 && typeof (wasm_module) != "undefined") {_RecordType("<8968,8979,6>",(wasm_module)); Inst3++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (WebAssembly.Instance) != "undefined") {_RecordType("<9057,9077,7>",(WebAssembly.Instance)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<9057,9068,7>",(WebAssembly)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (wasm_module) != "undefined") {_RecordType("<9078,9089,7>",(wasm_module)); Inst11++; } } catch(e) {}
    var wasm_instance = new WebAssembly.Instance(wasm_module);
try { if (Inst8 <= 1000 && typeof (wasm_instance) != "undefined") {_RecordType("<9037,9050,7>",(wasm_instance)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (wasm_instance.exports.main) != "undefined") {_RecordType("<9105,9131,8>",(wasm_instance.exports.main)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (wasm_instance.exports) != "undefined") {_RecordType("<9105,9126,8>",(wasm_instance.exports)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (wasm_instance) != "undefined") {_RecordType("<9105,9118,8>",(wasm_instance)); Inst15++; } } catch(e) {}
    var f = wasm_instance.exports.main;
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<9101,9102,8>",(f)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<9138,9139,9>",(f)); Inst16++; } } catch(e) {}
    f();
 
