var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (d8.file.execute) != "undefined") {_RecordType("<0,15,1>",(d8.file.execute)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (d8.file) != "undefined") {_RecordType("<0,7,1>",(d8.file)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (d8) != "undefined") {_RecordType("<0,2,1>",(d8)); Inst2++; } } catch(e) {}
d8.file.execute('test/mjsunit/wasm/wasm-module-builder.js');
const gc = function () {
  for (let i = 0; i < 10000; i++)
    new String("AAAA" + Math.random());
};
{
try { if (Inst7 <= 1000 && typeof (String) != "undefined") {_RecordType("<134,140,7>",(String)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<150,161,7>",(Math.random)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (Math) != "undefined") {_RecordType("<150,154,7>",(Math)); Inst9++; } } catch(e) {}
  let builder = new WasmModuleBuilder();
try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<101,102,5>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<108,109,5>",(i)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<119,120,5>",(i)); Inst6++; } } catch(e) {}
  let struct_type = builder.addStruct(new Array(195).fill(makeField(kWasmS128, true)));
  builder.addFunction("func", makeSig([], [wasmRefType(struct_type)])).addBody([kGCPrefix, kExprStructNewDefault, struct_type]);
try { if (Inst3 <= 1000 && typeof (gc) != "undefined") {_RecordType("<69,71,3>",(gc)); Inst3++; } } catch(e) {}
  builder.instantiate();
}
{
try { if (Inst11 <= 1000 && typeof (WasmModuleBuilder) != "undefined") {_RecordType("<197,214,13>",(WasmModuleBuilder)); Inst11++; } } catch(e) {}
  let builder = new WasmModuleBuilder();
try { if (Inst10 <= 1000 && typeof (builder) != "undefined") {_RecordType("<183,190,13>",(builder)); Inst10++; } } catch(e) {}
  builder.addTable64();
try { if (Inst13 <= 1000 && typeof (builder.addStruct) != "undefined") {_RecordType("<240,257,15>",(builder.addStruct)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (builder) != "undefined") {_RecordType("<240,247,15>",(builder)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (new Array(195).fill) != "undefined") {_RecordType("<258,277,15>",(new Array(195).fill)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Array) != "undefined") {_RecordType("<262,267,15>",(Array)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (makeField) != "undefined") {_RecordType("<278,287,15>",(makeField)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (kWasmS128) != "undefined") {_RecordType("<288,297,15>",(kWasmS128)); Inst18++; } } catch(e) {}
  builder.addTable(wasmRefType(-9007199254740992), 1, -7, [kGCPrefix, kExprStructNewDefault]);
try { if (Inst12 <= 1000 && typeof (struct_type) != "undefined") {_RecordType("<226,237,15>",(struct_type)); Inst12++; } } catch(e) {}
  gc();
try { if (Inst19 <= 1000 && typeof (builder.addFunction("func", makeSig([], [wasmRefType(struct_type)])).addBody) != "undefined") {_RecordType("<312,388,17>",(builder.addFunction("func", makeSig([], [wasmRefType(struct_type)])).addBody)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (builder.addFunction) != "undefined") {_RecordType("<312,331,17>",(builder.addFunction)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (builder) != "undefined") {_RecordType("<312,319,17>",(builder)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (makeSig) != "undefined") {_RecordType("<340,347,17>",(makeSig)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (wasmRefType) != "undefined") {_RecordType("<353,364,17>",(wasmRefType)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (struct_type) != "undefined") {_RecordType("<365,376,17>",(struct_type)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (kGCPrefix) != "undefined") {_RecordType("<390,399,17>",(kGCPrefix)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (kExprStructNewDefault) != "undefined") {_RecordType("<401,422,17>",(kExprStructNewDefault)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (struct_type) != "undefined") {_RecordType("<424,435,17>",(struct_type)); Inst27++; } } catch(e) {}
  builder.instantiate();
}
try { if (Inst28 <= 1000 && typeof (builder.instantiate) != "undefined") {_RecordType("<443,462,19>",(builder.instantiate)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (builder) != "undefined") {_RecordType("<443,450,19>",(builder)); Inst29++; } } catch(e) {}
//flags: --jit-fuzzing --stress-incremental-marking

