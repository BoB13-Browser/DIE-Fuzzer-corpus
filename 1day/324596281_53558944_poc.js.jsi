var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<22,32,1>",(Uint8Array)); Inst1++; } } catch(e) {}
  var wasm_code = new Uint8Array([
0,97,115,109,1,0,0,0,1,244,129,128,128,0,20,78,1,94,120,1,78,1,94,119,1,78,4,80,0,95,4,119,1,100,108,1,127,1,111,1,80,1,2,95,8,119,1,100,108,1,127,1,111,1,120,1,111,1,127,1,126,0,80,0,94,111,1,80,0,94,127,1,96,3,127,127,127,1,127,96,15,100,112,100,112,100,1,100,6,100,110,100,108,99,7,100,4,100,106,100,107,124,127,127,127,127,15,100,108,100,111,100,3,100,112,100,112,100,112,100,6,109,123,99,1,114,127,100,112,127,100,111,78,1,96,0,0,96,0,0,96,1,111,1,100,111,96,1,111,1,127,96,1,127,1,100,111,96,2,111,127,1,127,96,2,111,111,1,100,111,96,3,111,127,127,1,100,111,96,2,111,111,1,127,96,3,99,1,127,127,1,100,111,96,3,111,99,1,127,1,127,96,3,111,99,0,127,1,127,96,1,111,1,100,0,96,3,99,0,127,127,1,100,111,96,8,110,127,127,127,127,127,127,127,14,100,108,100,111,100,3,100,112,100,112,100,112,100,6,109,123,99,1,114,127,100,112,127,2,149,132,128,128,0,17,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,4,99,97,115,116,0,10,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,4,116,101,115,116,0,11,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,12,102,114,111,109,67,104,97,114,67,111,100,101,0,12,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,13,102,114,111,109,67,111,100,101,80,111,105,110,116,0,12,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,10,99,104,97,114,67,111,100,101,65,116,0,13,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,11,99,111,100,101,80,111,105,110,116,65,116,0,13,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,108,101,110,103,116,104,0,11,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,99,111,110,99,97,116,0,14,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,9,115,117,98,115,116,114,105,110,103,0,15,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,101,113,117,97,108,115,0,16,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,7,99,111,109,112,97,114,101,0,16,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,17,102,114,111,109,67,104,97,114,67,111,100,101,65,114,114,97,121,0,17,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,17,105,110,116,111,67,104,97,114,67,111,100,101,65,114,114,97,121,0,18,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,19,109,101,97,115,117,114,101,83,116,114,105,110,103,65,115,85,84,70,56,0,11,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,25,101,110,99,111,100,101,83,116,114,105,110,103,73,110,116,111,85,84,70,56,65,114,114,97,121,0,19,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,23,101,110,99,111,100,101,83,116,114,105,110,103,84,111,85,84,70,56,65,114,114,97,121,0,20,17,119,97,115,109,58,116,101,120,116,45,100,101,99,111,100,101,114,25,100,101,99,111,100,101,83,116,114,105,110,103,70,114,111,109,85,84,70,56,65,114,114,97,121,0,21,3,133,128,128,128,0,4,6,7,8,9,4,133,128,128,128,0,1,112,1,4,4,5,132,128,128,128,0,1,1,16,32,13,131,128,128,128,0,1,0,8,7,136,128,128,128,0,1,4,109,97,105,110,0,17,9,148,128,128,128,0,1,6,0,65,0,11,112,4,210,17,11,210,18,11,210,19,11,210,20,11,10,169,133,128,128,0,4,170,2,18,1,99,6,1,113,1,127,1,100,108,1,124,1,127,1,99,1,1,100,0,2,127,1,99,5,1,112,1,113,1,127,1,123,4,127,1,100,1,1,113,1,109,208,111,65,130,244,2,2,127,65,0,253,15,65,0,253,15,66,186,202,168,231,188,152,248,241,207,0,66,249,174,233,172,174,190,136,255,24,83,105,16,3,16,15,208,109,211,253,16,253,58,253,142,2,253,24,0,40,2,170,102,40,0,140,255,2,65,197,212,10,65,218,255,135,2,16,17,183,68,216,113,101,14,249,148,66,183,2,124,2,124,2,124,2,124,65,0,253,15,65,0,253,15,253,144,1,65,133,197,0,65,198,19,120,253,204,1,253,193,1,253,25,1,16,2,65,186,176,211,1,65,20,111,251,6,4,251,23,110,251,23,3,208,111,251,5,3,5,2,124,2,124,68,146,215,91,184,104,178,42,245,65,153,206,25,14,1,0,0,11,11,11,11,11,11,162,160,157,170,11,254,58,2,190,246,1,103,65,20,111,251,7,0,65,178,197,222,0,65,213,162,5,16,16,16,9,65,20,111,251,7,1,212,212,212,251,23,107,251,23,4,251,23,3,251,2,3,1,33,6,208,111,16,15,33,10,65,239,1,65,153,155,238,20,65,20,111,251,6,1,33,22,65,246,0,11,248,1,6,1,99,7,1,125,2,127,1,99,4,1,100,9,1,114,208,110,65,6,65,1,65,0,65,227,39,65,143,200,12,65,217,195,7,65,215,188,241,244,0,2,22,26,26,26,26,26,26,26,26,65,232,142,39,251,28,208,110,251,27,212,65,205,180,228,7,65,159,195,153,3,251,28,65,0,208,111,65,7,208,111,65,217,148,54,66,196,175,129,208,158,163,231,223,6,251,0,3,210,17,210,17,210,17,210,17,208,109,65,0,253,15,208,1,208,114,65,147,184,146,30,210,17,65,201,1,11,208,110,251,27,212,251,25,0,0,111,114,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,208,7,251,23,9,212,33,20,65,213,181,235,0,251,28,208,110,251,27,212,65,7,65,165,231,195,22,251,28,65,132,147,60,208,111,65,0,208,111,65,213,128,205,18,66,177,175,209,249,232,136,232,245,179,127,251,0,3,210,17,210,17,210,17,210,17,208,109,65,0,253,15,208,1,208,114,65,225,248,191,192,0,210,17,65,202,238,1,208,110,251,27,212,11,88,7,1,99,4,1,124,2,100,108,1,125,1,123,1,99,1,1,115,65,3,17,9,0,67,73,157,71,128,252,1,6,127,65,205,243,3,7,0,65,158,255,168,1,25,65,176,11,11,4,127,65,154,204,194,0,5,65,0,11,107,16,3,65,173,39,65,20,111,251,6,4,251,23,107,212,251,22,108,33,2,65,148,3,251,28,33,3,11,40,5,1,99,4,1,127,1,100,107,1,100,0,20,127,65,2,65,254,173,184,5,251,28,65,224,0,208,111,251,0,2,33,2,208,111,16,15,33,3,11,0,132,130,128,128,0,4,110,97,109,101,1,249,129,128,128,0,17,0,4,99,97,115,116,1,4,116,101,115,116,2,12,102,114,111,109,67,104,97,114,67,111,100,101,3,13,102,114,111,109,67,111,100,101,80,111,105,110,116,4,10,99,104,97,114,67,111,100,101,65,116,5,11,99,111,100,101,80,111,105,110,116,65,116,6,6,108,101,110,103,116,104,7,6,99,111,110,99,97,116,8,9,115,117,98,115,116,114,105,110,103,9,6,101,113,117,97,108,115,10,7,99,111,109,112,97,114,101,11,17,102,114,111,109,67,104,97,114,67,111,100,101,65,114,114,97,121,12,17,105,110,116,111,67,104,97,114,67,111,100,101,65,114,114,97,121,13,19,109,101,97,115,117,114,101,83,116,114,105,110,103,65,115,85,84,70,56,14,25,101,110,99,111,100,101,83,116,114,105,110,103,73,110,116,111,85,84,70,56,65,114,114,97,121,15,23,101,110,99,111,100,101,83,116,114,105,110,103,84,111,85,84,70,56,65,114,114,97,121,16,25,100,101,99,111,100,101,83,116,114,105,110,103,70,114,111,109,85,84,70,56,65,114,114,97,121
]);
try { if (Inst0 <= 1000 && typeof (wasm_code) != "undefined") {_RecordType("<6,15,1>",(wasm_code)); Inst0++; } } catch(e) {}
  let kBuiltins = { builtins: ["js-string", "text-decoder", "text-encoder"] };
try { if (Inst2 <= 1000 && typeof (kBuiltins) != "undefined") {_RecordType("<6203,6212,4>",(kBuiltins)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<6301,6319,5>",(WebAssembly.Module)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<6301,6312,5>",(WebAssembly)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (wasm_code) != "undefined") {_RecordType("<6320,6329,5>",(wasm_code)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (kBuiltins) != "undefined") {_RecordType("<6331,6340,5>",(kBuiltins)); Inst7++; } } catch(e) {}
  var wasm_module = new WebAssembly.Module(wasm_code, kBuiltins);
try { if (Inst3 <= 1000 && typeof (wasm_module) != "undefined") {_RecordType("<6283,6294,5>",(wasm_module)); Inst3++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (WebAssembly.Instance) != "undefined") {_RecordType("<6370,6390,6>",(WebAssembly.Instance)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<6370,6381,6>",(WebAssembly)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (wasm_module) != "undefined") {_RecordType("<6391,6402,6>",(wasm_module)); Inst11++; } } catch(e) {}
  var wasm_instance = new WebAssembly.Instance(wasm_module);
try { if (Inst8 <= 1000 && typeof (wasm_instance) != "undefined") {_RecordType("<6350,6363,6>",(wasm_instance)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (wasm_instance.exports.main) != "undefined") {_RecordType("<6416,6442,7>",(wasm_instance.exports.main)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (wasm_instance.exports) != "undefined") {_RecordType("<6416,6437,7>",(wasm_instance.exports)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (wasm_instance) != "undefined") {_RecordType("<6416,6429,7>",(wasm_instance)); Inst15++; } } catch(e) {}
  var f = wasm_instance.exports.main;
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<6412,6413,7>",(f)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<6447,6448,8>",(f)); Inst16++; } } catch(e) {}
  f();

