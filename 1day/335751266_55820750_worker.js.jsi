var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
var Inst43 = 0;
var Inst44 = 0;
var Inst45 = 0;
var Inst46 = 0;
var Inst47 = 0;
var Inst48 = 0;
var Inst49 = 0;
var Inst50 = 0;
var Inst51 = 0;
var Inst52 = 0;
var Inst53 = 0;
var Inst54 = 0;
var Inst55 = 0;
var Inst56 = 0;
var Inst57 = 0;
var Inst58 = 0;
var Inst59 = 0;
var Inst60 = 0;
var Inst61 = 0;
var Inst62 = 0;
var Inst63 = 0;
var Inst64 = 0;
var Inst65 = 0;
var Inst66 = 0;
var Inst67 = 0;
var Inst68 = 0;
var Inst69 = 0;
var Inst70 = 0;
var Inst71 = 0;
var Inst72 = 0;
var Inst73 = 0;
var Inst74 = 0;
var Inst75 = 0;
var Inst76 = 0;
var Inst77 = 0;
var Inst78 = 0;
var Inst79 = 0;
var Inst80 = 0;
var Inst81 = 0;
var Inst82 = 0;
var Inst83 = 0;
var Inst84 = 0;
var Inst85 = 0;
var Inst86 = 0;
var Inst87 = 0;
var Inst88 = 0;
var Inst89 = 0;
var Inst90 = 0;
var Inst91 = 0;
var Inst92 = 0;
var Inst93 = 0;
var Inst94 = 0;
var Inst95 = 0;
var Inst96 = 0;
var Inst97 = 0;
var Inst98 = 0;
var Inst99 = 0;
var Inst100 = 0;
var Inst101 = 0;
var Inst102 = 0;
var Inst103 = 0;
var Inst104 = 0;
var Inst105 = 0;
var Inst106 = 0;
var Inst107 = 0;
var Inst108 = 0;
var Inst109 = 0;
var Inst110 = 0;
var Inst111 = 0;
var Inst112 = 0;
var Inst113 = 0;
var Inst114 = 0;
var Inst115 = 0;
var Inst116 = 0;
var Inst117 = 0;
var Inst118 = 0;
var Inst119 = 0;
var Inst120 = 0;
var Inst121 = 0;
var Inst122 = 0;
var Inst123 = 0;
var Inst124 = 0;
var Inst125 = 0;
var Inst126 = 0;
var Inst127 = 0;
var Inst128 = 0;
var Inst129 = 0;
var Inst130 = 0;
var Inst131 = 0;
var Inst132 = 0;
var Inst133 = 0;
var Inst134 = 0;
var Inst135 = 0;
var Inst136 = 0;
var Inst137 = 0;
var Inst138 = 0;
var Inst139 = 0;
var Inst140 = 0;
var Inst141 = 0;
var Inst142 = 0;
var Inst143 = 0;
var Inst144 = 0;
var Inst145 = 0;
var Inst146 = 0;
var Inst147 = 0;
var Inst148 = 0;
var Inst149 = 0;
var Inst150 = 0;
var Inst151 = 0;
var Inst152 = 0;
var Inst153 = 0;
var Inst154 = 0;
var Inst155 = 0;
var Inst156 = 0;
var Inst157 = 0;
var Inst158 = 0;
var Inst159 = 0;
var Inst160 = 0;
var Inst161 = 0;
var Inst162 = 0;
var Inst163 = 0;
var Inst164 = 0;
var Inst165 = 0;
var Inst166 = 0;
var Inst167 = 0;
var Inst168 = 0;
var Inst169 = 0;
var Inst170 = 0;
var Inst171 = 0;
var Inst172 = 0;
var Inst173 = 0;
var Inst174 = 0;
var Inst175 = 0;
var Inst176 = 0;
var Inst177 = 0;
var Inst178 = 0;
var Inst179 = 0;
var Inst180 = 0;
var Inst181 = 0;
var Inst182 = 0;
var Inst183 = 0;
var Inst184 = 0;
var Inst185 = 0;
var Inst186 = 0;
var Inst187 = 0;
var Inst188 = 0;
var Inst189 = 0;
var Inst190 = 0;
var Inst191 = 0;
var Inst192 = 0;
var Inst193 = 0;
var Inst194 = 0;
var Inst195 = 0;
var Inst196 = 0;
var Inst197 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
'use strict';

try { if (Inst1 <= 1000 && typeof (undefined) != "undefined") {_RecordType("<82,91,5>",(undefined)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (value) != "undefined") {_RecordType("<414,419,25>",(value)); Inst2++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (value) != "undefined") {_RecordType("<656,661,35>",(value)); Inst6++; } } catch(e) {}
const badChunks = [{
        name: 'undefined',
        value: undefined
    },
    {
        name: 'null',
        value: null
    },
    {
        name: 'numeric',
        value: 3.14
    },
    {
        name: 'object, not BufferSource',
        value: {}
    },
    {
        name: 'array',
        value: [65]
    },
    {
        name: 'SharedArrayBuffer',
        get value() {
try { if (Inst3 <= 1000 && typeof (new WebAssembly.Memory({
                shared: true,
                initial: 1,
                maximum: 1
            }).buffer) != "undefined") {_RecordType("<444,579,26>",(new WebAssembly.Memory({
                shared: true,
                initial: 1,
                maximum: 1
            }).buffer)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<448,466,26>",(WebAssembly.Memory)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<448,459,26>",(WebAssembly)); Inst5++; } } catch(e) {}
            return new WebAssembly.Memory({
                shared: true,
                initial: 1,
                maximum: 1
            }).buffer;
        }
    },
    {
        name: 'shared Uint8Array',
        get value() {
try { if (Inst7 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<690,700,36>",(Uint8Array)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (new WebAssembly.Memory({
                shared: true,
                initial: 1,
                maximum: 1
            }).buffer) != "undefined") {_RecordType("<701,836,36>",(new WebAssembly.Memory({
                shared: true,
                initial: 1,
                maximum: 1
            }).buffer)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<705,723,36>",(WebAssembly.Memory)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<705,716,36>",(WebAssembly)); Inst10++; } } catch(e) {}
            return new Uint8Array(new WebAssembly.Memory({
                shared: true,
                initial: 1,
                maximum: 1
            }).buffer)
        }
    },
];
try { if (Inst0 <= 1000 && typeof (badChunks) != "undefined") {_RecordType("<23,32,3>",(badChunks)); Inst0++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (testGzip) != "undefined") {_RecordType("<873,881,45>",(testGzip)); Inst11++; } } catch(e) {}
function testGzip(chunk) {
try { if (Inst12 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<882,887,45>",(chunk)); Inst12++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<907,914,46>",(Promise)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<916,923,46>",(resolve)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (reject) != "undefined") {_RecordType("<925,931,46>",(reject)); Inst15++; } } catch(e) {}
    return new Promise((resolve, reject) => {
try { if (Inst17 <= 1000 && typeof (CompressionStream) != "undefined") {_RecordType("<962,979,47>",(CompressionStream)); Inst17++; } } catch(e) {}
        const cs = new CompressionStream('gzip');
try { if (Inst16 <= 1000 && typeof (cs) != "undefined") {_RecordType("<953,955,47>",(cs)); Inst16++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (cs.readable.getReader) != "undefined") {_RecordType("<1013,1034,48>",(cs.readable.getReader)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (cs.readable) != "undefined") {_RecordType("<1013,1024,48>",(cs.readable)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (cs) != "undefined") {_RecordType("<1013,1015,48>",(cs)); Inst21++; } } catch(e) {}
        const reader = cs.readable.getReader();
try { if (Inst18 <= 1000 && typeof (reader) != "undefined") {_RecordType("<1004,1010,48>",(reader)); Inst18++; } } catch(e) {}
try { if (Inst23 <= 1000 && typeof (cs.writable.getWriter) != "undefined") {_RecordType("<1062,1083,49>",(cs.writable.getWriter)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (cs.writable) != "undefined") {_RecordType("<1062,1073,49>",(cs.writable)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (cs) != "undefined") {_RecordType("<1062,1064,49>",(cs)); Inst25++; } } catch(e) {}
        const writer = cs.writable.getWriter();
try { if (Inst22 <= 1000 && typeof (writer) != "undefined") {_RecordType("<1053,1059,49>",(writer)); Inst22++; } } catch(e) {}
try { if (Inst27 <= 1000 && typeof (writer.write) != "undefined") {_RecordType("<1117,1129,50>",(writer.write)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (writer) != "undefined") {_RecordType("<1117,1123,50>",(writer)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (chunk.value) != "undefined") {_RecordType("<1130,1141,50>",(chunk.value)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<1130,1135,50>",(chunk)); Inst30++; } } catch(e) {}
        const writePromise = writer.write(chunk.value);
try { if (Inst26 <= 1000 && typeof (writePromise) != "undefined") {_RecordType("<1102,1114,50>",(writePromise)); Inst26++; } } catch(e) {}
try { if (Inst32 <= 1000 && typeof (reader.read) != "undefined") {_RecordType("<1173,1184,51>",(reader.read)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (reader) != "undefined") {_RecordType("<1173,1179,51>",(reader)); Inst33++; } } catch(e) {}
        const readPromise = reader.read();
try { if (Inst31 <= 1000 && typeof (readPromise) != "undefined") {_RecordType("<1159,1170,51>",(readPromise)); Inst31++; } } catch(e) {}

try { if (Inst34 <= 1000 && typeof (Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then(results => {
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
                resolve();
            } else {
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch) != "undefined") {_RecordType("<1199,2156,53>",(Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then(results => {
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
                resolve();
            } else {
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then) != "undefined") {_RecordType("<1199,1885,53>",(Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (Promise.all) != "undefined") {_RecordType("<1199,1210,53>",(Promise.all)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<1199,1206,53>",(Promise)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (writePromise.catch) != "undefined") {_RecordType("<1226,1244,54>",(writePromise.catch)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (writePromise) != "undefined") {_RecordType("<1226,1238,54>",(writePromise)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (e) != "undefined") {_RecordType("<1245,1246,54>",(e)); Inst40++; } } catch(e) {}try { if (Inst48 <= 1000 && typeof (readPromise.catch) != "undefined") {_RecordType("<1556,1573,62>",(readPromise.catch)); Inst48++; } } catch(e) {}try { if (Inst49 <= 1000 && typeof (readPromise) != "undefined") {_RecordType("<1556,1567,62>",(readPromise)); Inst49++; } } catch(e) {}try { if (Inst50 <= 1000 && typeof (e) != "undefined") {_RecordType("<1574,1575,62>",(e)); Inst50++; } } catch(e) {}try { if (Inst58 <= 1000 && typeof (results) != "undefined") {_RecordType("<1886,1893,70>",(results)); Inst58++; } } catch(e) {}try { if (Inst66 <= 1000 && typeof (reject) != "undefined") {_RecordType("<2157,2163,76>",(reject)); Inst66++; } } catch(e) {}
        Promise.all([
            writePromise.catch(e => {
try { if (Inst41 <= 1000 && typeof (e) != "undefined") {_RecordType("<1273,1274,55>",(e)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1286,1295,55>",(TypeError)); Inst42++; } } catch(e) {}
                if (e instanceof TypeError) {
try { if (Inst43 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1320,1331,56>",(console.log)); Inst43++; } } catch(e) {}try { if (Inst44 <= 1000 && typeof (console) != "undefined") {_RecordType("<1320,1327,56>",(console)); Inst44++; } } catch(e) {}try { if (Inst45 <= 1000 && typeof (chunk.name) != "undefined") {_RecordType("<1380,1390,56>",(chunk.name)); Inst45++; } } catch(e) {}try { if (Inst46 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<1380,1385,56>",(chunk)); Inst46++; } } catch(e) {}
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'write_rejected';
                } else {
try { if (Inst47 <= 1000 && typeof (e) != "undefined") {_RecordType("<1504,1505,59>",(e)); Inst47++; } } catch(e) {}
                    throw e;
                }
            }),
            readPromise.catch(e => {
try { if (Inst51 <= 1000 && typeof (e) != "undefined") {_RecordType("<1602,1603,63>",(e)); Inst51++; } } catch(e) {}try { if (Inst52 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<1615,1624,63>",(TypeError)); Inst52++; } } catch(e) {}
                if (e instanceof TypeError) {
try { if (Inst53 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<1649,1660,64>",(console.log)); Inst53++; } } catch(e) {}try { if (Inst54 <= 1000 && typeof (console) != "undefined") {_RecordType("<1649,1656,64>",(console)); Inst54++; } } catch(e) {}try { if (Inst55 <= 1000 && typeof (chunk.name) != "undefined") {_RecordType("<1708,1718,64>",(chunk.name)); Inst55++; } } catch(e) {}try { if (Inst56 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<1708,1713,64>",(chunk)); Inst56++; } } catch(e) {}
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with gzip`);
                    return 'read_rejected';
                } else {
try { if (Inst57 <= 1000 && typeof (e) != "undefined") {_RecordType("<1831,1832,67>",(e)); Inst57++; } } catch(e) {}
                    throw e;
                }
            })
        ]).then(results => {
try { if (Inst59 <= 1000 && typeof (results.includes) != "undefined") {_RecordType("<1916,1932,71>",(results.includes)); Inst59++; } } catch(e) {}try { if (Inst60 <= 1000 && typeof (results) != "undefined") {_RecordType("<1916,1923,71>",(results)); Inst60++; } } catch(e) {}try { if (Inst61 <= 1000 && typeof (results.includes) != "undefined") {_RecordType("<1954,1970,71>",(results.includes)); Inst61++; } } catch(e) {}try { if (Inst62 <= 1000 && typeof (results) != "undefined") {_RecordType("<1954,1961,71>",(results)); Inst62++; } } catch(e) {}
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
try { if (Inst63 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<2008,2015,72>",(resolve)); Inst63++; } } catch(e) {}
                resolve();
            } else {
try { if (Inst64 <= 1000 && typeof (reject) != "undefined") {_RecordType("<2058,2064,74>",(reject)); Inst64++; } } catch(e) {}try { if (Inst65 <= 1000 && typeof (Error) != "undefined") {_RecordType("<2069,2074,74>",(Error)); Inst65++; } } catch(e) {}
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch(reject);
    });
}

try { if (Inst67 <= 1000 && typeof (testDeflate) != "undefined") {_RecordType("<2190,2201,80>",(testDeflate)); Inst67++; } } catch(e) {}
function testDeflate(chunk) {
try { if (Inst68 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<2202,2207,80>",(chunk)); Inst68++; } } catch(e) {}
try { if (Inst69 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2227,2234,81>",(Promise)); Inst69++; } } catch(e) {}try { if (Inst70 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<2236,2243,81>",(resolve)); Inst70++; } } catch(e) {}try { if (Inst71 <= 1000 && typeof (reject) != "undefined") {_RecordType("<2245,2251,81>",(reject)); Inst71++; } } catch(e) {}
    return new Promise((resolve, reject) => {
try { if (Inst73 <= 1000 && typeof (CompressionStream) != "undefined") {_RecordType("<2282,2299,82>",(CompressionStream)); Inst73++; } } catch(e) {}
        const cs = new CompressionStream('deflate');
try { if (Inst72 <= 1000 && typeof (cs) != "undefined") {_RecordType("<2273,2275,82>",(cs)); Inst72++; } } catch(e) {}
try { if (Inst75 <= 1000 && typeof (cs.readable.getReader) != "undefined") {_RecordType("<2336,2357,83>",(cs.readable.getReader)); Inst75++; } } catch(e) {}try { if (Inst76 <= 1000 && typeof (cs.readable) != "undefined") {_RecordType("<2336,2347,83>",(cs.readable)); Inst76++; } } catch(e) {}try { if (Inst77 <= 1000 && typeof (cs) != "undefined") {_RecordType("<2336,2338,83>",(cs)); Inst77++; } } catch(e) {}
        const reader = cs.readable.getReader();
try { if (Inst74 <= 1000 && typeof (reader) != "undefined") {_RecordType("<2327,2333,83>",(reader)); Inst74++; } } catch(e) {}
try { if (Inst79 <= 1000 && typeof (cs.writable.getWriter) != "undefined") {_RecordType("<2385,2406,84>",(cs.writable.getWriter)); Inst79++; } } catch(e) {}try { if (Inst80 <= 1000 && typeof (cs.writable) != "undefined") {_RecordType("<2385,2396,84>",(cs.writable)); Inst80++; } } catch(e) {}try { if (Inst81 <= 1000 && typeof (cs) != "undefined") {_RecordType("<2385,2387,84>",(cs)); Inst81++; } } catch(e) {}
        const writer = cs.writable.getWriter();
try { if (Inst78 <= 1000 && typeof (writer) != "undefined") {_RecordType("<2376,2382,84>",(writer)); Inst78++; } } catch(e) {}
try { if (Inst83 <= 1000 && typeof (writer.write) != "undefined") {_RecordType("<2440,2452,85>",(writer.write)); Inst83++; } } catch(e) {}try { if (Inst84 <= 1000 && typeof (writer) != "undefined") {_RecordType("<2440,2446,85>",(writer)); Inst84++; } } catch(e) {}try { if (Inst85 <= 1000 && typeof (chunk.value) != "undefined") {_RecordType("<2453,2464,85>",(chunk.value)); Inst85++; } } catch(e) {}try { if (Inst86 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<2453,2458,85>",(chunk)); Inst86++; } } catch(e) {}
        const writePromise = writer.write(chunk.value);
try { if (Inst82 <= 1000 && typeof (writePromise) != "undefined") {_RecordType("<2425,2437,85>",(writePromise)); Inst82++; } } catch(e) {}
try { if (Inst88 <= 1000 && typeof (reader.read) != "undefined") {_RecordType("<2496,2507,86>",(reader.read)); Inst88++; } } catch(e) {}try { if (Inst89 <= 1000 && typeof (reader) != "undefined") {_RecordType("<2496,2502,86>",(reader)); Inst89++; } } catch(e) {}
        const readPromise = reader.read();
try { if (Inst87 <= 1000 && typeof (readPromise) != "undefined") {_RecordType("<2482,2493,86>",(readPromise)); Inst87++; } } catch(e) {}

try { if (Inst90 <= 1000 && typeof (Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then(results => {
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
                resolve();
            } else {
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch) != "undefined") {_RecordType("<2522,3485,88>",(Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then(results => {
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
                resolve();
            } else {
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch)); Inst90++; } } catch(e) {}try { if (Inst91 <= 1000 && typeof (Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then) != "undefined") {_RecordType("<2522,3214,88>",(Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then)); Inst91++; } } catch(e) {}try { if (Inst92 <= 1000 && typeof (Promise.all) != "undefined") {_RecordType("<2522,2533,88>",(Promise.all)); Inst92++; } } catch(e) {}try { if (Inst93 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<2522,2529,88>",(Promise)); Inst93++; } } catch(e) {}try { if (Inst94 <= 1000 && typeof (writePromise.catch) != "undefined") {_RecordType("<2549,2567,89>",(writePromise.catch)); Inst94++; } } catch(e) {}try { if (Inst95 <= 1000 && typeof (writePromise) != "undefined") {_RecordType("<2549,2561,89>",(writePromise)); Inst95++; } } catch(e) {}try { if (Inst96 <= 1000 && typeof (e) != "undefined") {_RecordType("<2568,2569,89>",(e)); Inst96++; } } catch(e) {}try { if (Inst104 <= 1000 && typeof (readPromise.catch) != "undefined") {_RecordType("<2882,2899,97>",(readPromise.catch)); Inst104++; } } catch(e) {}try { if (Inst105 <= 1000 && typeof (readPromise) != "undefined") {_RecordType("<2882,2893,97>",(readPromise)); Inst105++; } } catch(e) {}try { if (Inst106 <= 1000 && typeof (e) != "undefined") {_RecordType("<2900,2901,97>",(e)); Inst106++; } } catch(e) {}try { if (Inst114 <= 1000 && typeof (results) != "undefined") {_RecordType("<3215,3222,105>",(results)); Inst114++; } } catch(e) {}try { if (Inst122 <= 1000 && typeof (reject) != "undefined") {_RecordType("<3486,3492,111>",(reject)); Inst122++; } } catch(e) {}
        Promise.all([
            writePromise.catch(e => {
try { if (Inst97 <= 1000 && typeof (e) != "undefined") {_RecordType("<2596,2597,90>",(e)); Inst97++; } } catch(e) {}try { if (Inst98 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2609,2618,90>",(TypeError)); Inst98++; } } catch(e) {}
                if (e instanceof TypeError) {
try { if (Inst99 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2643,2654,91>",(console.log)); Inst99++; } } catch(e) {}try { if (Inst100 <= 1000 && typeof (console) != "undefined") {_RecordType("<2643,2650,91>",(console)); Inst100++; } } catch(e) {}try { if (Inst101 <= 1000 && typeof (chunk.name) != "undefined") {_RecordType("<2703,2713,91>",(chunk.name)); Inst101++; } } catch(e) {}try { if (Inst102 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<2703,2708,91>",(chunk)); Inst102++; } } catch(e) {}
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'write_rejected';
                } else {
try { if (Inst103 <= 1000 && typeof (e) != "undefined") {_RecordType("<2830,2831,94>",(e)); Inst103++; } } catch(e) {}
                    throw e;
                }
            }),
            readPromise.catch(e => {
try { if (Inst107 <= 1000 && typeof (e) != "undefined") {_RecordType("<2928,2929,98>",(e)); Inst107++; } } catch(e) {}try { if (Inst108 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<2941,2950,98>",(TypeError)); Inst108++; } } catch(e) {}
                if (e instanceof TypeError) {
try { if (Inst109 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2975,2986,99>",(console.log)); Inst109++; } } catch(e) {}try { if (Inst110 <= 1000 && typeof (console) != "undefined") {_RecordType("<2975,2982,99>",(console)); Inst110++; } } catch(e) {}try { if (Inst111 <= 1000 && typeof (chunk.name) != "undefined") {_RecordType("<3034,3044,99>",(chunk.name)); Inst111++; } } catch(e) {}try { if (Inst112 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<3034,3039,99>",(chunk)); Inst112++; } } catch(e) {}
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate`);
                    return 'read_rejected';
                } else {
try { if (Inst113 <= 1000 && typeof (e) != "undefined") {_RecordType("<3160,3161,102>",(e)); Inst113++; } } catch(e) {}
                    throw e;
                }
            })
        ]).then(results => {
try { if (Inst115 <= 1000 && typeof (results.includes) != "undefined") {_RecordType("<3245,3261,106>",(results.includes)); Inst115++; } } catch(e) {}try { if (Inst116 <= 1000 && typeof (results) != "undefined") {_RecordType("<3245,3252,106>",(results)); Inst116++; } } catch(e) {}try { if (Inst117 <= 1000 && typeof (results.includes) != "undefined") {_RecordType("<3283,3299,106>",(results.includes)); Inst117++; } } catch(e) {}try { if (Inst118 <= 1000 && typeof (results) != "undefined") {_RecordType("<3283,3290,106>",(results)); Inst118++; } } catch(e) {}
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
try { if (Inst119 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<3337,3344,107>",(resolve)); Inst119++; } } catch(e) {}
                resolve();
            } else {
try { if (Inst120 <= 1000 && typeof (reject) != "undefined") {_RecordType("<3387,3393,109>",(reject)); Inst120++; } } catch(e) {}try { if (Inst121 <= 1000 && typeof (Error) != "undefined") {_RecordType("<3398,3403,109>",(Error)); Inst121++; } } catch(e) {}
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch(reject);
    });
}

try { if (Inst123 <= 1000 && typeof (testDeflateRaw) != "undefined") {_RecordType("<3519,3533,115>",(testDeflateRaw)); Inst123++; } } catch(e) {}
function testDeflateRaw(chunk) {
try { if (Inst124 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<3534,3539,115>",(chunk)); Inst124++; } } catch(e) {}
try { if (Inst125 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<3559,3566,116>",(Promise)); Inst125++; } } catch(e) {}try { if (Inst126 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<3568,3575,116>",(resolve)); Inst126++; } } catch(e) {}try { if (Inst127 <= 1000 && typeof (reject) != "undefined") {_RecordType("<3577,3583,116>",(reject)); Inst127++; } } catch(e) {}
    return new Promise((resolve, reject) => {
try { if (Inst129 <= 1000 && typeof (CompressionStream) != "undefined") {_RecordType("<3614,3631,117>",(CompressionStream)); Inst129++; } } catch(e) {}
        const cs = new CompressionStream('deflate-raw');
try { if (Inst128 <= 1000 && typeof (cs) != "undefined") {_RecordType("<3605,3607,117>",(cs)); Inst128++; } } catch(e) {}
try { if (Inst131 <= 1000 && typeof (cs.readable.getReader) != "undefined") {_RecordType("<3672,3693,118>",(cs.readable.getReader)); Inst131++; } } catch(e) {}try { if (Inst132 <= 1000 && typeof (cs.readable) != "undefined") {_RecordType("<3672,3683,118>",(cs.readable)); Inst132++; } } catch(e) {}try { if (Inst133 <= 1000 && typeof (cs) != "undefined") {_RecordType("<3672,3674,118>",(cs)); Inst133++; } } catch(e) {}
        const reader = cs.readable.getReader();
try { if (Inst130 <= 1000 && typeof (reader) != "undefined") {_RecordType("<3663,3669,118>",(reader)); Inst130++; } } catch(e) {}
try { if (Inst135 <= 1000 && typeof (cs.writable.getWriter) != "undefined") {_RecordType("<3721,3742,119>",(cs.writable.getWriter)); Inst135++; } } catch(e) {}try { if (Inst136 <= 1000 && typeof (cs.writable) != "undefined") {_RecordType("<3721,3732,119>",(cs.writable)); Inst136++; } } catch(e) {}try { if (Inst137 <= 1000 && typeof (cs) != "undefined") {_RecordType("<3721,3723,119>",(cs)); Inst137++; } } catch(e) {}
        const writer = cs.writable.getWriter();
try { if (Inst134 <= 1000 && typeof (writer) != "undefined") {_RecordType("<3712,3718,119>",(writer)); Inst134++; } } catch(e) {}
try { if (Inst139 <= 1000 && typeof (writer.write) != "undefined") {_RecordType("<3776,3788,120>",(writer.write)); Inst139++; } } catch(e) {}try { if (Inst140 <= 1000 && typeof (writer) != "undefined") {_RecordType("<3776,3782,120>",(writer)); Inst140++; } } catch(e) {}try { if (Inst141 <= 1000 && typeof (chunk.value) != "undefined") {_RecordType("<3789,3800,120>",(chunk.value)); Inst141++; } } catch(e) {}try { if (Inst142 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<3789,3794,120>",(chunk)); Inst142++; } } catch(e) {}
        const writePromise = writer.write(chunk.value);
try { if (Inst138 <= 1000 && typeof (writePromise) != "undefined") {_RecordType("<3761,3773,120>",(writePromise)); Inst138++; } } catch(e) {}
try { if (Inst144 <= 1000 && typeof (reader.read) != "undefined") {_RecordType("<3832,3843,121>",(reader.read)); Inst144++; } } catch(e) {}try { if (Inst145 <= 1000 && typeof (reader) != "undefined") {_RecordType("<3832,3838,121>",(reader)); Inst145++; } } catch(e) {}
        const readPromise = reader.read();
try { if (Inst143 <= 1000 && typeof (readPromise) != "undefined") {_RecordType("<3818,3829,121>",(readPromise)); Inst143++; } } catch(e) {}

try { if (Inst146 <= 1000 && typeof (Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then(results => {
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
                resolve();
            } else {
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch) != "undefined") {_RecordType("<3858,4829,123>",(Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then(results => {
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
                resolve();
            } else {
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch)); Inst146++; } } catch(e) {}try { if (Inst147 <= 1000 && typeof (Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then) != "undefined") {_RecordType("<3858,4558,123>",(Promise.all([
            writePromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'write_rejected';
                } else {
                    throw e;
                }
            }),
            readPromise.catch(e => {
                if (e instanceof TypeError) {
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'read_rejected';
                } else {
                    throw e;
                }
            })
        ]).then)); Inst147++; } } catch(e) {}try { if (Inst148 <= 1000 && typeof (Promise.all) != "undefined") {_RecordType("<3858,3869,123>",(Promise.all)); Inst148++; } } catch(e) {}try { if (Inst149 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<3858,3865,123>",(Promise)); Inst149++; } } catch(e) {}try { if (Inst150 <= 1000 && typeof (writePromise.catch) != "undefined") {_RecordType("<3885,3903,124>",(writePromise.catch)); Inst150++; } } catch(e) {}try { if (Inst151 <= 1000 && typeof (writePromise) != "undefined") {_RecordType("<3885,3897,124>",(writePromise)); Inst151++; } } catch(e) {}try { if (Inst152 <= 1000 && typeof (e) != "undefined") {_RecordType("<3904,3905,124>",(e)); Inst152++; } } catch(e) {}try { if (Inst160 <= 1000 && typeof (readPromise.catch) != "undefined") {_RecordType("<4222,4239,132>",(readPromise.catch)); Inst160++; } } catch(e) {}try { if (Inst161 <= 1000 && typeof (readPromise) != "undefined") {_RecordType("<4222,4233,132>",(readPromise)); Inst161++; } } catch(e) {}try { if (Inst162 <= 1000 && typeof (e) != "undefined") {_RecordType("<4240,4241,132>",(e)); Inst162++; } } catch(e) {}try { if (Inst170 <= 1000 && typeof (results) != "undefined") {_RecordType("<4559,4566,140>",(results)); Inst170++; } } catch(e) {}try { if (Inst178 <= 1000 && typeof (reject) != "undefined") {_RecordType("<4830,4836,146>",(reject)); Inst178++; } } catch(e) {}
        Promise.all([
            writePromise.catch(e => {
try { if (Inst153 <= 1000 && typeof (e) != "undefined") {_RecordType("<3932,3933,125>",(e)); Inst153++; } } catch(e) {}try { if (Inst154 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<3945,3954,125>",(TypeError)); Inst154++; } } catch(e) {}
                if (e instanceof TypeError) {
try { if (Inst155 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<3979,3990,126>",(console.log)); Inst155++; } } catch(e) {}try { if (Inst156 <= 1000 && typeof (console) != "undefined") {_RecordType("<3979,3986,126>",(console)); Inst156++; } } catch(e) {}try { if (Inst157 <= 1000 && typeof (chunk.name) != "undefined") {_RecordType("<4039,4049,126>",(chunk.name)); Inst157++; } } catch(e) {}try { if (Inst158 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<4039,4044,126>",(chunk)); Inst158++; } } catch(e) {}
                    console.log(`Write rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'write_rejected';
                } else {
try { if (Inst159 <= 1000 && typeof (e) != "undefined") {_RecordType("<4170,4171,129>",(e)); Inst159++; } } catch(e) {}
                    throw e;
                }
            }),
            readPromise.catch(e => {
try { if (Inst163 <= 1000 && typeof (e) != "undefined") {_RecordType("<4268,4269,133>",(e)); Inst163++; } } catch(e) {}try { if (Inst164 <= 1000 && typeof (TypeError) != "undefined") {_RecordType("<4281,4290,133>",(TypeError)); Inst164++; } } catch(e) {}
                if (e instanceof TypeError) {
try { if (Inst165 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<4315,4326,134>",(console.log)); Inst165++; } } catch(e) {}try { if (Inst166 <= 1000 && typeof (console) != "undefined") {_RecordType("<4315,4322,134>",(console)); Inst166++; } } catch(e) {}try { if (Inst167 <= 1000 && typeof (chunk.name) != "undefined") {_RecordType("<4374,4384,134>",(chunk.name)); Inst167++; } } catch(e) {}try { if (Inst168 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<4374,4379,134>",(chunk)); Inst168++; } } catch(e) {}
                    console.log(`Read rejected as expected for chunk of type ${chunk.name} with deflate-raw`);
                    return 'read_rejected';
                } else {
try { if (Inst169 <= 1000 && typeof (e) != "undefined") {_RecordType("<4504,4505,137>",(e)); Inst169++; } } catch(e) {}
                    throw e;
                }
            })
        ]).then(results => {
try { if (Inst171 <= 1000 && typeof (results.includes) != "undefined") {_RecordType("<4589,4605,141>",(results.includes)); Inst171++; } } catch(e) {}try { if (Inst172 <= 1000 && typeof (results) != "undefined") {_RecordType("<4589,4596,141>",(results)); Inst172++; } } catch(e) {}try { if (Inst173 <= 1000 && typeof (results.includes) != "undefined") {_RecordType("<4627,4643,141>",(results.includes)); Inst173++; } } catch(e) {}try { if (Inst174 <= 1000 && typeof (results) != "undefined") {_RecordType("<4627,4634,141>",(results)); Inst174++; } } catch(e) {}
            if (results.includes('write_rejected') && results.includes('read_rejected')) {
try { if (Inst175 <= 1000 && typeof (resolve) != "undefined") {_RecordType("<4681,4688,142>",(resolve)); Inst175++; } } catch(e) {}
                resolve();
            } else {
try { if (Inst176 <= 1000 && typeof (reject) != "undefined") {_RecordType("<4731,4737,144>",(reject)); Inst176++; } } catch(e) {}try { if (Inst177 <= 1000 && typeof (Error) != "undefined") {_RecordType("<4742,4747,144>",(Error)); Inst177++; } } catch(e) {}
                reject(new Error('Expected both write and read to be rejected'));
            }
        }).catch(reject);
    });
}

try { if (Inst179 <= 1000 && typeof (Promise.all(
    badChunks.flatMap(chunk => [
        testGzip(chunk),
        testDeflate(chunk),
        testDeflateRaw(chunk)
    ])
).then(() => {
    console.log('Done');
}).catch) != "undefined") {_RecordType("<4854,5046,150>",(Promise.all(
    badChunks.flatMap(chunk => [
        testGzip(chunk),
        testDeflate(chunk),
        testDeflateRaw(chunk)
    ])
).then(() => {
    console.log('Done');
}).catch)); Inst179++; } } catch(e) {}try { if (Inst180 <= 1000 && typeof (Promise.all(
    badChunks.flatMap(chunk => [
        testGzip(chunk),
        testDeflate(chunk),
        testDeflateRaw(chunk)
    ])
).then) != "undefined") {_RecordType("<4854,5002,150>",(Promise.all(
    badChunks.flatMap(chunk => [
        testGzip(chunk),
        testDeflate(chunk),
        testDeflateRaw(chunk)
    ])
).then)); Inst180++; } } catch(e) {}try { if (Inst181 <= 1000 && typeof (Promise.all) != "undefined") {_RecordType("<4854,4865,150>",(Promise.all)); Inst181++; } } catch(e) {}try { if (Inst182 <= 1000 && typeof (Promise) != "undefined") {_RecordType("<4854,4861,150>",(Promise)); Inst182++; } } catch(e) {}try { if (Inst183 <= 1000 && typeof (badChunks.flatMap) != "undefined") {_RecordType("<4872,4889,151>",(badChunks.flatMap)); Inst183++; } } catch(e) {}try { if (Inst184 <= 1000 && typeof (badChunks) != "undefined") {_RecordType("<4872,4881,151>",(badChunks)); Inst184++; } } catch(e) {}try { if (Inst185 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<4890,4895,151>",(chunk)); Inst185++; } } catch(e) {}try { if (Inst186 <= 1000 && typeof (testGzip) != "undefined") {_RecordType("<4910,4918,152>",(testGzip)); Inst186++; } } catch(e) {}try { if (Inst187 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<4919,4924,152>",(chunk)); Inst187++; } } catch(e) {}try { if (Inst188 <= 1000 && typeof (testDeflate) != "undefined") {_RecordType("<4936,4947,153>",(testDeflate)); Inst188++; } } catch(e) {}try { if (Inst189 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<4948,4953,153>",(chunk)); Inst189++; } } catch(e) {}try { if (Inst190 <= 1000 && typeof (testDeflateRaw) != "undefined") {_RecordType("<4965,4979,154>",(testDeflateRaw)); Inst190++; } } catch(e) {}try { if (Inst191 <= 1000 && typeof (chunk) != "undefined") {_RecordType("<4980,4985,154>",(chunk)); Inst191++; } } catch(e) {}try { if (Inst194 <= 1000 && typeof (error) != "undefined") {_RecordType("<5047,5052,158>",(error)); Inst194++; } } catch(e) {}
Promise.all(
    badChunks.flatMap(chunk => [
        testGzip(chunk),
        testDeflate(chunk),
        testDeflateRaw(chunk)
    ])
).then(() => {
try { if (Inst192 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<5016,5027,157>",(console.log)); Inst192++; } } catch(e) {}try { if (Inst193 <= 1000 && typeof (console) != "undefined") {_RecordType("<5016,5023,157>",(console)); Inst193++; } } catch(e) {}
    console.log('Done');
}).catch(error => {
try { if (Inst195 <= 1000 && typeof (console.error) != "undefined") {_RecordType("<5063,5076,159>",(console.error)); Inst195++; } } catch(e) {}try { if (Inst196 <= 1000 && typeof (console) != "undefined") {_RecordType("<5063,5070,159>",(console)); Inst196++; } } catch(e) {}try { if (Inst197 <= 1000 && typeof (error) != "undefined") {_RecordType("<5100,5105,159>",(error)); Inst197++; } } catch(e) {}
    console.error('Some checks failed:', error);
});
