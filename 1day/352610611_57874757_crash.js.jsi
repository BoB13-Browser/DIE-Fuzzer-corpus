var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}

try { if (Inst0 <= 1000 && typeof (createWebAssemblyMemories) != "undefined") {_RecordType("<15,40,2>",(createWebAssemblyMemories)); Inst0++; } } catch(e) {}
    function createWebAssemblyMemories(count, size) {
try { if (Inst1 <= 1000 && typeof (count) != "undefined") {_RecordType("<41,46,2>",(count)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (size) != "undefined") {_RecordType("<48,52,2>",(size)); Inst2++; } } catch(e) {}
        for (let i = 0; i < count; ++i) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<74,75,3>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<81,82,3>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (count) != "undefined") {_RecordType("<85,90,3>",(count)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (i) != "undefined") {_RecordType("<94,95,3>",(i)); Inst6++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<116,134,4>",(WebAssembly.Memory)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<116,127,4>",(WebAssembly)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (size) != "undefined") {_RecordType("<146,150,4>",(size)); Inst9++; } } catch(e) {}
            new WebAssembly.Memory({ initial: size });
        }
    }

try { if (Inst10 <= 1000 && typeof (setInterval) != "undefined") {_RecordType("<180,191,8>",(setInterval)); Inst10++; } } catch(e) {}
    setInterval(async function () {
try { if (Inst11 <= 1000 && typeof (createWebAssemblyMemories) != "undefined") {_RecordType("<221,246,9>",(createWebAssemblyMemories)); Inst11++; } } catch(e) {}
        createWebAssemblyMemories(100, 100);
    }, 1);
try { if (Inst12 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<275,285,11>",(setTimeout)); Inst12++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (Math.floor) != "undefined") {_RecordType("<342,352,13>",(Math.floor)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (Math) != "undefined") {_RecordType("<342,346,13>",(Math)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (Math.random) != "undefined") {_RecordType("<353,364,13>",(Math.random)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (Math) != "undefined") {_RecordType("<353,357,13>",(Math)); Inst18++; } } catch(e) {}
    setTimeout(async function () {
try { if (Inst13 <= 1000 && typeof (location.reload) != "undefined") {_RecordType("<315,330,12>",(location.reload)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (location) != "undefined") {_RecordType("<315,323,12>",(location)); Inst14++; } } catch(e) {}
        location.reload();
    }, Math.floor(Math.random() * 5000));
try { if (Inst19 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<382,392,14>",(setTimeout)); Inst19++; } } catch(e) {}
    setTimeout(async function () {
try { if (Inst21 <= 1000 && typeof (navigator.gpu.requestAdapter) != "undefined") {_RecordType("<442,470,15>",(navigator.gpu.requestAdapter)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (navigator.gpu) != "undefined") {_RecordType("<442,455,15>",(navigator.gpu)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (navigator) != "undefined") {_RecordType("<442,451,15>",(navigator)); Inst23++; } } catch(e) {}
        let adapter = await navigator.gpu.requestAdapter();
try { if (Inst20 <= 1000 && typeof (adapter) != "undefined") {_RecordType("<426,433,15>",(adapter)); Inst20++; } } catch(e) {}
try { if (Inst25 <= 1000 && typeof (adapter.requestDevice) != "undefined") {_RecordType("<502,523,16>",(adapter.requestDevice)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (adapter) != "undefined") {_RecordType("<502,509,16>",(adapter)); Inst26++; } } catch(e) {}
        let device = await adapter.requestDevice();
try { if (Inst24 <= 1000 && typeof (device) != "undefined") {_RecordType("<487,493,16>",(device)); Inst24++; } } catch(e) {}
        let shaderCode = `

        `;
try { if (Inst27 <= 1000 && typeof (shaderCode) != "undefined") {_RecordType("<540,550,17>",(shaderCode)); Inst27++; } } catch(e) {}
try { if (Inst28 <= 1000 && typeof (device.createShaderModule) != "undefined") {_RecordType("<578,603,20>",(device.createShaderModule)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (device) != "undefined") {_RecordType("<578,584,20>",(device)); Inst29++; } } catch(e) {}try { if (Inst30 <= 1000 && typeof (shaderCode) != "undefined") {_RecordType("<625,635,21>",(shaderCode)); Inst30++; } } catch(e) {}
        device.createShaderModule({
            code: shaderCode,
        });
try { if (Inst32 <= 1000 && typeof (device.createCommandEncoder) != "undefined") {_RecordType("<673,700,23>",(device.createCommandEncoder)); Inst32++; } } catch(e) {}try { if (Inst33 <= 1000 && typeof (device) != "undefined") {_RecordType("<673,679,23>",(device)); Inst33++; } } catch(e) {}
        let encoder = device.createCommandEncoder();
try { if (Inst31 <= 1000 && typeof (encoder) != "undefined") {_RecordType("<663,670,23>",(encoder)); Inst31++; } } catch(e) {}

        for (var i = 0; i < 1000; ++i) {
try { if (Inst34 <= 1000 && typeof (i) != "undefined") {_RecordType("<724,725,25>",(i)); Inst34++; } } catch(e) {}try { if (Inst35 <= 1000 && typeof (i) != "undefined") {_RecordType("<731,732,25>",(i)); Inst35++; } } catch(e) {}try { if (Inst36 <= 1000 && typeof (i) != "undefined") {_RecordType("<743,744,25>",(i)); Inst36++; } } catch(e) {}
try { if (Inst37 <= 1000 && typeof (device.queue.submit) != "undefined") {_RecordType("<761,780,26>",(device.queue.submit)); Inst37++; } } catch(e) {}try { if (Inst38 <= 1000 && typeof (device.queue) != "undefined") {_RecordType("<761,773,26>",(device.queue)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (device) != "undefined") {_RecordType("<761,767,26>",(device)); Inst39++; } } catch(e) {}try { if (Inst40 <= 1000 && typeof (encoder.finish) != "undefined") {_RecordType("<782,796,26>",(encoder.finish)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (encoder) != "undefined") {_RecordType("<782,789,26>",(encoder)); Inst41++; } } catch(e) {}
            device.queue.submit([encoder.finish()]);
        }
     
    }, 0);

