var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
if ("d8" in this) {
try { if (Inst0 <= 1000 && typeof (d8.test.enableJSPI) != "undefined") {_RecordType("<23,41,2>",(d8.test.enableJSPI)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (d8.test) != "undefined") {_RecordType("<23,30,2>",(d8.test)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (d8) != "undefined") {_RecordType("<23,25,2>",(d8)); Inst2++; } } catch(e) {}
  d8.test.enableJSPI();
try { if (Inst3 <= 1000 && typeof (d8.test.installConditionalFeatures) != "undefined") {_RecordType("<48,82,3>",(d8.test.installConditionalFeatures)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (d8.test) != "undefined") {_RecordType("<48,55,3>",(d8.test)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (d8) != "undefined") {_RecordType("<48,50,3>",(d8)); Inst5++; } } catch(e) {}
  d8.test.installConditionalFeatures();
}
try { if (Inst7 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<110,120,5>",(Uint8Array)); Inst7++; } } catch(e) {}
var wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 212, 129, 128, 128, 0, 22, 78, 1, 94, 120, 1, 78, 1, 94, 119, 1, 80, 0, 95, 4, 127, 0, 127, 0, 127, 0, 127, 0, 80, 1, 2, 95, 8, 127, 0, 127, 0, 127, 0, 127, 0, 127, 1, 100, 1, 1, 123, 0, 99, 3, 0, 96, 3, 123, 127, 127, 1, 127, 96, 7, 99, 2, 100, 2, 123, 127, 126, 125, 100, 108, 10, 127, 127, 100, 108, 126, 126, 126, 107, 100, 108, 108, 126, 96, 11, 100, 5, 108, 126, 109, 107, 127, 100, 4, 127, 100, 3, 113, 106, 0, 96, 15, 127, 125, 127, 100, 107, 100, 4, 127, 126, 127, 127, 126, 125, 113, 115, 115, 100, 107, 0, 96, 5, 115, 100, 4, 127, 126, 127, 0, 96, 0, 0, 96, 1, 111, 1, 100, 111, 96, 1, 111, 1, 127, 96, 1, 127, 1, 100, 111, 96, 2, 111, 127, 1, 127, 96, 2, 111, 111, 1, 100, 111, 96, 3, 111, 127, 127, 1, 100, 111, 96, 2, 111, 111, 1, 127, 96, 3, 99, 1, 127, 127, 1, 100, 111, 96, 3, 111, 99, 1, 127, 1, 127, 96, 3, 111, 99, 0, 127, 1, 127, 96, 1, 111, 1, 100, 0, 96, 3, 99, 0, 127, 127, 1, 100, 111, 2, 149, 132, 128, 128, 0, 17, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 4, 99, 97, 115, 116, 0, 10, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 4, 116, 101, 115, 116, 0, 11, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 12, 102, 114, 111, 109, 67, 104, 97, 114, 67, 111, 100, 101, 0, 12, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 13, 102, 114, 111, 109, 67, 111, 100, 101, 80, 111, 105, 110, 116, 0, 12, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 10, 99, 104, 97, 114, 67, 111, 100, 101, 65, 116, 0, 13, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 11, 99, 111, 100, 101, 80, 111, 105, 110, 116, 65, 116, 0, 13, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 6, 108, 101, 110, 103, 116, 104, 0, 11, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 6, 99, 111, 110, 99, 97, 116, 0, 14, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 9, 115, 117, 98, 115, 116, 114, 105, 110, 103, 0, 15, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 6, 101, 113, 117, 97, 108, 115, 0, 16, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 7, 99, 111, 109, 112, 97, 114, 101, 0, 16, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 17, 102, 114, 111, 109, 67, 104, 97, 114, 67, 111, 100, 101, 65, 114, 114, 97, 121, 0, 17, 14, 119, 97, 115, 109, 58, 106, 115, 45, 115, 116, 114, 105, 110, 103, 17, 105, 110, 116, 111, 67, 104, 97, 114, 67, 111, 100, 101, 65, 114, 114, 97, 121, 0, 18, 17, 119, 97, 115, 109, 58, 116, 101, 120, 116, 45, 101, 110, 99, 111, 100, 101, 114, 19, 109, 101, 97, 115, 117, 114, 101, 83, 116, 114, 105, 110, 103, 65, 115, 85, 84, 70, 56, 0, 11, 17, 119, 97, 115, 109, 58, 116, 101, 120, 116, 45, 101, 110, 99, 111, 100, 101, 114, 25, 101, 110, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 73, 110, 116, 111, 85, 84, 70, 56, 65, 114, 114, 97, 121, 0, 19, 17, 119, 97, 115, 109, 58, 116, 101, 120, 116, 45, 101, 110, 99, 111, 100, 101, 114, 23, 101, 110, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 84, 111, 85, 84, 70, 56, 65, 114, 114, 97, 121, 0, 20, 17, 119, 97, 115, 109, 58, 116, 101, 120, 116, 45, 100, 101, 99, 111, 100, 101, 114, 25, 100, 101, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 70, 114, 111, 109, 85, 84, 70, 56, 65, 114, 114, 97, 121, 0, 21, 3, 131, 128, 128, 128, 0, 2, 4, 5, 4, 153, 128, 128, 128, 0, 3, 112, 1, 2, 15, 64, 0, 100, 112, 1, 25, 27, 210, 12, 11, 64, 0, 100, 112, 1, 25, 27, 210, 13, 11, 5, 138, 128, 128, 128, 0, 3, 1, 0, 32, 5, 0, 32, 5, 0, 32, 13, 137, 128, 128, 128, 0, 4, 0, 6, 0, 7, 0, 8, 0, 9, 6, 138, 129, 128, 128, 0, 26, 127, 0, 65, 232, 129, 188, 209, 2, 11, 100, 108, 1, 35, 0, 251, 28, 11, 127, 0, 35, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 127, 0, 65, 0, 11, 7, 136, 128, 128, 128, 0, 1, 4, 109, 97, 105, 110, 0, 17, 9, 180, 129, 128, 128, 0, 3, 6, 0, 65, 0, 11, 112, 2, 210, 17, 11, 210, 18, 11, 6, 1, 65, 0, 11, 100, 112, 25, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 6, 2, 65, 0, 11, 100, 112, 25, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 210, 18, 11, 210, 17, 11, 12, 1, 1, 10, 195, 129, 128, 128, 0, 2, 7, 1, 28, 127, 65, 190, 27, 11, 184, 1, 22, 1, 100, 109, 1, 111, 1, 123, 1, 126, 1, 125, 1, 100, 108, 1, 107, 1, 100, 5, 1, 108, 1, 126, 1, 125, 1, 100, 106, 1, 100, 2, 1, 123, 1, 127, 1, 126, 1, 125, 1, 100, 108, 1, 107, 1, 100, 108, 1, 108, 1, 126, 65, 237, 7, 65, 196, 198, 166, 16, 251, 9, 1, 0, 212, 33, 7, 65, 8, 251, 28, 33, 12, 210, 18, 33, 14, 208, 111, 16, 15, 33, 18, 65, 20, 65, 216, 219, 223, 0, 65, 204, 0, 65, 61, 251, 0, 2, 33, 19, 65, 2, 251, 28, 33, 24, 65, 252, 0, 251, 28, 33, 26, 65, 149, 217, 21, 65, 252, 253, 236, 46, 65, 249, 223, 132, 45, 251, 28, 66, 200, 203, 223, 253, 143, 229, 172, 176, 232, 0, 66, 195, 220, 130, 158, 131, 195, 152, 240, 231, 0, 66, 141, 204, 187, 207, 169, 224, 226, 178, 59, 208, 107, 65, 138, 246, 252, 173, 126, 251, 28, 208, 108, 66, 255, 191, 228, 231, 144, 149, 173, 176, 23, 11, 11, 158, 128, 128, 128, 0, 1, 1, 27, 75, 87, 166, 34, 10, 163, 188, 24, 173, 219, 240, 69, 254, 134, 206, 122, 192, 170, 52, 34, 96, 5, 113, 60, 221, 106, 23, 0, 132, 130, 128, 128, 0, 4, 110, 97, 109, 101, 1, 249, 129, 128, 128, 0, 17, 0, 4, 99, 97, 115, 116, 1, 4, 116, 101, 115, 116, 2, 12, 102, 114, 111, 109, 67, 104, 97, 114, 67, 111, 100, 101, 3, 13, 102, 114, 111, 109, 67, 111, 100, 101, 80, 111, 105, 110, 116, 4, 10, 99, 104, 97, 114, 67, 111, 100, 101, 65, 116, 5, 11, 99, 111, 100, 101, 80, 111, 105, 110, 116, 65, 116, 6, 6, 108, 101, 110, 103, 116, 104, 7, 6, 99, 111, 110, 99, 97, 116, 8, 9, 115, 117, 98, 115, 116, 114, 105, 110, 103, 9, 6, 101, 113, 117, 97, 108, 115, 10, 7, 99, 111, 109, 112, 97, 114, 101, 11, 17, 102, 114, 111, 109, 67, 104, 97, 114, 67, 111, 100, 101, 65, 114, 114, 97, 121, 12, 17, 105, 110, 116, 111, 67, 104, 97, 114, 67, 111, 100, 101, 65, 114, 114, 97, 121, 13, 19, 109, 101, 97, 115, 117, 114, 101, 83, 116, 114, 105, 110, 103, 65, 115, 85, 84, 70, 56, 14, 25, 101, 110, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 73, 110, 116, 111, 85, 84, 70, 56, 65, 114, 114, 97, 121, 15, 23, 101, 110, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 84, 111, 85, 84, 70, 56, 65, 114, 114, 97, 121, 16, 25, 100, 101, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 70, 114, 111, 109, 85, 84, 70, 56, 65, 114, 114, 97, 121]);
try { if (Inst6 <= 1000 && typeof (wasm_code) != "undefined") {_RecordType("<94,103,5>",(wasm_code)); Inst6++; } } catch(e) {}
let kBuiltins = {
  builtins: ["js-string", "text-decoder", "text-encoder"]
};
try { if (Inst8 <= 1000 && typeof (kBuiltins) != "undefined") {_RecordType("<7469,7478,6>",(kBuiltins)); Inst8++; } } catch(e) {}
try { if (Inst10 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<7569,7587,9>",(WebAssembly.Module)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<7569,7580,9>",(WebAssembly)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (wasm_code) != "undefined") {_RecordType("<7588,7597,9>",(wasm_code)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (kBuiltins) != "undefined") {_RecordType("<7599,7608,9>",(kBuiltins)); Inst13++; } } catch(e) {}
var wasm_module = new WebAssembly.Module(wasm_code, kBuiltins);
try { if (Inst9 <= 1000 && typeof (wasm_module) != "undefined") {_RecordType("<7551,7562,9>",(wasm_module)); Inst9++; } } catch(e) {}
try { if (Inst15 <= 1000 && typeof (WebAssembly.Instance) != "undefined") {_RecordType("<7636,7656,10>",(WebAssembly.Instance)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<7636,7647,10>",(WebAssembly)); Inst16++; } } catch(e) {}try { if (Inst17 <= 1000 && typeof (wasm_module) != "undefined") {_RecordType("<7657,7668,10>",(wasm_module)); Inst17++; } } catch(e) {}
var wasm_instance = new WebAssembly.Instance(wasm_module);
try { if (Inst14 <= 1000 && typeof (wasm_instance) != "undefined") {_RecordType("<7616,7629,10>",(wasm_instance)); Inst14++; } } catch(e) {}
try { if (Inst19 <= 1000 && typeof (WebAssembly.promising) != "undefined") {_RecordType("<7680,7701,11>",(WebAssembly.promising)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<7680,7691,11>",(WebAssembly)); Inst20++; } } catch(e) {}try { if (Inst21 <= 1000 && typeof (wasm_instance.exports.main) != "undefined") {_RecordType("<7702,7728,11>",(wasm_instance.exports.main)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (wasm_instance.exports) != "undefined") {_RecordType("<7702,7723,11>",(wasm_instance.exports)); Inst22++; } } catch(e) {}try { if (Inst23 <= 1000 && typeof (wasm_instance) != "undefined") {_RecordType("<7702,7715,11>",(wasm_instance)); Inst23++; } } catch(e) {}
var f = WebAssembly.promising(wasm_instance.exports.main);
try { if (Inst18 <= 1000 && typeof (f) != "undefined") {_RecordType("<7676,7677,11>",(f)); Inst18++; } } catch(e) {}
try { if (Inst24 <= 1000 && typeof (f) != "undefined") {_RecordType("<7732,7733,12>",(f)); Inst24++; } } catch(e) {}
f();


//flags: --wasm-staging
