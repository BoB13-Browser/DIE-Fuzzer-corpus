var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
do {
try { if (Inst1 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<25,34,2>",(Int8Array)); Inst1++; } } catch(e) {}
    const v5 = new Int8Array(53666);
try { if (Inst0 <= 1000 && typeof (v5) != "undefined") {_RecordType("<16,18,2>",(v5)); Inst0++; } } catch(e) {}
try { if (Inst3 <= 1000 && typeof (Int8Array) != "undefined") {_RecordType("<63,72,3>",(Int8Array)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (v5) != "undefined") {_RecordType("<101,103,3>",(v5)); Inst4++; } } catch(e) {}
    const v6 = new Int8Array(0, ..."getMilliseconds", ...v5);
try { if (Inst2 <= 1000 && typeof (v6) != "undefined") {_RecordType("<54,56,3>",(v6)); Inst2++; } } catch(e) {}
    class C7 {
    }
try { if (Inst5 <= 1000 && typeof (C7) != "undefined") {_RecordType("<117,119,4>",(C7)); Inst5++; } } catch(e) {}
try { if (Inst6 <= 1000 && typeof (f8) != "undefined") {_RecordType("<143,145,6>",(f8)); Inst6++; } } catch(e) {}
    function f8(a9) {
try { if (Inst7 <= 1000 && typeof (a9) != "undefined") {_RecordType("<146,148,6>",(a9)); Inst7++; } } catch(e) {}
try { if (Inst8 <= 1000 && typeof (v6) != "undefined") {_RecordType("<168,170,7>",(v6)); Inst8++; } } catch(e) {}
        return v6;
    }
try { if (Inst9 <= 1000 && typeof (Object.defineProperty) != "undefined") {_RecordType("<184,205,9>",(Object.defineProperty)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (Object) != "undefined") {_RecordType("<184,190,9>",(Object)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (C7) != "undefined") {_RecordType("<206,208,9>",(C7)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (C7) != "undefined") {_RecordType("<222,224,9>",(C7)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (f8) != "undefined") {_RecordType("<231,233,9>",(f8)); Inst13++; } } catch(e) {}
    Object.defineProperty(C7, "p", { get: C7, set: f8 });
try { if (Inst16 <= 1000 && typeof (e11) != "undefined") {_RecordType("<279,282,12>",(e11)); Inst16++; } } catch(e) {}
    try {
try { if (Inst14 <= 1000 && typeof (C7.p) != "undefined") {_RecordType("<258,262,11>",(C7.p)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (C7) != "undefined") {_RecordType("<258,260,11>",(C7)); Inst15++; } } catch(e) {}
        C7.p();
    } catch(e11) {
    }
} while (0 < 3)
// CRASH INFO
// ==========
// TERMSIG: 11
// STDERR:
// Received signal 11 SEGV_MAPERR 000000000008
// 
// ==== C stack trace ===============================
// 
//  [0x5592bccad53d]
//  [0x7f6f08df4520]
//  [0x5592be3d18af]
//  [0x5592be3f675a]
//  [0x5592be3fdd3b]
//  [0x5592be1fc188]
//  [0x5592be1f6448]
//  [0x5592be1f1c54]
//  [0x5592be1efe23]
//  [0x5592be1e8c79]
//  [0x5592bcf26ebf]
//  [0x5592bcf50ca6]
//  [0x5592bcf39e11]
//  [0x5592bcf42698]
//  [0x5592be075f2d]
//  [0x5592be071eed]
//  [0x5592be07199b]
//  [0x5592c039ec76]
// [end of stack trace]
// STDOUT:
// 
// ARGS: /home/source/ChromeV8/v8/out/fuzzbuild/d8 --expose-gc --omit-quit --future --harmony --assert-types --harmony-struct --allow-natives-syntax --interrupt-budget=1000 --fuzzing
// EXECUTION TIME: 39ms

