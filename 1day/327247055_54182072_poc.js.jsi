var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}

try { if (Inst1 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<26,36,2>",(Uint8Array)); Inst1++; } } catch(e) {}
    var wasm_code = new Uint8Array([
  0,97,115,109,1,0,0,0,1,150,129,128,128,0,20,78,1,94,120,1,78,1,94,119,1,78,1,80,0,95,4,127,1,113,1,115,0,109,1,80,0,95,3,127,0,127,0,127,0,96,3,127,127,127,1,127,96,0,0,78,1,96,0,0,96,1,111,1,100,111,96,1,111,1,127,96,1,127,1,100,111,96,2,111,127,1,127,96,2,111,111,1,100,111,96,3,111,127,127,1,100,111,96,2,111,111,1,127,96,3,99,1,127,127,1,100,111,96,3,111,99,1,127,1,127,96,3,111,99,0,127,1,127,96,1,111,1,100,0,96,3,99,0,127,127,1,100,111,96,13,124,126,127,127,127,127,127,127,127,127,127,127,127,0,2,149,132,128,128,0,17,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,4,99,97,115,116,0,7,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,4,116,101,115,116,0,8,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,12,102,114,111,109,67,104,97,114,67,111,100,101,0,9,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,13,102,114,111,109,67,111,100,101,80,111,105,110,116,0,9,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,10,99,104,97,114,67,111,100,101,65,116,0,10,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,11,99,111,100,101,80,111,105,110,116,65,116,0,10,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,108,101,110,103,116,104,0,8,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,99,111,110,99,97,116,0,11,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,9,115,117,98,115,116,114,105,110,103,0,12,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,6,101,113,117,97,108,115,0,13,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,7,99,111,109,112,97,114,101,0,13,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,17,102,114,111,109,67,104,97,114,67,111,100,101,65,114,114,97,121,0,14,14,119,97,115,109,58,106,115,45,115,116,114,105,110,103,17,105,110,116,111,67,104,97,114,67,111,100,101,65,114,114,97,121,0,15,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,19,109,101,97,115,117,114,101,83,116,114,105,110,103,65,115,85,84,70,56,0,8,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,25,101,110,99,111,100,101,83,116,114,105,110,103,73,110,116,111,85,84,70,56,65,114,114,97,121,0,16,17,119,97,115,109,58,116,101,120,116,45,101,110,99,111,100,101,114,23,101,110,99,111,100,101,83,116,114,105,110,103,84,111,85,84,70,56,65,114,114,97,121,0,17,17,119,97,115,109,58,116,101,120,116,45,100,101,99,111,100,101,114,25,100,101,99,111,100,101,83,116,114,105,110,103,70,114,111,109,85,84,70,56,65,114,114,97,121,0,18,3,132,128,128,128,0,3,4,5,6,4,133,128,128,128,0,1,112,1,3,3,5,132,128,128,128,0,1,1,16,32,13,131,128,128,128,0,1,0,5,7,136,128,128,128,0,1,4,109,97,105,110,0,17,9,145,128,128,128,0,1,6,0,65,0,11,112,3,210,17,11,210,18,11,210,19,11,12,1,1,10,207,137,128,128,0,3,88,16,1,127,1,100,4,2,127,1,100,112,1,127,1,100,0,1,115,1,99,4,1,99,1,1,100,5,1,100,2,1,111,1,100,6,1,99,6,1,108,1,123,210,17,251,22,4,33,4,210,19,33,7,208,111,16,15,33,9,210,18,33,13,65,167,7,208,113,208,115,208,109,251,0,2,33,14,210,19,33,16,65,248,185,186,132,3,11,163,2,12,1,127,1,100,112,1,113,1,100,108,1,100,4,1,127,1,100,106,1,100,2,1,99,3,1,127,1,100,2,1,127,208,4,212,33,1,3,127,68,197,52,81,7,150,105,148,57,171,65,169,227,233,0,44,0,239,184,3,67,218,230,179,115,67,147,42,208,109,152,252,0,110,254,60,0,248,152,3,11,2,127,18,19,11,65,247,191,202,13,251,28,251,23,3,251,23,1,212,251,23,108,251,23,110,251,27,65,140,5,16,5,108,16,2,16,13,253,17,253,83,254,33,1,164,177,1,65,0,253,15,65,0,253,15,253,133,1,65,0,253,15,65,188,212,1,253,109,65,0,253,15,253,137,2,65,0,253,15,65,0,253,15,65,0,253,15,65,0,253,15,65,0,253,15,253,135,2,65,5,66,233,138,241,211,230,146,201,128,179,127,254,66,3,250,210,1,253,30,0,253,186,1,253,222,1,253,73,65,0,253,15,65,0,253,15,253,239,1,253,146,1,65,0,253,15,253,214,1,253,39,253,164,1,254,40,1,138,188,2,251,28,33,3,208,112,251,23,4,251,22,4,33,4,208,111,16,15,33,6,65,253,14,208,113,208,115,208,109,251,0,2,33,7,65,138,232,198,59,208,113,208,115,208,109,251,0,2,33,10,11,206,6,5,1,126,1,124,1,99,4,1,115,1,127,208,108,251,23,107,251,23,107,251,23,110,251,23,108,251,23,0,251,1,2,251,2,2,3,65,152,252,130,4,65,210,0,254,54,1,153,192,246,195,10,65,239,129,217,43,65,150,240,143,254,1,254,60,0,248,152,3,67,66,23,64,120,65,1,19,5,0,93,47,0,136,201,2,254,58,2,135,84,254,58,2,133,236,2,66,249,158,149,234,246,154,137,215,255,0,66,148,154,154,138,201,248,199,194,222,0,90,65,181,15,65,36,254,61,1,185,244,3,208,108,212,251,30,65,218,49,65,178,208,243,222,3,65,13,254,60,0,99,117,254,54,1,244,144,3,45,0,240,224,3,44,0,236,148,1,67,223,111,135,8,188,71,184,171,65,0,253,15,65,254,0,65,174,197,231,4,106,253,109,253,31,0,141,67,171,212,73,127,146,67,211,218,202,118,146,65,0,253,15,253,31,0,67,218,178,206,246,67,195,187,104,212,65,206,239,0,27,65,233,167,233,8,66,187,187,168,220,206,154,140,203,15,60,0,156,255,3,65,1,19,5,0,150,139,65,134,202,13,67,159,215,219,199,67,113,237,103,163,147,168,110,40,1,130,84,45,0,215,218,1,28,1,125,93,116,254,54,1,172,87,118,44,0,163,33,254,54,1,182,153,2,104,65,252,229,234,213,1,65,224,172,224,4,53,1,139,171,2,68,71,186,160,25,139,160,138,70,182,140,65,1,65,1,254,25,0,238,131,2,208,110,213,0,26,67,25,41,242,147,65,0,253,15,253,164,1,27,144,65,173,190,1,65,0,59,1,0,68,153,9,165,215,24,8,213,148,66,185,190,197,151,185,241,156,221,246,0,65,213,237,251,3,65,0,65,156,169,157,2,65,202,255,218,50,65,182,2,65,63,65,185,254,227,0,65,208,239,245,1,65,155,202,171,1,65,213,225,2,65,188,4,2,19,26,26,26,26,26,26,26,26,26,26,26,26,26,11,208,110,213,0,26,67,52,43,236,66,93,51,1,197,139,3,82,254,30,2,141,2,111,2,64,2,64,2,64,66,176,144,244,152,233,180,187,173,154,127,66,232,194,160,217,163,244,147,225,93,89,65,0,253,15,65,0,253,15,253,38,253,99,115,65,57,65,0,253,15,253,90,0,139,170,3,3,208,4,213,2,26,66,214,166,160,197,245,239,255,219,160,127,55,2,243,252,1,2,64,2,64,2,64,2,64,2,64,65,1,14,1,0,0,11,11,11,11,11,11,11,11,65,194,147,173,2,65,0,66,147,250,231,252,215,132,202,158,65,254,29,2,120,65,192,135,233,190,120,6,64,65,152,134,3,65,196,253,182,155,4,65,38,208,112,251,23,4,20,4,26,7,0,25,11,65,207,207,145,245,0,13,0,66,242,209,209,193,209,186,221,199,239,0,254,29,2,149,248,2,65,1,33,4,3,127,32,4,65,1,107,34,4,4,64,63,0,65,0,253,15,65,0,253,15,65,0,253,15,253,12,151,61,60,6,245,67,241,31,245,110,242,113,0,176,245,201,253,44,253,184,1,253,52,253,29,1,65,137,244,141,20,66,224,176,140,247,181,224,183,246,34,254,71,2,170,213,2,89,65,155,12,65,199,0,65,196,190,151,252,0,65,149,1,254,74,0,201,119,179,188,106,67,84,160,67,224,67,93,201,104,138,67,27,192,147,127,146,91,109,115,65,249,169,11,16,17,1,65,0,253,15,253,90,0,239,27,2,12,1,11,65,0,253,15,253,131,1,11,65,172,1,65,141,6,65,50,110,58,0,206,129,1,65,213,1,65,16,208,4,212,20,4,26,253,3,0,208,238,3,253,99,251,9,1,0,251,23,2,211,65,235,3,251,14,0,11,11,140,128,128,128,0,1,1,9,195,30,87,57,183,32,9,241,51,0,132,130,128,128,0,4,110,97,109,101,1,249,129,128,128,0,17,0,4,99,97,115,116,1,4,116,101,115,116,2,12,102,114,111,109,67,104,97,114,67,111,100,101,3,13,102,114,111,109,67,111,100,101,80,111,105,110,116,4,10,99,104,97,114,67,111,100,101,65,116,5,11,99,111,100,101,80,111,105,110,116,65,116,6,6,108,101,110,103,116,104,7,6,99,111,110,99,97,116,8,9,115,117,98,115,116,114,105,110,103,9,6,101,113,117,97,108,115,10,7,99,111,109,112,97,114,101,11,17,102,114,111,109,67,104,97,114,67,111,100,101,65,114,114,97,121,12,17,105,110,116,111,67,104,97,114,67,111,100,101,65,114,114,97,121,13,19,109,101,97,115,117,114,101,83,116,114,105,110,103,65,115,85,84,70,56,14,25,101,110,99,111,100,101,83,116,114,105,110,103,73,110,116,111,85,84,70,56,65,114,114,97,121,15,23,101,110,99,111,100,101,83,116,114,105,110,103,84,111,85,84,70,56,65,114,114,97,121,16,25,100,101,99,111,100,101,83,116,114,105,110,103,70,114,111,109,85,84,70,56,65,114,114,97,121
  ]);
try { if (Inst0 <= 1000 && typeof (wasm_code) != "undefined") {_RecordType("<10,19,2>",(wasm_code)); Inst0++; } } catch(e) {}
    let kBuiltins = { builtins: ["js-string", "text-decoder", "text-encoder"] };
try { if (Inst2 <= 1000 && typeof (kBuiltins) != "undefined") {_RecordType("<7734,7743,5>",(kBuiltins)); Inst2++; } } catch(e) {}
try { if (Inst4 <= 1000 && typeof (WebAssembly.Module) != "undefined") {_RecordType("<7834,7852,6>",(WebAssembly.Module)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<7834,7845,6>",(WebAssembly)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (wasm_code) != "undefined") {_RecordType("<7853,7862,6>",(wasm_code)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (kBuiltins) != "undefined") {_RecordType("<7864,7873,6>",(kBuiltins)); Inst7++; } } catch(e) {}
    var wasm_module = new WebAssembly.Module(wasm_code, kBuiltins);
try { if (Inst3 <= 1000 && typeof (wasm_module) != "undefined") {_RecordType("<7816,7827,6>",(wasm_module)); Inst3++; } } catch(e) {}
try { if (Inst9 <= 1000 && typeof (WebAssembly.Instance) != "undefined") {_RecordType("<7905,7925,7>",(WebAssembly.Instance)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<7905,7916,7>",(WebAssembly)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (wasm_module) != "undefined") {_RecordType("<7926,7937,7>",(wasm_module)); Inst11++; } } catch(e) {}
    var wasm_instance = new WebAssembly.Instance(wasm_module);
try { if (Inst8 <= 1000 && typeof (wasm_instance) != "undefined") {_RecordType("<7885,7898,7>",(wasm_instance)); Inst8++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (wasm_instance.exports.main) != "undefined") {_RecordType("<7953,7979,8>",(wasm_instance.exports.main)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (wasm_instance.exports) != "undefined") {_RecordType("<7953,7974,8>",(wasm_instance.exports)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (wasm_instance) != "undefined") {_RecordType("<7953,7966,8>",(wasm_instance)); Inst15++; } } catch(e) {}
    var f = wasm_instance.exports.main;
try { if (Inst12 <= 1000 && typeof (f) != "undefined") {_RecordType("<7949,7950,8>",(f)); Inst12++; } } catch(e) {}
try { if (Inst16 <= 1000 && typeof (f) != "undefined") {_RecordType("<7986,7987,9>",(f)); Inst16++; } } catch(e) {}
    f();
 
  
