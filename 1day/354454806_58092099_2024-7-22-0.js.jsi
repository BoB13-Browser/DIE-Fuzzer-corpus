var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (F0) != "undefined") {_RecordType("<9,11,1>",(F0)); Inst0++; } } catch(e) {}
function F0() {
    if (!new.target) { throw 'must be called with new'; }
try { if (Inst1 <= 1000 && typeof (target) != "undefined") {_RecordType("<31,37,3>",(target)); Inst1++; } } catch(e) {}
    const v2 = this.constructor;
    try { new v2(); } catch (e) {}
try { if (Inst3 <= 1000 && typeof (this.constructor) != "undefined") {_RecordType("<93,109,5>",(this.constructor)); Inst3++; } } catch(e) {}
    const v5 = d8.getExtrasBindingObject();
try { if (Inst2 <= 1000 && typeof (v2) != "undefined") {_RecordType("<88,90,5>",(v2)); Inst2++; } } catch(e) {}
    v5.setContinuationPreservedEmbedderData(this);
try { if (Inst4 <= 1000 && typeof (v2) != "undefined") {_RecordType("<127,129,7>",(v2)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (e) != "undefined") {_RecordType("<142,143,7>",(e)); Inst5++; } } catch(e) {}
    const v7 = v5.getContinuationPreservedEmbedderData();
    const v8 = v7.constructor;
try { if (Inst7 <= 1000 && typeof (d8.getExtrasBindingObject) != "undefined") {_RecordType("<165,190,9>",(d8.getExtrasBindingObject)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (d8) != "undefined") {_RecordType("<165,167,9>",(d8)); Inst8++; } } catch(e) {}
    try { new v8(this, F0, F0); } catch (e) {}
try { if (Inst6 <= 1000 && typeof (v5) != "undefined") {_RecordType("<160,162,9>",(v5)); Inst6++; } } catch(e) {}
    try { v7.constructor(); } catch (e) {}
try { if (Inst9 <= 1000 && typeof (v5.setContinuationPreservedEmbedderData) != "undefined") {_RecordType("<200,239,11>",(v5.setContinuationPreservedEmbedderData)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (v5) != "undefined") {_RecordType("<200,202,11>",(v5)); Inst10++; } } catch(e) {}
}
new F0();
try { if (Inst12 <= 1000 && typeof (v5.getContinuationPreservedEmbedderData) != "undefined") {_RecordType("<264,303,13>",(v5.getContinuationPreservedEmbedderData)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (v5) != "undefined") {_RecordType("<264,266,13>",(v5)); Inst13++; } } catch(e) {}

try { if (Inst11 <= 1000 && typeof (v7) != "undefined") {_RecordType("<259,261,13>",(v7)); Inst11++; } } catch(e) {}
