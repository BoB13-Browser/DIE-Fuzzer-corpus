var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}
try { if (Inst0 <= 1000 && typeof (d8.file.execute) != "undefined") {_RecordType("<0,15,1>",(d8.file.execute)); Inst0++; } } catch(e) {}try { if (Inst1 <= 1000 && typeof (d8.file) != "undefined") {_RecordType("<0,7,1>",(d8.file)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (d8) != "undefined") {_RecordType("<0,2,1>",(d8)); Inst2++; } } catch(e) {}
d8.file.execute("test/mjsunit/wasm/wasm-module-builder.js");

class c0 {}
class c1 extends c0 {
  constructor(a, b, c, d, e) {
try { if (Inst3 <= 1000 && typeof (c0) != "undefined") {_RecordType("<72,74,5>",(c0)); Inst3++; } } catch(e) {}
    super(); // <--- crash in calling super()
try { if (Inst10 <= 1000 && typeof (c0) != "undefined") {_RecordType("<97,99,7>",(c0)); Inst10++; } } catch(e) {}
  }
}

try { if (Inst5 <= 1000 && typeof (a) != "undefined") {_RecordType("<118,119,9>",(a)); Inst5++; } } catch(e) {}try { if (Inst6 <= 1000 && typeof (b) != "undefined") {_RecordType("<121,122,9>",(b)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (c) != "undefined") {_RecordType("<124,125,9>",(c)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (d) != "undefined") {_RecordType("<127,128,9>",(d)); Inst8++; } } catch(e) {}try { if (Inst9 <= 1000 && typeof (e) != "undefined") {_RecordType("<130,131,9>",(e)); Inst9++; } } catch(e) {}
let builder = new WasmModuleBuilder();
let import_func = builder.addImport('mod', 'func', makeSig([kWasmI32, kWasmI32, kWasmI32, kWasmI32], []));
builder.addExport('exp', import_func);
let wasm_exports = builder.instantiate({ 'mod': { func: c1 } }).exports;
for (let i = 0; i < 5; i++) {
  try {
try { if (Inst4 <= 1000 && typeof (c1) != "undefined") {_RecordType("<86,88,7>",(c1)); Inst4++; } } catch(e) {}
    wasm_exports['exp'](1,2,3,4);
  } catch {}
}
try { if (Inst12 <= 1000 && typeof (WasmModuleBuilder) != "undefined") {_RecordType("<216,233,19>",(WasmModuleBuilder)); Inst12++; } } catch(e) {}
//flags: --allow-natives-syntax --jit-fuzzing
try { if (Inst11 <= 1000 && typeof (builder) != "undefined") {_RecordType("<202,209,19>",(builder)); Inst11++; } } catch(e) {}
