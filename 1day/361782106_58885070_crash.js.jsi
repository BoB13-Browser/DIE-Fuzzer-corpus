var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
var Inst32 = 0;
var Inst33 = 0;
var Inst34 = 0;
var Inst35 = 0;
var Inst36 = 0;
var Inst37 = 0;
var Inst38 = 0;
var Inst39 = 0;
var Inst40 = 0;
var Inst41 = 0;
var Inst42 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}

try { if (Inst0 <= 1000 && typeof (createIframes) != "undefined") {_RecordType("<15,28,2>",(createIframes)); Inst0++; } } catch(e) {}
    function createIframes() {
try { if (Inst1 <= 1000 && typeof (top) != "undefined") {_RecordType("<46,49,3>",(top)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (self) != "undefined") {_RecordType("<53,57,3>",(self)); Inst2++; } } catch(e) {}
        if (top != self) {
            return;
        }
        for (let i = 0; i < 5; i++) {
try { if (Inst3 <= 1000 && typeof (i) != "undefined") {_RecordType("<111,112,6>",(i)); Inst3++; } } catch(e) {}try { if (Inst4 <= 1000 && typeof (i) != "undefined") {_RecordType("<118,119,6>",(i)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (i) != "undefined") {_RecordType("<125,126,6>",(i)); Inst5++; } } catch(e) {}
try { if (Inst7 <= 1000 && typeof (document.createElement) != "undefined") {_RecordType("<158,180,7>",(document.createElement)); Inst7++; } } catch(e) {}try { if (Inst8 <= 1000 && typeof (document) != "undefined") {_RecordType("<158,166,7>",(document)); Inst8++; } } catch(e) {}
            let iframe = document.createElement('iframe');
try { if (Inst6 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<149,155,7>",(iframe)); Inst6++; } } catch(e) {}
try { if (Inst11 <= 1000 && typeof (location.href) != "undefined") {_RecordType("<218,231,8>",(location.href)); Inst11++; } } catch(e) {}try { if (Inst12 <= 1000 && typeof (location) != "undefined") {_RecordType("<218,226,8>",(location)); Inst12++; } } catch(e) {}
            iframe.src = location.href;
try { if (Inst9 <= 1000 && typeof (iframe.src) != "undefined") {_RecordType("<205,215,8>",(iframe.src)); Inst9++; } } catch(e) {}try { if (Inst10 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<205,211,8>",(iframe)); Inst10++; } } catch(e) {}
try { if (Inst13 <= 1000 && typeof (document.body.appendChild) != "undefined") {_RecordType("<246,271,9>",(document.body.appendChild)); Inst13++; } } catch(e) {}try { if (Inst14 <= 1000 && typeof (document.body) != "undefined") {_RecordType("<246,259,9>",(document.body)); Inst14++; } } catch(e) {}try { if (Inst15 <= 1000 && typeof (document) != "undefined") {_RecordType("<246,254,9>",(document)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<272,278,9>",(iframe)); Inst16++; } } catch(e) {}
            document.body.appendChild(iframe);
        }
    }
try { if (Inst17 <= 1000 && typeof (setInterval) != "undefined") {_RecordType("<308,319,12>",(setInterval)); Inst17++; } } catch(e) {}
        setInterval(async function () {
            for (let i = 0; i < 100; ++i) {
try { if (Inst18 <= 1000 && typeof (i) != "undefined") {_RecordType("<362,363,13>",(i)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (i) != "undefined") {_RecordType("<369,370,13>",(i)); Inst19++; } } catch(e) {}try { if (Inst20 <= 1000 && typeof (i) != "undefined") {_RecordType("<380,381,13>",(i)); Inst20++; } } catch(e) {}
try { if (Inst21 <= 1000 && typeof (WebAssembly.Memory) != "undefined") {_RecordType("<406,424,14>",(WebAssembly.Memory)); Inst21++; } } catch(e) {}try { if (Inst22 <= 1000 && typeof (WebAssembly) != "undefined") {_RecordType("<406,417,14>",(WebAssembly)); Inst22++; } } catch(e) {}
                new WebAssembly.Memory({ initial: 16 });
            }
        }, 100);
try { if (Inst23 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<485,495,17>",(setTimeout)); Inst23++; } } catch(e) {}
        setTimeout(function () {
try { if (Inst24 <= 1000 && typeof (location.reload) != "undefined") {_RecordType("<523,538,18>",(location.reload)); Inst24++; } } catch(e) {}try { if (Inst25 <= 1000 && typeof (location) != "undefined") {_RecordType("<523,531,18>",(location)); Inst25++; } } catch(e) {}
            location.reload();
        }, 1000);
try { if (Inst26 <= 1000 && typeof (createIframes) != "undefined") {_RecordType("<570,583,20>",(createIframes)); Inst26++; } } catch(e) {}
        createIframes();
try { if (Inst28 <= 1000 && typeof (Blob) != "undefined") {_RecordType("<611,615,21>",(Blob)); Inst28++; } } catch(e) {}try { if (Inst29 <= 1000 && typeof (Uint8Array) != "undefined") {_RecordType("<621,631,21>",(Uint8Array)); Inst29++; } } catch(e) {}
        let data = new Blob([new Uint8Array([0, 0, 0, 0, 0])]);
try { if (Inst27 <= 1000 && typeof (data) != "undefined") {_RecordType("<600,604,21>",(data)); Inst27++; } } catch(e) {}
        for (let i = 0; i < 100; i++) {
try { if (Inst30 <= 1000 && typeof (i) != "undefined") {_RecordType("<670,671,22>",(i)); Inst30++; } } catch(e) {}try { if (Inst31 <= 1000 && typeof (i) != "undefined") {_RecordType("<677,678,22>",(i)); Inst31++; } } catch(e) {}try { if (Inst32 <= 1000 && typeof (i) != "undefined") {_RecordType("<686,687,22>",(i)); Inst32++; } } catch(e) {}
try { if (Inst34 <= 1000 && typeof (RTCPeerConnection) != "undefined") {_RecordType("<719,736,23>",(RTCPeerConnection)); Inst34++; } } catch(e) {}
            let pc = new RTCPeerConnection();
try { if (Inst33 <= 1000 && typeof (pc) != "undefined") {_RecordType("<710,712,23>",(pc)); Inst33++; } } catch(e) {}
try { if (Inst36 <= 1000 && typeof (pc.createDataChannel) != "undefined") {_RecordType("<767,787,24>",(pc.createDataChannel)); Inst36++; } } catch(e) {}try { if (Inst37 <= 1000 && typeof (pc) != "undefined") {_RecordType("<767,769,24>",(pc)); Inst37++; } } catch(e) {}
            let channel = pc.createDataChannel('test');
try { if (Inst35 <= 1000 && typeof (channel) != "undefined") {_RecordType("<757,764,24>",(channel)); Inst35++; } } catch(e) {}
try { if (Inst38 <= 1000 && typeof (channel.close) != "undefined") {_RecordType("<810,823,25>",(channel.close)); Inst38++; } } catch(e) {}try { if (Inst39 <= 1000 && typeof (channel) != "undefined") {_RecordType("<810,817,25>",(channel)); Inst39++; } } catch(e) {}
            channel.close();
try { if (Inst40 <= 1000 && typeof (channel.send) != "undefined") {_RecordType("<840,852,26>",(channel.send)); Inst40++; } } catch(e) {}try { if (Inst41 <= 1000 && typeof (channel) != "undefined") {_RecordType("<840,847,26>",(channel)); Inst41++; } } catch(e) {}try { if (Inst42 <= 1000 && typeof (data) != "undefined") {_RecordType("<853,857,26>",(data)); Inst42++; } } catch(e) {}
            channel.send(data);
        }
    

